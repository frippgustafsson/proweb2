<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2016.1.2 (Build 206U)" ts="2016-09-23 10:07:05">
<Class name="EF.ISC.SAML2.Assertion">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ISC.SAML2.Assertion.CLS/EV.1
;vc; Component: CLS.EF.ISC.SAML2.Assertion
;vc;  Location: SmallDev
;vc; Date/Time: 01-Nov-15 07:58
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ISC.SAML2.Assertion.CLS/EV.1</td><td>CLS.EF.ISC.SAML2.Assertion</td><td>SmallDev</td><td style='white-space: nowrap;'>01-Nov-15 07:58</td><td>RajibQ</td></tr></table>
]]></Description>
<Super>%SAML.Assertion</Super>
<TimeChanged>63820,59979</TimeChanged>
<TimeCreated>62998,40237.888896</TimeCreated>

<Parameter name="XMLFORMAT">
<Default>literal</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>urn:oasis:names:tc:SAML:2.0:assertion</Default>
</Parameter>

<Parameter name="ELEMENTQUALIFIED">
<Default>0</Default>
</Parameter>

<Parameter name="XMLPREFIX">
<Default>saml</Default>
</Parameter>

<Parameter name="XMLSEQUENCE">
<Description>
Need to distinguish the 2 different possible Signature elements.</Description>
<Default>1</Default>
</Parameter>

<Property name="Issuer">
<Type>%SAML.NameID</Type>
<Required>1</Required>
<Parameter name="XMLREF" value="1"/>
</Property>

<Property name="Signature">
<Type>EF.ISC.XML.Security.Signature</Type>
<Parameter name="REFELEMENTQUALIFIED" value="1"/>
<Parameter name="REFNAMESPACE" value="http://www.w3.org/2000/09/xmldsig#"/>
<Parameter name="XMLREF" value="1"/>
</Property>

<Property name="Subject">
<Type>%SAML.Subject</Type>
<Parameter name="XMLREF" value="1"/>
</Property>

<Property name="Conditions">
<Type>%SAML.Conditions</Type>
<Parameter name="XMLREF" value="1"/>
</Property>

<Property name="Advice">
<Type>%SAML.AssertionReference</Type>
<Collection>list</Collection>
<Parameter name="REFELEMENTQUALIFIED" value="1"/>
<Parameter name="XMLREF" value="1"/>
<Parameter name="XMLTYPECONSTRAINT" value="choice"/>
</Property>

<Property name="Statement">
<Type>%SAML.Statement</Type>
<Collection>list</Collection>
<Parameter name="XMLPROJECTION" value="element"/>
<Parameter name="XMLREF" value="1"/>
<Parameter name="XMLTYPECONSTRAINT" value="choice"/>
</Property>

<Property name="WSSecuritySignature">
<Type>%XML.Security.Signature</Type>
<Internal>1</Internal>
<Parameter name="REFELEMENTQUALIFIED" value="1"/>
<Parameter name="REFNAMESPACE" value="http://www.w3.org/2000/09/xmldsig#"/>
<Parameter name="XMLNAME" value="Signature"/>
<Parameter name="XMLREF" value="1"/>
</Property>

<Property name="SAMLID">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN"/>
<Parameter name="XMLNAME" value="ID"/>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="IssueInstant">
<Type>%xsd.dateTime</Type>
<Required>1</Required>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="Version">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN"/>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="NodeId">
<Description>
Save the node id of this element in the tree during import.</Description>
<Type>%String</Type>
<Internal>1</Internal>
<Parameter name="XMLPROJECTION" value="none"/>
</Property>

<Property name="X509Credentials">
<Description>
If SubjectConfirmation is based on X509 certificate, this is the X509 certificate class.
This property is read-only.</Description>
<Type>%CacheString</Type>
<Internal>1</Internal>
<Parameter name="XMLPROJECTION" value="none"/>
</Property>

<Method name="ValidateElement">
<Description>
Validate the SAML assertion.
If invalid return an error code.</Description>
<FormalSpec><![CDATA[document:%XML.Document,service:%SOAP.WebBase,mimeAttachments:%Net.MIMEPart="",ignoreCAFile:%Boolean=0,externalCertificate:%Binary(MAXLEN="")="",&IDsValidated:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If ..SAMLID'="" $$$xmlSetNodeById(document.DocumentId,..SAMLID,..NodeId)
	
	If $isobject(..WSSecuritySignature) {
		$$$SOAPLogSecurity("    checking signature for SAML token")
		Set error=..WSSecuritySignature.ValidateElement(document,service,mimeAttachments)
		$$$SOAPLogSecurity("    signature validation for SAML token returned: "_error)
		If error'="" Quit error
	}
	
	If $isobject(..Signature) {
		$$$SOAPLogSecurity("    checking ..signature for SAML token")
		If $D(service) {
			Set error=..Signature.ValidateElement(document,service,,,ignoreCAFile,externalCertificate,.IDsValidated)
		} else {
			Set error=..Signature.ValidateElement(document,,,,ignoreCAFile,externalCertificate,.IDsValidated)
		}
		$$$SOAPLogSecurity("    ..signature validation for SAML token returned: "_error)
		If error'="" Quit error
	}
	
	If '$isobject(..Issuer) || (..Issuer.NameID="") {
		$$$SOAPLogSecurity("    unspecified Issuer for SAML token")
		Quit "InvalidSecurityToken"
	}
	
	Quit ""
]]></Implementation>
</Method>
</Class>


<Class name="EF.ISC.SAML2.AuthnRequest">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ISC.SAML2.AuthnRequest.CLS/EV.0
;vc; Component: CLS.EF.ISC.SAML2.AuthnRequest
;vc;  Location: SmallDev
;vc; Date/Time: 30-Dec-13 14:16
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ISC.SAML2.AuthnRequest.CLS/EV.0</td><td>CLS.EF.ISC.SAML2.AuthnRequest</td><td>SmallDev</td><td style='white-space: nowrap;'>30-Dec-13 14:16</td><td>RajibQ</td></tr></table>
]]></Description>
<Super>Message</Super>
<TimeChanged>63186,36347</TimeChanged>
<TimeCreated>63179,58647.276866</TimeCreated>

<Property name="ProtocolBinding">
<Type>%String</Type>
<InitialExpression>"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"</InitialExpression>
<Parameter name="MAXLEN"/>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="ProviderName">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="AssertionConsumerServiceURL">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="Signature">
<Type>EF.ISC.XML.Security.Signature</Type>
<Parameter name="REFELEMENTQUALIFIED" value="1"/>
<Parameter name="REFNAMESPACE" value="http://www.w3.org/2000/09/xmldsig#"/>
<Parameter name="XMLREF" value="1"/>
</Property>

<Property name="NameIDPolicy">
<Type>EF.ISC.SAML2.NameIDPolicy</Type>
<Required>1</Required>
<Parameter name="XMLREF" value="1"/>
</Property>

<Method name="getNewRequest">
<ClassMethod>1</ClassMethod>
<FormalSpec>providerName:%String,ACSURL:%String,issuer:%String,nameIDFormat:%String,destination:%String</FormalSpec>
<ReturnType>AuthnRequest</ReturnType>
<Implementation><![CDATA[
	Set ret=..%New()
	
	// important - ID must NOT start with a digit
	Set ret.SAMLPID="_"_##class(%SYSTEM.Util).CreateGUID()
	Set ret.IssueInstant=##class(%Library.UTC).NowUTC()
	
	If ($LENGTH($GET(providerName)) > 0) {
		Set ret.ProviderName=providerName
	}
	
	If ($LENGTH($GET(ACSURL)) > 0) {
		Set ret.AssertionConsumerServiceURL=ACSURL
	}
	
	Set ret.Issuer=##class(Issuer).getNewIssuer(issuer)
	
	Set ret.NameIDPolicy=##class(NameIDPolicy).getNewPolicy(nameIDFormat)
	
	If ($LENGTH($GET(destination)) > 0) {
		Set ret.Destination=destination
	}
	
	Quit ret
]]></Implementation>
</Method>

<Method name="sign">
<FormalSpec>x509cred:%SYS.X509Credentials</FormalSpec>
<Implementation><![CDATA[
	Set sig=##class(EF.ISC.XML.Security.Signature).CreateX509(x509cred,,$$$KeyInfoX509Certificate)
	Do sig.SetDigestMethod($$$SOAPWSsha256)
	Do sig.SetSignatureMethod($$$SOAPWSrsasha256)
	
	Set ref=##class(%XML.Security.Reference).Create(..SAMLPID,$$$SOAPWSEnvelopedSignature_","_$$$SOAPWSexcc14n)
	
	Do sig.AddReference(ref)
	
	Set ..Signature=sig
	
	Set writer=##class(%XML.Writer).%New()
	Set writer.ElementQualified=0
	
	Set sc=writer.OutputToString()
	If ($$$ISERR(sc)) {
		Throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
	}
	
	Set sc=writer.RootObject($this)
	If ($$$ISERR(sc)) {
		Throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
	}

	Set reader=##class(%XML.Reader).%New()
	Set sc=reader.OpenString(writer.GetXMLString())
	If ($$$ISERR(sc)) {
		Throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
	}

	Set document=reader.Document
	
	Set sc=sig.SignDocument(document)
	If ($$$ISERR(sc)) {
		Throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.ISC.SAML2.Issuer">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ISC.SAML2.Issuer.CLS/EV.1
;vc; Component: CLS.EF.ISC.SAML2.Issuer
;vc;  Location: SmallDev
;vc; Date/Time: 30-Dec-13 14:16
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ISC.SAML2.Issuer.CLS/EV.1</td><td>CLS.EF.ISC.SAML2.Issuer</td><td>SmallDev</td><td style='white-space: nowrap;'>30-Dec-13 14:16</td><td>RajibQ</td></tr></table>
]]></Description>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>63186,36297</TimeChanged>
<TimeCreated>62998,40315.646152</TimeCreated>

<Parameter name="NAMESPACE">
<Default>urn:oasis:names:tc:SAML:2.0:assertion</Default>
</Parameter>

<Parameter name="ELEMENTQUALIFIED">
<Default>1</Default>
</Parameter>

<Property name="IssuerContent">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="XMLPROJECTION" value="CONTENT"/>
</Property>

<Method name="getNewIssuer">
<ClassMethod>1</ClassMethod>
<FormalSpec>content:%String</FormalSpec>
<ReturnType>Issuer</ReturnType>
<Implementation><![CDATA[
	Set ret=..%New()
	
	If ($LENGTH($GET(content)) > 0) {
		Set ret.IssuerContent=content
	}
	
	Quit ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.ISC.SAML2.Message">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ISC.SAML2.Message.CLS/EV.0
;vc; Component: CLS.EF.ISC.SAML2.Message
;vc;  Location: SmallDev
;vc; Date/Time: 30-Dec-13 14:16
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ISC.SAML2.Message.CLS/EV.0</td><td>CLS.EF.ISC.SAML2.Message</td><td>SmallDev</td><td style='white-space: nowrap;'>30-Dec-13 14:16</td><td>RajibQ</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<IncludeCode>%soap</IncludeCode>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>63186,40469</TimeChanged>
<TimeCreated>63183,36834.309586</TimeCreated>

<Parameter name="NAMESPACE">
<Default>urn:oasis:names:tc:SAML:2.0:protocol</Default>
</Parameter>

<Parameter name="XMLPREFIX">
<Default>samlp</Default>
</Parameter>

<Property name="SAMLPID">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN"/>
<Parameter name="XMLNAME" value="ID"/>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="Version">
<Type>%String</Type>
<InitialExpression>"2.0"</InitialExpression>
<Required>1</Required>
<Parameter name="MAXLEN"/>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="IssueInstant">
<Type>%xsd.dateTime</Type>
<Required>1</Required>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="Destination">
<Type>%xsd.anyURI</Type>
<Parameter name="MAXLEN"/>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="Consent">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="Issuer">
<Type>EF.ISC.SAML2.Issuer</Type>
<Required>1</Required>
<Parameter name="XMLREF" value="1"/>
</Property>

<Method name="getXML">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ret=""
	
	Set writer=##class(%XML.Writer).%New()
	Set writer.ElementQualified=0
	Set sc=writer.OutputToString()
	If ($$$ISERR(sc)) {
		Throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
	}
	Set sc=writer.RootObject($this)
	If ($$$ISERR(sc)) {
		Throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
	}
	Set ret=writer.GetXMLString(.sc)
	If ($$$ISERR(sc)) {
		Throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
	}
	
	Set ret=$REPLACE(ret,$CHAR(13),"")
	Set ret=$REPLACE(ret,$CHAR(10),"")
	
	Quit ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.ISC.SAML2.NameIDPolicy">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ISC.SAML2.NameIDPolicy.CLS/EV.0
;vc; Component: CLS.EF.ISC.SAML2.NameIDPolicy
;vc;  Location: SmallDev
;vc; Date/Time: 30-Dec-13 14:16
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ISC.SAML2.NameIDPolicy.CLS/EV.0</td><td>CLS.EF.ISC.SAML2.NameIDPolicy</td><td>SmallDev</td><td style='white-space: nowrap;'>30-Dec-13 14:16</td><td>RajibQ</td></tr></table>
]]></Description>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>63185,11486</TimeChanged>
<TimeCreated>63179,59367.632701</TimeCreated>

<Parameter name="NAMESPACE">
<Default>urn:oasis:names:tc:SAML:2.0:protocol</Default>
</Parameter>

<Parameter name="XMLPREFIX">
<Default>samlp</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Parameter ELEMENTQUALIFIED = 0;

]]></Content>
</UDLText>

<Property name="Format">
<Type>%String</Type>
<InitialExpression>"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"</InitialExpression>
<Required>1</Required>
<Parameter name="MAXLEN"/>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="AllowCreate">
<Type>%String</Type>
<InitialExpression>"true"</InitialExpression>
<Required>1</Required>
<Parameter name="MAXLEN"/>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Method name="getNewPolicy">
<ClassMethod>1</ClassMethod>
<FormalSpec>format:%String</FormalSpec>
<ReturnType>NameIDPolicy</ReturnType>
<Implementation><![CDATA[
	Set ret=..%New()
	
	If ($LENGTH($GET(format)) > 0) {
		Set ret.Format=format
	}
	
	Quit ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.ISC.SAML2.Response">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ISC.SAML2.Response.CLS/EV.2
;vc; Component: CLS.EF.ISC.SAML2.Response
;vc;  Location: SmallDev
;vc; Date/Time: 01-Nov-15 07:58
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ISC.SAML2.Response.CLS/EV.2</td><td>CLS.EF.ISC.SAML2.Response</td><td>SmallDev</td><td style='white-space: nowrap;'>01-Nov-15 07:58</td><td>RajibQ</td></tr></table>
]]></Description>
<IncludeCode>%soap</IncludeCode>
<Super>Message</Super>
<TimeChanged>63820,60038</TimeChanged>
<TimeCreated>62998,40423.962499</TimeCreated>

<Property name="InResponseTo">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="Status">
<Type>EF.ISC.SAML2.Status</Type>
<Required>1</Required>
</Property>

<Property name="Assertion">
<Type>EF.ISC.SAML2.Assertion</Type>
<Parameter name="XMLREF" value="1"/>
</Property>

<Method name="ValidateElement">
<FormalSpec>document:%XML.Document,ignoreCAFile:%Boolean=0,externalCertificate:%Binary(MAXLEN="")=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set error=""
	
	// must have a signature
	If '$IsObject(..Assertion.Signature) {
		$$$SOAPLogSecurity("    no signature for Assertion")
		Quit "NoSignatureFound"
	}
	
	// validate signature
	Set error=..Assertion.ValidateElement(document,,,ignoreCAFile,externalCertificate,.IDsValidated)
	If error'="" Quit error
	
	// make sure signature validated for the specific assertion
	If ('$DATA(IDsValidated(..Assertion.SAMLID))) {
		$$$SOAPLogSecurity("    Assertion ID="_..Assertion.SAMLID_" - not validated by signature")
		Quit "AssertionNotValidatedBySignature"
	}
	
	Set currentH=$ZUTIL(188)
	Set currentTime=$ZDATETIME(currentH,3,7,3)
	Set currentHX=..getNumericalH(currentH)
		
	// check assertion conditions - maybe this should go into assertion class...
	Set notOnOrAfter=..Assertion.Subject.SubjectConfirmation.GetAt(1).SubjectConfirmationData.NotOnOrAfter
	Set notBefore=..Assertion.Subject.SubjectConfirmation.GetAt(1).SubjectConfirmationData.NotBefore
	
	If ($L(notBefore)>1) {
		Try {
			Set notBeforeH=$ZDATETIMEH(notBefore,3,7)
			
		} catch errObj {
			Set error=errObj.DisplayString()
		}
		
		If error'="" {
			$$$SOAPLogSecurity("    Not able to convert SubjectConfirmationData NotBefore: "_error)
			Quit "ConditionCheckFailed"
		}
		
		Set notBeforeHX=..getNumericalH(notBeforeH)
		If (currentHX<notBeforeHX) {
			$$$SOAPLogSecurity("    SubjectConfirmationData Condition failed: NotBefore "_notBefore_" >= "_currentTime)
			Quit "ConditionCheckFailed"
		}
	}
	
	If ($L(notOnOrAfter)>1) {
		Try {
			Set notOnOrAfterH=$ZDATETIMEH(notOnOrAfter,3,7)
			
		} catch errObj {
			Set error=errObj.DisplayString()
		}
		
		If error'="" {
			$$$SOAPLogSecurity("    Not able to convert SubjectConfirmationData NoOnOrAfter: "_error)
			Quit "ConditionCheckFailed"
		}
		
		Set notOnOrAfterHX=..getNumericalH(notOnOrAfterH)
		If (currentHX>=notOnOrAfterHX) {
			$$$SOAPLogSecurity("    SubjectConfirmationData Condition failed: NotOnOrAfter "_notOnOrAfter_" >= "_currentTime)
			Quit "ConditionCheckFailed"
		}
	}
	
	// check assertion conditions - maybe this should go into assertion class...
	Set notOnOrAfter=..Assertion.Conditions.NotOnOrAfter
	Set notBefore=..Assertion.Conditions.NotBefore
	
	If ($L(notBefore)>1) {
		Try {
			Set notBeforeH=$ZDATETIMEH(notBefore,3,7)
			
		} catch errObj {
			Set error=errObj.DisplayString()
		}
		
		If error'="" {
			$$$SOAPLogSecurity("    Not able to convert NotBefore: "_error)
			Quit "ConditionCheckFailed"
		}
		
		Set notBeforeHX=..getNumericalH(notBeforeH)
		If (currentHX<notBeforeHX) {
			$$$SOAPLogSecurity("    Condition failed: NotBefore "_notBefore_" >= "_currentTime)
			Quit "ConditionCheckFailed"
		}
	}
	
	If ($L(notOnOrAfter)>1) {
		Try {
			Set notOnOrAfterH=$ZDATETIMEH(notOnOrAfter,3,7)
			
		} catch errObj {
			Set error=errObj.DisplayString()
		}
		
		If error'="" {
			$$$SOAPLogSecurity("    Not able to convert NoOnOrAfter: "_error)
			Quit "ConditionCheckFailed"
		}
		
		Set notOnOrAfterHX=..getNumericalH(notOnOrAfterH)
		If (currentHX>=notOnOrAfterHX) {
			$$$SOAPLogSecurity("    Condition failed: NotOnOrAfter "_notOnOrAfter_" >= "_currentTime)
			Quit "ConditionCheckFailed"
		}
	}
	
	Quit ""
]]></Implementation>
</Method>

<Method name="getNumericalH">
<ClassMethod>1</ClassMethod>
<FormalSpec>inH</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ((+$P(inH,",",1))*100000)+$P(inH,",",2)
]]></Implementation>
</Method>
</Class>


<Class name="EF.ISC.SAML2.Status">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ISC.SAML2.Status.CLS/EV.0
;vc; Component: CLS.EF.ISC.SAML2.Status
;vc;  Location: SmallDev
;vc; Date/Time: 19-Jul-13 16:29
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ISC.SAML2.Status.CLS/EV.0</td><td>CLS.EF.ISC.SAML2.Status</td><td>SmallDev</td><td style='white-space: nowrap;'>19-Jul-13 16:29</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>62998,40491</TimeChanged>
<TimeCreated>62998,40491.540928</TimeCreated>

<Parameter name="XMLPREFIX">
<Default>samlp</Default>
</Parameter>

<Property name="StatusCode">
<Type>EF.ISC.SAML2.StatusCode</Type>
<Required>1</Required>
</Property>
</Class>


<Class name="EF.ISC.SAML2.StatusCode">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ISC.SAML2.StatusCode.CLS/EV.0
;vc; Component: CLS.EF.ISC.SAML2.StatusCode
;vc;  Location: SmallDev
;vc; Date/Time: 19-Jul-13 16:29
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ISC.SAML2.StatusCode.CLS/EV.0</td><td>CLS.EF.ISC.SAML2.StatusCode</td><td>SmallDev</td><td style='white-space: nowrap;'>19-Jul-13 16:29</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>62998,40532</TimeChanged>
<TimeCreated>62998,40532.528001</TimeCreated>

<Parameter name="XMLPREFIX">
<Default>samlp</Default>
</Parameter>

<Property name="Value">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN"/>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>
</Class>


<Class name="EF.ISC.UnitTest.Manager">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ISC.UnitTest.Manager.CLS/EV.1
;vc; Component: CLS.EF.ISC.UnitTest.Manager
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:22
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ISC.UnitTest.Manager.CLS/EV.1</td><td>CLS.EF.ISC.UnitTest.Manager</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:22</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%UnitTest.Manager</Super>
<TimeChanged>64100,36569</TimeChanged>
<TimeCreated>63329,37933.691654</TimeCreated>

<Method name="efCanRunUnitTests">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set ret=0
	
	If ('(##class(EF.config.server).isThisLive())) {
		// If (($ZNSPACE["SMALLDEVSRC") || ($ZNSPACE["UTRUN")) {
			Set ret=1
		// }
	}
	
	Quit ret
]]></Implementation>
</Method>

<Method name="efAssertCanRunUnitTests">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	If ('(..efCanRunUnitTests())) {
		Throw ##class(shared.exceptions.generalException).%New("Can not run unit tests here!")
	}
]]></Implementation>
</Method>

<Method name="efRunAllTestsInDictionary">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[qspec,userparam,&testIndex,runIntegrationTests=1]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Do ..efAssertCanRunUnitTests()
	
	Set manager=..%New()
	
	If manager=$$$NULLOREF Quit %objlasterror
	;
	Set sc=$$$qualifierParse("UnitTest",.qspec,.qstruct) q:$$$ISERR(sc) sc
	;
	Set manager.Debug=$$$qualifierGetValue(qstruct,"debug")
	Set manager.Display=$s($$$qualifierGetValue(qstruct,"displaylog"):"log",1:"")_","_$s($$$qualifierGetValue(qstruct,"displayerror"):"error",1:"")
	Set manager.UserParam=$g(userparam)
	Set key="" For  Set key=$o(userparam(key)) Quit:key=""  do manager.UserFields.SetAt($g(userparam(key)),key)
	;
	Set zhBegin=$zh
	; 
	Set rs=##class(%ResultSet).%New()
	Set qry="SELECT ID,Name FROM %Dictionary.CompiledClass WHERE PrimarySuper['EF.ISC.UnitTest.TestCase' AND ID <> 'EF.ISC.UnitTest.TestCase'"
	Do rs.Prepare(qry)
	Do rs.Execute()
	
	While rs.Next() {
		Set classID=rs.Get("ID")
		Set className=rs.Get("Name")
		if (runIntegrationTests) ! ('$Parameter(className,"isIntegrationTest")) {
			Do manager.RunOneTestSuite("","",":"_className,.qstruct)
		}
	}
	
	Do rs.Close()
	Kill rs
	
	If $$$qualifierGetValue(qstruct,"run") {
		Do manager.SaveResult($zh-zhBegin)
		Do manager.PrintURL()
	}
	
	Set testIndex=manager.LogIndex
	
	;
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="RunOneTestSuite">
<FormalSpec>dir:%String,suite:%String,testspec:%String,qstruct</FormalSpec>
<Implementation><![CDATA[
	Do ..efAssertCanRunUnitTests()
	
	Set testcase=$p(testspec,":",2)
	Set testmethod=$p(testspec,":",3)
	;
	Do ..LogStateBegin(suite) Do  Do ..LogStateEnd($zh-zhsBegin)
	. ;
	. Set zhsBegin=$zh
	. Set flags="ck/nodisplay"
	. If ..Display["log" Set flags=flags_"/display=log"
	. If ..Display["error" Set flags=flags_"/display=error"
	. Set sc=$$$OK
	. ;
	. Set classLoaded(testcase_".cls")=""
	. ;
	. Set key="" For  Set key=$o(classLoaded(key)) Quit:key=""  Do
	. . If ($p(key,".",$l(key,"."))="cls") Set classArray($p(key,".",1,$l(key,".")-1))=""
	. ;
	. If $d(classArray)=0 Do ..PrintLine("No classes found for testsuite "_suite,1) Quit
	. If testcase'="" Do  Do:$$$ISERR(sc) ..LogStateStatus(sc,"RunOneTest")
	. . If $d(classArray(testcase))=0 Set sc=$$$ERROR($$$GeneralError,"TestCase '"_testcase_"' does not exist in TestSuite") Quit
	. . If $$$comClassDefined(testcase)=0 Set sc=$$$ERROR($$$CompiledClassDoesNotExist,testcase) Quit
	. ;
	. If $$$qualifierGetValue(qstruct,"run")=0 Do ..PrintLine("Skipping running testsuite "_suite,1)
	. Else  Do
	. . Set class="" For  Set class=$o(classArray(class)) Quit:class=""  Do
	. . . If testcase'="",class'=testcase Quit
	. . . If '$$issubclassof^%occCompile(class,"EF.ISC.UnitTest.TestCase") Quit
	. . . Do ..RunOneTestCase(suite,class,testmethod)
	. ;
	. Set sc=$$$OK
	;
	Do ..PrintLine("",0)
	;
	Quit
]]></Implementation>
</Method>

<Method name="RunOneTestCase">
<FormalSpec>suite:%String,class:%String,test:%String=""</FormalSpec>
<Implementation><![CDATA[
	New
	Do ..LogStateBegin(suite,class) Do  Do ..LogStateEnd(zhcDuration)
	. Set testcase=$classmethod(class,"%New",$this)
	. Set testcase.Debug=..Debug
	#; For test development: set CurrentDir based on ^UnitTestRoot and package name so it will be correct even in the context of DebugRunTestCase()
	. Set sc=testcase.OnBeforeAllTests() If $$$ISERR(sc) Do ..LogStateStatus(sc,"OnBeforeAllTests") Set zhcDuration=0 Quit
	. Set zhcBegin=$zh
	. set tFoundMethod=0
	. Set method="" For  Set method=$$$comMemberNext(class,$$$cCLASSmethod,method) q:method=""  If $e(method,1,4)="Test",(test=""||(method=test)) Do
	. . set tFoundMethod=1
	. . Do ..LogStateBegin(suite,class,method) Do  Do ..LogStateEnd(zhmDuration)
	. . . Set success=0
	. . . Set sc=testcase.OnBeforeOneTest(method) If ($$$ISERR(sc) || testcase.SkipTest) Do ..LogStateStatus(sc,"OnBeforeOneTest") Set zhmDuration=0,testcase.SkipTest=0 Quit
	. . . If '..Debug Set $zt="MethError"
	. . . Set zhmBegin=$zh Do $method(testcase,method) Set zhmDuration=$zh-zhmBegin
	. . . Do ..LogMessage("Duration of execution: "_zhmDuration_" sec.")
	. . . Set sc=testcase.OnAfterOneTest(method) If $$$ISERR(sc) Do ..LogStateStatus(sc,"OnAfterOneTest") Quit
	. . . s testcase.SkipTest = 0
	. . . Quit
MethError . . . Set $ZT=""
	. . . Set zhmDuration=$zh-zhmBegin Do ..LogStateStatus($$$ERROR($$$CacheError,$ze),method)
	. . . Quit
	. If tFoundMethod=0,test'="" Do ..LogStateStatus($$$ERROR($$$GeneralError,"TestMethod '"_test_"' does not exist in TestCase '"_class_"'."),"RunOneTestCase")
	. Set zhcDuration=$zh-zhcBegin
	. Set sc=testcase.OnAfterAllTests() If $$$ISERR(sc) Do ..LogStateStatus(sc,"OnAfterAllTests") Quit
	. Kill testcase
	;
	Quit
]]></Implementation>
</Method>
</Class>


<Class name="EF.ISC.UnitTest.Result.jUnitExporter">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ISC.UnitTest.Result.jUnitExporter.CLS/EV.3
;vc; Component: CLS.EF.ISC.UnitTest.Result.jUnitExporter
;vc;  Location: SmallDev
;vc; Date/Time: 25-Apr-16 14:48
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ISC.UnitTest.Result.jUnitExporter.CLS/EV.3</td><td>CLS.EF.ISC.UnitTest.Result.jUnitExporter</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Apr-16 14:48</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63998,34258</TimeChanged>
<TimeCreated>63347,39304.72308</TimeCreated>

<Property name="testInstanceIdx">
<Type>%Integer</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>testInstanceIdx:%Integer</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	If ($DATA(testInstanceIdx)) {
		Set ..testInstanceIdx=testInstanceIdx
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="exportToDevice">
<Implementation><![CDATA[
	if $Data(%request) {
		set reportLevel = +%request.Get("reportLevel") // '0'=full, '1'=a bit less, '2'=minimal
	} else {
		set reportLevel = 0 	
	}
	
	Set writer=##class(%XML.Writer).%New()
	Set sc=writer.OutputToDevice()
	If ($$$ISERR(sc)) {
		Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
	}
	
	Set sc=writer.StartDocument()
	If ($$$ISERR(sc)) {
		Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
	}
	Set sc=writer.RootElement("testsuites")
	If ($$$ISERR(sc)) {
		Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
	}
	
	Set testInstanceIdx=..testInstanceIdx
	
	&SQL(SELECT ID
			FROM %UnitTest_Result.TestInstance
			WHERE ID=:testInstanceIdx
		)
	
	If (+SQLCODE=0) {
		
		Set rsTestSuites=##class(%ResultSet).%New()
		Do rsTestSuites.Prepare("SELECT ID, Name FROM %UnitTest_Result.TestSuite WHERE TestInstance=?")
		Do rsTestSuites.Execute(testInstanceIdx)
		
		While rsTestSuites.Next() {
			Set testSuiteID=rsTestSuites.Get("ID")
			Set testSuiteName=rsTestSuites.Get("Name")
			
			Set sc=writer.Element("testsuite")
			If ($$$ISERR(sc)) {
				Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
			}
			
			Set sc=writer.WriteAttribute("name",testSuiteName)
			If ($$$ISERR(sc)) {
				Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
			}
			
			Set testCount=0
			
			&SQL(SELECT		COUNT(DISTINCT TMID)
					INTO	:tmpTestCount
					FROM	EF_ISC_UnitTest_Result.viewResultsMethods
					WHERE	TIInstanceIndex=:testInstanceIdx)
			If +SQLCODE=0 {
				Set testCount=testCount+tmpTestCount
			}
			
			&SQL(SELECT		COUNT(TAID)
					INTO	:tmpTestCount
					FROM	EF_ISC_UnitTest_Result.viewResultsAssertions
					WHERE	TIInstanceIndex=:testInstanceIdx)
			If +SQLCODE=0 {
				Set testCount=testCount+tmpTestCount
			}
			
			Set sc=writer.WriteAttribute("tests",testCount)
			If ($$$ISERR(sc)) {
				Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
			}
			
			Set testCountFailed=0
			
			&SQL(SELECT		COUNT(DISTINCT TMID)
					INTO	:tmpTestCountFailed
					FROM	EF_ISC_UnitTest_Result.viewResultsMethods
					WHERE	TIInstanceIndex=:testInstanceIdx
							AND TMStatus=0
					)
			If +SQLCODE=0 {
				Set testCountFailed=testCountFailed+tmpTestCountFailed
			}

			&SQL(SELECT		COUNT(TAID)
					INTO	:tmpTestCountFailed
					FROM	EF_ISC_UnitTest_Result.viewResultsAssertions
					WHERE	TIInstanceIndex=:testInstanceIdx
							AND TAStatus=0
					)
			If +SQLCODE=0 {
				Set testCountFailed=testCountFailed+tmpTestCountFailed
			}
			Set sc=writer.WriteAttribute("failures",testCountFailed)
			If ($$$ISERR(sc)) {
				Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
			}
			
			Set rsTestMethods=##class(%ResultSet).%New()
			Do rsTestMethods.Prepare("SELECT DISTINCT TMID, TMName, TMStatus, TCName, TMErrorDescription FROM EF_ISC_UnitTest_Result.viewResultsMethods WHERE TIInstanceIndex=?")
			Do rsTestMethods.Execute(testInstanceIdx)
			
			While rsTestMethods.Next() {
				
				Set testMethodID=rsTestMethods.Get("TMID")
				Set testMethodName=rsTestMethods.Get("TMName")
				Set testCaseName=rsTestMethods.Get("TCName")
				Set testMethodStatus=rsTestMethods.Get("TMStatus")
				Set testMethodErrorDescription=rsTestMethods.Get("TMErrorDescription")
				if reportLevel<2 {
					Set sc=writer.Element("testcase")
					If ($$$ISERR(sc)) {
						Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
					}
					
					Set sc=writer.WriteAttribute("name",testMethodName)
					If ($$$ISERR(sc)) {
						Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
					}
					
					Set sc=writer.WriteAttribute("classname",testCaseName)
					If ($$$ISERR(sc)) {
						Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
					}
				}
				If (testMethodStatus=0) {
					Set sc=writer.Element("failure")
					If ($$$ISERR(sc)) {
						Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
					}
					
					Set sc=writer.WriteAttribute("message",testMethodErrorDescription)
					If ($$$ISERR(sc)) {
						Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
					}
					
					Set sc=writer.WriteCData(testMethodErrorDescription)
					If ($$$ISERR(sc)) {
						Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
					}
					
					Set sc=writer.EndElement()
					If ($$$ISERR(sc)) {
						Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
					}
				} elseif (testMethodStatus=2) {
					
				}
				if reportLevel<2 {					
					Set sc=writer.EndElement()
					If ($$$ISERR(sc)) {
						Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
					}
				}				
				
				Set rsTestCasesMethodsAssertions=##class(%ResultSet).%New()
				
				Set qry=""
				Set qry=qry_"SELECT TAID, TADescription, TCName, TAStatus, TMName, TAAction "
				Set qry=qry_"FROM EF_ISC_UnitTest_Result.viewResultsAssertions "
				Set qry=qry_"WHERE TIInstanceIndex=? "
				Set qry=qry_"      AND TMID=? "
				Do rsTestCasesMethodsAssertions.Prepare(qry)
				Do rsTestCasesMethodsAssertions.Execute(testInstanceIdx,testMethodID)
				
				While rsTestCasesMethodsAssertions.Next() {
					Set testAssertionID=rsTestCasesMethodsAssertions.Get("TAID")
					Set testCaseName=rsTestCasesMethodsAssertions.Get("TCName")
					Set testMethodName=rsTestCasesMethodsAssertions.Get("TMName")
					Set testAssertionDescription=rsTestCasesMethodsAssertions.Get("TADescription")
					Set testAssertionStatus=rsTestCasesMethodsAssertions.Get("TAStatus")
					Set testAssertionAction=rsTestCasesMethodsAssertions.Get("TAAction")
					if reportLevel=0 {
						Set sc=writer.Element("testcase")
						If ($$$ISERR(sc)) {
							Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
						}
						
						Set sc=writer.WriteAttribute("name",testMethodName_" "_testAssertionAction_" "_testAssertionDescription)
						If ($$$ISERR(sc)) {
							Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
						}
						
						Set sc=writer.WriteAttribute("classname",testCaseName)
						If ($$$ISERR(sc)) {
							Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
						}
					}
					If (testAssertionStatus=0) {
						Set sc=writer.Element("failure")
						If ($$$ISERR(sc)) {
							Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
						}
						
						Set sc=writer.WriteAttribute("type",testAssertionAction)
						If ($$$ISERR(sc)) {
							Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
						}
						
						if reportLevel=0 {
							Set sc=writer.WriteAttribute("message","failed")
						} else {
								Set sc=writer.WriteAttribute("testMethodName",testMethodName)
								Set sc=writer.WriteAttribute("testAssertionAction",testAssertionAction)
								Set sc=writer.WriteAttribute("assertion",testAssertionDescription)
						}
						If ($$$ISERR(sc)) {
							Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
						}
						
						Set sc=writer.WriteChars("failed")
						If ($$$ISERR(sc)) {
							Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
						}
						
						Set sc=writer.EndElement()
						If ($$$ISERR(sc)) {
							Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
						}
					} elseif (testAssertionStatus=2) {
						
					}
					if reportLevel=0 {
						Set sc=writer.EndElement()
						If ($$$ISERR(sc)) {
							Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
						}
					}
				}
				
				Do rsTestCasesMethodsAssertions.Close()
			
			}
						
			Set sc=writer.EndElement()
			If ($$$ISERR(sc)) {
				Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
			}
			
		}
		
		Do rsTestSuites.Close()
	}
	
	Set sc=writer.EndRootElement()
	If ($$$ISERR(sc)) {
		Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
	}
	Set sc=writer.EndDocument()
	If ($$$ISERR(sc)) {
		Do ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.ISC.UnitTest.Result.viewResultsAssertions">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ISC.UnitTest.Result.viewResultsAssertions.CLS/EV.2
;vc; Component: CLS.EF.ISC.UnitTest.Result.viewResultsAssertions
;vc;  Location: SmallDev
;vc; Date/Time: 03-Jul-14 14:56
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ISC.UnitTest.Result.viewResultsAssertions.CLS/EV.2</td><td>CLS.EF.ISC.UnitTest.Result.viewResultsAssertions</td><td>SmallDev</td><td style='white-space: nowrap;'>03-Jul-14 14:56</td><td>RajibQ</td></tr></table>
]]></Description>
<ClassType>view</ClassType>
<CompileAfter>EF.ISC.UnitTest.Result.viewResultsMethods</CompileAfter>
<DdlAllowed>1</DdlAllowed>
<Owner>UnknownUser</Owner>
<ProcedureBlock>1</ProcedureBlock>
<SqlTableName>viewResultsAssertions</SqlTableName>
<TimeChanged>63371,53806.342769</TimeChanged>
<TimeCreated>63371,40504.59401</TimeCreated>
<ViewQuery><![CDATA[
	
	SELECT		TA.ID					AS TAID
			,	TA.TestMethod			AS TATestMethod
			,	TA.Action				AS TAAction
			,	TA.Counter				AS TACounter
			,	TA.Description			AS TADescription
			,	TA.Status				AS TAStatus
			,	VM.*
		FROM %UnitTest_Result.TestAssert TA 
			JOIN viewResultsMethods VM ON TA.TestMethod=VM.TMID
		WHERE	%SQLUPPER(Action) <> %SQLUPPER('LogMessage')
	
	]]></ViewQuery>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>
</Class>


<Class name="EF.ISC.UnitTest.Result.viewResultsMethods">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ISC.UnitTest.Result.viewResultsMethods.CLS/EV.2
;vc; Component: CLS.EF.ISC.UnitTest.Result.viewResultsMethods
;vc;  Location: SmallDev
;vc; Date/Time: 03-Jul-14 14:56
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ISC.UnitTest.Result.viewResultsMethods.CLS/EV.2</td><td>CLS.EF.ISC.UnitTest.Result.viewResultsMethods</td><td>SmallDev</td><td style='white-space: nowrap;'>03-Jul-14 14:56</td><td>RajibQ</td></tr></table>
]]></Description>
<ClassType>view</ClassType>
<DdlAllowed>1</DdlAllowed>
<Owner>UnknownUser</Owner>
<ProcedureBlock>1</ProcedureBlock>
<SqlTableName>viewResultsMethods</SqlTableName>
<TimeChanged>63371,53796.357112</TimeChanged>
<TimeCreated>63371,40358.964187</TimeCreated>
<ViewQuery>
	
	SELECT		TM.ID					AS TMID
			,	TM.TestCase				AS TMTestCase
			,	TM.Duration				AS TMDuration
			,	TM.ErrorAction			AS TMErrorAction
			,	TM.ErrorDescription		AS TMErrorDescription
			,	TM.Name					AS TMName
			,	TM.Status				AS TMStatus
			,	TC.ID					AS TCID
			,	TC.TestSuite			AS TCTestSuite
			,	TC.Duration				AS TCDuration
			,	TC.ErrorAction			AS TCErrorAction
			,	TC.ErrorDescription		AS TCErrorDescription
			,	TC.Name					AS TCName
			,	TC.Status				AS TCStatus
			,	TS.ID					AS TSID
			,	TS.TestInstance			AS TestInstance
			,	TS.Duration				AS TSDuration
			,	TS.ErrorAction			AS TSErrorAction
			,	TS.ErrorDescription		AS TSErrorDescription
			,	TS.Name					AS TSName
			,	TS.Status				AS TSStatus
			,	TI.ID					AS TIID
			,	TI.ConfigurationName	AS TIConfigurationName
			,	TI.DateTime				AS TIDateTime
			,	TI.Duration				AS TIDuration
			,	TI.InstanceIndex		AS TIInstanceIndex
			,	TI.MachineName			AS TIMachineName
			,	TI.Namespace			AS TINamespace
			,	TI.UserFields			AS TIUserFields
			,	TI.UserParam			AS TIUserParam
			,	TI.Version				AS TIVersion
		FROM %UnitTest_Result.TestMethod TM
			JOIN %UnitTest_Result.TestCase TC ON TM.TestCase=TC.ID
			JOIN %UnitTest_Result.TestSuite TS ON TC.TestSuite=TS.ID
			JOIN %UnitTest_Result.TestInstance TI ON TS.TestInstance=TI.ID
	</ViewQuery>

<Parameter name="READONLY">
<Default>1</Default>
</Parameter>
</Class>


<Class name="EF.ISC.UnitTest.TestCase">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ISC.UnitTest.TestCase.CLS/EV.2
;vc; Component: CLS.EF.ISC.UnitTest.TestCase
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:22
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ISC.UnitTest.TestCase.CLS/EV.2</td><td>CLS.EF.ISC.UnitTest.TestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:22</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%UnitTest.TestCase</Super>
<TimeChanged>64089,34567</TimeChanged>
<TimeCreated>63329,58878.890133</TimeCreated>

<Parameter name="isIntegrationTest">
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Method name="AssertEqualsViaMacro">
<FormalSpec>autoquoted,value1,value2,description</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If ($DATA(description)) {
		Quit ##super(autoquoted, value1, value2,..ParseAutoQuoted(autoquoted,"equals")_" ["_description_"]")
	} 
	Quit ##super(autoquoted, value1, value2)
]]></Implementation>
</Method>

<Method name="AssertNotEqualsViaMacro">
<FormalSpec>autoquoted,value1,value2,description</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If ($DATA(description)) {
		Quit ##super(autoquoted, value1, value2,..ParseAutoQuoted(autoquoted,"equals")_" ["_description_"]")
	} 
	Quit ##super(autoquoted, value1, value2)
]]></Implementation>
</Method>

<Method name="AssertTrueViaMacro">
<FormalSpec>autoquoted,value,description</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If ($DATA(description)) {
		Quit ##super(autoquoted, value,..ParseAutoQuoted(autoquoted,"equals")_" ["_description_"]")
	} 
	Quit ##super(autoquoted, value)
]]></Implementation>
</Method>

<Method name="AssertNotTrueViaMacro">
<FormalSpec>autoquoted,value,description</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If ($DATA(description)) {
		Quit ##super(autoquoted, value,..ParseAutoQuoted(autoquoted,"equals")_" ["_description_"]")
	}
	Quit ##super(autoquoted, value)
]]></Implementation>
</Method>

<Method name="AssertStatusOKViaMacro">
<FormalSpec>autoquoted,status,description</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If ($DATA(description)) {
		Quit ##super(autoquoted, status,..ParseAutoQuoted(autoquoted,"equals")_" ["_description_"]")
	}
	Quit ##super(autoquoted, status)
]]></Implementation>
</Method>

<Method name="AssertStatusNotOKViaMacro">
<FormalSpec>autoquoted,status,description</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If ($DATA(description)) {
		Quit ##super(autoquoted, status,..ParseAutoQuoted(autoquoted,"equals")_" ["_description_"]")
	}
	Quit ##super(autoquoted, status)
]]></Implementation>
</Method>

<Method name="AssertStatusEqualsViaMacro">
<FormalSpec>autoquoted,value1,value2,description</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If ($DATA(description)) {
		Quit ##super(autoquoted, value1, value2,..ParseAutoQuoted(autoquoted,"equals")_" ["_description_"]")
	}
	Quit ##super(autoquoted, value1, value2)
]]></Implementation>
</Method>

<Method name="AssertFilesSameViaMacro">
<FormalSpec>autoquoted,file1,file2,description</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If ($DATA(description)) {
		Quit ##super(autoquoted, file1, file2,..ParseAutoQuoted(autoquoted,"equals")_" ["_description_"]")
	}
	Quit ##super(autoquoted, file1, file2)
]]></Implementation>
</Method>
</Class>


<Class name="EF.ISC.XML.Security.Signature">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ISC.XML.Security.Signature.CLS/EV.5
;vc; Component: CLS.EF.ISC.XML.Security.Signature
;vc;  Location: SmallDev
;vc; Date/Time: 26-Nov-15 17:28
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ISC.XML.Security.Signature.CLS/EV.5</td><td>CLS.EF.ISC.XML.Security.Signature</td><td>SmallDev</td><td style='white-space: nowrap;'>26-Nov-15 17:28</td><td>RajibQ</td></tr></table>
]]></Description>
<Super>%XML.Security.Signature</Super>
<TimeChanged>63882,62990.433541</TimeChanged>
<TimeCreated>62998,40604.737033</TimeCreated>

<Parameter name="XMLPREFIX">
<Default>ds</Default>
</Parameter>

<Method name="ValidateElement">
<Description><![CDATA[
Validate the security header element.
If invalid return an error code.<br><br>
If the document is an MTOM document, then the optional <var>mimeAttachments</var> argument
contains a single MIME part which has each MIME section as one of its child <var>Parts</var>.<br><br>
The CAFile argument is the full path of file which contains the certificate authority 
certificates which are to be used to validate the signing certificate.<br><br>]]></Description>
<FormalSpec><![CDATA[document:%XML.Document,service:%SOAP.WebBase="",mimeAttachments:%Net.MIMEPart="",CAFile:%String="",ignoreCAFile:%Boolean=0,externalCertificate:%Binary(MAXLEN="")="",&IDsValidated:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	$$$SOAPTimer1Init(WSvalidate)
	$$$SOAPLogSecurity("Security Signature:")
	Set invalid="InvalidSecurityToken"
	Set unsupported="UnsupportedAlgorithm"
	Set error=""
	
	// Get MTOM attachments if we need them
	If $isobject(service),mimeAttachments="",service.IsMTOM {
		If service.%Extends("%SOAP.WebClient") {
			Set attachments=service.ResponseAttachments
		} Else {
			Set attachments=service.Attachments
		}
		Set mimeAttachments=##class(%Net.MIMEPart).%New()
		For i=1:1:attachments.Count() {
			Do mimeAttachments.Parts.Insert(attachments.GetAt(i))
		}
	}

	// SignedInfo element must be specified
	Set signedInfo=..SignedInfo
	If signedInfo="" {
		$$$SOAPLogSecurity("    no SignedInfo")
		Quit invalid
	}

	// Only transforms exclusive and inclusive XML canonicalization supported
	If signedInfo.CanonicalizationMethod.Algorithm=$$$SOAPWSexcc14n {
		Set signingPrefixList=""
		If $isobject(signedInfo.CanonicalizationMethod.InclusiveNamespaces) {
			Set signingPrefixList=signedInfo.CanonicalizationMethod.InclusiveNamespaces.PrefixList
		}
	} ElseIf signedInfo.CanonicalizationMethod.Algorithm'=$$$SOAPWSc14n {
		$$$SOAPLogSecurity("    bad signature transform="_signedInfo.CanonicalizationMethod.Algorithm)
		Quit unsupported
	}
	
	// Validate each signed element
	Set signNodeId=""
	Set writer=##class(%XML.Writer).%New()
	Set node=document.GetNode("")
	Set references=signedInfo.Reference
	For i=1:1:references.Count() {
		Set ref=references.GetAt(i)
		Set uri=ref.URI
		$$$SOAPLogSecurity("    Reference "_i)
		If uri=$char(0) {
		} ElseIf $extract(uri)="#" {
			Set uri=$extract(uri,2,*)
		} Else {
			$$$SOAPLogSecurity("    URI must be fragment")
			Set error=unsupported
			Quit
		}
		// Only #sha1 digest and exclusive canonicalization supported
		Set transforms=ref.Transforms
		Set count=transforms.Count()
		Set exc=1
		Set enc=0
		If count=2 {
			Set transform=ref.Transforms.GetAt(1)
			Set exc=2,enc=1
			If transform.Algorithm'=$$$SOAPWSEnvelopedSignature {
				Set error=unsupported
				$$$SOAPLogSecurity("    bad reference transform="_transform.Algorithm)
				Quit
			}
		} ElseIf count=1 {
			Set transform=ref.Transforms.GetAt(1)
			If transform.Algorithm=$$$SOAPWSEnvelopedSignature {
				Set exc=0,enc=1
			} Else {
				Set exc=1,enc=0
			}
		} Else {
			Set error=unsupported
			$$$SOAPLogSecurity("    only one reference transform allowed="_transforms.Count())
			Quit
		}
		Set isSTR=0
		// If enveloped signature, get enveloping node
		If enc {
			Set signNodeId=..NodeId
		} Else {
			If uri=$c(0) {
				$$$SOAPLogSecurity("    URI must be specified if not enveloped-signature")
				Set error=unsupported
				Quit
			}
		}
		If exc=0 {
			Kill prefixList
		} Else {
			Set transform=transforms.GetAt(exc)
			If transform.Algorithm=$$$SOAPWSSTRTransform,$isobject($get(%SOAPSecurityHeader)) {
				Set transformationParameters=transform.TransformationParameters
				Set transform=transformationParameters.CanonicalizationMethod
				Set str=%SOAPSecurityHeader.GetElementById(uri)
				If '$isobject(str) || ($zobjclass(str)'="%SOAP.Security.SecurityTokenReference") {
					Set error=unsupported
					$$$SOAPLogSecurity("    SecurityTokenReference expected for #STR-Transform. URI="_uri)
					Quit
				}
				If str.Reference.Count()'=1 {
					Set error=unsupported
					$$$SOAPLogSecurity("    Only one reference allowed for #STR-Transform. URI="_uri)
					Quit
				}
				Set strRef=str.Reference.GetAt(1)
				If $zobjclass(strRef)="%SOAP.Security.Reference" {
					Set uri=$extract(strRef.URI,2,*)
				} ElseIf $zobjclass(strRef)="%SOAP.Security.KeyIdentifier" {
					Set uri=strRef.Identifier
				} Else {
					Set error=unsupported
					$$$SOAPLogSecurity("    Invalid format SecurityTokenReference for #STR-Transform. URI="_uri)
					Quit
				}
				Set isSTR=1
			} 
		
			If transform.Algorithm=$$$SOAPWSexcc14n {
				Set prefixList=""
				If $isobject(transform.InclusiveNamespaces) {
					Set prefixList=transform.InclusiveNamespaces.PrefixList
				}
			} ElseIf transform.Algorithm=$$$SOAPWSc14n {
				Kill prefixList
			} Else {
				Set error=unsupported
				$$$SOAPLogSecurity("    bad reference transform="_transform.Algorithm)
				Quit
			}
		}
		Set bitlength=$case(ref.DigestMethod.Algorithm,$$$SOAPWSsha1:160,$$$SOAPWSsha256:256,$$$SOAPWSsha384:384,$$$SOAPWSsha512:512,:0)
		If bitlength=0 {
			$$$SOAPLogSecurity("    bad reference algorithm="_ref.DigestMethod.Algorithm)
			Set error=unsupported
			Quit
		}
		
		If uri=$char(0) {
			Set nodeId=document.GetDocumentNode()  ; Root node of XML document
		} Else {
			// Find DOM node corresponding to the URI fragment 
			Set nodeId=..GetNodeById(uri,document,node)
		}
		If nodeId="" {
			$$$SOAPLogSecurity("    Id not found for URI: "_uri)
			Set error="FailedCheck"
			Quit
		}
		Set node.NodeId=nodeId
	
		// Compute hash of DOM element
		Set hash=..ComputeSha1Digest(node,signNodeId,writer,.prefixList,bitlength,isSTR,.canontext,mimeAttachments)
		If hash="" {
			Set error=invalid
			Quit
		}
		
		// Check if signed node is child of the SOAP Body element
		If node.LocalName="Body" {
			Set ns=node.Namespace
			If (ns=$$$SOAP12ENVns) || (ns=$$$SOAPENVns) {
				Set ..IsBodySigned=1
				Set ref.ElementType="Body"
			}
		} ElseIf node.MoveToParent(1),node.LocalName="Header" {
			Set ns=node.Namespace
			If (ns=$$$SOAP12ENVns) || (ns=$$$SOAPENVns) {
				Set ref.ElementType="Header"
			}
		} ElseIf uri'=$char(0),$isobject($get(%SOAPSecurityHeader)),$isobject(%SOAPSecurityHeader.GetElementById(uri)) {
			Set ref.ElementType="Element"
		} Else {
			Set ref.ElementType=""
		}
		
		// Validate that computed digest matches the digest from the signature.
		If hash'=ref.DigestValue {
			$$$SOAPLogSecurity("    Digest did not match. calc="_##class(%SYSTEM.Encryption).Base64Encode(hash)_" stored="_##class(%SYSTEM.Encryption).Base64Encode(ref.DigestValue))
			If $$$CheckSOAPLogSecurity {
				$$$SOAPLogText($c(13,10)_"*******Canonicalized XML: bitlength="_bitlength)
				Do canontext.Rewind()
				$$$SOAPLogRawText(canontext)
			}
			Set error="FailedCheck"
			Quit
		}
		
		
		$$$SOAPLogSecurity("    Digest matched.")
	}
	If error'="" Quit error
	
	// Canonicalize the SignedInfo element
	Set sc=writer.OutputToString()
	If $$$ISERR(sc) {
		$$$SOAPLogSecurity("    %XML.Writer OutputToString error")
		Quit invalid
	}
	Set node.NodeId=signedInfo.NodeId
	If $data(signingPrefixList) {
		If signingPrefixList'="" {
			Do writer.ParsePrefixList(signingPrefixList,.signingPrefixArray)
		}
	} Else {
		Set signingPrefixArray="c14n"
	}
	Set sc=writer.Canonicalize(node,.signingPrefixArray,,,mimeAttachments)
	If $$$ISERR(sc) {
		$$$SOAPLogSecurity("    %XML.Writer Canonicalize error: "_$system.Status.GetErrorText(sc))
		Quit invalid
	}
	Set signatureText=writer.GetXMLString(.sc)
	If $$$ISERR(sc) {
		$$$SOAPLogSecurity("    %XML.Writer GetXMLString error: "_$system.Status.GetErrorText(sc))
		Quit invalid
	}
	If $$$CheckSOAPLogVerbose $$$SOAPLogSecurity("    Canonical SignedInfo: "_signatureText)
	
	Set keyInfo=""
	
	// KeyInfo with 1 key must be specified to validate signature
	If ($LENGTH(externalCertificate)<2) {
		Set keyInfo=..KeyInfo
	} else {
		// generate keyInfo from external certificate
		// quite a hack, but the simplest way to make this work, while maintaining consistency with ISC code
		Set dummySigXML=""
		Set dummySigXML=dummySigXML_"<ds:Signature xmlns:ds=""http://www.w3.org/2000/09/xmldsig#"">"
		Set dummySigXML=dummySigXML_"<KeyInfo xmlns=""http://www.w3.org/2000/09/xmldsig#"">"
		Set dummySigXML=dummySigXML_"<ds:X509Data>"
		Set dummySigXML=dummySigXML_"<ds:X509Certificate>"
		Set dummySigXML=dummySigXML_##class(%SYSTEM.Encryption).Base64Encode(externalCertificate)
		Set dummySigXML=dummySigXML_"</ds:X509Certificate>"
		Set dummySigXML=dummySigXML_"</ds:X509Data>"
		Set dummySigXML=dummySigXML_"</KeyInfo>"
		Set dummySigXML=dummySigXML_"</ds:Signature>"
		Set dummySigXMLReader=##class(%XML.Reader).%New()
		Set status=dummySigXMLReader.OpenString(dummySigXML)
		If ('($$$ISOK(status))) {
			$$$SOAPLogSecurity("    failed to create dummy certificate XML")
			Quit invalid
		} else {
			Do dummySigXMLReader.Correlate("Signature","EF.ISC.XML.Security.Signature")
			Set objDummySig=##class(EF.ISC.XML.Security.Signature).%New()
			Do dummySigXMLReader.Next(.objDummySig,.status)
			If ('($$$ISOK(status))) {
				$$$SOAPLogSecurity("    failed to process dummy certificate XML")
				Quit invalid
			} else {
				Set keyInfo=objDummySig.KeyInfo
			}
		}
	}
	
	If keyInfo="" {
		$$$SOAPLogSecurity("    no KeyInfo")
		Quit invalid
	}
	Set error=keyInfo.ValidateTokenRef(service)
	If error'="" Quit error
	
	
	// Validate the signature using the certificate in the BinarySecurityToken
	If keyInfo.KeyType=$$$SOAPWSX509v3 {
		Set bitlength=$case(signedInfo.SignatureMethod.Algorithm,$$$SOAPWSrsasha1:160,$$$SOAPWSrsasha256:256,$$$SOAPWSrsasha384:384,$$$SOAPWSrsasha512:512,:0)
		If bitlength=0 {
			$$$SOAPLogSecurity("    Unexpected signature method: "_signedInfo.SignatureMethod.Algorithm)
			Quit unsupported
		}
		
		If $zobjclass(keyInfo.X509Credentials)'="%XML.Security.RSAKeyValue" {
			// Get certificate
			Set credentials=keyInfo.X509Credentials
			If $LENGTH(externalCertificate)>1 {
				Set certificate=externalCertificate
			} else {
				Set certificate=credentials.Certificate
			}
			
			If ('ignoreCAFile) {
				// Get CA Certificate file
				If CAFile'="" {
					Set cafile=CAFile
					$$$SOAPLogSecurity("    Signature Verify: user specified CAFile="_cafile)
				} ElseIf $classname(credentials)="%SYS.X509Credentials",credentials.CAFile'="" {
					Set cafile=##class(%File).NormalizeFilename(credentials.CAFile,##class(%File).ManagerDirectory())
					If $$$CheckSOAPLogSecurity {
						Set file=cafile
						If $$$CheckSOAPTestMode {
							Set file=$tr(file,"\","/")
							Set file="internal/"_$piece(file,"/internal/",2)
						}
					}
					$$$SOAPLogSecurity("    Signature Verify: non-default CAFile="_file)
				} Else {
					Set cafile=$zu(12)_"cache.cer"
				}
			}
			Set crlfile=$zu(12)_"cache.crl"
			If $zu(140,4,crlfile)'=0 Set crlfile=""
		
			// Validate the signature.
			Try { 
				$$$SOAPLogSecurity("    Signature Verify"_$select(bitlength=160:"",1:" with algorithm "_signedInfo.SignatureMethod.Algorithm))
				;;if $$$CheckSOAPLogVerbose {
				;;	$$$SOAPLogSecurity("       bitlength="_bitlength)
				;;	$$$SOAPLogSecurity("       signatureText="_signatureText)
				;;	$$$SOAPLogSecurity("       SignatureValue="_$system.Encryption.Base64Encode(..SignatureValue))
				;;	$$$SOAPLogSecurity("       certificate="_$system.Encryption.Base64Encode(certificate))
				;;	$$$SOAPLogSecurity("       cafile="_cafile)
				;;}
				If 'ignoreCAFile {
					Set ret=$System.Encryption.RSASHAVerify(bitlength,signatureText,..SignatureValue,certificate,cafile,crlfile)
				} else {
					Set ret=$System.Encryption.RSASHAVerify(bitlength,signatureText,..SignatureValue,certificate)
				}
				If 'ret {
					$$$SOAPLogSecurity("    Signature verification failed: "_$System.Encryption.RSAGetLastError())
					Set error="FailedCheck"
				}
			} Catch {
				$$$SOAPLogSecurity("    Signature verify internal failure")
				Set error="FailedCheck"
			}
			If error="" {
				$$$SOAPLogSecurity("    SignatureValue matched")
				Set IDsValidated(uri)=1
				Set ..X509Credentials=keyInfo.X509Credentials
			} Else {
				If 'ignoreCAFile {
					If '##class(%File).Exists(cafile) {
						$$$SOAPLogSecurity("    cache.cer not found")
					}
				}
			}
		} Else {
			// Get RSAKeyValue
			Set keyValue=keyInfo.X509Credentials
			// Validate the signature.
			Try {
				$$$SOAPLogSecurity("    Signature Verify with RSAKeyValue")
				If '$System.Encryption.RSASHAVerify(bitlength,signatureText,..SignatureValue,keyValue.Modulus,keyValue.Exponent) {
					$$$SOAPLogSecurity("    Signature verification with RSAKeyValue failed: "_$System.Encryption.RSAGetLastError())
					Set error="FailedCheck"
				}
			} Catch {
				$$$SOAPLogSecurity("    Signature verify with RSAKeyValue internal failure")
				Set error="FailedCheck"
			}
			If error="" {
				Set ..X509Credentials=keyInfo.X509Credentials
				$$$SOAPLogSecurity("    SignatureValue matched with RSAKeyValue")
			}
		}
	} ElseIf $case(keyInfo.KeyType,$$$SOAPWSEncryptedKey:1,$$$SOAPWSEncryptedKeySHA1:1,$$$SOAPWSDerivedKey:1,$$$SOAPWSSCToken:1,$$$SOAPWSTSecretSymKey:1,:0) {
		Set error=keyInfo.ValidateKeyElement(service,.key,1)
		If error'="" Quit error
		
		If key="" {
			$$$SOAPLogSecurity("    No key specified for signature.")
			Quit invalid
		}
	
		Set bitlength=signedInfo.SignatureMethod.HMACOutputLength
		$$$SOAPLogSecurity("    Validate with algorithm "_signedInfo.SignatureMethod.Algorithm)
		try {
			Set hmacbitlength=$case(signedInfo.SignatureMethod.Algorithm,$$$SOAPWShmacsha1:160,$$$SOAPWShmacsha256:256,$$$SOAPWShmacsha384:384,$$$SOAPWShmacsha512:512,:0)
			Set value=$system.Encryption.HMACSHA(hmacbitlength,signatureText,key)
			If bitlength'="" {
				Set value=$extract(value,1,bitlength/8)
			}
			If ..SignatureValue'=value {
				$$$SOAPLogSecurity("    Signature verification with hmac-sha1 failed.")
				Set error="FailedCheck"
			}
		} catch ex {
			$$$SOAPLogSecurity("    Signing failed due to internal failure: "_ex.DisplayString())
			Set error=invalid
		}
		If error="" {
			Set ..X509Credentials=keyInfo.X509Credentials
			$$$SOAPLogSecurity("    SignatureValue matched with hmac-sha1")
		}
	
	} Else {
		$$$SOAPLogSecurity("    signature unexpected TokenType="_keyInfo.KeyType)
		Set error=unsupported
	}
	
	$$$SOAPTimer1(WSvalidate,$select(($isobject(service) && service.%Extends("%SOAP.WebClient")):"c",1:"s")_"WSvalidate")
	If error="" $$$SOAPLogSecurity("    Validated.")
	Quit error
]]></Implementation>
</Method>

<Method name="GetNodeById">
<Description>
Get node based on id from URI.  Return nodeId</Description>
<Internal>1</Internal>
<FormalSpec>uri:%String,document:%XML.Document,node:%XML.Node</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set nodeId=document.GetNodeById(uri)
	// If reference to SAML assertion in enveloped-signature or SecurityToken\Reference,
	/// also check for SAML Assertion ID attribute
	If nodeId="" {
		Set node.NodeId=document.GetDocumentNode()  ; Envelope
		If node.MoveToFirstChild(1) && ; soap:Header
		   (node.LocalName="Header") && 
		   node.MoveToFirstChild(1) { ; first header
			Do {
				If (node.LocalName="Security") && 
				   (node.Namespace=$$$SOAPWSSEns) && 
				   node.MoveToFirstChild(1) {  ; First security element
					Do {
						If (node.LocalName="Assertion") && 
						   (node.Namespace=$$$SAMLns) &&
						   (node.GetAttributeValue("ID")=uri) {
							Set nodeId=node.NodeId
						}
					} While node.MoveToNextSibling(1)
				} ElseIf (node.LocalName="Assertion") && 
						 (node.Namespace=$$$SAMLns) &&
						 (node.GetAttributeValue("ID")=uri) {
					Set nodeId=node.NodeId
				}
			} While node.MoveToNextSibling(1)
		}
	}
	
	If nodeId="" {
		// possibly SAMLP Assertion
		Set node.NodeId=document.GetDocumentNode()  ; Envelope
		
		If ((node.LocalName="Response") && node.MoveToFirstChild(1)) {
			Do {
				If (node.LocalName="Security") && 
				   (node.Namespace=$$$SOAPWSSEns) && 
				   node.MoveToFirstChild(1) {  ; First security element
					Do {
						If (node.LocalName="Assertion") && 
						   (node.Namespace=$$$SAMLns) &&
						   (node.GetAttributeValue("ID")=uri) {
							Set nodeId=node.NodeId
						}
					} While node.MoveToNextSibling(1)
				} ElseIf (node.LocalName="Assertion") && 
						 (node.Namespace=$$$SAMLns) &&
						 (node.GetAttributeValue("ID")=uri) {
					Set nodeId=node.NodeId
				}
			} While node.MoveToNextSibling(1)
		} 
		
		// possibly SAMLP AuthnRequest
		
		Set node.NodeId=document.GetDocumentNode()  ; Envelope
		
		if (node.LocalName="AuthnRequest") && 
		   (node.Namespace="urn:oasis:names:tc:SAML:2.0:protocol") &&
		   (node.GetAttributeValue("ID")=uri) {
			Set nodeId=node.NodeId
		}
	}
	
	quit nodeId
]]></Implementation>
</Method>
</Class>


<Class name="EF.ISC.ZEN.Auxiliary.jsonProvider">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ISC.ZEN.Auxiliary.jsonProvider.CLS/EV.4
;vc; Component: CLS.EF.ISC.ZEN.Auxiliary.jsonProvider
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ISC.ZEN.Auxiliary.jsonProvider.CLS/EV.4</td><td>CLS.EF.ISC.ZEN.Auxiliary.jsonProvider</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>%ZEN.Auxiliary.jsonProvider</Super>
<TimeChanged>63846,61887</TimeChanged>
<TimeCreated>63596,39051.771182</TimeCreated>

<Method name="%DrawJSON">
<Description>
Draw JSON output for the target object.</Description>
<Internal>1</Internal>
<FormalSpec><![CDATA[&outputObject=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		#; convert parameters to local array
		Set key = ..parameters.Next("")
		While (key'="") {
			Set value = ..parameters.GetAt(key).value
			Set tParms(key) = $S(..%containerClass="":$$$ZENVAL(value),1:value)
			Set key = ..parameters.Next(key)
		}

		#; draw js to create the graph of objects
		If (..OnRenderJSON '= "") {
			// Let callback do all the work
			Set tSC = ..%OnRenderJSON(.tParms)
			If $$$ISERR(tSC) {
				Do ..efWriteJSONOutput("null",.outputObject)
			}
		}
		ElseIf (..OnGetArray '= "") {
			// get target object instance and dispatch to it
			Set tSC = ..%OnGetArray(.tParms,.tMetaData,.tData)
			If ($$$ISOK(tSC)&&$D(tMetaData)&&$D(tData)) {
				// write out array in JSON format
				Set tSC = ..%ArrayToJSON(.tMetaData,.tData,..%Format,.outputObject)
			}
			Else {
				Do ..efWriteJSONOutput("null",.outputObject)
			}
		}
		ElseIf (..OnGetTargetObject '= "") {
			// get target object instance and dispatch to it
			Set tSC = ..%OnGetTargetObject(.tParms,.tObject)
			If ($$$ISOK(tSC)&&$IsObject(tObject)) {
				If (..targetClass="") {
					Set ..targetClass = $classname(tObject)
				}

				// write out object in JSON format
				Set tSC = ..%ObjectToJSON(tObject,,,..%Format,.outputObject)
			}
			Else {
				Do ..efWriteJSONOutput("null",.outputObject)
			}
		}
		ElseIf ($IsObject(..%TargetObject)) {
			// write out object in JSON format
			Set tSC = ..%ObjectToJSON(..%TargetObject,,,..%Format,.outputObject)
		}
		ElseIf (..documentId'="") {
			// JMD1154
			Set tSC = ##class(%ZEN.DataModel.DocumentUtils).%GetDocument(..documentId,.tParms,.tObject)
			If ($$$ISOK(tSC)&&$IsObject(tObject)) {
				// always set to "object" in this case
				Set ..contentType = "object"
				If (..targetClass="") {
					Set ..targetClass = $classname(tObject)
				}
				// write out object in JSON format
				Set tSC = ..%ObjectToJSON(tObject,,,..%Format,.outputObject)
			}
			Else {
				Do ..efWriteJSONOutput("null",.outputObject)
			}
		}
		Else {
			Do ..efWriteJSONOutput("null",.outputObject)
		}
	}
	Catch ex {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="%ObjectToJSON">
<Description><![CDATA[
Write out the contents of object instance <var>pObject</var> to
the current device using JSON notation.
<var>pFormat</var> is a flags string to control output formatting options.</br>
The following character option codes are supported:<br/>
1-9 : indent with this number of spaces (4 is the default with the 'i' format specifier)<br/>
a - output null arrays/objects<br/>
b - line break before opening { of objects<br/>
c - output the Cach&eacute;-specific "_class" and "_id" properties<br/>
d - output Cach&eacute; numeric properties that have value "" as null<br/>
e - output empty object properties<br/>
i - indent with 4 spaces unless 't' or 1-9<br/>
l - output empty lists<br/>
n - newline (lf)<br/>
o - output empty arrays/objects<br/>
q - output numeric values unquoted even when they come from a non-numeric property<br/>
s - use strict JSON output - <strong>NOTE:</strong> special care should be taken when sending data to a browser, as using this flag 
may expose you to cross site scripting (XSS) vulnerabilities if the data is sent inside <code>&lt;script&gt;</code> tags. Zen uses
this technique extensively, so this flag should <strong>NOT</strong> be specified for jsonProviders in Zen pages.<br/>
t - indent with tab character<br/>
u - output pre-converted to UTF-8 instead of in native internal format<br/>
w - Windows-style cr/lf newline<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pObject:%RegisteredObject,&pVisited,pLevel:%Integer=0,pFormat:%String="aceloqtw",&outputObject=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#define efPropGetJsonName(%p) $SELECT($LENGTH($GET(jsonParams("p",%p,"jsonName")))>0:jsonParams("p",%p,"jsonName"),1:%p)
	
	Set tSC = $$$OK
	Try {
		If ((pObject="")||'$IsObject(pObject)||($D(pVisited(pObject)))) {
			// cycle
			if (pFormat["a"||'pLevel) {
				Do ..efWriteJSONOutput("null",.outputObject)
			}
			Quit
		}
		Set pVisited(pObject) = ""
		Set tClass = $classname(pObject)
		If (tClass = "%ZEN.proxyObject") {
			Set tSC = pObject.%ToJSON(pLevel,pFormat)
			Quit
		}
		
		Kill jsonParams
		Do ..efGetJSONParams(tClass,.jsonParams)
		
		Set tLF=$S(pFormat["w":$C(13,10), pFormat["n":$C(10), 1:"")
		If pFormat'=$TR(pFormat,"it123456789") { Set tN=+$ZStrip(pFormat,"<E'N"), $P(tTab,$S(pFormat["t":$C(9),1:" "),1+$S(tN:tN,pFormat["t":1,1:4))="" }
		Else { Set tTab="" }
		Set tIncludeWhitespace = (tLF_tTab'="")

		If (pObject.%Extends("%Collection.AbstractList")) {
			Set tList = pObject
			Set tCount = tList.Count()
			If (pFormat["l" || tCount) {
				Do ..efWriteJSONOutput("[",.outputObject)
				For n = 1:1:tCount {
					Set tValue = tList.GetAt(n)
					if (n>1) {
						Do ..efWriteJSONOutput(",",.outputObject)
					}
					If $IsObject(tValue) {
						If (tValue.%IsA("%ZEN.proxyObject")) {
							Set tSC = tValue.%ToJSON(pLevel+1,pFormat)
							Quit:$$$ISERR(tSC)
						} Else {
							Set tSC = ..%ObjectToJSON(tValue,.pVisited, pLevel+1, pFormat,.outputObject)
							Quit:$$$ISERR(tSC)
						}
					} Else {
						Do ..efWriteJSONOutput($$$ZENJSONVALUE(tValue,pFormat),.outputObject)
					}
				}
				Quit:$$$ISERR(tSC)
				If tIncludeWhitespace Set tIndent="", $P(tIndent,tTab,pLevel+1)="" Do ..efWriteJSONOutput(tLF_tIndent,.outputObject)
				Do ..efWriteJSONOutput("]",.outputObject)
			}
			Quit
		}
		ElseIf (pObject.%Extends("%Stream.Object")) {
			Do ..efWriteJSONOutput("""",.outputObject)
			#; Initialize stream read length, if needed
			If '$data(tStreamMaxReadLen) Set tStreamMaxReadLen = ($$$MaxLocalLength\2)
			Do pObject.Rewind()
			While 'pObject.AtEnd {
				Do ..efWriteJSONOutput($$$ZENJSONESCAPE(pObject.Read(tStreamMaxReadLen),pFormat),.outputObject)
			}
			Do ..efWriteJSONOutput("""",.outputObject)
			Quit
		}

		If pFormat["o" || 'pLevel {
			Set tPropCount = ""
			If (tIncludeWhitespace && pLevel) Set tIndent="", $P(tIndent,tTab,pLevel+1)="" Do ..efWriteJSONOutput($S(pFormat["b":tLF_tIndent,1:" "),.outputObject)
			Do ..efWriteJSONOutput("{",.outputObject)
		} Else {
			Set tPropCount = 0
		}
		If pFormat["c" {
			// add class name to model
			Do nextProp
			Do ..efWriteJSONOutput($$$ZENJSONPAIR("_class",tClass,pFormat),.outputObject)
			// add id for persistent objects
			If (pObject.%IsA("%Library.Persistent")) {
				Do nextProp
				Set tID = pObject.%Id()
				Do ..efWriteJSONOutput($$$ZENJSONPAIR("_id",tID,pFormat),.outputObject)
			}
		}

		#; Special treatment for top-level array: output no matter what
		If pObject.%Extends("%Collection.AbstractArray") {
			#; write out (eligible) array elements/properties
			If pObject.%Extends("%Collection.AbstractArrayOfObj") {
				#; object elements
				Set tKey=""  For { Set tValue = pObject.GetNext(.tKey)  Quit:""=tKey
					If $IsObject(tValue) {
						If tValue.%Extends("%Stream.Object")||tValue.%Extends("%IO.I.Stream") {
							Do tValue.Rewind()
							If (pFormat["e" || tValue.Size()) {
								Do nextProp
								Do ..efWriteJSONOutput($$$ZENJSONPROP(tKey,pFormat)_":""",.outputObject)
								#; Initialize stream read length, if needed
								If '$data(tStreamMaxReadLen) Set tStreamMaxReadLen = ($$$MaxLocalLength\2)
								#; Rewind non-%IO streams if needed
								If tValue.AtEnd && tValue.%Extends("%Stream.Object") Do tValue.Rewind()
								While 'tValue.AtEnd {
									Do ..efWriteJSONOutput($$$ZENJSONESCAPE(tValue.Read(tStreamMaxReadLen),pFormat),.outputObject)
								}
								Do ..efWriteJSONOutput("""",.outputObject)
							}
						} ElseIf pFormat["o" || ..hasObjContent(tValue,.pVisited,pFormat) {
							Do nextProp
							Do ..efWriteJSONOutput($$$ZENJSONPROP(tKey,pFormat)_":",.outputObject)
							Set tSC = ..%ObjectToJSON(tValue,.pVisited, pLevel+1,pFormat,.outputObject)
							Quit:$$$ISERR(tSC)
						}
					} ElseIf pFormat["a" {
						Do nextProp
						Do ..efWriteJSONOutput($$$ZENJSONPROP(tKey,pFormat)_":null",.outputObject)
					}
				} ; end tKey object array loop
			} Else {
				#; scalar array elements
				Set tKey=""  For { Set tValue = pObject.GetNext(.tKey)  Quit:""=tKey
					If (pFormat["e") || (tValue'="") {
						Do nextProp
						Do ..efWriteJSONOutput($$$ZENJSONPAIR(tKey,tValue,pFormat),.outputObject)
					}
				} ; end tKey scalar array loop
			}
			If tPropCount'=0 {
				#; either we wrote at least one property or we wrote an empty '{' due to "o" mode or level zero
				If tIncludeWhitespace Set tIndent="", $P(tIndent,tTab,pLevel+1)="" Do ..efWriteJSONOutput(tLF_tIndent,.outputObject)
				Do ..efWriteJSONOutput("}",.outputObject)
			}
			Quit
		}
		#; else: main object is not a collection

		#; loop over properties using class meta-data
		Do ..getOrderedProps(tClass,.tProps)
		Set tSeq="" For { Set tSeq=$O(tProps(tSeq),1,tPropName)  Quit:""=tSeq

			Set tPrivate = +$$$comMemberKeyGet(tClass,$$$cCLASSproperty,tPropName,$$$cPROPprivate)
			Continue:tPrivate||(tPropName["%")

			Set tType = $$$comMemberKeyGet(tClass,$$$cCLASSproperty,tPropName,$$$cPROPtype)
			Set tClsType = $$$getClassType(tType)
			Set tClientType = $$$comClassKeyGet(tType,$$$cCLASSclientdatatype)
			Set tCollection = $$$comMemberKeyGet(tClass,$$$cCLASSproperty,tPropName,$$$cPROPcollection)
			If (tClsType '= "datatype") {
				#; Check for the case where we have a property declared as a %ListOf**
				If ($classmethod(tType,"%IsA","%Collection.AbstractList")) {
					Set tCollection = "list"
					If ($classmethod(tType,"%IsA","%Collection.AbstractListOfDT")) {
						#; Reset object information for %ListOfDataTypes
						Set tClientType = "VARCHAR"
						Set tDataType = ""
					}
				}
			} Else {
				Set tDataType=$Case(tClientType, "BOOLEAN":"b", "INTEGER":"n","NUMERIC":"n","FLOAT":"n", "TIMESTAMP":"u", "DATE":"d", "TIME":"t", :"")
			}
			Set tMultiDim = 0
			If (tCollection="array") {
				Set tCardinality = $$$comMemberKeyGet(tClass,$$$cCLASSproperty,tPropName,$$$cPROPcardinality)
				Set tInverse = $$$comMemberKeyGet(tClass,$$$cCLASSproperty,tPropName,$$$cPROPinverse)
				If ((tCardinality'="")&&(tInverse'="")) {
					// treat relationship as list
					Set tCollection = "list"
				}
			} ElseIf (tCollection = "") {
				Set tMultiDim = +$$$comMemberKeyGet(tClass,$$$cCLASSproperty,tPropName,$$$cPROPmultidimensional)
			}
			Continue:tMultiDim

			Set tValue = $property(pObject,tPropName)
			#; If the value is "" or $c(0) and we are NOT including empty properties, skip if we are not a collection, object or stream
			If (((tValue = "") || (tValue = $c(0))) && (pFormat'["e") && (tCollection = "") && $Case(tClientType, "HANDLE": 0, "CHARACTERSTREAM": 0, "BINARYSTREAM": 0, :1)) {
				Continue
			}
			// Write the property if not inhibited
			If (tCollection="list") {
				// list collection
				If '$IsObject(tValue) {
					Set tCount = 0
				} Else {
					Set tList = tValue
					Set tCount = tList.Count()
				}
				If (pFormat["l" || tCount) {
					Do nextProp
					Do ..efWriteJSONOutput($$$ZENJSONPROP(tPropName,pFormat)_":[",.outputObject)
					For n = 1:1:tCount {
						Set tValue = tList.GetAt(n)
						if (n>1) {
							Do ..efWriteJSONOutput(",",.outputObject)
						}
						If (tClientType = "HANDLE") {
							#; object items
							If $IsObject(tValue) {
								Set tSC = ..%ObjectToJSON(tValue,.pVisited, pLevel+1, pFormat,.outputObject)
								Quit:$$$ISERR(tSC)
							} Else {
								Do ..efWriteJSONOutput("null",.outputObject) ; not conditional because it has to hold the place in the list
							}
						} Else {
							#; scalar list item ; converts $List to empty string!
							Do ..efWriteJSONOutput($S(tDataType="b":$S(tValue:"true",1:"false")
									, ((tDataType="n")||(pFormat["q"))&&$$$ZENJSISNUM(tValue):$$$ZENJSNUM(tValue)
									, (tDataType="n")&&(tValue="")&&(pFormat["d"):"null"
									, ($C(0)=tValue)||$ListValid(tValue):""""""
									//, "dtu"[tDataType:$S(pFormat["u":$$$ZENJSUSTR(..formatDateTime(tValue,tType,tDataType,pFormat)), 1:$$$ZENJSSTR(..formatDateTime(tValue,tType,tDataType,pFormat)))
									, 1:$$$ZENJSONSTR(tValue,pFormat))
								,.outputObject)
						}
					}
					Do ..efWriteJSONOutput("]",.outputObject)
				}
			}
			ElseIf (tCollection="array") {
				// array collection (object on client)
				If '$IsObject(tValue) {
					Set tKey = ""
				} Else {
					Set tArray = tValue
					Set tKey = tArray.Next("")
					If pFormat'["o" && (""'=tKey) {
						#; look ahead to see if there is any content
						Set tHasArrayContent=0, k=tKey  While (k '= "") { Set tValue = tArray.GetAt(k)
							If (tClientType = "HANDLE") {
								If $IsObject(tValue) {
									If ..hasObjContent(tValue,.pVisited,pFormat) Set tHasArrayContent=1  Quit
								} ElseIf (pFormat["a") {
									Set tHasArrayContent=1  Quit
								}
							} Else {
								If $S(tDataType="b":1
									, $C(0)=tValue||$ListValid(tValue):pFormat["e"
									//, "dtu"[tDataType:$S(pFormat["u":$$$ZENJSUSTR(..formatDateTime(tValue,tType,tDataType,pFormat)), 1:$$$ZENJSSTR(..formatDateTime(tValue,tType,tDataType,pFormat)))
									, 1:""'=tValue||(pFormat["e")) {
									Set tHasArrayContent=1  Quit
								}
							}
							Set k = tArray.Next(k)
						}
					}
				}
				If (pFormat["o" || (""'=tKey && tHasArrayContent)) {
					Do nextProp
					Do ..efWriteJSONOutput($$$ZENJSONPROP(tPropName,pFormat)_": {",.outputObject)
					Set n = 0
					While (tKey '= "") { Set tValue = tArray.GetAt(tKey)
						If (tClientType = "HANDLE") {
							#; object elements
							If $IsObject(tValue) {
								Set n = n+1
								Do ..efWriteJSONOutput($S(n>1:",",1:"")_$$$ZENJSONPROP(tKey,pFormat)_":",.outputObject)
								Set tSC = ..%ObjectToJSON(tValue,.pVisited, pLevel+1, pFormat,.outputObject)
								Quit:$$$ISERR(tSC)
							} ElseIf (pFormat["a") {
								Set n = n+1
								Do ..efWriteJSONOutput($S(n>1:",",1:"")_$$$ZENJSONPROP(tKey,pFormat)_":null",.outputObject)
							}
						} Else {
							#; scalar array item ; converts $List to empty string!
							Set tStr = $S(tDataType="b":$S(tValue:"true",1:"false")
								, ((tDataType="n")||(pFormat["q"))&&$$$ZENJSISNUM(tValue):$$$ZENJSNUM(tValue)
								, (tDataType="n")&&(tValue="")&&(pFormat["d"):"null"
								, ($C(0)=tValue)||$ListValid(tValue):""""""
								//, "dtu"[tDataType:$S(pFormat["u":$$$ZENJSUSTR(..formatDateTime(tValue,tType,tDataType,pFormat)), 1:$$$ZENJSSTR(..formatDateTime(tValue,tType,tDataType,pFormat)))
								, 1:$$$ZENJSONSTR(tValue,pFormat))
							If (pFormat["e") || (tStr'="""""") {
								Set n = n+1
								Do ..efWriteJSONOutput($S(n>1:",",1:"")_$$$ZENJSONPROP(tKey,pFormat)_":"_tStr,.outputObject)
							}
						}
						Set tKey = tArray.Next(tKey)
					}
					Do ..efWriteJSONOutput("}",.outputObject)
				}
			}
			ElseIf (tClientType = "HANDLE") {
				// object
				If $IsObject(tValue) {
					If ..hasObjContent(tValue,.pVisited,pFormat) || (pFormat["o")  {
						Do nextProp
						Do ..efWriteJSONOutput($$$ZENJSONPROP(tPropName,pFormat)_":",.outputObject)
						Set tSC = ..%ObjectToJSON(tValue,.pVisited, pLevel+1, pFormat,.outputObject)
						Quit:$$$ISERR(tSC)
					}
				} ElseIf (pFormat["a") {
					Do nextProp
					Do ..efWriteJSONOutput($$$ZENJSONPROP(tPropName,pFormat)_":null",.outputObject)
				}
			}
			ElseIf (tClientType = "CHARACTERSTREAM") {
				If $IsObject(tValue) {
					If tValue.Size || (pFormat["e") {
						Do nextProp
						Do ..efWriteJSONOutput($$$ZENJSONPROP(tPropName,pFormat)_":""",.outputObject)
						If tValue.Size {
							#; Initialize stream read length, if needed
							If '$data(tStreamMaxReadLen) Set tStreamMaxReadLen = ($$$MaxLocalLength\2)
							Do tValue.Rewind()
							While 'tValue.AtEnd {
								Do ..efWriteJSONOutput($$$ZENJSONESCAPE(tValue.Read(tStreamMaxReadLen),pFormat),.outputObject)
							}
						}
						Do ..efWriteJSONOutput("""",.outputObject)
					}
				} ElseIf (pFormat["a") {
					Do nextProp
					Do ..efWriteJSONOutput($$$ZENJSONPROP(tPropName,pFormat)_":null",.outputObject)
				}
			}
			ElseIf (tClientType = "BINARYSTREAM") {
				Do nextProp
				Do ..efWriteJSONOutput($$$ZENJSONPROP(tPropName,pFormat)_":null",.outputObject)
			}
			Else {
				#; scalar item ; converts $List to empty string!
				Set tStr = $S(($GET(jsonParams("p",tPropName,"outputEmptyStringAsJSnull")))&&(tValue=""):"null"
					, tDataType="b":$S(tValue:"true",1:"false")
					, ((tDataType="n")||(pFormat["q"))&&$$$ZENJSISNUM(tValue):$$$ZENJSNUM(tValue)
					, (tDataType="n")&&(tValue="")&&(pFormat["d"):"null"
					, ($C(0)=tValue)||$ListValid(tValue):""""""
					//, "dtu"[tDataType:$S(pFormat["u":$$$ZENJSUSTR(..formatDateTime(tValue,tType,tDataType,pFormat)), 1:$$$ZENJSSTR(..formatDateTime(tValue,tType,tDataType,pFormat)))
					, 1:$$$ZENJSONSTR(tValue,pFormat))

				If (pFormat["e") || (tStr'="""""") {
					Do nextProp
					Do ..efWriteJSONOutput($$$ZENJSONPROP($$$efPropGetJsonName(tPropName),pFormat)_":"_tStr,.outputObject)
				}
			}
		} ; end properties loop
		Quit:$$$ISERR(tSC)

		If tPropCount'=0 {
			#; either we wrote at least one property or we wrote an empty '{' due to "o" mode or level zero
			If tIncludeWhitespace Set tIndent="", $P(tIndent,tTab,pLevel+1)="" Do ..efWriteJSONOutput(tLF_tIndent,.outputObject)
			Do ..efWriteJSONOutput("}",.outputObject)
		}
	}
	Catch ex {
		Set tSC = ex.AsStatus()
	}
	Quit tSC

nextProp
	If tPropCount=0 {
		If (tIncludeWhitespace && pLevel) Set tIndent="", $P(tIndent,tTab,pLevel+1)="" Do ..efWriteJSONOutput($S(pFormat["b":tLF_tIndent,1:" "),.outputObject)
		Do ..efWriteJSONOutput("{",.outputObject)
	} ElseIf tPropCount {
		Do ..efWriteJSONOutput(",",.outputObject)
	} ; else tPropCount="" means we already did the starting '{' due to "o" mode
	Set tPropCount = tPropCount + 1
	If tIncludeWhitespace Set tIndent="", $P(tIndent,tTab,pLevel+2)="" Do ..efWriteJSONOutput(tLF_tIndent,.outputObject)
	Quit
]]></Implementation>
</Method>

<Method name="%ArrayToJSON">
<Description><![CDATA[
Write out the contents of the local array <var>pData</var> to the current device using JSON notation
<var>pMetaData</var> is a $List containing the names of the properties
of the objects in the order in which they will appear.<br/>
<var>pData</var> is an array containing the data. Each node in the array
should be a $List containing values for properties. This should match the 
meta data provided in <var>pMetaData</var>. The array of data can use any subscript
value its wants. It is possible to define a hierarchical array. In this case,
children nodes are placed within a parent collection called <var>children</var>.<br/>
<var>pFormat</var> is a flags string that controls output formatting options.<br/>
The following character option codes are supported:<br/>
1-9 : indent with this number of spaces (4 is the default with the 'i' format specifier)<br/>
b - line break before opening { of objects<br/>
i - indent with 4 spaces unless 't' or 1-9<br/>
n - newline (lf)<br/>
s - use strict JSON output - <strong>NOTE:</strong> special care should be taken when sending data to a browser, as using this flag 
may expose you to cross site scripting (XSS) vulnerabilities if the data is sent inside <code>&lt;script&gt;</code> tags. Zen uses
this technique extensively, so this flag should <strong>NOT</strong> be specified for jsonProviders in Zen pages.<br/>
t - indent with tab character<br/>
u - output pre-converted to UTF-8 instead of in native internal format<br/>
w - Windows-style cr/lf newline<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pMetaData,&pData,pFormat:%String="tw",&outputObject=""]]></FormalSpec>
<PublicList>pData</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		If '$D(pData) {
			Do ..efWriteJSONOutput("null",.outputObject)
			Quit
		}
		Set tLevel = 0
		Set tChildCount(tLevel) = 0
		Set tPropCount(tLevel) = 0

		Set tLF=$S(pFormat["w":$C(13,10), pFormat["n":$C(10), 1:"")
		If pFormat'=$TR(pFormat,"it123456789") { Set tN=+$ZStrip(pFormat,"<E'N"), $P(tTab,$S(pFormat["t":$C(9),1:" "),1+$S(tN:tN,pFormat["t":1,1:4))="" }
		Else { Set tTab="" }
		Set tIncludeWhitespace = (tLF_tTab'="")

		Do ..efWriteJSONOutput("{",.outputObject)

		// process top node
		Set tNode = $G(pData)
		If $ListValid(tNode) {
			For n = 1:1:$LL(tNode) {
				Set tVal = $LG(tNode,n,$C(0))
				If (tVal'=$C(0)) {
					if (tPropCount(tLevel)>0) {
						Do ..efWriteJSONOutput(",",.outputObject)
					}
					If tIncludeWhitespace Set tIndent="", $P(tIndent,tTab,tLevel+1)="" Do ..efWriteJSONOutput(tLF_tIndent,.outputObject)
					Do ..efWriteJSONOutput($$$ZENJSONPAIR($LG(pMetaData,n,"unknown"),tVal,pFormat),.outputObject)
					Set tPropCount(tLevel) = tPropCount(tLevel) + 1
				}
			}
		}
		// now process children of array
		Set tKey = $Query(pData)
		If (tKey '= "") {
			if ($G(tPropCount(tLevel))>0) {
				Do ..efWriteJSONOutput(",",.outputObject)
			}
			If tIncludeWhitespace Set tIndent="", $P(tIndent,tTab,tLevel+1)="" Do ..efWriteJSONOutput(tLF_tIndent,.outputObject)
			Do ..efWriteJSONOutput("""children"":[",.outputObject)
			Set tLevel = tLevel + 1
			Set tChildCount(tLevel) = 0
			Set tPropCount(tLevel) = 0
		}

		// loop over array
		While (tKey '= "") {
			Set tNewLevel = $ql(tKey)
			While (tLevel < tNewLevel) {
				If (tIncludeWhitespace && tLevel) Set tIndent="", $P(tIndent,tTab,tLevel+1)="" Do ..efWriteJSONOutput($S(pFormat["b":tLF_tIndent,1:" "),.outputObject)
				If ($G(tPropCount(tLevel))>0) {
					Do ..efWriteJSONOutput(",",.outputObject)
				} Else {
					Do ..efWriteJSONOutput("{",.outputObject)
				}
				If tIncludeWhitespace Set tIndent="", $P(tIndent,tTab,tLevel+1)="" Do ..efWriteJSONOutput(tLF_tIndent,.outputObject)
				Do ..efWriteJSONOutput("""children"":[",.outputObject)
				Set tLevel = tLevel + 1
				Set tChildCount(tLevel) = 0
			}
			While (tLevel > tNewLevel) {
				If tIncludeWhitespace Set tIndent="", $P(tIndent,tTab,tLevel+1)="" Do ..efWriteJSONOutput(tLF_tIndent,.outputObject)
				Do ..efWriteJSONOutput("}",.outputObject)
				Kill tPropCount(tLevel),tChildCount(tLevel)
				Set tLevel = tLevel - 1
				If tIncludeWhitespace Set tIndent="", $P(tIndent,tTab,tLevel+1)="" Do ..efWriteJSONOutput(tLF_tIndent,.outputObject)
				Do ..efWriteJSONOutput("]",.outputObject)
			}

			If ($G(tPropCount(tLevel))>0) {
				If tIncludeWhitespace Set tIndent="", $P(tIndent,tTab,tLevel+1)="" Do ..efWriteJSONOutput(tLF_tIndent,.outputObject)
				Do ..efWriteJSONOutput("}"_$S($G(tChildCount(tLevel))>0:",",1:""),.outputObject)
			}
			Set tNode = $G(@tKey)
			Set tChildCount(tLevel) = tChildCount(tLevel) + 1
			If tIncludeWhitespace Set tIndent="", $P(tIndent,tTab,tLevel+1)="" Do ..efWriteJSONOutput(tLF_tIndent,.outputObject)
			Do ..efWriteJSONOutput("{",.outputObject)
			Set tPropCount(tLevel) = 0
			If (tNode = "") {
				// no data for node, insert empty node
				If tIncludeWhitespace Set tIndent="", $P(tIndent,tTab,tLevel+1)="" Do ..efWriteJSONOutput(tLF_tIndent,.outputObject)
				Do ..efWriteJSONOutput("""_isEmpty"":true",.outputObject)
				Set tPropCount(tLevel) = tPropCount(tLevel) + 1
			} Else {
				For n = 1:1:$LL(tNode) {
					Set tVal = $LG(tNode,n,$C(0))
					If (tVal'=$C(0)) {
						if (tPropCount(tLevel)>0) {
							Do ..efWriteJSONOutput(",",.outputObject)
						}
						If tIncludeWhitespace Set tIndent="", $P(tIndent,tTab,tLevel+1)="" Do ..efWriteJSONOutput(tLF_tIndent,.outputObject)
						Do ..efWriteJSONOutput($$$ZENJSONPAIR($LG(pMetaData,n,"unknown"),tVal,pFormat),.outputObject)
						Set tPropCount(tLevel) = tPropCount(tLevel) + 1
					}
				}
			}
			// get next item
			Set tKey = $Query(@tKey)
		}
		// finish off
		While (tLevel >= 0) {
			If tIncludeWhitespace Set tIndent="", $P(tIndent,tTab,tLevel+1)="" Do ..efWriteJSONOutput(tLF_tIndent,.outputObject)
			Do ..efWriteJSONOutput("}",.outputObject)
			If tIncludeWhitespace Set tIndent="", $P(tIndent,tTab,tLevel)="" Do ..efWriteJSONOutput(tLF_tIndent,.outputObject)
			if (tLevel>0) {
				Do ..efWriteJSONOutput("]",.outputObject)
			}
			Set tLevel = tLevel - 1
		}
	}
	Catch ex {
		Set tSC = ex.AsStatus()
		Do ..efWriteJSONOutput("null",.outputObject)
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="%ParseJSON">
<Description><![CDATA[
Parse the string <var>pJSON</var> containing JSON notation
and convert it to an object instance <var>pObject</var>.<br/>
<var>pJSON</var> could also be a character stream.<br/>
<var>pClass</var> is the name of the class to create to hold
the instantiated object. This class must match the data within the JSON
notation. If <var>pClass</var> is empty (""), then an instance
of the generic class <class>%ZEN.proxyObject</class> will be created.
<var>pCharsProcessed</var> and <var>pLevel</var> are used
internally and do not have to be supplied.
<var>pIgnoreUnknownProps</var> controls whether we will
ignore errors when we process a property that isn't expected. The default 
behaviour is to treat this as an error.<br/>
Note that this method assumes well-formed JSON notation: it does
not perform complete error checking.]]></Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pJSON:%String,pClass:%String="",*pObject:%RegisteredObject,*pCharsProcessed:%Integer,pLevel:%Integer=1,pFirstChar:%String="",pIgnoreUnknownProps:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
#define WHITESPACE(%c) (((%c)=" ")||((%c)=$C(10))||((%c)=$C(13))||((%c)=$C(9)))
#define MATCHHEXCHARS(%hex,%n) (%hex ? %n(1N,1(1"A",1"B",1"C",1"D",1"E",1"F",1"a",1"b",1"c",1"d",1"e",1"f")))

	Set tSC = $$$OK
	Try {
		Set tOrigClass = pClass
		Set tClass = $S(pClass="":"%ZEN.proxyObject",1:pClass)
		
		Kill jsonParams
		If (tClass '= "%ZEN.proxyObject") {
			Do ..efGetJSONParams(tClass,.jsonParams)
		}
		
		Set pObject = ""
		Set pCharsProcessed = 0

		Set p = 1
		Set tToken = ""
		Set tProperty = ""
		Set tValue = ""
		Set tState = 0
		Set tInArray = 0
		Set tArrayType = ""
		Set tArrayState = "value"
		Set tArrayKey = ""
		Set tIsString = 0
		Set tQuote = ""
		Set tPropQuoted = 0
		Set tUnicodeHex = ""
		Set tHex = ""
		Set tJSONArray = 0
		While ($$$ISOK(tSC)) {
			// test end condition; get next character
			If ($IsObject(pJSON)) {
				If (pFirstChar'="") {
					Set ch = pFirstChar
					Set pFirstChar = ""
				}
				Else {
	 				If (pJSON.AtEnd) Quit
					Set ch = pJSON.Read(1,.tSC)
					If $$$ISERR(tSC) Quit
				}
			}
			Else {
 				If (p > $L(pJSON)) Quit
				Set ch = $E(pJSON,p)
			}

			Set p = p + 1
			Set pCharsProcessed = pCharsProcessed + 1
			If (tState = 0) {
				If (ch = "{") {
					// start of object
					// we will hold the property values in here until the end
					Kill tPropValues	
					Set pObject = ""
					Set tState = 1
				}
				ElseIf (ch = "[") {
					Set tJSONArray = 1
					Kill tPropValues
					Set pObject = ""
					Set tCollectionClass = $select((pClass '= "")&&$classmethod(pClass,"%Extends","%Collection.AbstractList"): pClass, 1 :"")
					// start of list/array-valued property
					Set tInArray = 1
					Set tArrayType = "list"
					Kill tArray
					Set tArrayIndex = 0
					Set tToken = ""
					Set tIsString = 0
					Set tState = 5
					Set tArrayState = "value"
				}
				ElseIf '$$$WHITESPACE(ch) {
					Set tSC = $$$ERROR($$$GeneralError,"Expected { at start of JSON text.")
					Quit
				}
			}
			ElseIf (tState = 1) {
				If (ch = "}") {
					// end of object
					// create object, stuff properties into it
					Set pClass = $G(tPropValues("_class"),pClass)
					Set tClass = $G(tPropValues("_class"),tClass)
					Set pObject = $classmethod(tClass,"%New")
					Set p = $O(tPropValues(""))
					While (p'="") {
						If (p '= "_class") && (p '= "_id") {
							Set pTemp=p
							If ($DATA(jsonParams("jsonNameReverse",p))) {
								Set pTemp=$GET(jsonParams("jsonNameReverse",p))
							}
							Try {
								// test for stream property
								Set tStream = $property(pObject,pTemp)
								If ($IsObject(tStream) && (tStream.%Extends("%Stream.Object") || tStream.%Extends("%IO.I.Stream"))) {
									Do tStream.Rewind()
									Do tStream.Write($G(tPropValues(p)))
								}
								Else {
									Set $property(pObject,pTemp) = $G(tPropValues(p))
								}
							}
							Catch ex {
								If $case(ex.Name, "<CANNOT SET THIS PROPERTY>" : 0, "<PROPERTY DOES NOT EXIST>": 'pIgnoreUnknownProps, :1) Throw ex
							}
						}
						Set p = $O(tPropValues(p))
					}
					Quit
				}
				ElseIf (ch = """") && ('tPropQuoted) {
					Set tPropQuoted = 1
				}
				ElseIf ('$$$WHITESPACE(ch) && (ch'="")) {
					// start of property name
					Set tToken = ch
					Set tState = 2
				}
			}
			ElseIf (tState = 2) {
				// property name
				If (ch = "\") {
					Set tState = "2a"
				}
				ElseIf (tPropQuoted) {
					If (ch = """") {
						Set tPropQuoted = 0
					}
					Else {
						Set:'$IsObject(tToken) tToken = tToken _ ch
					}
				}
				Else {
					If (ch = ":") {
						Set tProperty = tToken
						#; Set tProperty = $select($IsObject(tToken): tToken, 1: ..%UnescapeJSONString(tToken))
						Set tToken = ""
						Set tState = 3
						Set tIsString = 0
					}
					ElseIf ('$$$WHITESPACE(ch)) {
						Set:'$IsObject(tToken) tToken = tToken _ ch
					}
				}
			}
			// NOTE: States 2a, 2b and 2c are defined as the last few states as we expect escaped property names to be very rare
			ElseIf (tState = 3) {
				// value
				If (ch = ",") {
					// end of value
					If (tIsString || $IsObject(tToken)) {
						Set tValue = tToken
					}
					Else {
						Set tValue = $Case(tToken,"null":"","true":1,"false":0,:+tToken)
					}
					If (tProperty '= "") {
						Set tPropValues(tProperty) = tValue
					}
					Set pClass = $G(tPropValues("_class"),pClass)
					Set tToken = ""
					Set tValue = ""
					Set tState = 1
				}
				ElseIf (ch = "}") {
					// end of value and object
					If (tIsString || $IsObject(tToken)) {
						Set tValue = tToken
					}
					Else {
						Set tValue = $Case(tToken,"null":"","true":1,"false":0,:+tToken)
					}
					If (tProperty '= "") {
						Set tPropValues(tProperty) = tValue
					}

					// create object, stuff properties into it
					Set pClass = $G(tPropValues("_class"),pClass)
					Set tClass = $G(tPropValues("_class"),tClass)
					Set pObject = $classmethod(tClass,"%New")

					Set p = $O(tPropValues(""))
					While (p'="") {
						If (p '= "_class") && (p '= "_id") {
							Set pTemp=p
							If ($DATA(jsonParams("jsonNameReverse",p))) {
								Set pTemp=$GET(jsonParams("jsonNameReverse",p))
							}
							Try {
								// test for stream property
								Set tStream = $property(pObject,pTemp)
								If ($IsObject(tStream) && (tStream.%Extends("%Stream.Object") || tStream.%Extends("%IO.I.Stream"))) {
									Do tStream.Rewind()
									Do tStream.Write($G(tPropValues(p)))
								}
								Else {
									Set $property(pObject,pTemp) = $G(tPropValues(p))
								}
							}
							Catch ex {
								If $case(ex.Name, "<CANNOT SET THIS PROPERTY>": 0, "<PROPERTY DOES NOT EXIST>": 'pIgnoreUnknownProps, :1) Throw ex
							}
						}
						Set p = $O(tPropValues(p))
					}
					Set tToken = ""
					Set tValue = ""
					Quit
				}
				ElseIf (ch = "{") {
					// start of object-valued property
					Set pClass = $G(tPropValues("_class"),pClass)

					If ((pClass="")||(tProperty="")) {
						Set tChildClass = ""
						Set tCollection = ""
					}
					Else {
						// lookup type in meta data
						Set tChildClass = $$$comMemberKeyGet(pClass,$$$cCLASSproperty,tProperty,$$$cPROPtype)
						Set tCollection = $$$comMemberKeyGet(pClass,$$$cCLASSproperty,tProperty,$$$cPROPcollection)
					}
					// Note: This if block assumes pClass and tProperty are defined when tCollection '= ""
					If (tCollection = "array") {
						// start of array-valued property
						Set tArrayType = "array"
						Set tArrayKey = ""
						Set tInArray = 1
						Kill tArray
						Set tToken = ""
						Set tIsString = 0
						Set tState = 5
						Set tArrayState = "name"

						// look up the runtime type of the array
						// set tCollectionClass to the runtime type if the runtime type is not in %Library or %Collection
						Set tCollectionClass = ""
						Set tArrayRuntimeType = $$$comMemberKeyGet(pClass,$$$cCLASSproperty,tProperty,$$$cPROPruntimetype)
						If (tArrayRuntimeType '= "") {
							Set tArrayRuntimePackage = $piece(tArrayRuntimeType,".",1)
							If (tArrayRuntimePackage '= "%Library") && (tArrayRuntimePackage '= "%Collection") {
								Set tCollectionClass = tArrayRuntimeType
							}
						}
					}
					Else {
						If ($IsObject(pJSON)) {
							Set tSubJSON = pJSON
							Set tPoke = ch  // simulate stream unwind
						}
						Else {
							Set tSubJSON = $E(pJSON,p-1,*)
							Set tPoke = ""
						}
						Set tSC = ..%ParseJSON(tSubJSON,tChildClass,.tToken,.tChars,pLevel+1,tPoke,pIgnoreUnknownProps)
						If $$$ISERR(tSC) Quit
						Set p = p + tChars - 1
						Set pCharsProcessed = pCharsProcessed + tChars - 1
					}
				}
				ElseIf (ch = "[") {
					Set tCollectionClass = ""
					If ((pClass'="")&&(tProperty'="")) {
						// lookup type in meta data
						// we could have a normal collection: List Of PropType
						// OR
						// the proptype could be a subclass of a collection
						Set tCollectionClass = $$$comMemberKeyGet(pClass,$$$cCLASSproperty,tProperty,$$$cPROPtype)
						If (tCollectionClass '= "") && (($$$comClassKeyGet(tCollectionClass,$$$cCLASSclasstype)="datatype") || '$classmethod(tCollectionClass,"%Extends","%Collection.AbstractIterator")) {
							// use "built-in" collection
							Set tCollectionClass = ""
						}
					}

					// start of list/array-valued property
					Set tInArray = 1
					Set tArrayType = "list"
					Kill tArray
					Set tArrayIndex = 0
					Set tToken = ""
					Set tIsString = 0
					Set tState = 5
					Set tArrayState = "value"
				}
				ElseIf ((ch = """")||(ch = "'")) {
					// start of string
					Set tToken = ""
					Set tIsString = 1
					Set tQuote = ch
					Set tState = 4
				}
				ElseIf ('$$$WHITESPACE(ch)) {
					// must be a numeric value, or true,false,or null
					Set:'$IsObject(tToken) tToken = tToken _ ch
				}
			}
			ElseIf (tState = 4) {
				// string literal
				If (ch = "\") {
					// escape?
					Set tState = "4a"
				}
				ElseIf (ch = tQuote) {
					// end of string
					If (tInArray) {
						Set tState = 5
					}
					Else {
						Set tState = 3
					}
				}
				Else {
					Set:'$IsObject(tToken) tToken = tToken _ ch
				}
			}
			// NOTE: States 4a, 4b and 4c are defined *after* state 5 as we expect escaped text less often than arrays (state 5)
			ElseIf (tState = 5) {
				// array items
				If (ch = ",") {
					// end of array item
					If (tArrayType = "list") {
						Set tArrayIndex = tArrayIndex + 1
					}
					If (tIsString || $IsObject(tToken)) {
						Set tValue = tToken
					}
					Else {
						Set tValue = $Case(tToken,"null":"","true":1,"false":0,:+tToken)
					}
					If (tArrayType = "list") {
						Set tArray(tArrayIndex) = tValue
					}
					ElseIf (tArrayKey'="") {
						Set tArray(tArrayKey) = tValue
					}
					Set tToken = ""
					Set tArrayKey = ""
					Set tIsString = 0
					If (tArrayType = "list") {
						Set tArrayState = "value"
					}
					Else {
						Set tArrayState = "name"
					}
				}
				ElseIf ((tArrayType="list")&&(ch = "]")) {
					// end of list array
					If (tToken '= "") {
						Set tArrayIndex = tArrayIndex + 1
						If (tIsString || $IsObject(tToken)) {
							Set tValue = tToken
						}
						Else {
							Set tValue = $Case(tToken,"null":"","true":1,"false":0,:+tToken)
						}
						Set tArray(tArrayIndex) = tValue
					}

					If ($G(tCollectionClass)'="") {
						Set tListObj = $classmethod(tCollectionClass,"%New")
					}
					Else {
						#; Look for first non-"" value to determine whether the list contains objects or datatypes
						Set tUseObjectArray = 1
						Set n = $O(tArray(""))
						While n {
							If $IsObject($G(tArray(n))) Quit
							If ($G(tArray(n)) '= "") {
								Set tUseObjectArray = 0
								Quit
							}
							Set n = $O(tArray(n))
						}
						Set tListObj = $select(tUseObjectArray: ##class(%Library.ListOfObjects).%New(), 1: ##class(%Library.ListOfDataTypes).%New())
					}
					Set tCollectionClass = ""
					Set n = $O(tArray(""))
					While (n'="") {
						Do tListObj.Insert(tArray(n))
						Set n = $O(tArray(n))
					}

					Set tToken = tListObj
					Set tListObj = ""
					Set tInArray = 0
					Kill tArray
					Set tArrayIndex = 0
					Set tState = 3
					If tJSONArray {
						Set pObject = tToken
						Set tJSONArray = 0
						Quit
					}
				}
				ElseIf ((tArrayType="array")&&(ch = "}")) {
					// end of array
					If (tToken '= "") {
						If (tIsString || $IsObject(tToken)) {
							Set tValue = tToken
						}
						Else {
							Set tValue = $Case(tToken,"null":"","true":1,"false":0,:+tToken)
						}
						If (tArrayKey'="") {
							Set tArray(tArrayKey) = tValue
						}
					}

					If ($G(tCollectionClass)'="") {
						Set tArrayObj = $classmethod(tCollectionClass,"%New")
					}
					Else {
						Set tUseObjectArray = 1
						Set n = $O(tArray(""))
						While n '= "" {
							If $IsObject($G(tArray(n))) Quit
							If ($G(tArray(n)) '= "") {
								Set tUseObjectArray = 0
								Quit
							}
							Set n = $O(tArray(n))
						}
						Set tArrayObj = $select(tUseObjectArray: ##class(%Library.ArrayOfObjects).%New(), 1: ##class(%Library.ArrayOfDataTypes).%New())
					}
					Set tCollectionClass = ""

					Set n = $O(tArray(""))
					While (n'="") {
						Do tArrayObj.SetAt(tArray(n),n)
						Set n = $O(tArray(n))
					}

					Set tToken = tArrayObj
					Set tArrayObj = ""
					Set tInArray = 0
					Kill tArray
					Set tArrayIndex = 0
					Set tArrayKey = ""
					Set tState = 3
				}
				ElseIf (ch = "{") {
					// object-valued item: token is the object
					If (pClass'="") && (tProperty="") && $classmethod(pClass,"%Extends","%Library.ListOfObjects") {
						Set tPropElementType = $parameter(pClass,"ELEMENTTYPE")
						Set tChildClass = $select(tPropElementType = "%RegisteredObject": "", 1: tPropElementType)
					}
					ElseIf ((pClass="")||(tProperty="")) {
						Set tChildClass = ""
					}
					Else {
						// lookup type in meta data
						If (tCollectionClass="") {
							// property types tells us the type of items in the collection
							Set tChildClass = $$$comMemberKeyGet(pClass,$$$cCLASSproperty,tProperty,$$$cPROPtype)
						}
						Else {
							// we have to get the element type from the collection class
							Set tChildClass = $parameter(tCollectionClass,"ELEMENTTYPE")
						}
					}
					If ($IsObject(pJSON)) {
						Set tSubJSON = pJSON
						Set tPoke = ch  // simulate stream unwind
					}
					Else {
						Set tSubJSON = $E(pJSON,p-1,*)
						Set tPoke = ""
					}
						
					Set tSC = ..%ParseJSON(tSubJSON,tChildClass,.tToken,.tChars,pLevel+1,tPoke,pIgnoreUnknownProps)
					If $$$ISERR(tSC) Quit
					Set p = p + tChars - 1
					Set pCharsProcessed = pCharsProcessed + tChars - 1
				}
				ElseIf (ch = "[") {
					If ((pClass="")||(tProperty="")) {
						Set tChildCollectionClass = ""
					}
					Else {
						Set tChildCollectionClass = $$$comMemberKeyGet(pClass,$$$cCLASSproperty,tProperty,$$$cPROPtype)
						If (tChildCollectionClass '= "") && (($$$comClassKeyGet(tCollectionClass,$$$cCLASSclasstype)="datatype") || '$classmethod(tCollectionClass,"%Extends","%Collection.AbstractIterator")) {
							// use "built-in" collection
							Set tChildCollectionClass = ""
						}
					}
					If ($IsObject(pJSON)) {
						Set tSubJSON = pJSON
						Set tPoke = ch  // simulate stream unwind
					}
					Else {
						Set tSubJSON = $E(pJSON,p-1,*)
						Set tPoke = ""
					}
					Set tSC = ..%ParseJSON(tSubJSON,tChildCollectionClass,.tToken,.tChars,pLevel+1,tPoke,pIgnoreUnknownProps)
					If $$$ISERR(tSC) Quit
					Set p = p + tChars - 1
					Set pCharsProcessed = pCharsProcessed + tChars - 1
				}
				ElseIf ((ch = """")||(ch = "'")) {
					// start of string
					Set tToken = ""
					Set tIsString = 1
					Set tQuote = ch
					Set tState = 4
				}
				ElseIf ((tArrayType="array")&&(ch=":")) {
					// end of name
					If (tArrayState = "name") {
						Set tArrayState = "value"
						Set tArrayKey = tToken
						Set tToken = ""
					}
				}
				ElseIf ('$$$WHITESPACE(ch)) {
					// literal
					Set:'$IsObject(tToken) tToken = tToken _ ch
				}
			}
			// NOTE: States 4a, 4b and 4c precede states 2a, 2b and 2c as we expect literal strings to need escaping more often than property names
			ElseIf (tState = "4a") {
				// \ in string
				If (ch = "u") {
					Set tUnicodeHex = ""
					Set tState = "4b"
				}
				// add special case support for \xNN escape sequences that are valid in Javascript
				ElseIf (ch = "x") {
					Set tHex = ""
					Set tState = "4c"
				}
				Else {
					// Support escape sequences defined in RFC 4627, as well as \'
					Set tToken = tToken _ $Case(ch, "\": "\", "'": "'", """": """", "/": "/", "b": $char(8), "f": $char(12), "n": $char(10), "r": $char(13), "t": $char(9), : "\" _ ch)
					Set tState = 4
				}
			}
			ElseIf (tState = "4b") {
				// in \uXXXX escape sequence
				Set tUnicodeHex = tUnicodeHex _ ch
				If ($length(tUnicodeHex) = 4) {
					// Check that we do actually have a Hex value
					If $$$MATCHHEXCHARS(tUnicodeHex,4) {
						Set tUnicodeDecimal = $zhex(tUnicodeHex)
						Set tToken = tToken _ $char(tUnicodeDecimal)
					}
					Else {
						Set tToken = tToken _ "\u" _ tUnicodeHex
					}
					Set tState = 4
				}
			}
			ElseIf (tState = "4c") {
				// in \xNN escape sequence
				Set tHex = tHex _ ch
				If ($length(tHex) = 2) {
					// Check that we do actually have a Hex value
					If $$$MATCHHEXCHARS(tHex,2) {
						Set tCodeDecimal = $zhex(tHex)
						Set tToken = tToken _ $char(tCodeDecimal)
					}
					Else { // Not a hex escape
						Set tToken = tToken _ "\x" _ tHex
					}
					Set tState = 4
				}
			}
			ElseIf (tState = "2a") {
				// \ in property name
				If (ch = "u") {
					Set tUnicodeHex = ""
					Set tState = "2b"
				}
				// add special case support for \xNN escape sequences that are valid in Javascript
				ElseIf (ch = "x") {
					Set tHex = ""
					Set tState = "2c"
				}
				Else {
					// Support escape sequences defined in RFC 4627, as well as \'
					Set tToken = tToken _ $Case(ch, "\": "\", "'": "'", """": """", "/": "/", "b": $char(8), "f": $char(12), "n": $char(10), "r": $char(13), "t": $char(9), : "\" _ ch)
					Set tState = 2
				}
			}
			ElseIf (tState = "2b") {
				// in \uXXXX escape sequence
				Set tUnicodeHex = tUnicodeHex _ ch
				If ($length(tUnicodeHex) = 4) {
					#; Check that we do actually have a Hex value
					If $$$MATCHHEXCHARS(tUnicodeHex,4) {
						Set tUnicodeDecimal = $zhex(tUnicodeHex)
						Set tToken = tToken _ $char(tUnicodeDecimal)
					}
					Else {
						Set tToken = tToken _ "\u" _ tUnicodeHex
					}
					Set tState = 2
				}
			}
			ElseIf (tState = "2c") {
				// in \xNN escape sequence
				Set tHex = tHex _ ch
				If ($length(tHex) = 2) {
					#; Check that we do actually have a Hex value
					If $$$MATCHHEXCHARS(tHex,2) {
						Set tCodeDecimal = $zhex(tHex)
						Set tToken = tToken _ $char(tCodeDecimal)
					}
					Else { // Not a hex escape
						Set tToken = tToken _ "\x" _ tHex
					}
					Set tState = 2
				}
			}
		}
	}
	Catch ex {
		// Do ..%WriteJSONToFile(pJSON,"jsonout.txt")
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="%WriteJSONFromObject">
<Description><![CDATA[
Utility method to allow direct use of JSON from a non-ZEN context (such as a CSP page).<br/>
Calls the class method <var>pMethod</var> within the class <var>pClass</var> and converts the
resulting object to JSON format using the convention of the <property>OnGetTargetObject</property>
callback.<br/>
The JSON notation is written out to the current device.<br/>
<var>pVar</var> is the optional name of the client-side Javascript variable that refers to the JSON notation.<br/>
<var>pParms</var> is an optional array of parameter names and values that is passed to the callback method.<br/>
<var>pReturnStatus</var> is a flag to control whether the status code from the method should be returned to the caller.
If <var>pReturnStatus</var> is 0, an alert will be raised via Javascript. If <var>pReturnStatus</var> is 1, the status code
will be used as the return value from the method and an alert will NOT be raised.<br/>
<var>pFormat</var> is a flags string that controls output formatting options.<br/>
The following character option codes are supported:<br/>
1-9 : indent with this number of spaces (4 is the default with the 'i' format specifier)<br/>
a - output null arrays/objects<br/>
b - line break before opening { of objects<br/>
c - output the Cach&eacute;-specific "_class" and "_id" properties<br/>
d - output Cach&eacute; numeric properties that have value "" as null<br/>
e - output empty object properties<br/>
i - indent with 4 spaces unless 't' or 1-9<br/>
l - output empty lists<br/>
n - newline (lf)<br/>
o - output empty arrays/objects<br/>
q - output numeric values unquoted even when they come from a non-numeric property<br/>
s - use strict JSON output - <strong>NOTE:</strong> special care should be taken when sending data to a browser, as using this flag 
may expose you to cross site scripting (XSS) vulnerabilities if the data is sent inside <code>&lt;script&gt;</code> tags. Zen uses
this technique extensively, so this flag should <strong>NOT</strong> be specified for jsonProviders in Zen pages.<br/>
t - indent with tab character<br/>
u - output pre-converted to UTF-8 instead of in native internal format<br/>
w - Windows-style cr/lf newline<br/>
From a CSP page, you could invoke the method as follows:<br/>
<example language="CSP">
#(##class(%ZEN.Auxiliary.jsonProvider).%WriteJSONFromObject("json",$classname(),"GetObject"))#
</example>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pVar:%String="",pClass:%String="",pMethod:%String="",&pParms:%String,pReturnStatus:%Boolean=0,pFormat:%String,&outputObject=""]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		If (pVar'="") {
			// variable to hold the JSON object
			Do ..efWriteJSONOutput("var "_pVar_"=",.outputObject)
		}
		If $IsObject(pClass)&&'$IsObject(pMethod) {
			If ""=pMethod {
				Set tObject = pClass
			} Else {
				Set tSC = $method(pClass,pMethod,.pParms,.tObject)
			}
		} ElseIf $IsObject(pMethod) {
			Set tObject = pMethod
		} Else {
			Set tSC = $classmethod(pClass,pMethod,.pParms,.tObject)
		}
		Quit:$$$ISERR(tSC)

		If $IsObject(pClass)||$IsObject(pMethod) {
			Set p="" For { Set p=$O(pParms(p),1,value)  Quit:""=p
				Set pParms(p) = $$$ZENCVAL(value)
			}
		}
		If $IsObject(tObject) {
			Set tSC = ..%ObjectToJSON(tObject,,,.pFormat,.outputObject)
		} Else {
			Do ..efWriteJSONOutput("null",.outputObject)
		}
		If (pVar'="") {
			Do ..efWriteJSONOutput(";"_$CHAR(13,10),.outputObject)
		}
	}
	Catch ex {
		Set tSC = ex.AsStatus()
	}
	Quit:pReturnStatus tSC

	If $$$ISERR(tSC) {
		&js<alert('#($ZCVT($System.Status.GetErrorText(tSC),"O","JS"))#');>
	}
	// return an empty string to be #()# compatible
	Quit ""
]]></Implementation>
</Method>

<Method name="%WriteJSONStreamFromObject">
<Description><![CDATA[
Utility method to allow JSON output to be written to a stream from a general non-ZEN context.<br/>
Calls the class method <var>pMethod</var> within the class <var>pClass</var> and converts the
resulting object to JSON format using the convention of the <property>OnGetTargetObject</property>
callback. However, if an object is supplied in <var>pClass</var>, then the supplied object will be
used as the source object.<br/>
The JSON notation is written out to the stream supplied in <var>pStream</var>.<br/>
<var>pParms</var> is an optional array of parameter names and values that is passed to the callback method.
If <var>pClass</var> is an object, these parameters will be ignored.<br/>
<var>pRewindStream</var> is a flag to control whether the stream should be rewound after the data is written to it.<br/>
<var>pFormat</var> is a flags string to control output formatting options.<br/>
The following character option codes are supported:<br/>
1-9 : indent with this number of spaces (4 is the default with the 'i' format specifier)<br/>
a - output null arrays/objects<br/>
b - line break before opening { of objects<br/>
c - output the Cach&eacute;-specific "_class" and "_id" properties<br/>
d - output Cach&eacute; numeric properties that have value "" as null<br/>
e - output empty object properties<br/>
i - indent with 4 spaces unless 't' or 1-9<br/>
l - output empty lists<br/>
n - newline (lf)<br/>
o - output empty arrays/objects<br/>
q - output numeric values unquoted even when they come from a non-numeric property<br/>
s - use strict JSON output - <strong>NOTE:</strong> special care should be taken when sending data to a browser, as using this flag 
may expose you to cross site scripting (XSS) vulnerabilities if the data is sent inside <code>&lt;script&gt;</code> tags. Zen uses
this technique extensively, so this flag should <strong>NOT</strong> be specified for jsonProviders in Zen pages.<br/>
t - indent with tab character<br/>
u - output pre-converted to UTF-8 instead of in native internal format<br/>
w - Windows-style cr/lf newline<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%Stream.Object,pObject:%String,pMethod:%String,&pParms:%String,pRewindStream:%Boolean=0,pFormat:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC=$$$OK
	Try {
		Set:'$IsObject($G(pStream)) pStream=##class(%Stream.TmpBinary).%New()
		
		Set tSC = ..%WriteJSONFromObject(,.pObject,.pMethod,.pParms,1,.pFormat,.pStream)
	}
	Catch ex {
		Set tSC = ex.AsStatus()
	}
	If pRewindStream && $$$ISOK(tSC) {
		Do pStream.Rewind()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="efGetJSONParams">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[className:%String,&jsonParams]]></FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	Kill jsonParams
	
	Set qry="SELECT ID1, Name, Parameters FROM %Dictionary.CompiledProperty WHERE parent=?"
	Set rs=##class(%ResultSet).%New()
	Set sc=rs.Prepare(qry)
	If $$$ISERR(sc) {
		Throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
	}
	Set sc=rs.Execute(className)
	If $$$ISERR(sc) {
		Throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
	}
	
	While rs.Next() {
		Set propertyName=rs.Get("Name")
		Set parameters=rs.Get("Parameters")
		If ($LISTVALID(parameters)) {
			Set ptr=0
		    While $LISTNEXT(parameters,ptr,parameter) {
		    	If ($LIST(parameter,1) = "JSONNAME") {
			    	Set jsonName=$ZSTRIP($LIST(parameter,2),"<>W")
			    	If ($LENGTH(jsonName)>0) {
				    	Set jsonParams("p",propertyName,"jsonName")=jsonName
				    	If ($DATA(jsonParams("jsonNameReverse",jsonName))) {
					    	Throw ##class(shared.exceptions.generalException).%New("Duplicate JSONNAME in '"_className_"' : '"_jsonName_"'")
				    	}
			    		Set jsonParams("jsonNameReverse",jsonName)=propertyName
			    	}
		    	} ElseIf ($LIST(parameter,1) = "OUTPUTEMPTYSTRINGASJSNULL") {
			    	Set outputEmptyStringAsJSnull=+$LIST(parameter,2)
			    	Set jsonParams("p",propertyName,"outputEmptyStringAsJSnull")=outputEmptyStringAsJSnull
		    	}
		    }
		}
	}
]]></Implementation>
</Method>

<Method name="efWriteJSONOutput">
<Description>
outputObject can be:
"" - write to default device
stream - write to stream</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[textToWrite,&outputObject=""]]></FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	If ($IsObject(outputObject)) {
		// stream
		Do outputObject.Write(textToWrite)
	} else {
		Write textToWrite
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.ISC.stream.importGlobalCharacterStream">
<Description><![CDATA[
Overriders %GlobalCharacterStream so that ReadLine works with UTF16 and UTF8 character sets
<!-- ;vc;
;vc;    Object: EF.ISC.stream.importGlobalCharacterStream.CLS/EV.1
;vc; Component: CLS.EF.ISC.stream.importGlobalCharacterStream
;vc;  Location: SmallDev
;vc; Date/Time: 02-Mar-16 12:24
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ISC.stream.importGlobalCharacterStream.CLS/EV.1</td><td>CLS.EF.ISC.stream.importGlobalCharacterStream</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Mar-16 12:24</td><td>FredG</td></tr></table>
]]></Description>
<Super>%GlobalCharacterStream</Super>
<TimeChanged>63249,58234</TimeChanged>
<TimeCreated>63126,37931.760958</TimeCreated>

<Property name="charSet">
<Type>%String</Type>
<Parameter name="MAXLEN" value="10"/>
</Property>

<Method name="charSetGet">
<Description>
Overrides the get method for charSet so that it can be set the first time it is used.</Description>
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	if $G(i%charSet)="" {
		do ..setCharSet()	
	} 	
	
	set out=i%charSet
	if '$l(out) {
		throw ##class(shared.exceptions.generalException).%New("Unknown Character Set")
	}
	Quit out
]]></Implementation>
</Method>

<Method name="charSetSet">
<Description>
Overrides the set method for charSet to set the .</Description>
<FormalSpec>charSet:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set i%charSet=charSet
	do ..setLineTerminator()
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="isUTF16LEBOM">
<Description>
Is this a UTF-16 Little Endian byte order marker</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>firstTwoChars</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set out=0
	set firstTwoCharsHex=$ZH($A($E(firstTwoChars,1)))_$ZH($A($E(firstTwoChars,2)))
	if firstTwoCharsHex = "FFFE" {
		set out=1
	}
	quit out
]]></Implementation>
</Method>

<Method name="isUTF16BEBOM">
<Description>
Is this a UTF-16 Big Endian byte order marker</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>firstTwoChars</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set out=0
	set firstTwoCharsHex=$ZH($A($E(firstTwoChars,1)))_$ZH($A($E(firstTwoChars,2)))
	if firstTwoCharsHex = "FEFF" {
		set out=1
	}
	quit out
]]></Implementation>
</Method>

<Method name="isUTF8BOM">
<Description>
Is this a UTF-16 Big Endian byte order marker</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>firstThreeChars</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set out=0
	set firstThreeCharsHex=$ZH($A($E(firstThreeChars,1)))_$ZH($A($E(firstThreeChars,2)))_$ZH($A($E(firstThreeChars,3)))
	if firstThreeCharsHex = "EFBBBF" {
		set out=1
	}
	quit out
]]></Implementation>
</Method>

<Method name="setCharSet">
<Description>
Sets the character set for the stream</Description>
<Implementation><![CDATA[
	do ..Rewind()
	set firstChars=..Read(3)
	if ..isUTF16LEBOM($e(firstChars,1,2)) {
		set ..charSet="UTF-16LE"
	} elseif ..isUTF16BEBOM($e(firstChars,1,2)) {
		set ..charSet="UTF-16BE"	
	} elseif ..isUTF8BOM($e(firstChars,1,3)) {
		set ..charSet="UTF-8"
	} else {
		do ..Rewind()
		set ..charSet="RAW"	
	}
	do ..Rewind()
]]></Implementation>
</Method>

<Method name="setLineTerminator">
<Description>
Sets the line terminator of a stream according to the character set</Description>
<Implementation><![CDATA[
	for terminatorASCII=$char(13,10),$char(13),$char(10) {
		if ..charSet="UTF-16LE" {
			set terminator = $ZCVT(terminatorASCII,"O","UnicodeLittle")	 
		} elseif ..charSet="UTF-16BE" {
			set terminator = $ZCVT(terminatorASCII,"O","UnicodeBig")	 
		} else {
			set terminator=terminatorASCII
		}
		do ..Rewind()
		if ..FindAt(-1,terminator)>0 {
			set ..LineTerminator=terminator
			quit
		}
	}
	do ..Rewind()
]]></Implementation>
</Method>

<Method name="ReadLine">
<Description>
Overrides the standard ReadLine to allow for UTF16 and UTF8 character sets</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tmpCharSet=..charSet
	set line=##super()
	if tmpCharSet="UTF-16LE" {
		if ..isUTF16LEBOM($E(line,1,2)) {
			set line=$e(line,3,$l(line))
		}
		try {
			set line=$ZCVT(line,"I","UnicodeLittle")
		} catch {
			throw ##class(shared.exceptions.generalException).%New("Invalid file format")	
		}
	} elseif tmpCharSet="UTF-16BE" {
		if ..isUTF16BEBOM($E(line,1,2)) {
			set line=$e(line,3,$l(line))
		}
		try {
			set line=$ZCVT(line,"I","UnicodeBig")
		} catch {
			throw ##class(shared.exceptions.generalException).%New("Invalid file format")	
		}
	} elseif tmpCharSet="UTF-8" {
		if ..isUTF8BOM($E(line,1,3)) {
			set line=$e(line,4,$l(line))
		}
		try {
			set line=$ZCVT(line,"I","UTF8")
		} catch {
			set ..charSet="RAW"
		}
	}
	
	quit line
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^EF.ISC.stream.importGloba3055D</DataLocation>
<DefaultData>importGlobalCharacterStreamDefaultData</DefaultData>
<IdLocation>^EF.ISC.stream.importGloba3055D</IdLocation>
<IndexLocation>^EF.ISC.stream.importGloba3055I</IndexLocation>
<StreamLocation>^EF.ISC.stream.importGloba3055S</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="importGlobalCharacterStreamDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>charSet</Value>
</Value>
<Value name="3">
<Value>AtEnd</Value>
</Value>
<Value name="4">
<Value>Id</Value>
</Value>
<Value name="5">
<Value>%Location</Value>
</Value>
<Value name="6">
<Value>StoreNode</Value>
</Value>
<Value name="7">
<Value>TempNode</Value>
</Value>
<Value name="8">
<Value>Mode</Value>
</Value>
<Value name="9">
<Value>NodeNo</Value>
</Value>
<Value name="10">
<Value>Buffer</Value>
</Value>
<Value name="11">
<Value>Position</Value>
</Value>
<Value name="12">
<Value>IOSize</Value>
</Value>
<Value name="13">
<Value>LineTerminator</Value>
</Value>
<Value name="14">
<Value>StoreRoot</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.ISOCodes.country3166dash1Alpha2">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ISOCodes.country3166dash1Alpha2.CLS/EV.1
;vc; Component: CLS.EF.ISOCodes.country3166dash1Alpha2
;vc;  Location: SmallDev
;vc; Date/Time: 17-Apr-15 16:42
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ISOCodes.country3166dash1Alpha2.CLS/EV.1</td><td>CLS.EF.ISOCodes.country3166dash1Alpha2</td><td>SmallDev</td><td style='white-space: nowrap;'>17-Apr-15 16:42</td><td>AdrianM</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63617,43724</TimeChanged>
<TimeCreated>63559,51584.929212</TimeCreated>

<Method name="getCode">
<ClassMethod>1</ClassMethod>
<FormalSpec>countryName</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if '$l(countryName) {
		return ""	
	}
	do ..getArrayOfCountries(.countryArray)

	return $G(countryArray($ZCVT(countryName,"L")))
]]></Implementation>
</Method>

<Method name="getArrayOfCountries">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&countryArray]]></FormalSpec>
<Implementation><![CDATA[
	// Official list
    set countryArray($ZCVT("Afghanistan","L"))="AF"
    set countryArray($ZCVT("Åland Islands","L"))="AX"
    set countryArray($ZCVT("Albania","L"))="AL"
    set countryArray($ZCVT("Algeria","L"))="DZ"
    set countryArray($ZCVT("American Samoa","L"))="AS"
    set countryArray($ZCVT("Andorra","L"))="AD"
    set countryArray($ZCVT("Angola","L"))="AO"
    set countryArray($ZCVT("Anguilla","L"))="AI"
    set countryArray($ZCVT("Antarctica","L"))="AQ"
    set countryArray($ZCVT("Antigua and Barbuda","L"))="AG"
    set countryArray($ZCVT("Argentina","L"))="AR"
    set countryArray($ZCVT("Armenia","L"))="AM"
    set countryArray($ZCVT("Aruba","L"))="AW"
    set countryArray($ZCVT("Australia","L"))="AU"
    set countryArray($ZCVT("Austria","L"))="AT"
    set countryArray($ZCVT("Azerbaijan","L"))="AZ"
    set countryArray($ZCVT("Bahamas","L"))="BS"
    set countryArray($ZCVT("Bahrain","L"))="BH"
    set countryArray($ZCVT("Bangladesh","L"))="BD"
    set countryArray($ZCVT("Barbados","L"))="BB"
    set countryArray($ZCVT("Belarus","L"))="BY"
    set countryArray($ZCVT("Belgium","L"))="BE"
    set countryArray($ZCVT("Belize","L"))="BZ"
    set countryArray($ZCVT("Benin","L"))="BJ"
    set countryArray($ZCVT("Bermuda","L"))="BM"
    set countryArray($ZCVT("Bhutan","L"))="BT"
    set countryArray($ZCVT("Bolivia, Plurinational State of","L"))="BO"
    set countryArray($ZCVT("Bonaire, Sint Eustatius and Saba","L"))="BQ"
    set countryArray($ZCVT("Bosnia and Herzegovina","L"))="BA"
    set countryArray($ZCVT("Botswana","L"))="BW"
    set countryArray($ZCVT("Bouvet Island","L"))="BV"
    set countryArray($ZCVT("Brazil","L"))="BR"
    set countryArray($ZCVT("British Indian Ocean Territory","L"))="IO"
    set countryArray($ZCVT("Brunei Darussalam","L"))="BN"
    set countryArray($ZCVT("Bulgaria","L"))="BG"
    set countryArray($ZCVT("Burkina Faso","L"))="BF"
    set countryArray($ZCVT("Burundi","L"))="BI"
    set countryArray($ZCVT("Cambodia","L"))="KH"
    set countryArray($ZCVT("Cameroon","L"))="CM"
    set countryArray($ZCVT("Canada","L"))="CA"
    set countryArray($ZCVT("Cape Verde","L"))="CV"
    set countryArray($ZCVT("Cayman Islands","L"))="KY"
    set countryArray($ZCVT("Central African Republic","L"))="CF"
    set countryArray($ZCVT("Chad","L"))="TD"
    set countryArray($ZCVT("Chile","L"))="CL"
    set countryArray($ZCVT("China","L"))="CN"
    set countryArray($ZCVT("Christmas Island","L"))="CX"
    set countryArray($ZCVT("Cocos (Keeling) Islands","L"))="CC"
    set countryArray($ZCVT("Colombia","L"))="CO"
    set countryArray($ZCVT("Comoros","L"))="KM"
    set countryArray($ZCVT("Congo","L"))="CG"
    set countryArray($ZCVT("Congo, the Democratic Republic of the","L"))="CD"
    set countryArray($ZCVT("Cook Islands","L"))="CK"
    set countryArray($ZCVT("Costa Rica","L"))="CR"
    set countryArray($ZCVT("Côte d'Ivoire","L"))="CI"
    set countryArray($ZCVT("Croatia","L"))="HR"
    set countryArray($ZCVT("Cuba","L"))="CU"
    set countryArray($ZCVT("Curaçao","L"))="CW"
    set countryArray($ZCVT("Cyprus","L"))="CY"
    set countryArray($ZCVT("Czech Republic","L"))="CZ"
    set countryArray($ZCVT("Denmark","L"))="DK"
    set countryArray($ZCVT("Djibouti","L"))="DJ"
    set countryArray($ZCVT("Dominica","L"))="DM"
    set countryArray($ZCVT("Dominican Republic","L"))="DO"
    set countryArray($ZCVT("Ecuador","L"))="EC"
    set countryArray($ZCVT("Egypt","L"))="EG"
    set countryArray($ZCVT("Eire","L"))="IE"
    set countryArray($ZCVT("Éire","L"))="IE"
    set countryArray($ZCVT("El Salvador","L"))="SV"
    set countryArray($ZCVT("Equatorial Guinea","L"))="GQ"
    set countryArray($ZCVT("Eritrea","L"))="ER"
    set countryArray($ZCVT("Estonia","L"))="EE"
    set countryArray($ZCVT("Ethiopia","L"))="ET"
    set countryArray($ZCVT("Falkland Islands (Malvinas)","L"))="FK"
    set countryArray($ZCVT("Faroe Islands","L"))="FO"
    set countryArray($ZCVT("Fiji","L"))="FJ"
    set countryArray($ZCVT("Finland","L"))="FI"
    set countryArray($ZCVT("France","L"))="FR"
    set countryArray($ZCVT("French Guiana","L"))="GF"
    set countryArray($ZCVT("French Polynesia","L"))="PF"
    set countryArray($ZCVT("French Southern Territories","L"))="TF"
    set countryArray($ZCVT("Gabon","L"))="GA"
    set countryArray($ZCVT("Gambia","L"))="GM"
    set countryArray($ZCVT("Georgia","L"))="GE"
    set countryArray($ZCVT("Germany","L"))="DE"
    set countryArray($ZCVT("Ghana","L"))="GH"
    set countryArray($ZCVT("Gibraltar","L"))="GI"
    set countryArray($ZCVT("Greece","L"))="GR"
    set countryArray($ZCVT("Greenland","L"))="GL"
    set countryArray($ZCVT("Grenada","L"))="GD"
    set countryArray($ZCVT("Guadeloupe","L"))="GP"
    set countryArray($ZCVT("Guam","L"))="GU"
    set countryArray($ZCVT("Guatemala","L"))="GT"
    set countryArray($ZCVT("Guernsey","L"))="GG"
    set countryArray($ZCVT("Guinea","L"))="GN"
    set countryArray($ZCVT("Guinea-Bissau","L"))="GW"
    set countryArray($ZCVT("Guyana","L"))="GY"
    set countryArray($ZCVT("Haiti","L"))="HT"
    set countryArray($ZCVT("Heard Island and McDonald Mcdonald Islands","L"))="HM"
    set countryArray($ZCVT("Holy See (Vatican City State)","L"))="VA"
    set countryArray($ZCVT("Honduras","L"))="HN"
    set countryArray($ZCVT("Hong Kong","L"))="HK"
    set countryArray($ZCVT("Hungary","L"))="HU"
    set countryArray($ZCVT("Iceland","L"))="IS"
    set countryArray($ZCVT("India","L"))="IN"
    set countryArray($ZCVT("Indonesia","L"))="ID"
    set countryArray($ZCVT("Iran, Islamic Republic of","L"))="IR"
    set countryArray($ZCVT("Iraq","L"))="IQ"
    set countryArray($ZCVT("Ireland","L"))="IE"
    set countryArray($ZCVT("Isle of Man","L"))="IM"
    set countryArray($ZCVT("Israel","L"))="IL"
    set countryArray($ZCVT("Italy","L"))="IT"
    set countryArray($ZCVT("Jamaica","L"))="JM"
    set countryArray($ZCVT("Japan","L"))="JP"
    set countryArray($ZCVT("Jersey","L"))="JE"
    set countryArray($ZCVT("Jordan","L"))="JO"
    set countryArray($ZCVT("Kazakhstan","L"))="KZ"
    set countryArray($ZCVT("Kenya","L"))="KE"
    set countryArray($ZCVT("Kiribati","L"))="KI"
    set countryArray($ZCVT("Korea, Democratic People's Republic of","L"))="KP"
    set countryArray($ZCVT("Korea, Republic of","L"))="KR"
    set countryArray($ZCVT("Kuwait","L"))="KW"
    set countryArray($ZCVT("Kyrgyzstan","L"))="KG"
    set countryArray($ZCVT("Lao People's Democratic Republic","L"))="LA"
    set countryArray($ZCVT("Latvia","L"))="LV"
    set countryArray($ZCVT("Lebanon","L"))="LB"
    set countryArray($ZCVT("Lesotho","L"))="LS"
    set countryArray($ZCVT("Liberia","L"))="LR"
    set countryArray($ZCVT("Libya","L"))="LY"
    set countryArray($ZCVT("Liechtenstein","L"))="LI"
    set countryArray($ZCVT("Lithuania","L"))="LT"
    set countryArray($ZCVT("Luxembourg","L"))="LU"
    set countryArray($ZCVT("Macao","L"))="MO"
    set countryArray($ZCVT("Macedonia, the Former Yugoslav Republic of","L"))="MK"
    set countryArray($ZCVT("Madagascar","L"))="MG"
    set countryArray($ZCVT("Malawi","L"))="MW"
    set countryArray($ZCVT("Malaysia","L"))="MY"
    set countryArray($ZCVT("Maldives","L"))="MV"
    set countryArray($ZCVT("Mali","L"))="ML"
    set countryArray($ZCVT("Malta","L"))="MT"
    set countryArray($ZCVT("Marshall Islands","L"))="MH"
    set countryArray($ZCVT("Martinique","L"))="MQ"
    set countryArray($ZCVT("Mauritania","L"))="MR"
    set countryArray($ZCVT("Mauritius","L"))="MU"
    set countryArray($ZCVT("Mayotte","L"))="YT"
    set countryArray($ZCVT("Mexico","L"))="MX"
    set countryArray($ZCVT("Micronesia, Federated States of","L"))="FM"
    set countryArray($ZCVT("Moldova, Republic of","L"))="MD"
    set countryArray($ZCVT("Monaco","L"))="MC"
    set countryArray($ZCVT("Mongolia","L"))="MN"
    set countryArray($ZCVT("Montenegro","L"))="ME"
    set countryArray($ZCVT("Montserrat","L"))="MS"
    set countryArray($ZCVT("Morocco","L"))="MA"
    set countryArray($ZCVT("Mozambique","L"))="MZ"
    set countryArray($ZCVT("Myanmar","L"))="MM"
    set countryArray($ZCVT("Namibia","L"))="NA"
    set countryArray($ZCVT("Nauru","L"))="NR"
    set countryArray($ZCVT("Nepal","L"))="NP"
    set countryArray($ZCVT("Netherlands","L"))="NL"
    set countryArray($ZCVT("New Caledonia","L"))="NC"
    set countryArray($ZCVT("New Zealand","L"))="NZ"
    set countryArray($ZCVT("Nicaragua","L"))="NI"
    set countryArray($ZCVT("Niger","L"))="NE"
    set countryArray($ZCVT("Nigeria","L"))="NG"
    set countryArray($ZCVT("Niue","L"))="NU"
    set countryArray($ZCVT("Norfolk Island","L"))="NF"
    set countryArray($ZCVT("Northern Mariana Islands","L"))="MP"
    set countryArray($ZCVT("Norway","L"))="NO"
    set countryArray($ZCVT("Oman","L"))="OM"
    set countryArray($ZCVT("Pakistan","L"))="PK"
    set countryArray($ZCVT("Palau","L"))="PW"
    set countryArray($ZCVT("Palestine, State of","L"))="PS"
    set countryArray($ZCVT("Panama","L"))="PA"
    set countryArray($ZCVT("Papua New Guinea","L"))="PG"
    set countryArray($ZCVT("Paraguay","L"))="PY"
    set countryArray($ZCVT("Peru","L"))="PE"
    set countryArray($ZCVT("Philippines","L"))="PH"
    set countryArray($ZCVT("Pitcairn","L"))="PN"
    set countryArray($ZCVT("Poland","L"))="PL"
    set countryArray($ZCVT("Portugal","L"))="PT"
    set countryArray($ZCVT("Puerto Rico","L"))="PR"
    set countryArray($ZCVT("Qatar","L"))="QA"
    set countryArray($ZCVT("Republic of Ireland","L"))="IE"
    set countryArray($ZCVT("Réunion","L"))="RE"
    set countryArray($ZCVT("Romania","L"))="RO"
    set countryArray($ZCVT("Russian Federation","L"))="RU"
    set countryArray($ZCVT("Rwanda","L"))="RW"
    set countryArray($ZCVT("Saint Barthélemy","L"))="BL"
    set countryArray($ZCVT("Saint Helena, Ascension and Tristan da Cunha","L"))="SH"
    set countryArray($ZCVT("Saint Kitts and Nevis","L"))="KN"
    set countryArray($ZCVT("Saint Lucia","L"))="LC"
    set countryArray($ZCVT("Saint Martin (French part)","L"))="MF"
    set countryArray($ZCVT("Saint Pierre and Miquelon","L"))="PM"
    set countryArray($ZCVT("Saint Vincent and the Grenadines","L"))="VC"
    set countryArray($ZCVT("Samoa","L"))="WS"
    set countryArray($ZCVT("San Marino","L"))="SM"
    set countryArray($ZCVT("Sao Tome and Principe","L"))="ST"
    set countryArray($ZCVT("Saudi Arabia","L"))="SA"
    set countryArray($ZCVT("Senegal","L"))="SN"
    set countryArray($ZCVT("Serbia","L"))="RS"
    set countryArray($ZCVT("Seychelles","L"))="SC"
    set countryArray($ZCVT("Sierra Leone","L"))="SL"
    set countryArray($ZCVT("Singapore","L"))="SG"
    set countryArray($ZCVT("Sint Maarten (Dutch part)","L"))="SX"
    set countryArray($ZCVT("Slovakia","L"))="SK"
    set countryArray($ZCVT("Slovenia","L"))="SI"
    set countryArray($ZCVT("Solomon Islands","L"))="SB"
    set countryArray($ZCVT("Somalia","L"))="SO"
    set countryArray($ZCVT("South Africa","L"))="ZA"
    set countryArray($ZCVT("South Georgia and the South Sandwich Islands","L"))="GS"
    set countryArray($ZCVT("South Sudan","L"))="SS"
    set countryArray($ZCVT("Spain","L"))="ES"
    set countryArray($ZCVT("Sri Lanka","L"))="LK"
    set countryArray($ZCVT("Sudan","L"))="SD"
    set countryArray($ZCVT("Suriname","L"))="SR"
    set countryArray($ZCVT("Svalbard and Jan Mayen","L"))="SJ"
    set countryArray($ZCVT("Swaziland","L"))="SZ"
    set countryArray($ZCVT("Sweden","L"))="SE"
    set countryArray($ZCVT("Switzerland","L"))="CH"
    set countryArray($ZCVT("Syrian Arab Republic","L"))="SY"
    set countryArray($ZCVT("Taiwan, Province of China","L"))="TW"
    set countryArray($ZCVT("Tajikistan","L"))="TJ"
    set countryArray($ZCVT("Tanzania, United Republic of","L"))="TZ"
    set countryArray($ZCVT("Thailand","L"))="TH"
    set countryArray($ZCVT("Timor-Leste","L"))="TL"
    set countryArray($ZCVT("Togo","L"))="TG"
    set countryArray($ZCVT("Tokelau","L"))="TK"
    set countryArray($ZCVT("Tonga","L"))="TO"
    set countryArray($ZCVT("Trinidad and Tobago","L"))="TT"
    set countryArray($ZCVT("Tunisia","L"))="TN"
    set countryArray($ZCVT("Turkey","L"))="TR"
    set countryArray($ZCVT("Turkmenistan","L"))="TM"
    set countryArray($ZCVT("Turks and Caicos Islands","L"))="TC"
    set countryArray($ZCVT("Tuvalu","L"))="TV"
    set countryArray($ZCVT("Uganda","L"))="UG"
    set countryArray($ZCVT("Ukraine","L"))="UA"
    set countryArray($ZCVT("United Arab Emirates","L"))="AE"
    set countryArray($ZCVT("United Kingdom","L"))="GB"
    set countryArray($ZCVT("United States","L"))="US"
    set countryArray($ZCVT("United States Minor Outlying Islands","L"))="UM"
    set countryArray($ZCVT("Uruguay","L"))="UY"
    set countryArray($ZCVT("Uzbekistan","L"))="UZ"
    set countryArray($ZCVT("Vanuatu","L"))="VU"
    set countryArray($ZCVT("Venezuela, Bolivarian Republic of","L"))="VE"
    set countryArray($ZCVT("Viet Nam","L"))="VN"
    set countryArray($ZCVT("Virgin Islands, British","L"))="VG"
    set countryArray($ZCVT("Virgin Islands, U.S.","L"))="VI"
    set countryArray($ZCVT("Wallis and Futuna","L"))="WF"
    set countryArray($ZCVT("Western Sahara","L"))="EH"
    set countryArray($ZCVT("Yemen","L"))="YE"
    set countryArray($ZCVT("Zambia","L"))="ZM"
    set countryArray($ZCVT("Zimbabwe","L"))="ZW"
    
    /// Plus our quirks
    set countryArray($ZCVT("Bolivia","L"))="BO"
    set countryArray($ZCVT("Burma","L"))="MM"
    set countryArray($ZCVT("Cote d'Ivoire","L"))="CI"
    set countryArray($ZCVT("East Timor","L"))="TL"
    set countryArray($ZCVT("England","L"))="GB"
    set countryArray($ZCVT("Espana","L"))="ES"
    set countryArray($ZCVT("Falkland Islands","L"))="FK"
    set countryArray($ZCVT("Great Britain","L"))="GB"
    set countryArray($ZCVT("Heard and Mc Donald Islands","L"))="HM"
    set countryArray($ZCVT("Iran","L"))="IR"
    set countryArray($ZCVT("Macau","L"))="MO"
    set countryArray($ZCVT("Macedonia","L"))="MK"
    set countryArray($ZCVT("Netherlands Antilles","L"))="NL"
    set countryArray($ZCVT("North Korea","L"))="KP"
    set countryArray($ZCVT("Northern Ireland","L"))="GB"
    set countryArray($ZCVT("Palestine","L"))="PS"
    set countryArray($ZCVT("Reunion","L"))="RE"
    set countryArray($ZCVT("Russia","L"))="RU"
    set countryArray($ZCVT("Samoa (Independent)","L"))="WS"
    set countryArray($ZCVT("Scotland","L"))="GB"
    set countryArray($ZCVT("South Korea","L"))="KR"
    set countryArray($ZCVT("St. Helena","L"))="SH"
    set countryArray($ZCVT("St. Pierre and Miquelon","L"))="PM"
    set countryArray($ZCVT("Syria","L"))="SY"
    set countryArray($ZCVT("Svalbard and Jan Mayen Islands","L"))="SJ"
    set countryArray($ZCVT("Taiwan","L"))="TW"
    set countryArray($ZCVT("Tanzania","L"))="TZ"
    set countryArray($ZCVT("Trinidad","L"))="TT"
    set countryArray($ZCVT("USA","L"))="US"
    set countryArray($ZCVT("Vatican City State (Holy See)","L"))="VA"
    set countryArray($ZCVT("Venezuela","L"))="VE"
    set countryArray($ZCVT("Virgin Islands (British)","L"))="VG"
    set countryArray($ZCVT("Virgin Islands (U.S.)","L"))="VI"
    set countryArray($ZCVT("Wales","L"))="GB"
    set countryArray($ZCVT("Wallis and Futuna Islands","L"))="WF"
]]></Implementation>
</Method>

<Method name="checkForCountriesNotOnList">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set itemNameID=##class(cod.objItemName).getIDFromDescriptionNoEvent("country")
	set rs=##class(cod.objItemAlternatives).getAlternativesForCodItemAsResultSet(itemNameID)
	while rs.Next() {
		if '$l(..getCode(rs.Data("description"))) {
			w rs.Data("description"),!
		}
	}
]]></Implementation>
</Method>

<Method name="outputCodeForGetArrayOfCountries">
<ClassMethod>1</ClassMethod>
<FormalSpec>fileName</FormalSpec>
<Implementation><![CDATA[
	set file=##class(%Library.FileCharacterStream).%New()
	set file.Filename=fileName
	set impObj=##class(cod.tempImport).%New()
	do impObj.csvStream.CopyFrom(file)
	while impObj.readAndSplit(.data) {
		if '$data(data(0)) quit
		write $C(9),"set countryArray($ZCVT("""_data(0)_""",""L""))","="""_data(1)_"""",!
	}
]]></Implementation>
</Method>
</Class>




<Class name="EF.Rackspace.CloudFilesAuthentication">
<Description><![CDATA[
TODO: convert all PHP comments to Caché doc style
<!-- ;vc;
;vc;    Object: EF.Rackspace.CloudFilesAuthentication.CLS/EV.3
;vc; Component: CLS.EF.Rackspace.CloudFilesAuthentication
;vc;  Location: SmallDev
;vc; Date/Time: 07-Jun-16 12:39
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesAuthentication.CLS/EV.3</td><td>CLS.EF.Rackspace.CloudFilesAuthentication</td><td>SmallDev</td><td style='white-space: nowrap;'>07-Jun-16 12:39</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.Rackspace.CloudFilesBase</Super>
<TimeChanged>64044,64673</TimeChanged>
<TimeCreated>62242,58857.304632</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/**
 * Class for handling Cloud Files Authentication, call it's {@link authenticate()}
 * method to obtain authorized service urls and an authentication token.
 *
 * Example:
 * <code>
 * # Create the authentication instance
 * #
 * $auth = new CF_Authentication("username", "api_key");
 *
 * # NOTE: For UK Customers please specify your AuthURL Manually
 * # There is a Predfined constant to use EX:
 * #
 * # $auth = new CF_Authentication("username, "api_key", NULL, UK_AUTHURL);
 * # Using the UK_AUTHURL keyword will force the api to use the UK AuthUrl.
 * # rather then the US one. The NULL Is passed for legacy purposes and must
 * # be passed to function correctly.
 *
 * # NOTE: Some versions of cURL include an outdated certificate authority (CA)
 * #       file.  This API ships with a newer version obtained directly from
 * #       cURL's web site (http://curl.haxx.se).  To use the newer CA bundle,
 * #       call the CF_Authentication instance's 'ssl_use_cabundle()' method.
 * #
 * # $auth->ssl_use_cabundle(); # bypass cURL's old CA bundle
 *
 * # Perform authentication request
 * #
 * $auth->authenticate();
 * </code>
 *
 * @package php-cloudfiles
 */
]]></Content>
</UDLText>

<Property name="Username">
<Type>%String</Type>
</Property>

<Property name="APIKey">
<Type>%String</Type>
</Property>

<Property name="AuthHost">
<Type>%String</Type>
</Property>

<Property name="AuthPort">
<Type>%Integer</Type>
<InitialExpression>443</InitialExpression>
</Property>

<Property name="Account">
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// following are set after successful authentication    

]]></Content>
</UDLText>

<Property name="StorageURL">
<Type>%String</Type>
</Property>

<Property name="StorageURLInternal">
<Type>%String</Type>
</Property>

<Property name="CDNMURL">
<Type>%String</Type>
</Property>

<Property name="AuthToken">
<Type>%String</Type>
</Property>

<Property name="CFHTTPClient">
<Type>EF.Rackspace.CloudFilesHTTPClient</Type>
</Property>

<Property name="tempUrlKey">
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
/**
     * Class constructor (PHP 5 syntax)
     *
     * @param string $username Mosso username
     * @param string $api_key Mosso API Access Key
     * @param string $account  <i>Account name</i>
     * @param string $auth_host  <i>Authentication service URI</i>
     */
]]></Content>
</UDLText>

<Method name="%OnNew">
<FormalSpec>Username:%String="",APIKey:%String="",Account:%String="",AuthHost:%String=""</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
 	Set ..Debug=0
 	Set ..Username=$GET(Username,"")
 	Set ..APIKey=$GET(APIKey,"")
 	Set ..Account=$GET(Account,"")
 	Set ..AuthHost=$GET(AuthHost,..getAuthURL())
 	
 	Set ..StorageURL=""
 	Set ..StorageURLInternal=""
 	Set ..CDNMURL=""
 	Set ..AuthToken=""
 	
 	Set ..CFHTTPClient = ##class(EF.Rackspace.CloudFilesHTTPClient).%New(..#CCFDefaultCFAPIVersion)
 	
 	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getAuthURL">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// hardcoded for now - can be expanded to make auth url more dynamic in the future
	Return ..#CCFAuthURLUK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
     * Attempt to validate Username/API Access Key
     *
     * Attempts to validate credentials with the authentication service.  It
     * either returns <kbd>True</kbd> or throws an Exception.  Accepts a single
     * (optional) argument for the storage system API version.
     *
     * Example:
     * <code>
     * # Create the authentication instance
     * #
     * $auth = new CF_Authentication("username", "api_key");
     *
     * # Perform authentication request
     * #
     * $auth->authenticate();
     * </code>
     *
     * @param string $version API version for Auth service (optional)
     * @return boolean <kbd>True</kbd> if successfully authenticated
     * @throws AuthenticationException invalid credentials
     * @throws InvalidResponseException invalid response
     */
]]></Content>
</UDLText>

<Method name="Authenticate">
<FormalSpec>version:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ret=$$$OK
	
	Set version=$GET(version,..#CCFDefaultCFAPIVersion)
	
	Set retauth=..CFHTTPClient.Authenticate(..Username,..APIKey,..Account,..AuthHost,..AuthPort,.responseArray)
	
	Set statusCode=+$GET(responseArray("ResponseStatus"),"")
	Set reason=$GET(responseArray("ResponseReason"),"")
	Set storageURL=$GET(responseArray("StorageURL"),"")
	Set storageURLInternal=$GET(responseArray("StorageURLInternal"),"")
	Set CDNMURL=$GET(responseArray("CDNMURL"),"")
	Set authToken=$GET(responseArray("AuthToken"),"")
	
	Do ..DoDebug("statusCode="_statusCode)
	Do ..DoDebug("reason="_reason)
	Do ..DoDebug("storageURL="_storageURL)
	Do ..DoDebug("storageURLinternal="_storageURLInternal)
	Do ..DoDebug("CDNMURL="_CDNMURL)
	Do ..DoDebug("authToken="_authToken)
	
	if (statusCode = ..#HTTPCodeUnauthorized) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.AuthenticationException).%New(..#CCFErrorAuthInvalid)
	} else {
		If ('((storageURL'="") ! (CDNMURL'="")) ! '(authToken'="")) {
			Throw ##class(EF.Rackspace.CloudFilesExceptions.InvalidResponseException).%New(..#CCFErrorAuthMissingHeaders)
		} else {
			Set ..StorageURL = storageURL
			Set ..StorageURLInternal = storageURLInternal
			Set ..CDNMURL = CDNMURL
			Set ..AuthToken = authToken
		}
	}
	
	Do ..CFHTTPClient.SetCFAuth($this)
	
	// load temp-url-key
	kill responseArray
	Do ..CFHTTPClient.HeadAccount(.responseArray)
	Set tempUrlKey=$GET(responseArray("TempUrlKey"))
	If ($LENGTH(tempUrlKey) > 0) {
		Set ..tempUrlKey=tempUrlKey
	}
	
	Quit ret
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
	 * Use Cached Token and Storage URL's rather then grabbing from the Auth System
         *
         * Example:
 	 * <code>
         * #Create an Auth instance
         * $auth = new CF_Authentication();
         * #Pass Cached URL's and Token as Args
	 * $auth->load_cached_credentials("auth_token", "storage_url", "cdn_management_url");
         * </code>
	 * 
	 * @param string $auth_token A Cloud Files Auth Token (Required)
         * @param string $storage_url The Cloud Files Storage URL (Required)
         * @param string $cdnm_url CDN Management URL (Required)
         * @return boolean <kbd>True</kbd> if successful 
	 * @throws SyntaxException If any of the Required Arguments are missing
         */
]]></Content>
</UDLText>

<Method name="LoadCachedCredentials">
<FormalSpec>authToken:%String,storageURL:%String,CDNMURL:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ret=$$$OK
	if (($GET(storageURL)="") ! ($GET(CDNMURL)="")) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorAuthMissingIFURLs)
		Set ret=$$$ERROR(..#CCFErrorAuthMissingIFURLs)
	}
	
	if ($GET(authToken)="") {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorAuthMissingToken)
		Set ret=$$$ERROR(..#CCFErrorAuthMissingToken)
	}
	    
    Set ..StorageURL = storageURL
    Set ..CDNMURL = CDNMURL
    Set ..AuthToken = authToken
	Quit ret
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
         * Grab Cloud Files info to be Cached for later use with the load_cached_credentials method.
         *
	 * Example:
         * <code>
         * #Create an Auth instance
         * $auth = new CF_Authentication("UserName","API_Key");
         * $auth->authenticate();
         * $array = $auth->export_credentials();
         * </code>
         * 
	 * @return array of url's and an auth token.
         */
]]></Content>
</UDLText>

<Method name="ExportCredentials">
<FormalSpec>retInfo:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ret=$$$OK
	
	Set retInfo("storageURL")=..StorageURL
	Set retInfo("CDNMURL")=..StorageURL
	Set retInfo("authToken")=..AuthToken
	
    Quit ret
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
     * Make sure the CF_Authentication instance has authenticated.
     *
     * Ensures that the instance variables necessary to communicate with
     * Cloud Files have been set from a previous authenticate() call.
     *
     * @return boolean <kbd>True</kbd> if successfully authenticated
     */
]]></Content>
</UDLText>

<Method name="Authenticated">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set ret=..#TRUE
	If ('((..StorageURL'="") ! (..CDNMURL'="")) ! '(..AuthToken'="")) {
		Set ret=..#FALSE
    }
    Quit ret
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
     * Toggle debugging - set cURL verbose flag
     */
]]></Content>
</UDLText>

<Method name="SetDebug">
<FormalSpec>bool:%Boolean</FormalSpec>
<Implementation><![CDATA[
	Set ..Debug=bool
	Do ..CFHTTPClient.SetDebug(bool)
]]></Implementation>
</Method>
</Class>


<Class name="EF.Rackspace.CloudFilesBase">
<Description><![CDATA[
Use this instead of INC, as INC is not very compatible with VC/m or source control in general
Inherit this in all Rackspace classes
<!-- ;vc;
;vc;    Object: EF.Rackspace.CloudFilesBase.CLS/EV.4
;vc; Component: CLS.EF.Rackspace.CloudFilesBase
;vc;  Location: SmallDev
;vc; Date/Time: 07-Jun-16 12:39
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesBase.CLS/EV.4</td><td>CLS.EF.Rackspace.CloudFilesBase</td><td>SmallDev</td><td style='white-space: nowrap;'>07-Jun-16 12:39</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<Super>%RegisteredObject</Super>
<TimeChanged>64054,47818</TimeChanged>
<TimeCreated>62249,53704.090275</TimeCreated>

<Parameter name="TRUE">
<Default>1</Default>
</Parameter>

<Parameter name="FALSE">
<Default>0</Default>
</Parameter>

<Parameter name="CCFVersion">
<Default>1.0.0</Default>
</Parameter>

<Parameter name="CCFDefaultCFAPIVersion">
<Default>1</Default>
</Parameter>

<Parameter name="CCFDefaultCFAPIVersionAuth">
<Default>v1.0</Default>
</Parameter>

<Parameter name="CCFDefaultSSLConfig">
<Default>defaultSSL</Default>
</Parameter>

<Parameter name="CCFStorageNormalPrefix">
<Default>https://</Default>
</Parameter>

<Parameter name="CCFStorageServiceNetPrefix">
<Default>https://snet-</Default>
</Parameter>

<Parameter name="CCFUserAgent">
<Default>InterSystemsCache-CloudFiles/1.0.0</Default>
</Parameter>

<Parameter name="CCFHTTPDelim">
<Default>/</Default>
</Parameter>

<Parameter name="CCFHTTPReqStringSep">
<Default>?</Default>
</Parameter>

<Parameter name="CCFHTTPReqStringDelim">
<Default><![CDATA[&]]></Default>
</Parameter>

<Parameter name="CCFHTTPReqStringAssign">
<Default>=</Default>
</Parameter>

<Parameter name="CCFHTTPHeaderDelim">
<Default>:</Default>
</Parameter>

<Parameter name="CCFHTTPReqStringFormat">
<Default>format</Default>
</Parameter>

<Parameter name="CCFHTTPReqStringFormatXML">
<Default>xml</Default>
</Parameter>

<Parameter name="CCFHTTPReqStringLimit">
<Default>limit</Default>
</Parameter>

<Parameter name="CCFHTTPReqStringMarker">
<Default>marker</Default>
</Parameter>

<Parameter name="CCFHTTPReqStringPrefix">
<Default>prefix</Default>
</Parameter>

<Parameter name="CCFHTTPReqStringPath">
<Default>path</Default>
</Parameter>

<Parameter name="CCFSSLPort">
<Default>443</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// standard HTTP headers

]]></Content>
</UDLText>

<Parameter name="HTTPHeaderUserAgent">
<Default>User-Agent</Default>
</Parameter>

<Parameter name="HTTPHeaderContentLength">
<Default>Content-Length</Default>
</Parameter>

<Parameter name="HTTPHeaderETag">
<Default>ETag</Default>
</Parameter>

<Parameter name="HTTPHeaderLastModified">
<Default>Last-Modified</Default>
</Parameter>

<Parameter name="HTTPHeaderContentType">
<Default>Content-Type</Default>
</Parameter>

<Parameter name="HTTPHeaderCopyDestination">
<Default>Destination</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// standard HTTP codes

]]></Content>
</UDLText>

<Parameter name="HTTPCodeOK">
<Default>200</Default>
</Parameter>

<Parameter name="HTTPCodeCreated">
<Default>201</Default>
</Parameter>

<Parameter name="HTTPCodeAccepted">
<Default>202</Default>
</Parameter>

<Parameter name="HTTPCodeNoContent">
<Default>204</Default>
</Parameter>

<Parameter name="HTTPCodeMultipleChoices">
<Default>300</Default>
</Parameter>

<Parameter name="HTTPCodeNotModified">
<Default>304</Default>
</Parameter>

<Parameter name="HTTPCodeUnauthorized">
<Default>401</Default>
</Parameter>

<Parameter name="HTTPCodeNotFound">
<Default>404</Default>
</Parameter>

<Parameter name="HTTPCodeConflict">
<Default>409</Default>
</Parameter>

<Parameter name="HTTPCodePreconditionFailed">
<Default>412</Default>
</Parameter>

<Parameter name="HTTPCodeUnprocessableEntity">
<Default>422</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// standard HTTP methods

]]></Content>
</UDLText>

<Parameter name="HTTPMethodGet">
<Default>GET</Default>
</Parameter>

<Parameter name="HTTPMethodPut">
<Default>PUT</Default>
</Parameter>

<Parameter name="HTTPMethodHead">
<Default>HEAD</Default>
</Parameter>

<Parameter name="HTTPMethodDelete">
<Default>DELETE</Default>
</Parameter>

<Parameter name="HTTPMethodPost">
<Default>POST</Default>
</Parameter>

<Parameter name="HTTPMethodCopy">
<Default>COPY</Default>
</Parameter>

<Parameter name="CCFMIMETypeDefault">
<Default>application/octet-stream</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// standard MIME types

]]></Content>
</UDLText>

<Parameter name="MIMETypeApplicationOctetStream">
<Default>application/octet-stream</Default>
</Parameter>

<Parameter name="MIMETypeApplicationDirectory">
<Default>application/directory</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Rackspace hosts

]]></Content>
</UDLText>

<Parameter name="CCFAuthURLUK">
<Default>https://lon.identity.api.rackspacecloud.com/v2.0/</Default>
</Parameter>

<Parameter name="CCFAuthURLUS">
<Default>https://identity.api.rackspacecloud.com/v2.0/</Default>
</Parameter>

<Parameter name="CCFAuthURLTokensResource">
<Default>tokens</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// limitations

]]></Content>
</UDLText>

<Parameter name="CCFMaxContainerNameLength">
<Default>256</Default>
</Parameter>

<Parameter name="CCFMaxObjectNameLength">
<Default>1024</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// define CCFMaxObjectSize				5*1024*1024*1024+1

]]></Content>
</UDLText>

<Parameter name="CCFMaxObjectSize">
<Default>5368709121</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// not properly documented limits?

]]></Content>
</UDLText>

<Parameter name="CCFMaxMetaDataKeySize">
<Default>128</Default>
</Parameter>

<Parameter name="CCFMaxMetaDataValSize">
<Default>256</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// amount of file to read to determine file type

]]></Content>
</UDLText>

<Parameter name="CCFMinFileRead">
<Default>64</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Rackspace HTTP headers

]]></Content>
</UDLText>

<Parameter name="CCFAccountContainerCount">
<Default>X-Account-Container-Count</Default>
</Parameter>

<Parameter name="CCFAccountBytesUsed">
<Default>X-Account-Bytes-Used</Default>
</Parameter>

<Parameter name="CCFAccountTempUrlKey">
<Default>X-Account-Meta-Temp-Url-Key</Default>
</Parameter>

<Parameter name="CCFContainerObjCount">
<Default>X-Container-Object-Count</Default>
</Parameter>

<Parameter name="CCFContainerBytesUsed">
<Default>X-Container-Bytes-Used</Default>
</Parameter>

<Parameter name="CCFMetaDataHeader">
<Default>X-Object-Meta-</Default>
</Parameter>

<Parameter name="CCFContainerMetaDataHeader">
<Default>X-Container-Meta-</Default>
</Parameter>

<Parameter name="CCFManifestHeader">
<Default>X-Object-Manifest</Default>
</Parameter>

<Parameter name="CCFCDNURI">
<Default>X-CDN-URI</Default>
</Parameter>

<Parameter name="CCFCDNSSLURI">
<Default>X-CDN-SSL-URI</Default>
</Parameter>

<Parameter name="CCFCDNEnabled">
<Default>X-CDN-Enabled</Default>
</Parameter>

<Parameter name="CCFCDNLogRetention">
<Default>X-Log-Retention</Default>
</Parameter>

<Parameter name="CCFCDNACLUserAgent">
<Default>X-User-Agent-ACL</Default>
</Parameter>

<Parameter name="CCFCDNACLReferrer">
<Default>X-Referrer-ACL</Default>
</Parameter>

<Parameter name="CCFCDNTTL">
<Default>X-TTL</Default>
</Parameter>

<Parameter name="CCFCDNMURL">
<Default>X-CDN-Management-Url</Default>
</Parameter>

<Parameter name="CCFStorageURL">
<Default>X-Storage-Url</Default>
</Parameter>

<Parameter name="CCFAuthToken">
<Default>X-Auth-Token</Default>
</Parameter>

<Parameter name="CCFAuthUserHeader">
<Default>X-Auth-User</Default>
</Parameter>

<Parameter name="CCFAuthKeyHeader">
<Default>X-Auth-Key</Default>
</Parameter>

<Parameter name="CCFAuthUserHeaderLegacy">
<Default>X-Storage-User</Default>
</Parameter>

<Parameter name="CCFAuthKeyHeaderLegacy">
<Default>X-Storage-Pass</Default>
</Parameter>

<Parameter name="CCFAuthTokenLegacy">
<Default>X-Storage-Token</Default>
</Parameter>

<Parameter name="CCFCDNEmail">
<Default>X-Purge-Email</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// error messages

]]></Content>
</UDLText>

<Parameter name="CCFErrorMsgDelim">
<Default>|</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Parameter CCFHTTPError(%sc)			"HTTP Error: "_%sc

]]></Content>
</UDLText>

<Parameter name="CCFErrorUnexpectedResponse">
<Default>Unexpected response.</Default>
</Parameter>

<Parameter name="CCFErrorAuthInvalid">
<Default>Invalid username or access key.</Default>
</Parameter>

<Parameter name="CCFErrorAuthMissingHeaders">
<Default>Expected headers missing from auth service.</Default>
</Parameter>

<Parameter name="CCFErrorAuthMissingIFURLs">
<Default>Missing Required Interface URL's!</Default>
</Parameter>

<Parameter name="CCFErrorAuthMissingToken">
<Default>Missing Auth Token!</Default>
</Parameter>

<Parameter name="CCFErrorContainerNameLength">
<Default>Container name exceeds maximum allowed length.</Default>
</Parameter>

<Parameter name="CCFErrorContainerNameInvalid">
<Default>Container names cannot contain a '/' character.</Default>
</Parameter>

<Parameter name="CCFErrorObjectNameInvalid">
<Default>Object name cannot begin with a '/' character.</Default>
</Parameter>

<Parameter name="CCFErrorObjectNameLength">
<Default>Object name exceeds maximum allowed length.</Default>
</Parameter>

<Parameter name="CCFErrorConnectionNoAuth">
<Default>Need to pass in a previously authenticated CF_Authentication instance.</Default>
</Parameter>

<Parameter name="CCFErrorContainerNameNotSet">
<Default>Container name not set.</Default>
</Parameter>

<Parameter name="CCFErrorConnectionTypeInvalid">
<Default>Invalid connection type.</Default>
</Parameter>

<Parameter name="CCFErrorConnectionNotOpen">
<Default>Connection is not open.</Default>
</Parameter>

<Parameter name="CCFErrorNoHTTPResponse">
<Default>Failed to obtain valid HTTP response.</Default>
</Parameter>

<Parameter name="CCFErrorInvalidResponse">
<Default>Invalid Response.</Default>
</Parameter>

<Parameter name="CCFErrorContainerNotSpecified">
<Default>Must specify container object or name.</Default>
</Parameter>

<Parameter name="CCFErrorContainerToDeleteNotEmpty">
<Default>Container must be empty prior to removing it.</Default>
</Parameter>

<Parameter name="CCFErrorContainerDoesNotExist">
<Default>No such container.</Default>
</Parameter>

<Parameter name="CCFErrorContainerToDeleteDoesNotExist">
<Default>Specified container did not exist to delete.</Default>
</Parameter>

<Parameter name="CCFErrorContainerNotFound">
<Default>Container not found.</Default>
</Parameter>

<Parameter name="CCFErrorObjectInvalid">
<Default>Method argument is not a valid object.</Default>
</Parameter>

<Parameter name="CCFErrorObjectDoesNotExist">
<Default>No such object.</Default>
</Parameter>

<Parameter name="CCFErrorInvalidStream">
<Default>Not a valid stream.</Default>
</Parameter>

<Parameter name="CCFErrorFileNotOpenForWriting">
<Default>Could not open file for writing.</Default>
</Parameter>

<Parameter name="CCFErrorFileNotOpenForReading">
<Default>Could not open file for reading.</Default>
</Parameter>

<Parameter name="CCFErrorFileNotSaved">
<Default>Could not save file.</Default>
</Parameter>

<Parameter name="CCFErrorMetadataKeyContainsHeaderDelim">
<Default>Metadata keys cannot contain a ':' character.</Default>
</Parameter>

<Parameter name="CCFErrorMetadataKeyOrValTooLarge">
<Default>Metadata key or value exceeds maximum size. Maximum length: key=128 value=256</Default>
</Parameter>

<Parameter name="CCFErrorMissingContentType">
<Default>Missing Content-Type Header.</Default>
</Parameter>

<Parameter name="CCFErrorChecksumMismatch">
<Default>Derived and computed checksums do not match.</Default>
</Parameter>

<Parameter name="CCFErrorMissingDataSource">
<Default>Missing data source.</Default>
</Parameter>

<Parameter name="CCFErrorObjectTooLarge">
<Default>Bytes exceeds maximum object size.</Default>
</Parameter>

<Parameter name="CCFErrorObjectNameNotSet">
<Default>Object name not set.</Default>
</Parameter>

<Parameter name="CCFErrorObjectToDeleteDoesNotExist">
<Default>Specified object did not exist to delete.</Default>
</Parameter>

<Parameter name="CCFErrorAccountHasNoContainers">
<Default>Account has no containers.</Default>
</Parameter>

<Parameter name="CCFErrorInvalidAccountName">
<Default>Invalid account name for authentication token.</Default>
</Parameter>

<Parameter name="CCFErrorInvalidXMLResponse">
<Default>Invalid XML response received.</Default>
</Parameter>

<Parameter name="CCFErrorContainerHasNoObjects">
<Default>Container has no objects.</Default>
</Parameter>

<Parameter name="CCFErrorMetadataEmpty">
<Default>Metadata array is empty.</Default>
</Parameter>

<Parameter name="CCFErrorAccountContainerObjectNotFound">
<Default>Account, Container, or Object not found.</Default>
</Parameter>

<Parameter name="CCFXMLNodeContainer">
<Default>container</Default>
</Parameter>

<Parameter name="CCFXMLNodeObject">
<Default>object</Default>
</Parameter>

<Parameter name="CCFXMLNodeName">
<Default>name</Default>
</Parameter>

<Parameter name="CCFXMLNodeCount">
<Default>count</Default>
</Parameter>

<Parameter name="CCFXMLNodeBytes">
<Default>bytes</Default>
</Parameter>

<Parameter name="CCFXMLNodeHash">
<Default>hash</Default>
</Parameter>

<Parameter name="CCFXMLNodeLastModified">
<Default>last_modified</Default>
</Parameter>

<Parameter name="CCFXMLNodeContentType">
<Default>content_type</Default>
</Parameter>

<Parameter name="CCFPathTypeStorage">
<Default>STORAGE</Default>
</Parameter>

<Parameter name="CCFPathTypeCDN">
<Default>CDN</Default>
</Parameter>

<Parameter name="CCFPathTypeCopyDestination">
<Default>COPY_DESTINATION</Default>
</Parameter>

<Parameter name="CCFConnTypeGetCall">
<Default>GET_CALL</Default>
</Parameter>

<Parameter name="CCFConnTypePutObj">
<Default>PUT_OBJ</Default>
</Parameter>

<Parameter name="CCFConnTypeHead">
<Default>HEAD</Default>
</Parameter>

<Parameter name="CCFConnTypePutCont">
<Default>PUT_CONT</Default>
</Parameter>

<Parameter name="CCFConnTypeDelPost">
<Default>DEL_POST</Default>
</Parameter>

<Parameter name="CCFConnTypeCopyObj">
<Default>COPY_OBJ</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// temporarily use external MD5 calculation unless Caché comes up with a built-in one for streams

]]></Content>
</UDLText>

<Parameter name="CCFMD5CalculationMode">
<Default>INTERNAL</Default>
</Parameter>

<Parameter name="CCFMD5CalculationModeExternal">
<Default>EXTERNAL</Default>
</Parameter>

<Parameter name="CCFMD5CalculationModeInternal">
<Default>INTERNAL</Default>
</Parameter>

<Parameter name="CCFMD5ExternalTool">
<Default>C:\temp\md5sums.exe</Default>
</Parameter>

<Parameter name="CCFMD5ExternalPath">
<Default>C:\temp\</Default>
</Parameter>

<Parameter name="CCFMD5ExternalExtn">
<Default>.md5</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// validate responses

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Parameter CCFIsValidAuthResp(%statusCode)	((%statusCode >= 200) && (%statusCode < 300))

]]></Content>
</UDLText>

<Property name="Debug">
<Description>
debug flag</Description>
<Type>%Boolean</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
/**
     * Toggle debugging - set cURL verbose flag
     */
]]></Content>
</UDLText>

<Method name="SetDebug">
<FormalSpec>bool:%Boolean</FormalSpec>
<Implementation><![CDATA[	Set ..Debug=bool
]]></Implementation>
</Method>

<Method name="DoDebug">
<FormalSpec>msg:%String</FormalSpec>
<Implementation><![CDATA[
	If ..Debug Write !,"DEBUG: "_msg
	
	If $GET(^xRSCFDebug) {
		Set ^xRSCFDebugLog($I(^xRSCFDebugLog),..%ClassName(0))=msg
	}
]]></Implementation>
</Method>

<Method name="GetBasePathFromURL">
<ClassMethod>1</ClassMethod>
<FormalSpec>url:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	kill urlComps
	Do ##class(%Net.URLParser).Parse(url,.urlComps)
	Quit $GET(urlComps("scheme"))_"://"_$GET(urlComps("netloc"))
]]></Implementation>
</Method>

<Method name="GetHostNameFromURL">
<ClassMethod>1</ClassMethod>
<FormalSpec>url:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	kill urlComps
	Do ##class(%Net.URLParser).Parse(url,.urlComps)
	Quit $GET(urlComps("host"),"")
]]></Implementation>
</Method>

<Method name="GetPathFromURL">
<ClassMethod>1</ClassMethod>
<FormalSpec>url:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	kill urlComps
	Do ##class(%Net.URLParser).Parse(url,.urlComps)
	Quit $GET(urlComps("path"),"")
]]></Implementation>
</Method>

<Method name="GetPathWithQueryFromURL">
<ClassMethod>1</ClassMethod>
<FormalSpec>url:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	kill urlComps
	Do ##class(%Net.URLParser).Parse(url,.urlComps)
	If ($LENGTH($GET(urlComps("query"))) > 0) {
		Quit $GET(urlComps("path"))_..#CCFHTTPReqStringSep_$GET(urlComps("query"))
	} else {
		Quit $GET(urlComps("path"))
	}
]]></Implementation>
</Method>

<Method name="GetStringFromHTTPResponse">
<ClassMethod>1</ClassMethod>
<FormalSpec>response:%Net.HttpResponse</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ret=""
	
	// TODO
	
	Quit ret
]]></Implementation>
</Method>

<Method name="GetImplodedErrMsg">
<ClassMethod>1</ClassMethod>
<FormalSpec>errMsgList:%List</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $LISTTOSTRING(errMsgList,..#CCFErrorMsgDelim)
]]></Implementation>
</Method>

<Method name="GetErrMsg">
<ClassMethod>1</ClassMethod>
<FormalSpec>sc:%Status,sepChar:%String="|"</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ret=""
	Do DecomposeStatus^%apiOBJ(sc,.err,"-d")
	For i=1:1:err {
		if i=1 {
			Set ret=ret_err(i)
		} else {
			Set ret=ret_sepChar_err(i)
		}
	}
	Quit ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.Rackspace.CloudFilesConnection">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.Rackspace.CloudFilesConnection.CLS/EV.1
;vc; Component: CLS.EF.Rackspace.CloudFilesConnection
;vc;  Location: SmallDev
;vc; Date/Time: 07-Jun-16 12:39
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesConnection.CLS/EV.1</td><td>CLS.EF.Rackspace.CloudFilesConnection</td><td>SmallDev</td><td style='white-space: nowrap;'>07-Jun-16 12:39</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.Rackspace.CloudFilesBase</Super>
<TimeChanged>64050,61141</TimeChanged>
<TimeCreated>62243,63108.883207</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/**
 * Class for establishing connections to the Cloud Files storage system.
 * Connection instances are used to communicate with the storage system at
 * the account level; listing and deleting Containers and returning Container
 * instances.
 *
 * Example:
 * <code>
 * # Create the authentication instance
 * #
 * $auth = new CF_Authentication("username", "api_key");
 *
 * # Perform authentication request
 * #
 * $auth->authenticate();
 *
 * # Create a connection to the storage/cdn system(s) and pass in the
 * # validated CF_Authentication instance.
 * #
 * $conn = new CF_Connection($auth);
 *
 * # NOTE: Some versions of cURL include an outdated certificate authority (CA)
 * #       file.  This API ships with a newer version obtained directly from
 * #       cURL's web site (http://curl.haxx.se).  To use the newer CA bundle,
 * #       call the CF_Authentication instance's 'ssl_use_cabundle()' method.
 * #
 * # $conn->ssl_use_cabundle(); # bypass cURL's old CA bundle
 * </code>
 *
 * @package php-cloudfiles
 */
]]></Content>
</UDLText>

<Property name="CFAuth">
<Type>EF.Rackspace.CloudFilesAuthentication</Type>
</Property>

<Property name="CFHTTPClient">
<Type>EF.Rackspace.CloudFilesHTTPClient</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
/**
     * Pass in a previously authenticated CF_Authentication instance.
     *
     * Example:
     * <code>
     * # Create the authentication instance
     * #
     * $auth = new CF_Authentication("username", "api_key");
     *
     * # Perform authentication request
     * #
     * $auth->authenticate();
     *
     * # Create a connection to the storage/cdn system(s) and pass in the
     * # validated CF_Authentication instance.
     * #
     * $conn = new CF_Connection($auth);
     *
     * # If you are connecting via Rackspace servers and have access
     * # to the servicenet network you can set the $servicenet to True
     * # like this.
     *
     * $conn = new CF_Connection($auth, $servicenet=True);
     *
     * </code>
     *
     * If the environement variable RACKSPACE_SERVICENET is defined it will
     * force to connect via the servicenet.
     *
     * @param obj $cfs_auth previously authenticated CF_Authentication instance
     * @param boolean $servicenet enable/disable access via Rackspace servicenet.
     * @throws AuthenticationException not authenticated
     */
]]></Content>
</UDLText>

<Method name="%OnNew">
<FormalSpec>CFAuth:EF.Rackspace.CloudFilesAuthentication,serviceNet:%Boolean=0,debug:%Boolean=0</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	// TODO: servicenet?
    /*
    if (isset($_ENV['RACKSPACE_SERVICENET']))
        $servicenet=True;
    */
	Set ..CFHTTPClient = ##class(EF.Rackspace.CloudFilesHTTPClient).%New(..#CCFDefaultCFAPIVersion,debug)
	Do ..SetDebug(debug)
	
	Set ..CFAuth = CFAuth
	
	If '(..CFAuth.Authenticated()) {
		/// $$$CCFErrorConnectionNoAuth
		Throw ##class(EF.Rackspace.CloudFilesExceptions.AuthenticationException).%New(..#CCFErrorConnectionNoAuth)
	}
	
    // $this->cfs_http->setCFAuth($this->cfs_auth, $servicenet=$servicenet);
    Do ..CFHTTPClient.SetCFAuth(..CFAuth, serviceNet)
    
    Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
     * Toggle debugging of instance and back-end HTTP module
     *
     * @param boolean $bool enable/disable cURL debugging
     */
]]></Content>
</UDLText>

<Method name="SetDebug">
<FormalSpec>bool:%Boolean</FormalSpec>
<Implementation><![CDATA[
	Set ..Debug=bool
	Do ..CFHTTPClient.SetDebug(..Debug)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
     * Close a connection
     *
     * Example:
     * <code>
     *  
     * $conn->close();
     * 
     * </code>
     *
     * Will close all current cUrl active connections.
     * 
     */
]]></Content>
</UDLText>

<Method name="close">
<Implementation><![CDATA[	Do ..CFHTTPClient.Close()
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
     * Create a Container
     *
     * Given a Container name, return a Container instance, creating a new
     * remote Container if it does not exit.
     *
     * Example:
     * <code>
     * # ... authentication code excluded (see previous examples) ...
     * #
     * $conn = new CF_Authentication($auth);
     *
     * $images = $conn->create_container("my photos");
     * </code>
     *
     * @param string $container_name container name
     * @return CF_Container
     * @throws SyntaxException invalid name
     * @throws InvalidResponseException unexpected response
     */
]]></Content>
</UDLText>

<Method name="CreateContainer">
<FormalSpec>containerName:%String=""</FormalSpec>
<ReturnType>EF.Rackspace.CloudFilesContainer</ReturnType>
<Implementation><![CDATA[
	// why are these checks being repeated (exists in Container already?)
	If ($GET(containerName,"") = "") {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorContainerNameNotSet)
	}
	
	If (containerName[..#CCFHTTPDelim) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorContainerNameInvalid_" ('"_containerName_"')")
	}
	
	// does the check need to be done on URL encoded values instead?
	
	If ($LENGTH(containerName) > ..#CCFMaxContainerNameLength) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorContainerNameLength_" max = "_..#CCFMaxContainerNameLength_" bytes")
    }
    
    Set returnCode = ..CFHTTPClient.CreateContainer(containerName)
    
    If ('returnCode) {
	    Throw ##class(EF.Rackspace.CloudFilesExceptions.InvalidResponseException).%New(..#CCFErrorInvalidResponse_..#CCFErrorMsgDelim_returnCode_..#CCFErrorMsgDelim_..CFHTTPClient.ErrorString)
    }

	If ((returnCode '= ..#HTTPCodeCreated) && (returnCode '= ..#HTTPCodeAccepted)) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.InvalidResponseException).%New(..#CCFErrorInvalidResponse_..#CCFErrorMsgDelim_returnCode_..#CCFErrorMsgDelim_..CFHTTPClient.ErrorString)
	}
	
	Quit ##class(EF.Rackspace.CloudFilesContainer).%New(..CFAuth,..CFHTTPClient,containerName)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
     * Delete a Container
     *
     * Given either a Container instance or name, remove the remote Container.
     * The Container must be empty prior to removing it.
     *
     * Example:
     * <code>
     * # ... authentication code excluded (see previous examples) ...
     * #
     * $conn = new CF_Authentication($auth);
     *
     * $conn->delete_container("my photos");
     * </code>
     *
     * @param string|obj $container container name or instance
     * @return boolean <kbd>True</kbd> if successfully deleted
     * @throws SyntaxException missing proper argument
     * @throws InvalidResponseException invalid response
     * @throws NonEmptyContainerException container not empty
     * @throws NoSuchContainerException remote container does not exist
     */
]]></Content>
</UDLText>

<Method name="DeleteContainer">
<FormalSpec>container=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
        Set containerName = ""
        
        If ($CLASSNAME(container) = ##class(EF.Rackspace.CloudFilesContainer).%ClassName(1)) {
	        Set containerName = container.Name
        } elseif (container '= "") {
	        Set containerName = container
        }
        
        If (containerName = "") {
	        Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorContainerNotSpecified)
        }
        
        Set returnCode = ..CFHTTPClient.DeleteContainer(containerName)
        
        If ('returnCode) {
	        Throw ##class(EF.Rackspace.CloudFilesExceptions.InvalidResponseException).%New(..#CCFErrorInvalidResponse)
        }
        
        If (returnCode = ..#HTTPCodeConflict) {
	        Throw ##class(EF.Rackspace.CloudFilesExceptions.NonEmptyContainerException).%New(..#CCFErrorContainerToDeleteNotEmpty)
        }
        
        If (returnCode = ..#HTTPCodeNotFound) {
	        Throw ##class(EF.Rackspace.CloudFilesExceptions.NoSuchContainerException).%New(..#CCFErrorContainerToDeleteDoesNotExist)
        }
        
        If (returnCode '= ..#HTTPCodeNoContent) {
	        Throw ##class(EF.Rackspace.CloudFilesExceptions.InvalidResponseException).%New(..#CCFErrorInvalidResponse_..#CCFErrorMsgDelim_..CFHTTPClient.ErrorString)
        }
        
        Quit ..#TRUE
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
     * Return a Container instance
     *
     * For the given name, return a Container instance if the remote Container
     * exists, otherwise throw a Not Found exception.
     *
     * Example:
     * <code>
     * # ... authentication code excluded (see previous examples) ...
     * #
     * $conn = new CF_Authentication($auth);
     *
     * $images = $conn->get_container("my photos");
     * print "Number of Objects: " . $images->count . "\n";
     * print "Bytes stored in container: " . $images->bytes . "\n";
     * </code>
     *
     * @param string $container_name name of the remote Container
     * @return container CF_Container instance
     * @throws NoSuchContainerException thrown if no remote Container
     * @throws InvalidResponseException unexpected response
     */
]]></Content>
</UDLText>

<Method name="GetContainer">
<FormalSpec>containerName:%String=""</FormalSpec>
<ReturnType>EF.Rackspace.CloudFilesContainer</ReturnType>
<Implementation><![CDATA[
	Set returnCode = ..CFHTTPClient.HeadContainer(containerName,.responseArray)
	
	Set responseReason = $GET(responseArray("ResponseReason"))
	Set count = $GET(responseArray("Count"))
	Set bytes = $GET(responseArray("Bytes"))
	
	Kill metaData
	Set metaData=""
	Merge metaData = responseArray("MetaData")
	
	If (returnCode = ..#HTTPCodeNotFound) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.NoSuchContainerException).%New(..#CCFErrorContainerNotFound)
	}
	
	If ((returnCode < ..#HTTPCodeOK) ! (returnCode >= ..#HTTPCodeMultipleChoices)) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.InvalidResponseException).%New(..#CCFErrorInvalidResponse_..#CCFErrorMsgDelim_..CFHTTPClient.ErrorString)
	}
	
	Quit ##class(EF.Rackspace.CloudFilesContainer).%New(..CFAuth,..CFHTTPClient,containerName,count,bytes,metaData)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
     * Return list of remote Containers
     *
     * Return an array of strings containing the names of all remote Containers.
     *
     * Example:
     * <code>
     * # ... authentication code excluded (see previous examples) ...
     * #
     * $conn = new CF_Authentication($auth);
     *
     * $container_list = $conn->list_containers();
     * print_r($container_list);
     * Array
     * (
     *     [0] => "my photos",
     *     [1] => "my docs"
     * )
     * </code>
     *
     * @param integer $limit restrict results to $limit Containers
     * @param string $marker return results greater than $marker
     * @return array list of remote Containers
     * @throws InvalidResponseException unexpected response
     */
]]></Content>
</UDLText>

<Method name="ListContainers">
<FormalSpec>limit:%Integer,marker:%String="",containersList:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set ret = ..#TRUE
	
	Set returnCode = ..CFHTTPClient.ListContainers(limit,marker,.responseArray)
	
	Set responseReason = $GET(responseArray("ResponseReason"))
	Set containerCount = $GET(responseArray("ContainerCount"))
	Merge containersList = responseArray("ContainersList")
	
	If ((returnCode < ..#HTTPCodeOK) ! (returnCode >= ..#HTTPCodeMultipleChoices)) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.InvalidResponseException).%New(..#CCFErrorInvalidResponse_..#CCFErrorMsgDelim_returnCode_..#CCFErrorMsgDelim_..CFHTTPClient.ErrorString)
	}
	
	Quit ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.Rackspace.CloudFilesContainer">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.Rackspace.CloudFilesContainer.CLS/EV.2
;vc; Component: CLS.EF.Rackspace.CloudFilesContainer
;vc;  Location: SmallDev
;vc; Date/Time: 07-Jun-16 12:39
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesContainer.CLS/EV.2</td><td>CLS.EF.Rackspace.CloudFilesContainer</td><td>SmallDev</td><td style='white-space: nowrap;'>07-Jun-16 12:39</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.Rackspace.CloudFilesBase</Super>
<TimeChanged>64054,46089</TimeChanged>
<TimeCreated>62243,56820.213706</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/**
 * Container operations
 *
 * Containers are storage compartments where you put your data (objects).
 * A container is similar to a directory or folder on a conventional filesystem
 * with the exception that they exist in a flat namespace, you can not create
 * containers inside of containers.
 *
 * You also have the option of marking a Container as "public" so that the
 * Objects stored in the Container are publicly available via the CDN.
 *
 * @package php-cloudfiles
 */
]]></Content>
</UDLText>

<Property name="CFAuth">
<Type>EF.Rackspace.CloudFilesAuthentication</Type>
</Property>

<Property name="CFHTTPClient">
<Type>EF.Rackspace.CloudFilesHTTPClient</Type>
</Property>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="ObjectCount">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="BytesUsed">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Metadata">
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
</Property>

<UDLText name="T">
<Content><![CDATA[
/**
     * Class constructor
     *
     * Constructor for Container
     *
     * @param obj $cfs_auth CF_Authentication instance
     * @param obj $cfs_http HTTP connection manager
     * @param string $name name of Container
     * @param int $count number of Objects stored in this Container
     * @param int $bytes number of bytes stored in this Container
     * @throws SyntaxException invalid Container name
     */
]]></Content>
</UDLText>

<Method name="%OnNew">
<FormalSpec><![CDATA[CFAuth:EF.Rackspace.CloudFilesAuthentication,CFHTTPClient:EF.Rackspace.CloudFilesHTTPClient,name:%String,count:%Integer=0,bytes:%Integer=0,&metaData:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	// does the check need to be done on URL encoded values instead?
	If ($LENGTH(name) > ..#CCFMaxContainerNameLength) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorContainerNameLength)
    }
    
	If (name[..#CCFHTTPDelim) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorContainerNameInvalid)
	}
	
	Set ..CFAuth = CFAuth
	Set ..CFHTTPClient = CFHTTPClient
	Set ..Name = name
	Set ..ObjectCount = count
	Set ..BytesUsed = bytes
	
	If ($DATA(metaData)) {
		Merge ..Metadata=metaData
	}
	   
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetNextMetadataKey">
<FormalSpec>metadataKey:%String=""</FormalSpec>
<Implementation><![CDATA[	Quit $ORDER(..Metadata(metadataKey))
]]></Implementation>
</Method>

<Method name="GetMetadataValue">
<FormalSpec>metadataKey:%String=""</FormalSpec>
<Implementation><![CDATA[	Quit $GET(..Metadata(metadataKey))
]]></Implementation>
</Method>

<Method name="SetMetadataValue">
<FormalSpec>metadataKey:%String,value:%String=""</FormalSpec>
<Implementation><![CDATA[
	Set ..Metadata(metadataKey)=value
	Quit
]]></Implementation>
</Method>

<Method name="DeleteMetadataKey">
<FormalSpec>metadataKey:%String</FormalSpec>
<Implementation><![CDATA[
	Kill ..Metadata(metadataKey)
	Quit
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
     * Create a new remote storage Object
     *
     * Return a new Object instance.  If the remote storage Object exists,
     * the instance's attributes are populated.
     *
     * Example:
     * <code>
     * # ... authentication code excluded (see previous examples) ...
     * #
     * $conn = new CF_Authentication($auth);
     *
     * $public_container = $conn->get_container("public");
     *
     * # This creates a local instance of a storage object but only creates
     * # it in the storage system when the object's write() method is called.
     * #
     * $pic = $public_container->create_object("baby.jpg");
     * </code>
     *
     * @param string $obj_name name of storage Object
     * @return obj CF_Object instance
     */
]]></Content>
</UDLText>

<Method name="CreateObject">
<FormalSpec>objName:%String=""</FormalSpec>
<ReturnType>EF.Rackspace.CloudFilesObject</ReturnType>
<Implementation><![CDATA[	Quit ##class(EF.Rackspace.CloudFilesObject).%New($this,objName,0,0)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
     * Return an Object instance for the remote storage Object
     *
     * Given a name, return a Object instance representing the
     * remote storage object.
     *
     * Example:
     * <code>
     * # ... authentication code excluded (see previous examples) ...
     * #
     * $conn = new CF_Authentication($auth);
     *
     * $public_container = $conn->get_container("public");
     *
     * # This call only fetches header information and not the content of
     * # the storage object.  Use the Object's read() or stream() methods
     * # to obtain the object's data.
     * #
     * $pic = $public_container->get_object("baby.jpg");
     * </code>
     *
     * @param string $obj_name name of storage Object
     * @return obj CF_Object instance
     */
]]></Content>
</UDLText>

<Method name="GetObject">
<FormalSpec>objName:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ##class(EF.Rackspace.CloudFilesObject).%New($this,objName,..#TRUE)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
     * Delete a remote storage Object
     *
     * Given an Object instance or name, permanently remove the remote Object
     * and all associated metadata.
     *
     * Example:
     * <code>
     * # ... authentication code excluded (see previous examples) ...
     * #
     * $conn = new CF_Authentication($auth);
     *
     * $images = $conn->get_container("my photos");
     *
     * # Delete specific object
     * #
     * $images->delete_object("disco_dancing.jpg");
     * </code>
     *
     * @param obj $obj name or instance of Object to delete
     * @return boolean <kbd>True</kbd> if successfully removed
     * @throws SyntaxException invalid Object name
     * @throws NoSuchObjectException remote Object does not exist
     * @throws InvalidResponseException unexpected response
     */
]]></Content>
</UDLText>

<Method name="DeleteObject">
<FormalSpec>obj=""</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set objectName=""

	if ($isobject(obj)) {
		if ($CLASSNAME(obj) = ##class(EF.Rackspace.CloudFilesObject).%New(1)) {
			Set objectName = obj.Name
		}
	} else {
		Set objectName = obj
	}
	
	Do ..DoDebug("DeleteObject,objectName="_objectName)

	if (objectName = "") {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorObjectNameNotSet)
	}
	
	Set returnCode = ..CFHTTPClient.DeleteObject(..Name, objectName)

	If (returnCode = ..#HTTPCodeNotFound) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.NoSuchObjectException).%New(..#CCFErrorObjectToDeleteDoesNotExist_..#CCFErrorMsgDelim_objectName)
	}

	If (returnCode '= ..#HTTPCodeNoContent) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.InvalidResponseException).%New(..#CCFErrorInvalidResponse_..#CCFErrorMsgDelim_returnCode_..#CCFErrorMsgDelim_..CFHTTPClient.ErrorString)
	}
	
	Quit returnCode
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
     * Helper function to create "path" elements for a given Object name
     *
     * Given an Object whos name contains '/' path separators, this function
     * will create the "directory marker" Objects of one byte with the
     * Content-Type of "application/folder".
     *
     * It assumes the last element of the full path is the "real" Object
     * and does NOT create a remote storage Object for that last element.
     */
]]></Content>
</UDLText>

<Method name="CreatePaths">
<FormalSpec>pathName:%String</FormalSpec>
<Implementation><![CDATA[
	Set pieces=$LENGTH(pathName,..#CCFHTTPDelim)
	
	Set buildPath=""
	
	For idx=1:1:(pieces-1) {
		Set piece=$PIECE(pathName,..#CCFHTTPDelim,idx)
		If (piece '= "") {
			If (buildPath = "") {
				Set buildPath = piece
			} else {
				Set buildPath = buildPath_..#CCFHTTPDelim_piece
			}
			Do ..DoDebug("Create path: "_buildPath)
			Set obj=##class(EF.Rackspace.CloudFilesObject).%New($this, buildPath,..#FALSE,..#FALSE)
			Set obj.ContentType = ..#MIMETypeApplicationDirectory
			Do obj.Write(".",1,..#FALSE)
		}
	}
]]></Implementation>
</Method>

<Method name="getFormPostSignature">
<FormalSpec>objectPath:%String,redirectURL:%String,maxFileSizeBytes:%Integer,maxFileCount:%Integer,expiryEpochSecs:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set path=..GetPathFromURL(..CFAuth.StorageURL)_..#CCFHTTPDelim_objectPath
	
	Return ##class(shared.stringFunctions).hmacShaHash(
			160,
			path_$CHAR(10)_redirectURL_$CHAR(10)_maxFileSizeBytes_$CHAR(10)_maxFileCount_$CHAR(10)_expiryEpochSecs,
			..CFAuth.tempUrlKey,
			1
		)
]]></Implementation>
</Method>

<Method name="appendAllowedOrigins">
<FormalSpec>allowOrigin:%String=""</FormalSpec>
<Implementation><![CDATA[
	If $LENGTH(allowOrigin) {
		Set allowOrigin=$ZSTRIP(allowOrigin,"*WC")
		
		Set currentAllowedOrigins=..GetMetadataValue("Access-Control-Allow-Origin")
		
		Set originsList=$LISTFROMSTRING($ZCONVERT(currentAllowedOrigins,"L")," ")
		
		If ('$LISTFIND(originsList,$ZCONVERT(allowOrigin,"L"))) {
			Do ..SetMetadataValue("Access-Control-Allow-Origin",currentAllowedOrigins_" "_allowOrigin)
			
			Set returnCode = ..CFHTTPClient.UpdateContainer($this)

			If (returnCode = ..#HTTPCodeNotFound) {
				Throw ##class(EF.Rackspace.CloudFilesExceptions.NoSuchContainerException).%New(..#CCFErrorContainerDoesNotExist_..#CCFErrorMsgDelim_..Name)
			}

			If (returnCode '= ..#HTTPCodeNoContent) {
				Throw ##class(EF.Rackspace.CloudFilesExceptions.InvalidResponseException).%New(..#CCFErrorInvalidResponse_..#CCFErrorMsgDelim_returnCode_..#CCFErrorMsgDelim_..CFHTTPClient.ErrorString)
			}
		}
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.Rackspace.CloudFilesExceptions.AuthenticationException">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.Rackspace.CloudFilesExceptions.AuthenticationException.CLS/EV.0
;vc; Component: CLS.EF.Rackspace.CloudFilesExceptions.AuthenticationException
;vc;  Location: SmallDev
;vc; Date/Time: 01-Jul-13 19:53
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesExceptions.AuthenticationException.CLS/EV.0</td><td>CLS.EF.Rackspace.CloudFilesExceptions.AuthenticationException</td><td>SmallDev</td><td style='white-space: nowrap;'>01-Jul-13 19:53</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.Rackspace.CloudFilesExceptions.BaseException</Super>
<TimeChanged>63004,71634.157695</TimeChanged>
<TimeCreated>62243,42187.583508</TimeCreated>
</Class>


<Class name="EF.Rackspace.CloudFilesExceptions.BadContentTypeException">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.Rackspace.CloudFilesExceptions.BadContentTypeException.CLS/EV.0
;vc; Component: CLS.EF.Rackspace.CloudFilesExceptions.BadContentTypeException
;vc;  Location: SmallDev
;vc; Date/Time: 01-Jul-13 19:53
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesExceptions.BadContentTypeException.CLS/EV.0</td><td>CLS.EF.Rackspace.CloudFilesExceptions.BadContentTypeException</td><td>SmallDev</td><td style='white-space: nowrap;'>01-Jul-13 19:53</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.Rackspace.CloudFilesExceptions.BaseException</Super>
<TimeChanged>63004,71634.806309</TimeChanged>
<TimeCreated>62243,42366.433864</TimeCreated>
</Class>


<Class name="EF.Rackspace.CloudFilesExceptions.BaseException">
<Description><![CDATA[
Inherit all exception classes from this
<!-- ;vc;
;vc;    Object: EF.Rackspace.CloudFilesExceptions.BaseException.CLS/EV.2
;vc; Component: CLS.EF.Rackspace.CloudFilesExceptions.BaseException
;vc;  Location: SmallDev
;vc; Date/Time: 07-Jun-16 12:39
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesExceptions.BaseException.CLS/EV.2</td><td>CLS.EF.Rackspace.CloudFilesExceptions.BaseException</td><td>SmallDev</td><td style='white-space: nowrap;'>07-Jun-16 12:39</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%Exception.StatusException</Super>
<TimeChanged>64041,60316</TimeChanged>
<TimeCreated>62243,42114.548699</TimeCreated>
</Class>


<Class name="EF.Rackspace.CloudFilesExceptions.CDNNotEnabledException">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.Rackspace.CloudFilesExceptions.CDNNotEnabledException.CLS/EV.0
;vc; Component: CLS.EF.Rackspace.CloudFilesExceptions.CDNNotEnabledException
;vc;  Location: SmallDev
;vc; Date/Time: 01-Jul-13 19:53
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesExceptions.CDNNotEnabledException.CLS/EV.0</td><td>CLS.EF.Rackspace.CloudFilesExceptions.CDNNotEnabledException</td><td>SmallDev</td><td style='white-space: nowrap;'>01-Jul-13 19:53</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.Rackspace.CloudFilesExceptions.BaseException</Super>
<TimeChanged>63004,71636.314224</TimeChanged>
<TimeCreated>62243,42349.722355</TimeCreated>
</Class>


<Class name="EF.Rackspace.CloudFilesExceptions.ConnectionNotOpenException">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.Rackspace.CloudFilesExceptions.ConnectionNotOpenException.CLS/EV.0
;vc; Component: CLS.EF.Rackspace.CloudFilesExceptions.ConnectionNotOpenException
;vc;  Location: SmallDev
;vc; Date/Time: 01-Jul-13 19:53
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesExceptions.ConnectionNotOpenException.CLS/EV.0</td><td>CLS.EF.Rackspace.CloudFilesExceptions.ConnectionNotOpenException</td><td>SmallDev</td><td style='white-space: nowrap;'>01-Jul-13 19:53</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.Rackspace.CloudFilesExceptions.BaseException</Super>
<TimeChanged>63004,71637.003481</TimeChanged>
<TimeCreated>62243,42396.617969</TimeCreated>
</Class>


<Class name="EF.Rackspace.CloudFilesExceptions.HTTPException">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.Rackspace.CloudFilesExceptions.HTTPException.CLS/EV.0
;vc; Component: CLS.EF.Rackspace.CloudFilesExceptions.HTTPException
;vc;  Location: SmallDev
;vc; Date/Time: 01-Jul-13 19:53
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesExceptions.HTTPException.CLS/EV.0</td><td>CLS.EF.Rackspace.CloudFilesExceptions.HTTPException</td><td>SmallDev</td><td style='white-space: nowrap;'>01-Jul-13 19:53</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.Rackspace.CloudFilesExceptions.BaseException</Super>
<TimeChanged>63004,71637.687245</TimeChanged>
<TimeCreated>62243,43345.583524</TimeCreated>
</Class>


<Class name="EF.Rackspace.CloudFilesExceptions.IOException">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.Rackspace.CloudFilesExceptions.IOException.CLS/EV.0
;vc; Component: CLS.EF.Rackspace.CloudFilesExceptions.IOException
;vc;  Location: SmallDev
;vc; Date/Time: 01-Jul-13 19:53
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesExceptions.IOException.CLS/EV.0</td><td>CLS.EF.Rackspace.CloudFilesExceptions.IOException</td><td>SmallDev</td><td style='white-space: nowrap;'>01-Jul-13 19:53</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.Rackspace.CloudFilesExceptions.BaseException</Super>
<TimeChanged>63004,71638.484445</TimeChanged>
<TimeCreated>62243,42332.4898</TimeCreated>
</Class>


<Class name="EF.Rackspace.CloudFilesExceptions.InvalidResponseException">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.Rackspace.CloudFilesExceptions.InvalidResponseException.CLS/EV.0
;vc; Component: CLS.EF.Rackspace.CloudFilesExceptions.InvalidResponseException
;vc;  Location: SmallDev
;vc; Date/Time: 01-Jul-13 19:53
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesExceptions.InvalidResponseException.CLS/EV.0</td><td>CLS.EF.Rackspace.CloudFilesExceptions.InvalidResponseException</td><td>SmallDev</td><td style='white-space: nowrap;'>01-Jul-13 19:53</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.Rackspace.CloudFilesExceptions.BaseException</Super>
<TimeChanged>63004,71639.400586</TimeChanged>
<TimeCreated>62243,42214.326574</TimeCreated>
</Class>


<Class name="EF.Rackspace.CloudFilesExceptions.InvalidUTF8Exception">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.Rackspace.CloudFilesExceptions.InvalidUTF8Exception.CLS/EV.0
;vc; Component: CLS.EF.Rackspace.CloudFilesExceptions.InvalidUTF8Exception
;vc;  Location: SmallDev
;vc; Date/Time: 01-Jul-13 19:54
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesExceptions.InvalidUTF8Exception.CLS/EV.0</td><td>CLS.EF.Rackspace.CloudFilesExceptions.InvalidUTF8Exception</td><td>SmallDev</td><td style='white-space: nowrap;'>01-Jul-13 19:54</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.Rackspace.CloudFilesExceptions.BaseException</Super>
<TimeChanged>63004,71640.32991</TimeChanged>
<TimeCreated>62243,42381.00426</TimeCreated>
</Class>


<Class name="EF.Rackspace.CloudFilesExceptions.MisMatchedChecksumException">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.Rackspace.CloudFilesExceptions.MisMatchedChecksumException.CLS/EV.0
;vc; Component: CLS.EF.Rackspace.CloudFilesExceptions.MisMatchedChecksumException
;vc;  Location: SmallDev
;vc; Date/Time: 01-Jul-13 19:54
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesExceptions.MisMatchedChecksumException.CLS/EV.0</td><td>CLS.EF.Rackspace.CloudFilesExceptions.MisMatchedChecksumException</td><td>SmallDev</td><td style='white-space: nowrap;'>01-Jul-13 19:54</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.Rackspace.CloudFilesExceptions.BaseException</Super>
<TimeChanged>63004,71641.094836</TimeChanged>
<TimeCreated>62243,42313.551901</TimeCreated>
</Class>


<Class name="EF.Rackspace.CloudFilesExceptions.NoSuchAccountException">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.Rackspace.CloudFilesExceptions.NoSuchAccountException.CLS/EV.0
;vc; Component: CLS.EF.Rackspace.CloudFilesExceptions.NoSuchAccountException
;vc;  Location: SmallDev
;vc; Date/Time: 01-Jul-13 19:54
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesExceptions.NoSuchAccountException.CLS/EV.0</td><td>CLS.EF.Rackspace.CloudFilesExceptions.NoSuchAccountException</td><td>SmallDev</td><td style='white-space: nowrap;'>01-Jul-13 19:54</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.Rackspace.CloudFilesExceptions.BaseException</Super>
<TimeChanged>63004,71642.023004</TimeChanged>
<TimeCreated>62243,42298.571271</TimeCreated>
</Class>


<Class name="EF.Rackspace.CloudFilesExceptions.NoSuchContainerException">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.Rackspace.CloudFilesExceptions.NoSuchContainerException.CLS/EV.0
;vc; Component: CLS.EF.Rackspace.CloudFilesExceptions.NoSuchContainerException
;vc;  Location: SmallDev
;vc; Date/Time: 01-Jul-13 19:54
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesExceptions.NoSuchContainerException.CLS/EV.0</td><td>CLS.EF.Rackspace.CloudFilesExceptions.NoSuchContainerException</td><td>SmallDev</td><td style='white-space: nowrap;'>01-Jul-13 19:54</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.Rackspace.CloudFilesExceptions.BaseException</Super>
<TimeChanged>63004,71643.013069</TimeChanged>
<TimeCreated>62243,42273.819905</TimeCreated>
</Class>


<Class name="EF.Rackspace.CloudFilesExceptions.NoSuchObjectException">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.Rackspace.CloudFilesExceptions.NoSuchObjectException.CLS/EV.0
;vc; Component: CLS.EF.Rackspace.CloudFilesExceptions.NoSuchObjectException
;vc;  Location: SmallDev
;vc; Date/Time: 01-Jul-13 19:54
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesExceptions.NoSuchObjectException.CLS/EV.0</td><td>CLS.EF.Rackspace.CloudFilesExceptions.NoSuchObjectException</td><td>SmallDev</td><td style='white-space: nowrap;'>01-Jul-13 19:54</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.Rackspace.CloudFilesExceptions.BaseException</Super>
<TimeChanged>63004,71643.988263</TimeChanged>
<TimeCreated>62243,42257.952791</TimeCreated>
</Class>


<Class name="EF.Rackspace.CloudFilesExceptions.NonEmptyContainerException">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.Rackspace.CloudFilesExceptions.NonEmptyContainerException.CLS/EV.0
;vc; Component: CLS.EF.Rackspace.CloudFilesExceptions.NonEmptyContainerException
;vc;  Location: SmallDev
;vc; Date/Time: 01-Jul-13 19:54
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesExceptions.NonEmptyContainerException.CLS/EV.0</td><td>CLS.EF.Rackspace.CloudFilesExceptions.NonEmptyContainerException</td><td>SmallDev</td><td style='white-space: nowrap;'>01-Jul-13 19:54</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.Rackspace.CloudFilesExceptions.BaseException</Super>
<TimeChanged>63004,71644.669349</TimeChanged>
<TimeCreated>62243,42238.968431</TimeCreated>
</Class>


<Class name="EF.Rackspace.CloudFilesExceptions.SyntaxException">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.Rackspace.CloudFilesExceptions.SyntaxException.CLS/EV.0
;vc; Component: CLS.EF.Rackspace.CloudFilesExceptions.SyntaxException
;vc;  Location: SmallDev
;vc; Date/Time: 01-Jul-13 19:54
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesExceptions.SyntaxException.CLS/EV.0</td><td>CLS.EF.Rackspace.CloudFilesExceptions.SyntaxException</td><td>SmallDev</td><td style='white-space: nowrap;'>01-Jul-13 19:54</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.Rackspace.CloudFilesExceptions.BaseException</Super>
<TimeChanged>63004,71645.379343</TimeChanged>
<TimeCreated>62243,42168.027156</TimeCreated>
</Class>


<Class name="EF.Rackspace.CloudFilesHTTPClient">
<Description><![CDATA[
TODO: convert all PHP comments to Caché doc style
<!-- ;vc;
;vc;    Object: EF.Rackspace.CloudFilesHTTPClient.CLS/EV.6
;vc; Component: CLS.EF.Rackspace.CloudFilesHTTPClient
;vc;  Location: SmallDev
;vc; Date/Time: 07-Jun-16 12:39
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesHTTPClient.CLS/EV.6</td><td>CLS.EF.Rackspace.CloudFilesHTTPClient</td><td>SmallDev</td><td style='white-space: nowrap;'>07-Jun-16 12:39</td><td>JeremyW</td></tr></table>
]]></Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>EF.Rackspace.CloudFilesBase</Super>
<TimeChanged>64054,63242</TimeChanged>
<TimeCreated>62242,57483.505068</TimeCreated>

<Property name="ErrorString">
<Description>
the last error string</Description>
<Type>%String</Type>
</Property>

<Property name="SSLConfiguration">
<Description>
the Caché SSL configuration to use</Description>
<Type>%String</Type>
</Property>

<Property name="APIVersion">
<Description>
Rackspace Cloud Files API version</Description>
<Type>%String</Type>
</Property>

<Property name="StorageURL">
<Description>
The storage URL</Description>
<Type>%String</Type>
</Property>

<Property name="CDNMURL">
<Description>
The CDN Management URL</Description>
<Type>%String</Type>
</Property>

<Property name="AuthToken">
<Description>
The auth token</Description>
<Type>%String</Type>
</Property>

<Property name="ResponseStatus">
<Description>
Request/Response</Description>
<Type>%String</Type>
</Property>

<Property name="ResponseReason">
<Type>%String</Type>
</Property>

<Property name="tempUrlKey">
<Type>%String</Type>
</Property>

<Property name="connections">
<Description>
Connection types</Description>
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="containerObjectCount">
<Type>%Integer</Type>
<Private>1</Private>
</Property>

<Property name="containerBytesUsed">
<Type>%Integer</Type>
<Private>1</Private>
</Property>

<Property name="containerMetadata">
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
<Private>1</Private>
</Property>

<Property name="objETag">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="objLastModified">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="objContentType">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="objContentLength">
<Type>%Integer</Type>
<Private>1</Private>
</Property>

<Property name="objMetadata">
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
<Private>1</Private>
</Property>

<Property name="objManifest">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="ResponseStream">
<Description>
stream to dump response content into (e.g. in case of object fetch)</Description>
</Property>

<Property name="InStream">
<Description>
stream to write to object (i.e. uploading data into object)</Description>
</Property>

<Method name="%OnNew">
<Description>
constructor</Description>
<FormalSpec>APIVersion:%String="",debug:%Boolean=0</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ..Debug = debug
	Set ..APIVersion = $GET(APIVersion,"")
	Set ..SSLConfiguration = ..#CCFDefaultSSLConfig
	// initialize properties here instead of using InitialExpression ... makes it less confusing	
	Set ..ErrorString = ""
	Set ..StorageURL = ""
	Set ..CDNMURL = ""
	Set ..AuthToken = ""
	Set ..ResponseStatus = ""
	Set ..ResponseReason = ""
	
	// array of connection types to re-use
	Set ..connections(..#CCFConnTypeGetCall)=""
	Set ..connections(..#CCFConnTypePutObj)=""
	Set ..connections(..#CCFConnTypeHead)=""
	Set ..connections(..#CCFConnTypePutCont)=""
	Set ..connections(..#CCFConnTypeDelPost)=""
	Set ..connections(..#CCFConnTypeCopyObj)=""
	
	Set ..containerObjectCount=0
	Set ..containerBytesUsed=0
	
	Set ..ResponseStream = ""
	Set ..InStream = ""
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Authenticate">
<FormalSpec>user:%String,pass:%String,acct:%String="",host:%String="",port:%Integer=443,retInfo:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ret=$$$OK
	// Do ..SetStatus($$$OK)
	
	If (host="") {
		Set host=..#CCFAuthURLUK
	}
		
	// create the HTTP request object to use for Rackspace CloudFiles authentication
	Set authRequest=##class(%Net.HttpRequest).%New()
	Set authRequest.Server=..GetHostNameFromURL(host)
	Set authRequest.Port=port
	Set authRequest.SSLConfiguration=..SSLConfiguration
	Set authRequest.Https=1
	
	Do authRequest.SetHeader("Connection","close")
	
	// what are we going to authenticate against?
	Set authTarget=..GetPathFromURL(host)_..#CCFAuthURLTokensResource
	
	Do ..DoDebug("authTarget="_authTarget)
	
	Do authRequest.EntityBody.Write("{""auth"":{""RAX-KSKEY:apiKeyCredentials"":{""username"":"""_##class(shared.jsonFunctions).jsonEscape(user)_""",""apiKey"":"""_##class(shared.jsonFunctions).jsonEscape(pass)_"""}}}")
	Do authRequest.SetHeader("Content-Type","application/json")
	
	// make the authentication request	
	Set sc=authRequest.Post(authTarget)
	
	If $$$ISERR(sc) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.HTTPException).CreateFromStatus(sc)
	} else {
		Do ..processResponseHeader(authRequest.HttpResponse)
	}
	
	
	Set retInfo("ResponseStatus")=..ResponseStatus
	Set retInfo("ResponseReason")=..ResponseReason
	If (..ResponseStatus = ..#HTTPCodeOK) {
		Set resp=..getResponseAsJSONProxyObject(authRequest.HttpResponse.Data)
		Set retInfo("AuthToken")=resp.access.token.id
		
		Set idxSC=0
		
		While (idxSC < resp.access.serviceCatalog.Count()) {
			Set idxSC=idxSC+1
			Set serviceCatalog=resp.access.serviceCatalog.GetAt(idxSC)
			
			If (serviceCatalog.name="cloudFiles") {
				Set idxEP=0
				While (idxEP < serviceCatalog.endpoints.Count()) {
					Set idxEP=idxEP+1
					Set endpoint=serviceCatalog.endpoints.GetAt(idxEP)
					If (endpoint.region=..getEndpointRegion()) {
						Set retInfo("StorageURL")=endpoint.publicURL
						Set retInfo("StorageURLInternal")=endpoint.internalURL
					}
				}
			}
			
			If (serviceCatalog.name="cloudFilesCDN") {
				Set idxEP=0
				While (idxEP < serviceCatalog.endpoints.Count()) {
					Set idxEP=idxEP+1
					Set endpoint=serviceCatalog.endpoints.GetAt(idxEP)
					If (endpoint.region=..getEndpointRegion()) {
						Set retInfo("CDNMURL")=endpoint.publicURL
					}
				}
			}
		}
	}
	
	
	Quit ret
]]></Implementation>
</Method>

<Method name="getEndpointRegion">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return "LON"
]]></Implementation>
</Method>

<Method name="SetCFAuth">
<FormalSpec>CFAuth:EF.Rackspace.CloudFilesAuthentication,serviceNet:%Boolean=0</FormalSpec>
<Implementation><![CDATA[
	If (serviceNet && ($LENGTH(CFAuth.StorageURLInternal) > 0)) {
		Set ..StorageURL= CFAuth.StorageURLInternal
	} else {
		Set ..StorageURL = CFAuth.StorageURL
	}
	Do ..DoDebug("SetCFAuth,..StorageURL="_..StorageURL)
	Set ..AuthToken = CFAuth.AuthToken
	Set ..CDNMURL = CFAuth.CDNMURL
]]></Implementation>
</Method>

<Method name="Close">
<Implementation><![CDATA[
	// kill all the HTTP request objects
	Set connType=""
	While ($ORDER(..connections(connType))'="") {
		Set connType=$ORDER(..connections(connType))
		Set ..connections(connType)=""
	}
]]></Implementation>
</Method>

<Method name="getResponseAsJSONProxyObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>response</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	Set sta=##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(response,,.ret)
	
	If ($$$ISERR(sta)) {
		Throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sta)
	}
	
	Return ret
]]></Implementation>
</Method>

<Method name="processResponseHeader">
<Description>
Process response headers generically</Description>
<FormalSpec>response:%Net.HttpResponse</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	Set ..ResponseStatus = response.StatusCode
	Set ..ResponseReason = $PIECE(response.StatusLine," ",3,$LENGTH(response.StatusLine," "))
	
	set temp=response.GetHeader(..#CCFContainerBytesUsed)
	If (temp '= "") Set ..containerBytesUsed=+temp
	set temp=response.GetHeader(..#CCFContainerObjCount)
	If (temp '= "") Set ..containerObjectCount=+temp
	
	set temp=response.GetHeader(..#CCFAccountTempUrlKey)
	If (temp '= "") Set ..tempUrlKey=temp
	
	set temp=response.GetHeader(..#HTTPHeaderETag)
	If (temp '= "") Set ..objETag=temp
	set temp=response.GetHeader(..#HTTPHeaderLastModified)
	If (temp '= "") Set ..objLastModified=temp
	set temp=response.GetHeader(..#HTTPHeaderContentLength)
	If (temp '= "") Set ..objContentLength=temp
	set temp=response.GetHeader(..#HTTPHeaderContentType)
	If (temp '= "") Set ..objContentType=temp	
	
	set temp=response.GetHeader(..#CCFManifestHeader)
	If (temp '= "") Set ..objManifest=temp	
	
	// pick up metadata - maybe there's redundant loops here?
	Kill ..objMetadata
	Kill ..containerMetadata
	
	Set headerKey=""
	
	While (response.GetNextHeader(headerKey) '= "") {
		Set headerKey = response.GetNextHeader(headerKey)
		
		
		For headerprefix=..#CCFMetaDataHeader,..#CCFContainerMetaDataHeader {
			If ($EXTRACT($ZCONVERT(headerKey,"U"),1,$LENGTH(headerprefix)) = $ZCONVERT(headerprefix,"U")) {
				// get the metadata key
				Set metadataKey=$EXTRACT(headerKey,$LENGTH(headerprefix)+1,$LENGTH(headerKey))
				Set metadataVal=response.GetHeader(headerKey)
				If (headerprefix=..#CCFMetaDataHeader) {
					Set ..objMetadata(metadataKey)=metadataVal
				} elseif (headerprefix=..#CCFContainerMetaDataHeader) {
					Set ..containerMetadata(metadataKey)=metadataVal
				}
			}
		}
	}
]]></Implementation>
</Method>

<Method name="makePath">
<Description>
Create appropriate full path to container / object</Description>
<FormalSpec>pathType:%String,containerName:%String="",objectName:%String=""</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	 Set path=""
	 
	 Set pathType=$GET(pathType,..#CCFPathTypeStorage)
	 
	 If (pathType = ..#CCFPathTypeStorage) {
		 Set path=path_$LB(..StorageURL)
	 } elseif (pathType = ..#CCFPathTypeCDN) {
		 Set path=path_$LB(..CDNMURL)
	 } elseif (pathType = ..#CCFPathTypeCopyDestination) {
		 // no prefix
	 }
	 
	 if ($GET(containerName,"") '= "") {
		 Set path=path_$LB($$$URLENCODE(containerName))
	 }
	 
	 if ($GET(objectName,"") '= "") {
		 // TODO: do we need to replace %2F with "/" ? (see below)
		 Set path=path_$LB($$$URLENCODE(objectName))
	 }
	 
	 /* if ($o) {
            # mimic Python''s urllib.quote() feature of a "safe" '/' character
            #
            $path[] = str_replace("%2F","/",rawurlencode($o));
        }
        */
        
     Quit $LISTTOSTRING(path,..#CCFHTTPDelim)
]]></Implementation>
</Method>

<Method name="init">
<Description>
Creates a new HTTP request object for the connection type if needed</Description>
<FormalSpec>connType:%String,forceNew:%Boolean=0</FormalSpec>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Do ..DoDebug("init,connType="_connType_",forceNew="_forceNew)
	Set ref=""
	
	If ('$Data(..connections(connType))) {
		Set ..ErrorString=..#CCFErrorConnectionTypeInvalid
		Quit ..#FALSE
	}
	
	If (($GET(..connections(connType)) = "") ! forceNew) {
		Set ref=##class(%Net.HttpRequest).%New()
		Set ref.SSLConfiguration = ..SSLConfiguration
		Set ref.Https = 1
		Set ref.Port = ..#CCFSSLPort
		Do ref.SetHeader("Connection","close")
	} else {
		Quit
	}
	
	/* do we need to set any of these in the future?
        
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, True);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);
        curl_setopt($ch, CURLOPT_MAXREDIRS, 4);
        curl_setopt($ch, CURLOPT_HEADER, 0);
        curl_setopt($ch, CURLOPT_HEADERFUNCTION, array(&$this, '_header_cb'));
        if ($conn_type == "GET_CALL") {
            curl_setopt($ch, CURLOPT_WRITEFUNCTION, array(&$this, '_write_cb'));
        }
        if ($conn_type == "PUT_OBJ") {
            curl_setopt($ch, CURLOPT_PUT, 1);
            curl_setopt($ch, CURLOPT_READFUNCTION, array(&$this, '_read_cb'));
	    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        }
        if ($conn_type == "HEAD") {
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "HEAD");
            curl_setopt($ch, CURLOPT_NOBODY, 1);
        }
        if ($conn_type == "PUT_CONT") {
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PUT");
            curl_setopt($ch, CURLOPT_INFILESIZE, 0);
	    curl_setopt($ch, CURLOPT_NOBODY, 1);
        }
        if ($conn_type == "DEL_POST") {
        	curl_setopt($ch, CURLOPT_NOBODY, 1);
	}
        $this->connections[$conn_type] = $ch;
        return;
    }
	*/
	
	Set ..connections(connType) = ref
	
	Quit
]]></Implementation>
</Method>

<Method name="makeHeaders">
<Description>
validate the headers array, add anything common that's missing</Description>
<FormalSpec>headers:%String,newHeaders:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	Set hasSToken = ..#FALSE
	Set hasUAgent = ..#FALSE
	
	Set headerIdx=0
    
    Set oldHeaderIdx=""
    While ($ORDER(headers(oldHeaderIdx))'="") {
	    Set oldHeaderIdx=$ORDER(headers(oldHeaderIdx))
	    
	    Set key=""
	    Set val=""
	    
	    If ((+oldHeaderIdx)=oldHeaderIdx) {
		    // numeric
		    Set key=$ZSTRIP(($PIECE($GET(headers(oldHeaderIdx),""),":",1)),"<>W")
		    Set val=$ZSTRIP(($PIECE($GET(headers(oldHeaderIdx),""),":",2)),"<>W")
	    } else {
		    Set key=oldHeaderIdx
		    Set val=$GET(headers(oldHeaderIdx),"")
	    }
	    
	    If ($ZCONVERT(key,"U") = $ZCONVERT(..#CCFAuthToken,"U")) {
		    Set hasSToken=1
	    }
	    
	    If ($ZCONVERT(key,"U") = $ZCONVERT(..#HTTPHeaderUserAgent,"U")) {
		    Set hasUAgent=1
	    }
	    
	    Set headerIdx=headerIdx+1
	    
	    set newHeaders(headerIdx,"key")=key
	    set newHeaders(headerIdx,"val")=val
    }    
    
	If 'hasSToken {
		Set headerIdx=headerIdx+1
		Set newHeaders(headerIdx,"key")=..#CCFAuthToken
		Set newHeaders(headerIdx,"val")=..AuthToken
	}
	
	If 'hasUAgent {
		Set headerIdx=headerIdx+1
		Set newHeaders(headerIdx,"key")=..#HTTPHeaderUserAgent
		Set newHeaders(headerIdx,"val")=..#CCFUserAgent
	}
]]></Implementation>
</Method>

<Method name="setHeaders">
<Description><![CDATA[
set header on HTTP request object according to array
array must be in format:
	headers(1,"key")=<key>
	headers(1,"val")=<value>
	headers(2,"key")=<key>
	headers(2,"val")=<value>
		...]]></Description>
<FormalSpec>httpReq:%Net.HttpRequest,headers:%String=""</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	Set headerIdx=""
	// Do httpReq.Reset()
	While ($ORDER(headers(headerIdx))'="") {
		Set headerIdx=$ORDER(headers(headerIdx))
		Do ..DoDebug("HEADER="_$GET(headers(headerIdx,"key"),"")_": "_$GET(headers(headerIdx,"val"),""))
		Do httpReq.SetHeader($GET(headers(headerIdx,"key"),""),$GET(headers(headerIdx,"val"),""))
	}
]]></Implementation>
</Method>

<Method name="createContainerMetadataHeaders">
<FormalSpec>container:EF.Rackspace.CloudFilesContainer,headers:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set metadataKey=""
	
	Set ret=..#TRUE
	
	Do ..DoDebug("Creating container metadata headers...")
	
	While (container.GetNextMetadataKey(metadataKey) '= "") {
		set metadataKey=container.GetNextMetadataKey(metadataKey)
		
		set metadataVal=container.GetMetadataValue(metadataKey)
		
		if (metadataKey[..#CCFHTTPHeaderDelim) {
			Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorMetadataKeyContainsHeaderDelim)
		}
		
		Set metadataKey=$ZSTRIP(metadataKey,"*WC")
		
		Set key=..#CCFContainerMetaDataHeader_metadataKey
		
		If ('$DATA(headers(key))) {
			If (($LENGTH(metadataKey) > ..#CCFMaxMetaDataKeySize) ! ($LENGTH(metadataVal) > ..#CCFMaxMetaDataValSize)) {
				Set ..ErrorString = ..#CCFErrorMetadataKeyOrValTooLarge
				Set ret=..#FALSE
				Quit
			} else {
				Set headers(key)=metadataVal
				Do ..DoDebug("container metadata header added: "_key_": "_metadataVal)
			}
		}
	}
	
	Quit ..#TRUE
]]></Implementation>
</Method>

<Method name="createMetadataHeaders">
<Description>
Generate metadata headers</Description>
<FormalSpec>obj:EF.Rackspace.CloudFilesObject,headers:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	// kill headers
	
	if (obj.Manifest '= "") {
		Set headers(..#CCFManifestHeader)=obj.Manifest
	}
	
	set metadataKey=""
	
	Set ret=..#TRUE
	
	Do ..DoDebug("Creating metadata headers...")
	
	While (obj.GetNextMetadataKey(metadataKey) '= "") {
		set metadataKey=obj.GetNextMetadataKey(metadataKey)
		
		set metadataVal=obj.GetMetadataValue(metadataKey)
		
		if (metadataKey[..#CCFHTTPHeaderDelim) {
			Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorMetadataKeyContainsHeaderDelim)
		}
		
		Set metadataKey=$ZSTRIP(metadataKey,"<>W")
		
		Set key=..#CCFMetaDataHeader_metadataKey
		
		If ('$DATA(headers(key))) {
			If (($LENGTH(metadataKey) > ..#CCFMaxMetaDataKeySize) ! ($LENGTH(metadataVal) > ..#CCFMaxMetaDataValSize)) {
				Set ..ErrorString = ..#CCFErrorMetadataKeyOrValTooLarge
				Set ret=..#FALSE
				Quit
			} else {
				Set headers(key)=metadataVal
				Do ..DoDebug("metadata header added: "_key_": "_metadataVal)
			}
		}
	}
	
	Quit ..#TRUE
]]></Implementation>
</Method>

<Method name="sendRequest">
<FormalSpec>connType:%String,urlPath:%String,headers:%String="",method:%String="",forceNew:%Boolean=0,retries:%Integer=1</FormalSpec>
<Private>1</Private>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	If $GET(method,"")="" Set method = ..#HTTPMethodGet
	
	Do ..init(connType,forceNew)
	
	kill newHeaders
	Do ..makeHeaders(.headers,.newHeaders)
	
	Set noConn=0
	
	If ('$DATA(..connections(connType))) {
		Set noConn=1
	} elseif ($CLASSNAME(..connections(connType)) = "") {
		Set noConn=1
	}
	
	If (noConn) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.ConnectionNotOpenException).%New(..#CCFErrorConnectionNotOpen)
	}
	
	Set httpRef=..connections(connType)
	
	Do ..setHeaders(.httpRef,.newHeaders)
	
	Do ..DoDebug("AuthToken = "_httpRef.GetHeader(..#CCFAuthToken))
	
	Set sc=""
	
	Do ..DoDebug("sendRequest,urlPath="_urlPath)
	
	Set httpRef.Server=..GetHostNameFromURL(urlPath)
	
	Set relPath = ..GetPathWithQueryFromURL(urlPath)
	
	Do ..DoDebug("sendRequest,relPath="_relPath)
	
	if (connType = ..#CCFConnTypePutObj) {
		set sc = httpRef.EntityBody.CopyFrom(..InStream)	
	}

	
	// maybe could just use .Send() for everything?
	for attempt=1:1:retries+1 {
		Do ..DoDebug("sendRequest,attempt="_attempt)
		if (connType = ..#CCFConnTypePutCont) {
			Set sc = httpRef.Put(relPath)
		} elseif (connType = ..#CCFConnTypeDelPost) {
			Set sc = httpRef.Send(method,relPath)
		} elseif (connType = ..#CCFConnTypeHead) {
			Set sc = httpRef.Send(..#HTTPMethodHead,relPath)
		} elseif (connType = ..#CCFConnTypeGetCall) {
			If ..ResponseStream '= "" Set httpRef.ResponseStream = ..ResponseStream
			Set sc = httpRef.Get(relPath)
			If httpRef.ResponseStream '= "" Set httpRef.ResponseStream = ""
		} elseif (connType = ..#CCFConnTypePutObj) {
			Set sc = httpRef.Put(relPath)
		} elseif (connType = ..#CCFConnTypeCopyObj) {
			Set sc = httpRef.Send(..#HTTPMethodCopy,relPath)
		}
		
		Do ..DoDebug("sendRequest,requestStatus="_sc)
		
		If ..isHTTPRequestStatusOK(sc) {
			Do ..DoDebug("sendRequest,httpRef.HttpResponse.StatusCode="_httpRef.HttpResponse.StatusCode)
			if httpRef.HttpResponse.StatusCode = ..#HTTPCodeOK {
				quit	
			}
			if httpRef.HttpResponse.StatusCode = ..#HTTPCodeCreated {
				quit	
			}
			if httpRef.HttpResponse.StatusCode = ..#HTTPCodeAccepted {
				quit	
			}
			if httpRef.HttpResponse.StatusCode = ..#HTTPCodeNoContent {
				quit	
			}
			if httpRef.HttpResponse.StatusCode = ..#HTTPCodeNotFound {
				quit	
			}
		}
		
	}
	
	If '..isHTTPRequestStatusOK(sc,.errmsg) {
		Set ..ErrorString=errmsg
		return ..#FALSE
	}
	
	If (..Debug && (..ResponseStream = "")) {
		Do ..DoDebug("----")
		Write !
		Do httpRef.HttpResponse.OutputToDevice()
		Do ..DoDebug("----")
	}
	
	// TODO: reset response stream?
	Set ..ResponseStream = ""
	
	Do ..processResponseHeader(httpRef.HttpResponse)
	Quit httpRef.HttpResponse.StatusCode
]]></Implementation>
</Method>

<Method name="isHTTPRequestStatusOK">
<FormalSpec><![CDATA[sc,&errmsg]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set errmsg=""
	If $$$ISERR(sc) {
		Set errmsg=..GetErrMsg(sc)
		Do ..DoDebug("sendRequest,errmsg="_errmsg)
		// ignore error messages about attempting to rewind device stream .. expected
		If ((errmsg["<METHOD DOES NOT EXIST>") && (errmsg["Rewind"))  {
		} else {
			return 0
		}
	}
	
	return 1
]]></Implementation>
</Method>

<Method name="CreateContainer">
<Description>
PUT /v1/Account/Container</Description>
<FormalSpec>containerName:%String=""</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	If ($GET(containerName,"") = "") {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorContainerNameNotSet)
	}
	
	Set urlPath = ..makePath(..#CCFPathTypeStorage,containerName)
	
	Set returnCode = ..sendRequest(..#CCFConnTypePutCont,urlPath)

	if ('returnCode) {
        Set ..ErrorString = ..ErrorString_..#CCFErrorMsgDelim_..#CCFErrorNoHTTPResponse
        Quit ..#FALSE
	} else {
		Quit returnCode
	}
]]></Implementation>
</Method>

<Method name="UpdateContainer">
<FormalSpec>container:EF.Rackspace.CloudFilesContainer</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	If (container.GetNextMetadataKey("") = "") {
		Set ..ErrorString = ..#CCFErrorMetadataEmpty
		Quit ..#FALSE
	}
	
	Set urlPath = ..makePath(..#CCFPathTypeStorage,container.Name)
	
	Set ret=..createContainerMetadataHeaders(container,.headers)
	
	Set returnCode = ..sendRequest(..#CCFConnTypeDelPost,urlPath,.headers,..#HTTPMethodPost)
	
	If ('returnCode) {
		Set ..ErrorString = ..ErrorString_..#CCFErrorMsgDelim_..#CCFErrorNoHTTPResponse
        Quit returnCode
	}
	
	If (returnCode = ..#HTTPCodeNotFound) {
		Set ..ErrorString = ..#CCFErrorAccountContainerObjectNotFound
		Quit returnCode
	}
	
	If (returnCode '= ..#HTTPCodeAccepted) {
		Set ..ErrorString = ..#CCFErrorUnexpectedResponse
		Quit returnCode
	}
	Quit returnCode
]]></Implementation>
</Method>

<Method name="DeleteContainer">
<Description>
DELETE /v1/Account/Container</Description>
<FormalSpec>containerName:%String=""</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	If (containerName = "") {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorContainerNameNotSet)
	}
	 
	Set urlPath = ..makePath(..#CCFPathTypeStorage,containerName)
	
	Set returnCode = ..sendRequest(..#CCFConnTypeDelPost,urlPath,,..#HTTPMethodDelete)

	if ('returnCode) {
        Set ..ErrorString = ..ErrorString_..#CCFErrorMsgDelim_..#CCFErrorNoHTTPResponse
    }
    
    if (returnCode = ..#HTTPCodeConflict) {
	    Set ..ErrorString = ..#CCFErrorContainerToDeleteNotEmpty
    }
    
    if (returnCode = ..#HTTPCodeNotFound) {
	    Set ..ErrorString = ..#CCFErrorContainerToDeleteDoesNotExist
    }
    
    if (returnCode '= ..#HTTPCodeNoContent) {
	    Set ..ErrorString = ..#CCFErrorUnexpectedResponse
    }
	 
	Quit returnCode
]]></Implementation>
</Method>

<Method name="HeadContainer">
<Description>
HEAD /v1/Account/Container</Description>
<FormalSpec>containerName:%String="",retInfo:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	If (containerName = "") {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorContainerNameNotSet)
	}

	Set urlPath = ..makePath(..#CCFPathTypeStorage,containerName)
	
	Set returnCode = ..sendRequest(..#CCFConnTypeHead,urlPath)
	
	Set retInfo("ResponseStatus")=returnCode
	Set retInfo("ResponseReason")=..ResponseReason
	Set retInfo("Count")=0
	Set retInfo("Bytes")=0
	Kill retInfo("MetaData")

	if ('returnCode) {
        Set ..ErrorString = ..ErrorString_..#CCFErrorMsgDelim_..#CCFErrorNoHTTPResponse
        Set retInfo("ResponseReason")=..ErrorString
        Quit returnCode
    }

	if (returnCode = ..#HTTPCodeNotFound) {
		Set retInfo("ResponseReason")=..#CCFErrorContainerNotFound
		Quit returnCode
	}
	
	if ((returnCode = ..#HTTPCodeNoContent) ! (returnCode = ..#HTTPCodeOK)) {
		Set retInfo("Count")=..containerObjectCount
		Set retInfo("Bytes")=..containerBytesUsed
		Merge retInfo("MetaData")=..containerMetadata
	}
	
	Quit returnCode
]]></Implementation>
</Method>

<Method name="HeadObject">
<Description>
HEAD /v1/Account/Container/Object</Description>
<FormalSpec>obj:EF.Rackspace.CloudFilesObject,retInfo:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	If ($CLASSNAME(obj) '= ##class(EF.Rackspace.CloudFilesObject).%ClassName(1)) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorObjectInvalid)
	}
	
	Set urlPath = ..makePath(..#CCFPathTypeStorage,obj.Container.Name,obj.Name)
	
	Set returnCode = ..sendRequest(..#CCFConnTypeHead,urlPath)

	Set retInfo("ResponseStatus")=returnCode
	Set retInfo("ResponseReason")=..ResponseReason
	Set retInfo("ETag")=""
	Set retInfo("LastModified")=""
	Set retInfo("ContentType")=""
	Set retInfo("ContentLength")=0
	Kill retInfo("MetaData")
	Set retInfo("Manifest")=""
	
	if ('returnCode) {
        Set ..ErrorString = ..ErrorString_..#CCFErrorMsgDelim_..#CCFErrorNoHTTPResponse
        Set retInfo("ResponseReason")=..ErrorString
        Quit returnCode
    }
    
	if (returnCode = ..#HTTPCodeNotFound) {
		Quit returnCode
    }
    
    if ((returnCode = ..#HTTPCodeNoContent) ! (returnCode = ..#HTTPCodeOK)) {
	    Set retInfo("ETag")=..objETag
		Set retInfo("LastModified")=..objLastModified
		Set retInfo("ContentType")=..objContentType
		Set retInfo("ContentLength")=..objContentLength
		Merge retInfo("MetaData")=..objMetadata
		Set retInfo("Manifest")=..objManifest
		Quit returnCode
    }
    
	Set ..ErrorString = ..#CCFErrorUnexpectedResponse_..#CCFErrorMsgDelim_returnCode
    Set retInfo("ResponseReason")=..ErrorString_..#CCFErrorMsgDelim_..ResponseReason
    
	Quit returnCode
]]></Implementation>
</Method>

<Method name="GetObjectToStream">
<Description>
GET /v1/Account/Container/Object
</Description>
<FormalSpec>obj:EF.Rackspace.CloudFilesObject,outStream="",headers:%String="",retInfo:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	If ($CLASSNAME(obj) '= ##class(EF.Rackspace.CloudFilesObject).%ClassName(1)) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorObjectInvalid)
	}
	
	// not really a proper test of whether the stream is valid
	If ($CLASSNAME(outStream) = "") {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorInvalidStream)
	}
	
	Set urlPath = ..makePath(..#CCFPathTypeStorage,obj.Container.Name,obj.Name)
	
	Set ..ResponseStream = outStream
	
	Set returnCode = ..sendRequest(..#CCFConnTypeGetCall,urlPath,headers)
	
	Set ..ResponseStream = ""
	
	Set retInfo("ResponseStatus")=returnCode
	Set retInfo("ResponseReason")=..ResponseReason
	
	if ('returnCode) {
        Set ..ErrorString = ..ErrorString_..#CCFErrorMsgDelim_..#CCFErrorNoHTTPResponse
        Set retInfo("ResponseReason")=..ErrorString
        Quit returnCode
    }
    
    if (returnCode '= ..#HTTPCodeNotFound) {
        Set ..ErrorString = ..#CCFErrorObjectDoesNotExist
        Set retInfo("ResponseReason")=..ErrorString
        Quit returnCode
    }
    
    if ((returnCode < ..#HTTPCodeOK) ! 
    	((returnCode >= ..#HTTPCodeMultipleChoices) 
    		&& (returnCode '= ..#HTTPCodePreconditionFailed) && (returnCode '= ..#HTTPCodeNotModified))) {
		Set ..ErrorString = ..#CCFErrorUnexpectedResponse_..#CCFErrorMsgDelim_returnCode
		Set retInfo("ResponseReason")=..ErrorString
		Quit returnCode
    }
    
    Do ..DoDebug("GetObjectToStream,returnCode="_returnCode)

	Quit returnCode
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
PUT /v1/Account/Container/Object</Description>
<FormalSpec>obj:EF.Rackspace.CloudFilesObject,inStream="",retInfo:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	If ($CLASSNAME(obj) '= ##class(EF.Rackspace.CloudFilesObject).%ClassName(1)) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorObjectInvalid)
	}
	
	// not really a proper test of whether the stream is valid
	If ($CLASSNAME(inStream) = "") {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorInvalidStream)
	}
	
	Set urlPath = ..makePath(..#CCFPathTypeStorage,obj.Container.Name,obj.Name)
	
	// TODO: ETag
	
	Set ..InStream = inStream
	
	Set ret=..createMetadataHeaders(obj,.headers)
	
	If (obj.ETag '= "") {
		Set headers(..#HTTPHeaderETag)=obj.ETag
	}
	
	If (obj.ContentType = "") {
		Set headers(..#HTTPHeaderContentType)=..#CCFMIMETypeDefault
	} else {
		Set headers(..#HTTPHeaderContentType)=obj.ContentType
	}
	
	Do ..init(..#CCFConnTypePutObj)
	
	If (obj.ContentLength = 0) {
		// TODO: chunked?
		/*
			# We don''t know the Content-Length, so assumed "chunked" PUT
            #
            curl_setopt($this->connections[$conn_type], CURLOPT_UPLOAD, True);
            $hdrs[] = 'Transfer-Encoding: chunked';
		*/
	} else {
		// Set ..connections(..#CCFConnTypePutObj).ContentLength=obj.ContentLength
		Set headers(..#HTTPHeaderContentLength)=obj.ContentLength
	}
	
	Set returnCode = ..sendRequest(..#CCFConnTypePutObj,urlPath,.headers)
	
	Set ..InStream = ""
	
	Set retInfo("ResponseStatus")=returnCode
	Set retInfo("ResponseReason")=..ResponseReason
	
	If ('returnCode) {
		Set ..ErrorString = ..ErrorString_..#CCFErrorMsgDelim_..#CCFErrorNoHTTPResponse
        Set retInfo("ResponseReason")=..ErrorString
        Quit returnCode
	}
	
	If (returnCode = ..#HTTPCodePreconditionFailed) {
		Set ..ErrorString = ..#CCFErrorMissingContentType
		Set retInfo("ResponseReason")=..ErrorString
		Set retInfo("ETag")=""
		Quit returnCode
	}	
	
	If (returnCode = ..#HTTPCodeUnprocessableEntity) {
		Set ..ErrorString = ..#CCFErrorChecksumMismatch
		Set retInfo("ResponseReason")=..ErrorString
		Set retInfo("ETag")=""
		Quit returnCode
	}
	
	If (returnCode '= ..#HTTPCodeCreated) {
		Set ..ErrorString = ..#CCFErrorUnexpectedResponse
		Set retInfo("ResponseReason")=..ErrorString
		Set retInfo("ETag")=""
		Quit returnCode
	}
	    
    Set retInfo("ETag")=..objETag
        
	Quit returnCode
]]></Implementation>
</Method>

<Method name="CopyObject">
<Description>
COPY /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/MySourceContainer/MySourceObject HTTP/1.1
Destination: /MyDestinationContainer/MyDestinationObject</Description>
<FormalSpec>objSource:EF.Rackspace.CloudFilesObject,objDestination:EF.Rackspace.CloudFilesObject,retInfo:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	If ($CLASSNAME(objSource) '= ##class(EF.Rackspace.CloudFilesObject).%ClassName(1)) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorObjectInvalid)
	}
	
	If ($CLASSNAME(objDestination) '= ##class(EF.Rackspace.CloudFilesObject).%ClassName(1)) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorObjectInvalid)
	}
	
	Set urlPathSource = ..makePath(..#CCFPathTypeStorage,objSource.Container.Name,objSource.Name)
	Set urlPathDestination = ..makePath(..#CCFPathTypeCopyDestination,objDestination.Container.Name,objDestination.Name)
	
	Set ret=..createMetadataHeaders(objDestination,.headers)
	
	Set headers(..#HTTPHeaderCopyDestination)=urlPathDestination
	
	If (objDestination.ETag '= "") {
		Set headers(..#HTTPHeaderETag)=objDestination.ETag
	}
	
	If (objDestination.ContentType = "") {
		Set headers(..#HTTPHeaderContentType)=..#CCFMIMETypeDefault
	} else {
		Set headers(..#HTTPHeaderContentType)=objDestination.ContentType
	}
	
	Do ..init(..#CCFConnTypeCopyObj)
	
	Set returnCode = ..sendRequest(..#CCFConnTypeCopyObj,urlPathSource,.headers)
	
	Set retInfo("ResponseStatus")=returnCode
	Set retInfo("ResponseReason")=..ResponseReason
	
	If ('returnCode) {
		Set ..ErrorString = ..ErrorString_..#CCFErrorMsgDelim_..#CCFErrorNoHTTPResponse
        Set retInfo("ResponseReason")=..ErrorString
        Quit returnCode
	}
	
	If (returnCode '= ..#HTTPCodeCreated) {
		Set ..ErrorString = ..#CCFErrorUnexpectedResponse
		Set retInfo("ResponseReason")=..ErrorString
		Set retInfo("ETag")=""
		Quit returnCode
	}
	    
    Set retInfo("ETag")=..objETag
        
	Quit returnCode
]]></Implementation>
</Method>

<Method name="DeleteObject">
<Description>
DELETE /v1/Account/Container/Object</Description>
<FormalSpec>containerName:%String,objectName:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	If (containerName = "") {
		Set ..ErrorString = ..#CCFErrorContainerNameNotSet
		Quit ..#FALSE
	}
	
	If (objectName = "") {
		Set ..ErrorString = ..#CCFErrorObjectNameNotSet
		Quit ..#FALSE
	}
	
	Set urlPath = ..makePath(..#CCFPathTypeStorage,containerName,objectName)
	
	Set returnCode = ..sendRequest(..#CCFConnTypeDelPost,urlPath,,..#HTTPMethodDelete)
	
	If ('returnCode) {
		Set ..ErrorString = ..ErrorString_..#CCFErrorMsgDelim_..#CCFErrorInvalidResponse
		Quit ..#FALSE
	}
	
	If (returnCode = ..#HTTPCodeNotFound) {
		Set ..ErrorString = ..#CCFErrorObjectToDeleteDoesNotExist
	}
	
	If (returnCode '= ..#HTTPCodeNoContent) {
		Set ..ErrorString = ..#CCFErrorUnexpectedResponse_..#CCFErrorMsgDelim_returnCode
	}
	
	Quit returnCode
]]></Implementation>
</Method>

<Method name="ListContainers">
<Description>
GET /v1/Account</Description>
<FormalSpec>limit:%Integer=0,marker:%String="",retInfo:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set urlPath = ..makePath(..#CCFPathTypeStorage)
	
	Set limit=(+limit)
	
	Set params = $LB(..#CCFHTTPReqStringFormat_..#CCFHTTPReqStringAssign_..#CCFHTTPReqStringFormatXML)
	
	If (limit > 0) {
		Set params=params_$LB(..#CCFHTTPReqStringLimit_..#CCFHTTPReqStringAssign_limit)
	}
	
	If (marker '= "") {
		Set params=params_$LB(..#CCFHTTPReqStringMarker_..#CCFHTTPReqStringAssign_$$$URLENCODE(marker))
	}
	
	If ($LISTLENGTH(params) > 0) {
		Set urlPath = urlPath_..#CCFHTTPReqStringSep_$LISTTOSTRING(params,..#CCFHTTPReqStringDelim)
	}
	
	Do ..DoDebug("ListContainers,urlPath="_urlPath)
	
	Set returnCode = ..sendRequest(..#CCFConnTypeGetCall,urlPath)

	Set retInfo("ResponseStatus")=returnCode
	Set retInfo("ResponseReason")=..ResponseReason
	Set retInfo("ContainerCount")=0
	Kill retInfo("ContainersList")
	
	If ('returnCode) {
		Set ..ErrorString = ..ErrorString_..#CCFErrorMsgDelim_..#CCFErrorInvalidResponse
		Set retInfo("ResponseReason")=..ErrorString
		Quit returnCode
	}
	
	If (returnCode = ..#HTTPCodeNoContent) {
		Set retInfo("ResponseReason")=..#CCFErrorAccountHasNoContainers
		Quit returnCode
	}
	
	If (returnCode = ..#HTTPCodeNotFound) {
		Set ..ErrorString = ..#CCFErrorInvalidAccountName
		Set retInfo("ResponseReason")=..ErrorString
		Quit returnCode
	}
	
	If (returnCode = ..#HTTPCodeOK) {
		Set retInfo("ContainerCount")=..processContainersList(..connections(..#CCFConnTypeGetCall).HttpResponse,.containersList)
		Merge retInfo("ContainersList")=containersList
		Quit returnCode
	}
	
	Set ..ErrorString = ..#CCFErrorUnexpectedResponse_..#CCFErrorMsgDelim_..ResponseReason

	Quit returnCode
]]></Implementation>
</Method>

<Method name="processContainersList">
<Description>
Extract list of containers from XML response
Returns count of containers</Description>
<FormalSpec>response:%Net.HttpResponse,containersList:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set containerCount=0
	
	Set responseStream=response.Data
	
	Set sc=##class(%XML.TextReader).ParseStream(responseStream,.reader)
	
	If $$$ISERR(sc) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.InvalidResponseException).%New(..#CCFErrorInvalidXMLResponse)
	}
	
	While (reader.Read()) {
		If ((reader.NodeType="element") && (reader.Name=..#CCFXMLNodeContainer)) {
			Set containerCount=containerCount+1
			While (reader.Read() && '(((reader.NodeType = "endelement") && (reader.Name = ..#CCFXMLNodeContainer)))) {
				Set itemList=$LB(..#CCFXMLNodeName,..#CCFXMLNodeCount,..#CCFXMLNodeBytes)
				For itemIdx=1:1:$LISTLENGTH(itemList) {
					set item=$LISTGET(itemList,itemIdx)
					If ((reader.NodeType="element") && (reader.Name=item)) {
						Set val=""
						While (reader.Read() && (reader.NodeType="chars")) {
							set val=val_reader.Value
						}
						If (val '= "") {
							Set containersList(containerCount,item)=val
						}
					}
				}
			}
		}
	}
	
	Quit containerCount
]]></Implementation>
</Method>

<Method name="ListObjects">
<Description>
GET /v1/Account/Container</Description>
<FormalSpec>containerName:%String,limit:%Integer=0,marker:%String="",prefix:%String="",path:%String="",retInfo:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set retInfo("ResponseStatus")=0
	Set retInfo("ResponseReason")=""
	Set retInfo("ObjectCount")=0
	Kill retInfo("ObjectsList")
	
	If (containerName = "") {
		Set ..ErrorString = ..#CCFErrorContainerNameNotSet
		Set retInfo("ResponseReason")=..ErrorString
		Quit ..#FALSE
	}
	
	Set urlPath = ..makePath(..#CCFPathTypeStorage, containerName)
	
	Set limit=(+limit)
	
	Set params = $LB(..#CCFHTTPReqStringFormat_..#CCFHTTPReqStringAssign_..#CCFHTTPReqStringFormatXML)
	
	If (limit > 0) {
		Set params=params_$LB(..#CCFHTTPReqStringLimit_..#CCFHTTPReqStringAssign_limit)
	}
	
	If (marker '= "") {
		Set params=params_$LB(..#CCFHTTPReqStringMarker_..#CCFHTTPReqStringAssign_$$$URLENCODE(marker))
	}
	
	If (path '= "") {
		Set params=params_$LB(..#CCFHTTPReqStringPath_..#CCFHTTPReqStringAssign_$$$URLENCODE(path))
	}
	
	If (prefix '= "") {
		Set params=params_$LB(..#CCFHTTPReqStringPrefix_..#CCFHTTPReqStringAssign_$$$URLENCODE(prefix))
	}
	
	If ($LISTLENGTH(params) > 0) {
		Set urlPath = urlPath_..#CCFHTTPReqStringSep_$LISTTOSTRING(params,..#CCFHTTPReqStringDelim)
	}
	
	Do ..DoDebug("ListObjects,urlPath="_urlPath)

	Set returnCode = ..sendRequest(..#CCFConnTypeGetCall,urlPath)
	
	Set retInfo("ResponseStatus")=returnCode
	Set retInfo("ResponseReason")=..ResponseReason

	If ('returnCode) {
		Set ..ErrorString = ..ErrorString_..#CCFErrorMsgDelim_..#CCFErrorInvalidResponse
		Set retInfo("ResponseReason")=..ErrorString
		Quit returnCode
	}
	
	If (returnCode = ..#HTTPCodeNoContent) {
		Set ..ErrorString =..#CCFErrorContainerHasNoObjects
		Set retInfo("ResponseReason")=..ErrorString
		Quit returnCode
	}
	
	If (returnCode = ..#HTTPCodeNotFound) {
		Set ..ErrorString =..#CCFErrorContainerHasNoObjects
		Set retInfo("ResponseReason")=..ErrorString
		Quit returnCode
	}
	
	If (returnCode = ..#HTTPCodeOK) {
		Set retInfo("ObjectCount")=..processObjectsList(..connections(..#CCFConnTypeGetCall).HttpResponse,.objectsList)
		Merge retInfo("ObjectsList")=objectsList
		Quit returnCode
	}
	
	Set ..ErrorString = ..#CCFErrorUnexpectedResponse_..#CCFErrorMsgDelim_..ResponseReason

	Quit returnCode
]]></Implementation>
</Method>

<Method name="processObjectsList">
<Description>
Extract list of objects from XML response
Returns count of objects</Description>
<FormalSpec>response:%Net.HttpResponse,objectsList:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set objectCount=0
	
	Set responseStream=response.Data
	
	Set sc=##class(%XML.TextReader).ParseStream(responseStream,.reader)
	
	If $$$ISERR(sc) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.InvalidResponseException).%New(..#CCFErrorInvalidXMLResponse)
	}
	
	While (reader.Read()) {
		If ((reader.NodeType="element") && (reader.Name=..#CCFXMLNodeContainer)) {
			While (reader.Read() && '(((reader.NodeType = "endelement") && (reader.Name = ..#CCFXMLNodeContainer)))) {
				If ((reader.NodeType="element") && (reader.Name=..#CCFXMLNodeObject)) {
					Set objectCount=objectCount+1
					While (reader.Read() && '(((reader.NodeType = "endelement") && (reader.Name = ..#CCFXMLNodeObject)))) {
						Set itemList=$LB(..#CCFXMLNodeName,..#CCFXMLNodeHash,..#CCFXMLNodeBytes,..#CCFXMLNodeLastModified,..#CCFXMLNodeContentType)
						For itemIdx=1:1:$LISTLENGTH(itemList) {
							set item=$LISTGET(itemList,itemIdx)
							If ((reader.NodeType="element") && (reader.Name=item)) {
								Set val=""
								While (reader.Read() && (reader.NodeType="chars")) {
									set val=val_reader.Value
								}
								If (val '= "") {
									Set objectsList(objectCount,item)=val
								}
							}
						}
					}
				}
			}
		}
	}
	
	Quit objectCount
]]></Implementation>
</Method>

<Method name="UpdateObject">
<Description>
POST /v1/Account/Container/Object</Description>
<FormalSpec>obj:EF.Rackspace.CloudFilesObject</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	If ($CLASSNAME(obj) '= ##class(EF.Rackspace.CloudFilesObject).%ClassName(1)) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorObjectInvalid)
	}
	
	If (obj.GetNextMetadataKey("") = "") {
		Set ..ErrorString = ..#CCFErrorMetadataEmpty
		Quit ..#FALSE
	}
	
	Set urlPath = ..makePath(..#CCFPathTypeStorage,obj.Container.Name,obj.Name)
	
	Set ret=..createMetadataHeaders(obj,.headers)
	
	Set returnCode = ..sendRequest(..#CCFConnTypeDelPost,urlPath,.headers,..#HTTPMethodPost)
	
	If ('returnCode) {
		Set ..ErrorString = ..ErrorString_..#CCFErrorMsgDelim_..#CCFErrorNoHTTPResponse
        Quit returnCode
	}
	
	If (returnCode = ..#HTTPCodeNotFound) {
		Set ..ErrorString = ..#CCFErrorAccountContainerObjectNotFound
		Quit returnCode
	}
	
	If (returnCode '= ..#HTTPCodeAccepted) {
		Set ..ErrorString = ..#CCFErrorUnexpectedResponse
		Quit returnCode
	}
	Quit returnCode
]]></Implementation>
</Method>

<Method name="HeadAccount">
<Description>
HEAD /v1/Account</Description>
<FormalSpec>retInfo:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	
	Set urlPath = ..makePath(..#CCFPathTypeStorage)
	
	Set returnCode = ..sendRequest(..#CCFConnTypeHead,urlPath)
	
	Set retInfo("ResponseStatus")=returnCode
	Set retInfo("ResponseReason")=..ResponseReason
	
	if ('returnCode) {
        Set ..ErrorString = ..ErrorString_..#CCFErrorMsgDelim_..#CCFErrorNoHTTPResponse
        Set retInfo("ResponseReason")=..ErrorString
        Quit returnCode
    }

	if (returnCode = ..#HTTPCodeNotFound) {
		Set retInfo("ResponseReason")=..#CCFErrorAccountContainerObjectNotFound
		Quit returnCode
	}
	
	if ((returnCode = ..#HTTPCodeNoContent) ! (returnCode = ..#HTTPCodeOK)) {
		Do ..DoDebug("headAccount,tempUrlKey="_..tempUrlKey)
		Set retInfo("TempUrlKey")=..tempUrlKey
	}
	
	Quit returnCode
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^EF.Rackspace.CloudFilesHFA46D</DataLocation>
<DefaultData>CloudFilesHTTPClientDefaultData</DefaultData>
<IdLocation>^EF.Rackspace.CloudFilesHFA46D</IdLocation>
<IndexLocation>^EF.Rackspace.CloudFilesHFA46I</IndexLocation>
<StreamLocation>^EF.Rackspace.CloudFilesHFA46S</StreamLocation>
<Data name="CloudFilesHTTPClientDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Debug</Value>
</Value>
<Value name="3">
<Value>ErrorString</Value>
</Value>
<Value name="4">
<Value>SSLConfiguration</Value>
</Value>
<Value name="5">
<Value>APIVersion</Value>
</Value>
<Value name="6">
<Value>StorageURL</Value>
</Value>
<Value name="7">
<Value>CDNMURL</Value>
</Value>
<Value name="8">
<Value>AuthToken</Value>
</Value>
<Value name="9">
<Value>ResponseStatus</Value>
</Value>
<Value name="10">
<Value>ResponseReason</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.Rackspace.CloudFilesObject">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.Rackspace.CloudFilesObject.CLS/EV.3
;vc; Component: CLS.EF.Rackspace.CloudFilesObject
;vc;  Location: SmallDev
;vc; Date/Time: 07-Jun-16 12:39
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesObject.CLS/EV.3</td><td>CLS.EF.Rackspace.CloudFilesObject</td><td>SmallDev</td><td style='white-space: nowrap;'>07-Jun-16 12:39</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.Rackspace.CloudFilesBase</Super>
<TimeChanged>64049,69982</TimeChanged>
<TimeCreated>62243,58500.82279</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/**
 * Object operations
 *
 * An Object is analogous to a file on a conventional filesystem. You can
 * read data from, or write data to your Objects. You can also associate 
 * arbitrary metadata with them.
 *
 * @package php-cloudfiles
 */
]]></Content>
</UDLText>

<Property name="Container">
<Type>EF.Rackspace.CloudFilesContainer</Type>
</Property>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="LastModified">
<Type>%String</Type>
</Property>

<Property name="ContentType">
<Type>%String</Type>
</Property>

<Property name="ContentLength">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Metadata">
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
</Property>

<UDLText name="T">
<Content><![CDATA[
// not supporting large objects yet

]]></Content>
</UDLText>

<Property name="Manifest">
<Type>%String</Type>
</Property>

<Property name="ETag">
<Type>%String</Type>
</Property>

<Property name="ETagOverride">
<Type>%Boolean</Type>
<Private>1</Private>
</Property>

<UDLText name="T">
<Content><![CDATA[
/**
     * Class constructor
     *
     * @param obj $container CF_Container instance
     * @param string $name name of Object
     * @param boolean $force_exists if set, throw an error if Object doesn't exist
     */
]]></Content>
</UDLText>

<Method name="%OnNew">
<FormalSpec>container:EF.Rackspace.CloudFilesContainer,name:%String,forceExists:%Boolean=0,doHead:%Boolean=1</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
    If ($EXTRACT(name,1,1) = ..#CCFHTTPDelim) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorObjectNameInvalid_" ('"_name_"')")
	}
	
	If ($LENGTH(name) > ..#CCFMaxObjectNameLength) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorObjectNameLength)
	}
	
	Set ..Debug=container.Debug
	
	Set ..Container = container
	Set ..Name = name
	Set ..ETag = ""
	Set ..ETagOverride = ..#FALSE
	Set ..LastModified = ""
	Set ..ContentType = ""
	Set ..ContentLength = 0
	Set ..Manifest = ""
	
	Kill ..Metadata
    
    If (doHead) {
	    If (('(..initialize())) && forceExists) {
		    Throw ##class(EF.Rackspace.CloudFilesExceptions.NoSuchObjectException).%New(..#CCFErrorObjectDoesNotExist_..#CCFErrorMsgDelim_name)
	    }
    }
    
    Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
     * PRIVATE: fetch information about the remote Object if it exists
     */
]]></Content>
</UDLText>

<Method name="initialize">
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set returnCode = ..Container.CFHTTPClient.HeadObject($this,.responseArray)
	
	Set responseReason=$GET(responseArray("ResponseReason"))
	Set etag=$GET(responseArray("ETag"))
	Set lastModified=$GET(responseArray("LastModified"))
	Set contentType=$GET(responseArray("ContentType"))
	Set contentLength=$GET(responseArray("ContentLength"))
	Merge metadata=responseArray("MetaData")
	Set manifest=$GET(responseArray("Manifest"))
	
	Do ..DoDebug("initialize,returnCode="_returnCode)
	
	If (returnCode = ..#HTTPCodeNotFound) {
		Quit ..#FALSE
	}
	
	If ((returnCode < ..#HTTPCodeOK) ! (returnCode >= ..#HTTPCodeMultipleChoices)) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.InvalidResponseException).%New(..#CCFErrorInvalidResponse_..#CCFErrorMsgDelim_..Container.CFHTTPClient.ErrorString)
	}
	
	Set ..ETag = etag
	Set ..LastModified = lastModified
	Set ..ContentType = contentType
	Set ..ContentLength = contentLength
	Merge ..Metadata = metadata
	Set ..Manifest = manifest
	
	Quit ..#TRUE
]]></Implementation>
</Method>

<Method name="GetNextMetadataKey">
<FormalSpec>metadataKey:%String=""</FormalSpec>
<Implementation><![CDATA[	Quit $ORDER(..Metadata(metadataKey))
]]></Implementation>
</Method>

<Method name="GetMetadataValue">
<FormalSpec>metadataKey:%String=""</FormalSpec>
<Implementation><![CDATA[	Quit $GET(..Metadata(metadataKey))
]]></Implementation>
</Method>

<Method name="SetMetadataValue">
<FormalSpec>metadataKey:%String,value:%String=""</FormalSpec>
<Implementation><![CDATA[
	Set ..Metadata(metadataKey)=value
	Quit
]]></Implementation>
</Method>

<Method name="DeleteMetadataKey">
<FormalSpec>metadataKey:%String</FormalSpec>
<Implementation><![CDATA[
	Kill ..Metadata(metadataKey)
	Quit
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
     * Streaming read of Object's data
     *
     * Given an open PHP resource (see PHP's fopen() method), fetch the Object's
     * data and write it to the open resource handle.  This is useful for
     * streaming an Object's content to the browser (videos, images) or for
     * fetching content to a local file.
     *
     * Pass in $hdrs array to set specific custom HTTP headers such as
     * If-Match, If-None-Match, If-Modified-Since, Range, etc.
     *
     * Example:
     * <code>
     * # ... authentication/connection/container code excluded
     * # ... see previous examples
     *
     * # Assuming this is a web script to display the README to the
     * # user's browser:
     * #
     * <?php
     * // grab README from storage system
     * //
     * $my_docs = $conn->get_container("documents");
     * $doc = $my_docs->get_object("README");
     *
     * // Hand it back to user's browser with appropriate content-type
     * //
     * header("Content-Type: " . $doc->content_type);
     * $output = fopen("php://output", "w");
     * $doc->stream($output); # stream object content to PHP's output buffer
     * fclose($output);
     * ?>
     *
     * # See read() above for a more simple example.
     * #
     * </code>
     *
     * @param resource $fp open resource for writing data to
     * @param array $hdrs user-defined headers (Range, If-Match, etc.)
     * @return string Object's data
     * @throws InvalidResponseException unexpected response
     */
]]></Content>
</UDLText>

<Method name="OutputToStream">
<FormalSpec>outStream,headers:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set returnCode = ..Container.CFHTTPClient.GetObjectToStream($this,.outStream,headers,.responseArray)

	Set responseReason = $GET(responseArray("ResponseReason"))
	
	if ((returnCode < ..#HTTPCodeOK) ! 
    	((returnCode >= ..#HTTPCodeMultipleChoices) 
    		&& (returnCode '= ..#HTTPCodePreconditionFailed) && (returnCode '= ..#HTTPCodeNotModified))) {
	    
	    Throw ##class(EF.Rackspace.CloudFilesExceptions.InvalidResponseException).%New(
	    	..#CCFErrorInvalidResponse_..#CCFErrorMsgDelim_returnCode_..#CCFErrorMsgDelim_responseReason)
    }
    
    Quit ..#TRUE
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
     * Save Object's data to local filename
     *
     * Given a local filename, the Object's data will be written to the newly
     * created file.
     *
     * Example:
     * <code>
     * # ... authentication/connection/container code excluded
     * # ... see previous examples
     *
     * # Whoops!  I deleted my local README, let me download/save it
     * #
     * $my_docs = $conn->get_container("documents");
     * $doc = $my_docs->get_object("README");
     *
     * $doc->save_to_filename("/home/ej/cloudfiles/readme.restored");
     * </code>
     *
     * @param string $filename name of local file to write data to
     * @return boolean <kbd>True</kbd> if successful
     * @throws IOException error opening file
     * @throws InvalidResponseException unexpected response
     */
]]></Content>
</UDLText>

<Method name="SaveToFilename">
<FormalSpec>filename:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set ret=..#TRUE
	
	Set fp=##class(%FileBinaryStream).%New()
	Set sc=fp.FilenameSet(filename)
	
	If ($$$ISERR(sc)) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.IOException).%New(..#CCFErrorFileNotOpenForWriting_..#CCFErrorMsgDelim_filename_..#CCFErrorMsgDelim_..GetErrMsg(sc))
	}
	
	Set ret=..OutputToStream(fp)
	Set sc=fp.%Save()
	
	If ($$$ISERR(sc)) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.IOException).%New(..#CCFErrorFileNotSaved_..#CCFErrorMsgDelim_filename_..#CCFErrorMsgDelim_..GetErrMsg(sc))
	}
	
	Set fp=""
	
	Quit ret
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
     * Internal check to get the proper mimetype.
     *
     * This function would go over the available PHP methods to get
     * the MIME type.
     *
     * By default it will try to use the PHP fileinfo library which is
     * available from PHP 5.3 or as an PECL extension
     * (http://pecl.php.net/package/Fileinfo).
     *
     * It will get the magic file by default from the system wide file
     * which is usually available in /usr/share/magic on Unix or try
     * to use the file specified in the source directory of the API
     * (share directory).
     *
     * if fileinfo is not available it will try to use the internal
     * mime_content_type function.
     * 
     * @param string $handle name of file or buffer to guess the type from
     * @return boolean <kbd>True</kbd> if successful
     * @throws BadContentTypeException
     */
]]></Content>
</UDLText>

<Method name="GuessContentType">
<FormalSpec>handle=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	// TODO: at the moment, just set everything to octet stream
	If ..ContentType="" Set ..ContentType = ..#CCFMIMETypeDefault
	
	/*	
        if ($this->content_type)
            return;
            
        if (function_exists("finfo_open")) {
            $local_magic = dirname(__FILE__) . "/share/magic";
            $finfo = @finfo_open(FILEINFO_MIME, $local_magic);

            if (!$finfo) 
                $finfo = @finfo_open(FILEINFO_MIME);
                
            if ($finfo) {

                if (is_file((string)$handle))
                    $ct = @finfo_file($finfo, $handle);
                else 
                    $ct = @finfo_buffer($finfo, $handle);

                // PHP 5.3 fileinfo display extra information like
                //   charset so we remove everything after the ; since
                //   we are not into that stuff
                if ($ct) {
                    $extra_content_type_info = strpos($ct, "; ");
                    if ($extra_content_type_info)
                        $ct = substr($ct, 0, $extra_content_type_info);
                }

                if ($ct && $ct != 'application/octet-stream')
                    $this->content_type = $ct;

                @finfo_close($finfo);
            }
        }

        if (!$this->content_type && (string)is_file($handle) && function_exists("mime_content_type")) {
            $this->content_type = @mime_content_type($handle);
        }

        if (!$this->content_type) {
            throw new BadContentTypeException("Required Content-Type not set");
        }
        return True;
        */
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
     * Compute the MD5 checksum
     *
     * Calculate the MD5 checksum on either a PHP resource or data.  The argument
     * may either be a local filename, open resource for reading, or a string.
     *
     * <b>WARNING:</b> if you are uploading a big file over a stream
     * it could get very slow to compute the md5 you probably want to
     * set the $verify parameter to False in the write() method and
     * compute yourself the md5 before if you have it.
     *
     * @param filename|obj|string $data filename, open resource, or string
     * @return string MD5 checksum hexidecimal string
     */
]]></Content>
</UDLText>

<Method name="ComputeMD5Sum">
<ClassMethod>1</ClassMethod>
<FormalSpec>data=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ret=""

	if (($CLASSNAME(data) '= "") && $isobject(data)) {
		Set md5raw=##class(%SYSTEM.Encryption).MD5HashStream(data)
			
		Set md5hash="" for i=1:1:$l(md5raw) Set md5hash=md5hash_$Translate($Justify($ZHex($Ascii(md5raw,i)),2)," ","0")
		Set ret=$ZCONVERT(md5hash,"L")
	} elseif (##class(%File).Exists(data)) {
		// calculate md5 for file
		// TODO: don't use external tool
		If (..#CCFMD5CalculationMode = ..#CCFMD5CalculationModeExternal) {
			Set fullFilePath=data
			Set fileName=##class(%File).GetFilename(fullFilePath)
		
			Set md5outFile=..#CCFMD5ExternalPath_fileName_"_"_$TR($H,",","")_..#CCFMD5ExternalExtn
	
			If ##class(%File).Exists(md5outFile) Set sc=##class(%File).Delete(md5outFile)

			Set cmd=$ZUTIL(147,..#CCFMD5ExternalTool)_" -u """_$ZUTIL(147,fullFilePath)_""" > "_$ZUTIL(147,md5outFile)

			Set retZF=$ZF(-1,cmd)
				
			If (retZF'=0) {
				// failed
			} else {
				Set md5stream=##class(%FileCharacterStream).%New()
				Set md5stream.Filename=md5outFile
				If 'md5stream.AtEnd {
					Set line=md5stream.ReadLine()
					Set ret=$P(line," ",1)
				}
				Set md5stream=""
				Set sc=##class(%File).Delete(md5outFile)
			}
		} elseif (..#CCFMD5CalculationMode = ..#CCFMD5CalculationModeInternal) {
			Set fullFilePath=data
			
			Set fileh = ##class(%FileBinaryStream).%New()
			
			Set fileh.Filename=fullFilePath
			
			Set md5raw=##class(%SYSTEM.Encryption).MD5HashStream(fileh)
			
			Set md5hash="" for i=1:1:$l(md5raw) Set md5hash=md5hash_$Translate($Justify($ZHex($Ascii(md5raw,i)),2)," ","0")
			Set ret=$ZCONVERT(md5hash,"L")
		}
	} else {
		// calculate md5 for raw data (only works for < 32kB)
		Set md5raw=##class(%SYSTEM.Encryption).MD5Hash(data)
		Set md5hash="" for i=1:1:$l(md5raw) Set md5hash=md5hash_$Translate($Justify($ZHex($Ascii(md5raw,i)),2)," ","0")
		Set ret=$ZCONVERT(md5hash,"L")
	}
	
	Quit ret
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
     * Upload Object's data to Cloud Files
     *
     * Write data to the remote Object.  The $data argument can either be a
     * PHP resource open for reading (see PHP's fopen() method) or an in-memory
     * variable.  If passing in a PHP resource, you must also include the $bytes
     * parameter.
     *
     * Example:
     * <code>
     * # ... authentication/connection/container code excluded
     * # ... see previous examples
     *
     * $my_docs = $conn->get_container("documents");
     * $doc = $my_docs->get_object("README");
     *
     * # Upload placeholder text in my README
     * #
     * $doc->write("This is just placeholder text for now...");
     * </code>
     *
     * @param string|resource $data string or open resource
     * @param float $bytes amount of data to upload (required for resources)
     * @param boolean $verify generate, send, and compare MD5 checksums
     * @return boolean <kbd>True</kbd> when data uploaded successfully
     * @throws SyntaxException missing required parameters
     * @throws BadContentTypeException if no Content-Type was/could be set
     * @throws MisMatchedChecksumException $verify is set and checksums unequal
     * @throws InvalidResponseException unexpected response
     */
]]></Content>
</UDLText>

<Method name="Write">
<FormalSpec>data="",bytes:%Integer=0,verify:%Boolean=0</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If (data = "") {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorMissingDataSource)
	}
	
	If (bytes > ..#CCFMaxObjectSize) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorObjectTooLarge)
	}
	
	If (verify) {
		if ('..ETagOverride) {
			Set ..ETag = ..ComputeMD5Sum(data)
		}
	} else {
		Set ..ETag=""
	}
	
	Set fp=""
	// ctData = content to use to determine type of file
	Set ctData=""
	If ('$isobject(data)) {
		// string data
		Set ..ContentLength = $LENGTH(data)
		If (..ContentLength > ..#CCFMaxObjectSize) {
			Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorObjectTooLarge)
		}
		Set fp = ##class(%GlobalCharacterStream).%New()
		Set sc=fp.Write(data)
		Set sc=fp.Rewind()
		Set ctData=$EXTRACT(data,1,..#CCFMinFileRead)
	} else {
		// stream data
		Set ..ContentLength = bytes
		Set fp=data
		Set ctData=fp.Read(..#CCFMinFileRead)
		Set sc=fp.Rewind()
	}
	
	Do ..GuessContentType(ctData)
	
	Set returnCode = ..Container.CFHTTPClient.PutObject($this,fp,.responseArray)
	
	Set fp=""
	
	Set responseReason=$GET(responseArray("ResponseReason"))
	Set etag=$GET(responseArray("ETag"))
	
	If (returnCode = ..#HTTPCodePreconditionFailed) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorMissingContentType)
	}
	
	If (returnCode = ..#HTTPCodeUnprocessableEntity) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorChecksumMismatch)
	}
	
	If (returnCode '= ..#HTTPCodeCreated) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.InvalidResponseException).%New(
	    	..#CCFErrorInvalidResponse_..#CCFErrorMsgDelim_returnCode_..#CCFErrorMsgDelim_..Container.CFHTTPClient.ErrorString)
	}
	
	If ('verify) {
		Set ..ETag=etag
	}
	
	Quit ..#TRUE
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
     * Upload Object data from local filename
     *
     * This is a convenience function to upload the data from a local file.  A
     * True value for $verify will cause the method to compute the Object's MD5
     * checksum prior to uploading.
     *
     * Example:
     * <code>
     * # ... authentication/connection/container code excluded
     * # ... see previous examples
     *
     * $my_docs = $conn->get_container("documents");
     * $doc = $my_docs->get_object("README");
     *
     * # Upload my local README's content
     * #
     * $doc->load_from_filename("/home/ej/cloudfiles/readme");
     * </code>
     *
     * @param string $filename full path to local file
     * @param boolean $verify enable local/remote MD5 checksum validation
     * @return boolean <kbd>True</kbd> if data uploaded successfully
     * @throws SyntaxException missing required parameters
     * @throws BadContentTypeException if no Content-Type was/could be set
     * @throws MisMatchedChecksumException $verify is set and checksums unequal
     * @throws InvalidResponseException unexpected response
     * @throws IOException error opening file
     */
]]></Content>
</UDLText>

<Method name="LoadFromFilename">
<FormalSpec>filename:%String,verify:%Boolean=1</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set ret=..#TRUE
	
	Set fp=##class(%FileBinaryStream).%New()
	Set sc=fp.FilenameSet(filename)
	
	If ($$$ISERR(sc)) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.IOException).%New(..#CCFErrorFileNotOpenForReading_..#CCFErrorMsgDelim_filename_..#CCFErrorMsgDelim_..GetErrMsg(sc))
	}
	
	Set size = ##class(%File).GetFileSize(filename)
	
	Set ..ETag=..ComputeMD5Sum(filename)
	
	// Do ..GuessContentType(filename)
	
	// Set ret = ..Write(fp,size,verify)
	Set ret = ..LoadFromStream(fp,size,verify)
	
	// Set ..ETagOverride=0
	
	Set fp=""
	
	Quit ret
]]></Implementation>
</Method>

<Method name="LoadFromStream">
<FormalSpec>stream,size:%Integer=0,verify:%Boolean=1</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set ret=..#TRUE
	
	If (size > ..#CCFMaxObjectSize) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.SyntaxException).%New(..#CCFErrorObjectTooLarge)
	}
	
	/*
	if ..ETag="" {
		Set ..ETag=..ComputeMD5Sum(stream)
	}
	*/
	
	Do ..GuessContentType(stream)
	
	Set ret = ..Write(stream,size,verify)
	
	Quit ret
]]></Implementation>
</Method>

<Method name="CopyFromObject">
<FormalSpec>sourceObject:CloudFilesObject,verify:%Boolean=1</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set ret=..#TRUE
	
	If (verify) {
		if ('..ETagOverride) {
			Set ..ETag = sourceObject.ETag
		}
	} else {
		Set ..ETag=""
	}
	
	Set returnCode = ..Container.CFHTTPClient.CopyObject(sourceObject,$this,.responseArray)
	
	Set responseReason=$GET(responseArray("ResponseReason"))
	Set etag=$GET(responseArray("ETag"))
	
	If (returnCode '= ..#HTTPCodeCreated) {
		Throw ##class(EF.Rackspace.CloudFilesExceptions.InvalidResponseException).%New(
	    	..#CCFErrorInvalidResponse_..#CCFErrorMsgDelim_returnCode_..#CCFErrorMsgDelim_..Container.CFHTTPClient.ErrorString)
	}
	
	If ('verify) {
		Set ..ETag=etag
	}
	
	Quit ret
]]></Implementation>
</Method>

<Method name="getTempUrl">
<FormalSpec>httpMethod:%String,expiresInSeconds:%Integer=60,fileNameOverRide:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set httpMethod=$ZCONVERT(httpMethod,"U")
	
	If ((httpMethod'=..#HTTPMethodGet) && (httpMethod'=..#HTTPMethodPut)) {
		Throw ##class(shared.exceptions.generalException).%New("Invalid httpMethod for temp URL")
	}
	
	Set base=..GetBasePathFromURL(..Container.CFAuth.StorageURL)
	
	Set path=..GetPathFromURL(..Container.CFAuth.StorageURL)_"/"_..Container.Name_"/"_..Name
	
	Set expiryUnixTime=##class(shared.timeFunctions).getUnixTime()+expiresInSeconds
	
	Set hmacBody=httpMethod_$CHAR(10)_expiryUnixTime_$CHAR(10)_path
	
	Set key=..Container.CFAuth.tempUrlKey
	
	Set sig=##class(shared.stringFunctions).hmacShaHash(160,hmacBody,key,1)
	
	Set tempUrl=base_path
	Set tempUrl=##class(EF.htmlGenerator).addParameterToURL(tempUrl,"temp_url_sig",sig)
	Set tempUrl=##class(EF.htmlGenerator).addParameterToURL(tempUrl,"temp_url_expires",expiryUnixTime)
	
	If ($LENGTH(fileNameOverRide)>0) {
		Set tempUrl=##class(EF.htmlGenerator).addParameterToURL(tempUrl,"filename",fileNameOverRide)
	}
	
	Return tempUrl
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/**
     * Store new Object metadata
     *
     * Write's an Object's metadata to the remote Object.  This will overwrite
     * an prior Object metadata.
     *
     * Example:
     * <code>
     * # ... authentication/connection/container code excluded
     * # ... see previous examples
     *
     * $my_docs = $conn->get_container("documents");
     * $doc = $my_docs->get_object("README");
     *
     * # Define new metadata for the object
     * #
     * $doc->metadata = array(
     *     "Author" => "EJ",
     *     "Subject" => "How to use the PHP tests",
     *     "Version" => "1.2.2"
     * );
     *
     * # Push the new metadata up to the storage system
     * #
     * $doc->sync_metadata();
     * </code>
     *
     * @return boolean <kbd>True</kbd> if successful, <kbd>False</kbd> otherwise
     * @throws InvalidResponseException unexpected response
     */
]]></Content>
</UDLText>

<Method name="SyncMetadata">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set ret=..#FALSE
	
	If (..GetNextMetadataKey("") '= "") {
		Set returnCode = ..Container.CFHTTPClient.UpdateObject($this)
		
		If (returnCode '= ..#HTTPCodeAccepted) {
			Throw ##class(EF.Rackspace.CloudFilesExceptions.InvalidResponseException).%New(
	    		..#CCFErrorInvalidResponse_..#CCFErrorMsgDelim_returnCode_..#CCFErrorMsgDelim_..Container.CFHTTPClient.ErrorString)
		}
		
		Set ret=..#TRUE
	}
	Quit ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.Rackspace.CloudFilesTest">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.Rackspace.CloudFilesTest.CLS/EV.3
;vc; Component: CLS.EF.Rackspace.CloudFilesTest
;vc;  Location: SmallDev
;vc; Date/Time: 07-Jun-16 12:39
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.Rackspace.CloudFilesTest.CLS/EV.3</td><td>CLS.EF.Rackspace.CloudFilesTest</td><td>SmallDev</td><td style='white-space: nowrap;'>07-Jun-16 12:39</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<Super>EF.Rackspace.CloudFilesBase</Super>
<TimeChanged>64054,45688</TimeChanged>
<TimeCreated>62250,38830.006336</TimeCreated>

<Method name="Test">
<ClassMethod>1</ClassMethod>
<FormalSpec>debug:%Boolean=0</FormalSpec>
<Implementation><![CDATA[
	Set spacer="  "
	
	Set containerName="EFTEST100"
	
	Set objectName="blah2.txt"
	// Set objectName="test/miscfiles/moo.txt"
	
	Set objectToSaveToFile="blah2.txt"
	Set fileToSaveTo="C:\websites\temp\blah2.txt"
	
	Set fileToUpload="C:\websites\temp\test.zip"
	Set objectToUploadTo="test/miscfiles/test.zip"
	
	Set objectToCopyTo="test (copy)/miscfiles (copy)/test (copy).zip"
	
	Write "Testing... Version: "_..#CCFUserAgent
	
	&SQL(SELECT ID INTO :tmp FROM storage.objAccount WHERE allowUpload = 1)
	if +SQLCODE=0 {
		set accountID=tmp
	}
	
	set objAccount=##class(storage.objAccount).%OpenId(accountID)
	
	Set auth=##class(EF.Rackspace.CloudFilesAuthentication).%New()
	Set auth.Username = objAccount.userName
	Set auth.APIKey = objAccount.getDecryptedPassword()
	Do auth.SetDebug(debug)
	
	Set failed=0
	
	Try {
		Set sc=auth.Authenticate()
	} catch errobj {
		Do ..DumpErrObj(errobj)
		Set failed=1
	}
	If failed {
		Write !,"Authentication Failed"
		Quit
	} else {
		Write !,"Authentication Successful"
		Write !,spacer_"AuthToken="_auth.AuthToken
		Write !,spacer_"StorageURL="_auth.StorageURL
		Write !,spacer_"CDNMURL="_auth.CDNMURL
	}
	
	Set conn=##class(EF.Rackspace.CloudFilesConnection).%New(auth,0,1)
	
	Set failed=0
	
	Try {
		Set testContainer=conn.CreateContainer(containerName)
	} catch errobj {
		Do ..DumpErrObj(errobj)
		Set failed=1
	}
	
	If failed {
		Write !,"Failed to create container: "_containerName
		Quit
	} else {
		Write !,"Container Created: '"_containerName_"'"
	}
	
	Set failed=0
	
	Try {
		Set testContainer=conn.GetContainer(containerName)
	} catch errobj {
		Do ..DumpErrObj(errobj)
		Set failed=1
	}
	
	if failed {
		Write !,"Failed to fetch container: "_containerName
		Quit
	} else {
		Write !,"Container Fetched: '"_testContainer.Name_"'"
		Write !,spacer_" objects = "_testContainer.ObjectCount
		Write !,spacer_" bytes = "_testContainer.BytesUsed
	}
	
	Do testContainer.SetDebug(debug)
	
	Set failed=0
	
	Try {
		Set formPostSig=testContainer.getFormPostSignature("/moo/cows/upload","",1024*1024,1,##class(shared.timeFunctions).getUnixTime()+60)
	} catch errobj {
		Do ..DumpErrObj(errobj)
		Set failed=1
	}
	
	if failed {
		Write !,"Failed to get form post sig"
		Quit
	} else {
		Write !,"Form Post sig: "_formPostSig
	}
	
	Set failed=0
	
	Try {
		Do testContainer.appendAllowedOrigins("https://dev.efsys.net/largedevsrc")
	} catch errobj {
		Do ..DumpErrObj(errobj)
		Set failed=1
	}
	
	if failed {
		Write !,"Failed to append allowed origins"
		Quit
	} else {
		Write !,"Appended allowed origins"
	}
	
	Set failed=0
	
	Try {
		Set objref=testContainer.GetObject(objectName)
	} catch errobj {
		Do ..DumpErrObj(errobj)
		Set failed=1
	}
	
	if failed {
		Write !,"Failed to get object: "_objectName
		Quit
	} else {
		Write !,"Got object: "_objref.Name
		Write !,spacer_" ETag = "_objref.ETag
		Write !,spacer_" ContentType = "_objref.ContentType
		Write !,spacer_" ContentLength = "_objref.ContentLength
		Write !,spacer_" LastModified = "_objref.LastModified
		Write !,spacer_" Manifest = "_objref.Manifest
		Write !,spacer_" Metadata: "
		Set metadataKey=""
		While (objref.GetNextMetadataKey(metadataKey) '= "") {
			Set metadataKey=objref.GetNextMetadataKey(metadataKey)
			Write !,spacer_spacer_metadataKey_" = "_objref.GetMetadataValue(metadataKey)
		}
	}
	
	Set failed=0
	
	Try {
		Set tempUrl=objref.getTempUrl("GET")
	} catch errobj {
		Do ..DumpErrObj(errobj)
		Set failed=1
	}
	
	if failed {
		Write !,"Failed to get temp url for: "_objectName
		Quit
	} else {
		Write !,"Got temp url: "_tempUrl
	}
	
	Set failed=0
	
	Try {
		kill urlComps
		Do ##class(%Net.URLParser).Parse(tempUrl,.urlComps)
		
		Set httpReq=##class(EF.utils.httpRequest).createHttpRequestSSLcache()
		Set httpReq.Server=$GET(urlComps("host"))
		Set sc=httpReq.Get($GET(urlComps("path"))_"?"_$GET(urlComps("query")))
		If $$$ISERR(sc) {
			Throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
		}
		If ($PIECE(httpReq.HttpResponse.StatusLine," ",2)'="200") {
			Set failed=1
		}
	} catch errobj {
		Do ..DumpErrObj(errobj)
		Set failed=1
	}
	
	if failed {
		Write !,"Failed to retrieve object from temp url: "_objectName
		Quit
	} else {
		Write !,"Retrieved object from temp url: "_tempUrl
		Use 0 Write !,"[-- OBJECT OUTPUT START --]"
		Do httpReq.HttpResponse.OutputToDevice()
		Use 0 Write "[-- OBJECT OUTPUT END --]",!
	}
	
	Set cont=conn.GetContainer("PRIVATE")
	Set obj=cont.GetObject("LARGEDEVSRC/2949~eventID/2~recTypeID/106~recID/38~stObjID/data")
	Set tempUrl=obj.getTempUrl("GET")
	
	w !,"tempUrl="_tempUrl
	
	// output object to device (be careful about type of object!)
	Set tDevice = ##class(%IO.DeviceStream).%New()
	Do tDevice.Attach()
	
	Set failed=0
	
	Try {
		Use 0 Write !,"[-- OBJECT OUTPUT START --]"
		Set failed='objref.OutputToStream(tDevice)
		Use 0 Write "[-- OBJECT OUTPUT END --]",!
	} catch errobj {
		Do ..DumpErrObj(errobj)
		Set failed=1
	}
	
	if failed {
		Write !,"Failed to stream object: "_objref.Name
		Quit
	} else {
		Write !,"Streamed object: "_objref.Name
	}
	
	If ($GET(fileToUpload) '= "") {
		Set failed=0
		
		Set crc32val=..GetCRC32(fileToUpload)
		
		Try {
			Set delret=testContainer.DeleteObject(objectToUploadTo)
		} catch errobj {
			Do ..DumpErrObj(errobj)
		}
		
		Try {
			// Set delret=testContainer.DeleteObject(objectToUploadTo)
			Write !,"upload start: "_$ZDT($ZTS)
			Set objtoupload=testContainer.CreateObject(objectToUploadTo)
			Write !,"after create object: "_$ZDT($ZTS)
			Do objtoupload.SetMetadataValue("CRC32",crc32val)
			Do objtoupload.SetMetadataValue("ORIGINAL-FILE",fileToUpload)
			Do objtoupload.SetMetadataValue("SOURCE-MACHINE-NAME",$ZCONVERT($ZU(110),"U"))
			Do objtoupload.SetMetadataValue("NAMESPACE-UPLOADED-FROM",$ZNSPACE)
			Do objtoupload.SetMetadataValue("TO-DELETE","UPDATETEST")
			Set failed='objtoupload.LoadFromFilename(fileToUpload)
			Write !,"after load: "_$ZDT($ZTS)
			Do testContainer.CreatePaths(objectToUploadTo)
			Write !,"after create paths: "_$ZDT($ZTS)
		} catch errobj {
			Do ..DumpErrObj(errobj)
			Set failed=1
		}
		
		if failed {
			Write !,"Failed to load object from file: "_fileToUpload_" => "_objectToUploadTo
			Quit
		} else {
			Write !,"Successfully uploaded file to object: "_fileToUpload_" => "_objectToUploadTo
		}
		
		// check file
		Set failed=0
	
		Try {
			Set objcheck=testContainer.GetObject(objectToUploadTo)
		} catch errobj {
			Do ..DumpErrObj(errobj)
			Set failed=1
		}
	
		if failed {
			Write !,"Failed to check object: "_objectToUploadTo
			Quit
		} else {
			Write !,"Got object: "_objcheck.Name
			Write !,spacer_" ETag = "_objcheck.ETag
			Write !,spacer_" ContentType = "_objcheck.ContentType
			Write !,spacer_" ContentLength = "_objcheck.ContentLength
			Write !,spacer_" LastModified = "_objcheck.LastModified
			Write !,spacer_" Manifest = "_objcheck.Manifest
			Write !,spacer_" Metadata: "
			Set metadataKey=""
			While (objcheck.GetNextMetadataKey(metadataKey) '= "") {
				Set metadataKey=objcheck.GetNextMetadataKey(metadataKey)
				Write !,spacer_spacer_metadataKey_" = "_objcheck.GetMetadataValue(metadataKey)
			}
		}
		
		// check file
		Set failed=0
	
		Try {
			Set objcheck=testContainer.GetObject(objectToUploadTo)
		} catch errobj {
			Do ..DumpErrObj(errobj)
			Set failed=1
		}
	
		if failed {
			Write !,"Failed to check object: "_objectToUploadTo
			Quit
		} else {
			Write !,"Got object: "_objcheck.Name
			Write !,spacer_" ETag = "_objcheck.ETag
			Write !,spacer_" ContentType = "_objcheck.ContentType
			Write !,spacer_" ContentLength = "_objcheck.ContentLength
			Write !,spacer_" LastModified = "_objcheck.LastModified
			Write !,spacer_" Manifest = "_objcheck.Manifest
			Write !,spacer_" Metadata: "
			Set metadataKey=""
			While (objcheck.GetNextMetadataKey(metadataKey) '= "") {
				Set metadataKey=objcheck.GetNextMetadataKey(metadataKey)
				Write !,spacer_spacer_metadataKey_" = "_objcheck.GetMetadataValue(metadataKey)
			}
		}
		
		// copy file
		Set failed=0
	
		Try {
			Write !,"copy start: "_$ZDT($ZTS)
			Set objsrc=testContainer.GetObject(objectToUploadTo)
			Write !,"after get object: "_$ZDT($ZTS)
			Set objdest=testContainer.CreateObject(objectToCopyTo)
			Write !,"after create object: "_$ZDT($ZTS)
			Set failed='objdest.CopyFromObject(objsrc)
			Write !,"after copy object: "_$ZDT($ZTS)
			Do testContainer.CreatePaths(objectToCopyTo)
			Write !,"after create paths: "_$ZDT($ZTS)
		} catch errobj {
			Do ..DumpErrObj(errobj)
			Set failed=1
		}
	
		if failed {
			Write !,"Failed to copy object: "_objectToUploadTo_" => "_objectToCopyTo
			Quit
		} else {
			Write !,"Successfully copied object: "_objectToUploadTo_" => "_objectToCopyTo
		}
		
	}
	
	
	
	Quit
]]></Implementation>
</Method>

<Method name="DumpErrObj">
<ClassMethod>1</ClassMethod>
<FormalSpec>errobj</FormalSpec>
<Implementation><![CDATA[
	Write !,"Err   Name      = "_errobj.Name
	Write !,"      ClassName = "_$CLASSNAME(errobj)
	Write !,"      Code      = "_errobj.Code
	Write !,"      Data      = "_errobj.Data
	Write !,"      Location  = "_errobj.Location
]]></Implementation>
</Method>

<Method name="GetCRC32">
<ClassMethod>1</ClassMethod>
<FormalSpec>fullFilePath:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ret=""
	
	Set sourceFile=##class(%FileBinaryStream).%New()
	Set sourceFile.Filename=fullFilePath
	
	Set buffSize=16384
	
	Set crcval="0"
	
	While '(sourceFile.AtEnd) {
		Set buffer=""
		Set buffer=sourceFile.Read(buffSize)
		If $L(buffer) {
			Set crcval=$ZCRC(buffer,7,crcval)
		}
	}
	
	Set sourceFile=""
	
	Set ret=$ZHEX(crcval)
	
	Quit ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.VCM.utils">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.VCM.utils.CLS/EV.3
;vc; Component: CLS.EF.VCM.utils
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.VCM.utils.CLS/EV.3</td><td>CLS.EF.VCM.utils</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63879,37812</TimeChanged>
<TimeCreated>63065,83143.796455</TimeCreated>

<Method name="getSummaryForCR">
<ClassMethod>1</ClassMethod>
<FormalSpec>cr</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set summary="Can't find the change request!"
	if $D(^%vcch(cr)) {
		set summary=$P(^%vcch(cr),"\",2)
	}
	quit summary
]]></Implementation>
</Method>

<Method name="getCreationDateForCR">
<ClassMethod>1</ClassMethod>
<FormalSpec>cr</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set date="Can't find the change request!"
	if $D(^%vcch(cr)) {
		set date=$P(^%vcch(cr),"\",6)
	}
	if date set date=$E(date,1,8)
	quit date
]]></Implementation>
</Method>

<Method name="getCreationPersonNameForCR">
<ClassMethod>1</ClassMethod>
<FormalSpec>cr</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set data="Can't find the change request!"
	if $D(^%vcch(cr)) {
		set data=$P(^%vcch(cr),"\",5)   // guessing it is piece 5 might be 3 or 7
	}
	quit data
]]></Implementation>
</Method>

<Method name="getDetailsForCR">
<ClassMethod>1</ClassMethod>
<FormalSpec>cr</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set details="Can't find the change request!"
	if $D(^%vcch(cr)) {
		set i=""
		for  {
			set i=$O(^%vcch(cr,"d",i))
			if i="" quit
	
			if $L(details_"\n"_^%vcch(cr,"d",i))<32000 {
				set details=details_"\n"_^%vcch(cr,"d",i)
			}
			
		}
	}
	quit details
]]></Implementation>
</Method>

<Method name="CR">
<ClassMethod>1</ClassMethod>
<FormalSpec>crFilter</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	; change request report
	set cr=""
	if $L(crFilter) set cr=crFilter
	for  {
		set cr=$O(^%vcob2(1,cr))
		if cr="" quit
		if $L($P(cr,crFilter,2))=0 quit
		
		w !,cr,":",..getCreationDateForCR(cr),":",..getSummaryForCR(cr),":",..getReleaseStatusForCR(cr)
	}
	q
]]></Implementation>
</Method>

<Method name="getReleaseStatusForCR">
<ClassMethod>1</ClassMethod>
<FormalSpec>cr</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set atLeastOneNotLive=0
	set atLeastOneLive=0

	set obv=""
	for  {
		set obv=$O(^%vcob2(1,cr,obv))
		if obv="" quit
		
		// check if the object is live:
		set atLive=..atLive(obv)
		if 'atLive,..checkLaterVersionsLive(obv) set atLive=1
		//w !,cr,":",obv,":",atLive
		if 'atLive set atLeastOneNotLive=1
		if atLive set atLeastOneLive=1
	}

	set status="NONE"
	if atLeastOneLive&'atLeastOneNotLive set status="ALL"
	if atLeastOneLive&atLeastOneNotLive set status="PARTIAL"
	quit status
]]></Implementation>
</Method>

<Method name="atLive">
<ClassMethod>1</ClassMethod>
<FormalSpec>obv</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	; is this object version at a live location?
	set atLive=0
	if $D(^%vcal2(1,obv,"AtLiveNewDATABASE-LIVE-1")) set atLive=1
	//if $D(^%vcal2(1,obv,"AtLiveNewBROWN")) set atLive=1
	//if $D(^%vcal2(1,obv,"AtLiveNewBRONZE")) set atLive=1
	quit atLive
	/*
	set loc=""
	for  {
		set loc=$O(^%vcal2(1,obv,loc))
		if loc="" quit
		
		if $ZCVT(loc,"U")["LIVE" set atLive=1
	}
	quit atLive
	*/
]]></Implementation>
</Method>

<Method name="atLocation">
<ClassMethod>1</ClassMethod>
<FormalSpec>obv,location</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	; is this object version at the location?
	set location=$ZCVT(location,"U")
	set atLocation=0
	set loc=""
	for  {
		set loc=$O(^%vcal2(1,obv,loc))
		if loc="" quit
		
		if $ZCVT(loc,"U")=location set atLocation=1
	}
	quit atLocation
]]></Implementation>
</Method>

<Method name="checkLaterVersions">
<ClassMethod>1</ClassMethod>
<FormalSpec>obv,location</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	; check if any subsequent version of object is at location
	// rip off the version we're checking
	set myO=$P(obv,"/",1,$L(obv,"/")-1)
	set myV=$P(obv,".",$L(obv,"."))

	set foundLaterLive=0,foundV=""
	set nextV=myV
	for  {
		set nextV=$O(^%vcob(myO,"EV",nextV))
		if nextV="" quit
		
		set nextObv=myO_"/EV."_nextV
		if ..atLocation(nextObv,location) set foundLaterLive=1,foundV=nextV
	}
	quit foundLaterLive_"|"_nextV
]]></Implementation>
</Method>

<Method name="checkLaterVersionsLive">
<Description>
check if any subsequent version of object is live</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>obv</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	/*
	set foundLaterLive=0,foundV=""
	//set %session.Data("vcmJAW")=obv
	set successorObV=..getSuccessor(obv)
	if $L(successorObV)	{
		if ..atLive(successorObV) {
			quit 1_"|"_successorObV
		} else {
			quit ..checkLaterVersionsLive(successorObV)
		}
	}
	quit 0
	*/		 
	// rip off the version we're checking
	set myO=$P(obv,"/",1,$L(obv,"/")-1)
	set myV=$P(obv,".",$L(obv,"."))
	set foundLaterLive=0,foundV=""
	set nextV=myV
	for  {
		set nextV=$O(^%vcob(myO,"EV",nextV))
		if nextV="" quit
		
		set nextObv=myO_"/EV."_nextV
		if ..atLive(nextObv) set foundLaterLive=1,foundV=nextV
	}
	quit foundLaterLive_"|"_nextV
]]></Implementation>
</Method>

<Method name="getSuccessor">
<ClassMethod>1</ClassMethod>
<FormalSpec>obv</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set %="\"
	set obj=$P(obv,"/",1,$L(obv,"/")-1)
	set inVariant="EV"
	set inVersion=$P(obv,".",$L(obv,"."))
	set version=""
	set successor=""
	set successorObV=""
	for  {
		s version=$o(^%vcob(obj,inVariant,version))
		i version="" q
		s obc=^%vcob(obj,inVariant,version)
		//i ($p(obc,%,5)=obv)!($p(obc,%,7)=obv) set successor=version
		i ($p(obc,%,5)=obv) set successor=version
	}
	if $L(successor) set successorObV=obj_"/"_inVariant_"."_successor
	if obv=successorObV set successorObV=""  // seems to happen
	quit successorObV
]]></Implementation>
</Method>

<Method name="isThisOnlyInLibrary">
<ClassMethod>1</ClassMethod>
<FormalSpec>obv</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set atLibrary=0
	set locationCount=0
	set loc=""
	for  {
		set loc=$O(^%vcal2(1,obv,loc))
		if loc="" quit
		set locationCount=locationCount+1
		if $ZCVT(loc,"U")="LIBRARY" set atLibrary=1
	}
	if atLibrary&&(locationCount=1) quit 1
	quit 0
]]></Implementation>
</Method>

<Method name="getLocationsForObV">
<ClassMethod>1</ClassMethod>
<FormalSpec>obv,delim=", "</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 	// get current locations for this object
	set allLocations=""
	set loc=""
	for  {
		set loc=$O(^%vcal2(1,obv,loc))
		if loc="" quit
		
		set allLocations=allLocations_$S($L(allLocations):delim,1:"")_loc
	}	
	quit allLocations
]]></Implementation>
</Method>

<Method name="isAtAllNonLiveLocations">
<ClassMethod>1</ClassMethod>
<FormalSpec>obv</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set NonLive("CriticalDev")=1
	set NonLive("CriticalTest")=1
	set NonLive("CriticalLatest")=1
	set NonLive("SmallDev")=1
	set NonLive("SmallTest")=1
	set NonLive("SmallLatest")=1
	set NonLive("LargeDev")=1
	set NonLive("LargeTest")=1
	set NonLive("LargeStaging")=1
	set NonLive("LargeLatest")=1
	set loc="",atAllLocations=1
	for  {
		set loc=$O(NonLive(loc))
		if loc="" quit
		if '$D(^%vcal2(1,obv,loc)) set atAllLocations=0
	}
	quit atAllLocations
]]></Implementation>
</Method>

<Method name="getChangeReqForOb">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[obv,&listCRs]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
	// rip off the version we're checking
	set myO=$P(obv,"/",1,$L(obv,"/")-1)
	set myV=$P(obv,".",$L(obv,"."))
	set unformattedCRs=""
	set chngReqs=""
	set foundLaterLive=0,foundV=""
	set nextV=myV
	set tmpCR=""
	for  {
		set tmpCR=$O(^%vcob(myO,"EV",nextV,1,tmpCR))
		if tmpCR="" quit
		
		set extratxt=""
		if myV'=nextV set extratxt=" (v."_nextV_")"  // show the version if we are now showing CRs for a later version of the object
		set chngReqs=chngReqs_$S($L(chngReqs):", ",1:"")_..crFormatted(tmpCR,extratxt)
		set listCRs(tmpCR)=""
	}
	quit chngReqs
]]></Implementation>
</Method>

<Method name="getObsForChangeReq">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[cr,&listOBs]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set obv=""
	for  {
		set obv=$O(^%vcob2(1,cr,obv))
		if obv="" quit
		
		set listOBs(obv)=$ZCVT(..getLocationsForObV(obv,"|"),"U")
	}
	quit
]]></Implementation>
</Method>

<Method name="areAnyObsMissingFromLocationForCR">
<ClassMethod>1</ClassMethod>
<FormalSpec>cr,location</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set location=$ZCVT(location,"U")
	do ..getObsForChangeReq(cr,.listOBs)
	set obv=""
	set missing=0
	for  {
		set obv=$O(listOBs(obv))
		if obv="" quit
		set tmpLocation="|"_location_"|"
		set obvLocations="|"_listOBs(obv)_"|"
		if obvLocations'[tmpLocation {
			set missing=1
			// check if it has already gone live
			if ..atLive(obv) set missing=0
			//if successorLive set missing=0
			if ..checkLaterVersionsLive(obv) set missing=0
		}
	}
	quit missing
]]></Implementation>
</Method>

<Method name="getOtherChangeReqsForOb">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[obv,excludeCR,&listCRs]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
	set excludeCR=$ZCVT(excludeCR,"U")
	// rip off the version we're checking
	set myO=$P(obv,"/",1,$L(obv,"/")-1)
	set myV=$P(obv,".",$L(obv,"."))
	set unformattedCRs=""
	set chngReqs=""
	set foundLaterLive=0,foundV=""
	set nextV=myV
	// reverse one so we get current version first
	set nextV=$O(^%vcob(myO,"EV",nextV),-1)
	for  {
		set nextV=$O(^%vcob(myO,"EV",nextV))
		if nextV="" quit
		
		set nextObv=myO_"/EV."_nextV
		set tmpCR=""
		for  {
			set tmpCR=$O(^%vcob(myO,"EV",nextV,1,tmpCR))
			if tmpCR="" quit
			
			if excludeCR[$ZCVT(tmpCR,"U") {
				// don't return this one
			} else {
				set extratxt=""
				if myV'=nextV set extratxt=" (v."_nextV_")"  // show the version if we are now showing CRs for a later version of the object
				set chngReqs=chngReqs_$S($L(chngReqs):", ",1:"")_..crFormatted(tmpCR,extratxt)
				set listCRs(tmpCR)=""
			}
		}
	}
	quit chngReqs
]]></Implementation>
</Method>

<Method name="getPivStoryForCR">
<ClassMethod>1</ClassMethod>
<FormalSpec>cr</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $S($E(cr,1)="C":$E(cr,2,99),$E(cr,1)="S":$E(cr,2,99),$E(cr,1)="L":$E(cr,2,99),$E(cr,1,3)="PIV":$E(cr,4,99),1:"")
]]></Implementation>
</Method>

<Method name="getPivStoryLink">
<ClassMethod>1</ClassMethod>
<FormalSpec>pivStory</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "<a class=""pivLink"" href=""https://www.pivotaltracker.com/story/show/"_pivStory_""" target=""_blank"">&nbsp;&nbsp;</a>"
]]></Implementation>
</Method>

<Method name="crFormatted">
<ClassMethod>1</ClassMethod>
<FormalSpec>cr,txt=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set crFormatted=cr
	set pivStory=""
	set summary=..getSummaryForCR(cr)
	set extraStyle=""
	if $ZCVT(summary,"U")["WARNING" set extraStyle=";background-color:red;color:white;"
	if $L(cr,"PIV")>1 {
		set pivStory=+$P(cr,"PIV",2)
		set crFormatted="<a style="""_extraStyle_""" href=""https://www.pivotaltracker.com/story/show/"_pivStory_""" target=""_blank"" title="""_##class(%CSP.Page).EscapeHTML(summary)_""">"_cr_txt_"</a>"
	} else {
		set crFormatted="<span style="""_extraStyle_""" title="""_##class(%CSP.Page).EscapeHTML(summary)_""">"_cr_txt_"</span>"
	}
	
	quit crFormatted
]]></Implementation>
</Method>

<Method name="getPreviousNonLiveVersions">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[obv,&nonLiveVersions]]></FormalSpec>
<Implementation><![CDATA[
	set %="\"
	set myO=$P(obv,"/",1,$L(obv,"/")-1)
	set myV=$P(obv,".",$L(obv,"."))
	set p5=$P(^%vcob(myO,"EV",myV),%,5)
	set p7=$P(^%vcob(myO,"EV",myV),%,7)
	if $L(p5),p5'=obv,'##class(EF.VCM.utils).atLive(p5) {
		set nonLiveVersions(p5)=""
		kill tmpNonLiveVersions
		w !,obv," p5:",p5
		do ..getPreviousNonLiveVersions(p5,.nonLiveVersions)
		//if '$D(tmpNonLiveVersions) qu
	}
	if $L(p5),p5'=obv,##class(EF.VCM.utils).atLive(p5) {
		// get p5 and 7 of this obv so we can work out the common ancestor
				
	}

	if $L(p7),p7'=obv,'##class(EF.VCM.utils).atLive(p7) {
		w !,obv," p7:",p7
		set nonLiveVersions(p7)=""
		do ..getPreviousNonLiveVersions(p7,.nonLiveVersions)
	}
	quit
]]></Implementation>
</Method>

<Method name="getLiveVersion">
<ClassMethod>1</ClassMethod>
<FormalSpec>ob</FormalSpec>
<Implementation><![CDATA[
	set %="\"
	set liveVersion=""
	set version=""
	for  {
		set version=$O(^%vcob(ob,"EV",version),-1)
		if version="" quit
		
		set obV=ob_"/EV."_version
		if ..atLive(obV) set liveVersion=obV quit 
	}
	quit liveVersion
]]></Implementation>
</Method>

<Method name="fitsAt">
<ClassMethod>1</ClassMethod>
<FormalSpec>obv,lcode</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	s error="",%="\"
	d unpack^%vc1ref(obv,.obj,.vari,.vers)
	i $$successor^%vc1ico(lcode,obv) q 1  // quit if we have a successor at location lcode (means we've merged into that location)
	s obc=^%vcob(obj,vari,vers)
	s sobv=$p(obc,%,5)
	s meobv=$p(obc,%,7)
	s error=$$fit^%vc1xvd(lcode,obv,sobv,meobv)
	i 'error s error="" q 1
	s $p(error,%,1,2)=$p(error,%,2)
	quit 0
]]></Implementation>
</Method>
</Class>


<Class name="EF.audit.eventHotelExtraText">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.audit.eventHotelExtraText.CLS/EV.0
;vc; Component: CLS.EF.audit.eventHotelExtraText
;vc;  Location: SmallDev
;vc; Date/Time: 28-Dec-14 01:11
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.audit.eventHotelExtraText.CLS/EV.0</td><td>CLS.EF.audit.eventHotelExtraText</td><td>SmallDev</td><td style='white-space: nowrap;'>28-Dec-14 01:11</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.audit.htmlTextAudit</Super>
<TimeChanged>63523,53084</TimeChanged>
<TimeCreated>63523,52849.874831</TimeCreated>

<Property name="objEventHotel">
<Type>accom.objEventHotel</Type>
<Required>1</Required>
</Property>

<Index name="eventHotelIndex">
<Properties>objEventHotel</Properties>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>eventHotelExtraTextDefaultData</DefaultData>
<Data name="eventHotelExtraTextDefaultData">
<Structure>listnode</Structure>
<Subscript>"eventHotelExtraText"</Subscript>
<Value name="1">
<Value>objEventHotel</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.audit.htmlTextAudit">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.audit.htmlTextAudit.CLS/EV.0
;vc; Component: CLS.EF.audit.htmlTextAudit
;vc;  Location: SmallDev
;vc; Date/Time: 28-Dec-14 01:11
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.audit.htmlTextAudit.CLS/EV.0</td><td>CLS.EF.audit.htmlTextAudit</td><td>SmallDev</td><td style='white-space: nowrap;'>28-Dec-14 01:11</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%Library.Persistent,shared.timeStamp</Super>
<TimeChanged>63523,55119</TimeChanged>
<TimeCreated>63523,36673.315132</TimeCreated>

<Property name="htmlStream">
<Type>%Stream.GlobalCharacter</Type>
</Property>

<Property name="textStream">
<Type>%Stream.GlobalCharacter</Type>
</Property>

<Property name="oldHtmlStream">
<Type>%Stream.GlobalCharacter</Type>
</Property>

<Property name="oldTextStream">
<Type>%Stream.GlobalCharacter</Type>
</Property>

<Property name="savingStatus">
<Type>%Library.Status</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^EF.audit.htmlTextAuditD</DataLocation>
<DefaultData>htmlTextAuditDefaultData</DefaultData>
<IdLocation>^EF.audit.htmlTextAuditD</IdLocation>
<IndexLocation>^EF.audit.htmlTextAuditI</IndexLocation>
<StreamLocation>^EF.audit.htmlTextAuditS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="htmlTextAuditDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>htmlStream</Value>
</Value>
<Value name="3">
<Value>textStream</Value>
</Value>
<Value name="4">
<Value>xCRuserID</Value>
</Value>
<Value name="5">
<Value>xMOuserID</Value>
</Value>
<Value name="6">
<Value>xCRstamp</Value>
</Value>
<Value name="7">
<Value>xMOstamp</Value>
</Value>
<Value name="8">
<Value>oldHtmlStream</Value>
</Value>
<Value name="9">
<Value>oldTextStream</Value>
</Value>
<Value name="10">
<Value>savingStatus</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.audit.mailTemplate">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.audit.mailTemplate.CLS/EV.0
;vc; Component: CLS.EF.audit.mailTemplate
;vc;  Location: SmallDev
;vc; Date/Time: 28-Dec-14 01:11
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.audit.mailTemplate.CLS/EV.0</td><td>CLS.EF.audit.mailTemplate</td><td>SmallDev</td><td style='white-space: nowrap;'>28-Dec-14 01:11</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.audit.htmlTextAudit</Super>
<TimeChanged>63523,52436</TimeChanged>
<TimeCreated>63523,52327.492236</TimeCreated>

<Property name="objMailTemplate">
<Type>mail.objMailTemplate</Type>
<Required>1</Required>
</Property>

<Index name="objMailTemplateIndex">
<Properties>objMailTemplate</Properties>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>mailTemplateDefaultData</DefaultData>
<Data name="mailTemplateDefaultData">
<Structure>listnode</Structure>
<Subscript>"mailTemplate"</Subscript>
<Value name="1">
<Value>objMailTemplate</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.audit.questionPromptHTML">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.audit.questionPromptHTML.CLS/EV.0
;vc; Component: CLS.EF.audit.questionPromptHTML
;vc;  Location: SmallDev
;vc; Date/Time: 28-Dec-14 01:11
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.audit.questionPromptHTML.CLS/EV.0</td><td>CLS.EF.audit.questionPromptHTML</td><td>SmallDev</td><td style='white-space: nowrap;'>28-Dec-14 01:11</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.audit.htmlTextAudit</Super>
<TimeChanged>63524,39517</TimeChanged>
<TimeCreated>63523,49649.298023</TimeCreated>

<Property name="objData">
<Type>sc.objData</Type>
<Required>1</Required>
</Property>

<Index name="objDataIndex">
<Properties>objData</Properties>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>questionPromptHTMLDefaultData</DefaultData>
<Data name="questionPromptHTMLDefaultData">
<Subscript>"questionPromptHTML"</Subscript>
<Value name="1">
<Value>objData</Value>
</Value>
<Value name="2">
<Value>savingStatus</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.audit.scTextBlock">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.audit.scTextBlock.CLS/EV.0
;vc; Component: CLS.EF.audit.scTextBlock
;vc;  Location: SmallDev
;vc; Date/Time: 28-Dec-14 01:11
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.audit.scTextBlock.CLS/EV.0</td><td>CLS.EF.audit.scTextBlock</td><td>SmallDev</td><td style='white-space: nowrap;'>28-Dec-14 01:11</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.audit.htmlTextAudit</Super>
<TimeChanged>63524,39503</TimeChanged>
<TimeCreated>63523,36837.503823</TimeCreated>

<Property name="objText">
<Type>sc.xModules.objText</Type>
<Required>1</Required>
</Property>

<Index name="objTextIndex">
<Properties>objText</Properties>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>scTextBlockDefaultData</DefaultData>
<Data name="scTextBlockDefaultData">
<Subscript>"scTextBlock"</Subscript>
<Value name="1">
<Value>objText</Value>
</Value>
<Value name="2">
<Value>savingStatus</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.config.addClient">
<Description><![CDATA[
code to setup a new client database etc
<!-- ;vc;
;vc;    Object: EF.config.addClient.CLS/EV.16
;vc; Component: CLS.EF.config.addClient
;vc;  Location: SmallDev
;vc; Date/Time: 19-Apr-16 17:10
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.config.addClient.CLS/EV.16</td><td>CLS.EF.config.addClient</td><td>SmallDev</td><td style='white-space: nowrap;'>19-Apr-16 17:10</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<IncludeCode>%syConfig,%occStatus</IncludeCode>
<TimeChanged>64027,58624</TimeChanged>
<TimeCreated>63335,64558.07886</TimeCreated>

<Method name="start">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	if ($ZNSPACE'["SRC")&&($ZNSPACE'["SOURCE") {
		w !,"Please run this from the source code namespace. It will switch to %SYS when needed."
		quit
	}
	set mySourcePath=##class(EF.config.server).getEFRootPathSourceNew()
	set myDomain=##class(EF.config.server).getRedirectsDomain()
	
	set orgNamespace=$ZNSPACE
	zn "%SYS"

	write " --- New Client Installation routine ----"
	Do {
		Set gotNewNameSpace=0
		read !,"Enter the Name of the new namespace (empty=quit): ",newNameSpace
		if newNameSpace="" {
			Set gotNewNameSpace=1
		} else {
			If ('(newNameSpace?1.(1A,1N,1"-"))) { //Alphanumeric and dash (-) are allowed.
				Write !,"Invalid characters in namespace. Must be alphanumeric. Please retry."
				Set gotNewNameSpace=0
			} else {
				If ($EXTRACT($ZCONVERT(newNameSpace,"U"),1,2)'="EV") {
					read !,"Add prefix 'EV'? ([Y]/N) : ",addPrefix
					if ('($EXTRACT($ZCONVERT(addPrefix,"U"),1) = "N")) {
						set newNameSpace="EV"_newNameSpace
					}
				}
			
				If (##class(Config.Namespaces).Exists($ZCONVERT(newNameSpace,"U"))) {
					Write !,"Namespace already exists! Please retry."
					Set gotNewNameSpace=0
				} else {
					Write !,"New Namespace = "_newNameSpace
					read !,"Continue with above namespace? ([Y]/N) : ",confirmNS
					if (($EXTRACT($ZCONVERT(confirmNS,"U"),1) = "N")) {
						Set gotNewNameSpace=0
					} else {
						Set gotNewNameSpace=1
					}
				}
			}
		}
	} While ('gotNewNameSpace)
	
	if newNameSpace="" quit
	
	Set cspAppName = newNameSpace
	If ($EXTRACT($ZCONVERT(cspAppName,"U"),1,2)="EV") {
		Set cspAppName = $EXTRACT(cspAppName,3,$LENGTH(cspAppName))
	}
	
	Write !,"CSP App Name = "_cspAppName
	read !,"Continue with above CSP app name? ([Y]/N) : ",confirmCSPApp
	if (($EXTRACT($ZCONVERT(confirmCSPApp,"U"),1) = "N")) {
		Do {
			Set gotCSPAppName=0
			read !,"Enter the name of the new CSP application name in IIS (empty=quit): ",cspAppName 
			if cspAppName="" {
				Set gotCSPAppName=1
			} else {
				If ('(cspAppName?1.(1A,1N,1"-"))) { //Alphanumeric and dash (-) are allowed.
					Write !,"Invalid characters in CSP App Name. Must be alphanumeric. Please retry."
					Set gotCSPAppName=0
				} else {
					Write !,"CSP App Name = "_cspAppName
					read !,"Continue with above CSP app name? ([Y]/N) : ",confirmCSPApp
					if (($EXTRACT($ZCONVERT(confirmCSPApp,"U"),1) = "N")) {
						Set gotCSPAppName=0
					} else {
						Set gotCSPAppName=1
					}
				}
			}
		} While ('gotCSPAppName)
		If cspAppName="" Quit
	}
	set defaultDBpath=##class(EF.config.server).getDefaultDatabasePath()
	write !,"Location of database file: <",defaultDBpath,newNameSpace,"> " read rootDir
	if rootDir="" set rootDir=defaultDBpath_newNameSpace
	if $E(rootDir,$l(rootDir))="\" set rootDir=$E(rootDir,1,$L(rootDir)-1)
	set path=rootDir
 	
	do ..create(newNameSpace,cspAppName,1,path,1)
	ZN orgNamespace
	quit
]]></Implementation>
</Method>

<Method name="create">
<ClassMethod>1</ClassMethod>
<FormalSpec>newNameSpace,cspAppName,activateCPF=1,path="",addToMirror=1</FormalSpec>
<Implementation><![CDATA[
	set defaultDBpath=##class(EF.config.server).getDefaultDatabasePath()
	if path="" {
		set path=defaultDBpath_newNameSpace
	}
	if $E(path,$l(path))="\" set path=$E(path,1,$L(path)-1)
 	set path=$ZCVT(path,"U"),newNameSpace=$ZCVT(newNameSpace,"U"),cspAppName=$ZCVT(cspAppName,"U")

	if ##class(Config.Namespaces).Exists(newNameSpace) {
		write !,"Namespace already exists, quitting."
		quit
	}

	set orgNamespace=$ZNSPACE
	zn "%SYS"
	write !!,"Installing ",newNameSpace," to ",path,!
 	
	set ^%ZCSPAPPS(newNameSpace)=cspAppName
 
	// update the central client library
	set server=$P($ZUTIL(131,0),"-",2)
	set instanceName=$P($ZUTIL(86),"*",2)
 	
	// create new directory
	set ok=##class(%Library.File).CreateDirectoryChain(path)
	
	// create new database	
 	set sizeInMB=10,isEncrypted=1
 	set MirrorSetName="",MirrorDBName=""
 	if (addToMirror&&$SYSTEM.Mirror.IsMember()) { // have to do the same on Mirror Primary (HAS to be done first) and Mirror Backup
	 	set MirrorSetName=$SYSTEM.Mirror.MirrorName(),MirrorDBName=newNameSpace
 	}
	set ok=##class(SYS.Database).CreateDatabase(path,sizeInMB,8192,isEncrypted,,,MirrorDBName,MirrorSetName)
	write !,"Create Database status=",ok
	
	// add new database to the configuration
	set Properties("Directory")=path
	set Properties("MountAtStartup")=1
	set Properties("MountRequired")=1
	set ok=##Class(Config.Databases).Create(newNameSpace,.Properties)
	write !,"Add New database status=",ok
	hang 2
	
	// create new namespace
	set Properties("Globals")=newNameSpace
	set Properties("Routines")=newNameSpace
	
	
	set ok=##Class(Config.Namespaces).Create(newNameSpace,.Properties)
	write !,"New namespace create status=",ok
	
	// Create new CSP application
	write !,"Create new CSP application status=",..createCSPApplication(cspAppName,newNameSpace)
	write !,"Create new CSP API application status=",..createCSPApplicationForAPI(cspAppName_"/api",newNameSpace)
	
	if activateCPF do ..activateCPF()
	
	w !,"Run this on primary server once the shadowing is set up:"
	w !,"do ##class(EF.config.addClient).installDefaults("""_newNameSpace_""")"

	ZN orgNamespace
	w !,"================ INSTALLATION COMPLETED ======================"
	quit
]]></Implementation>
</Method>

<Method name="initialiseAllNewAccounts">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set orgNS=$ZNSPACE
	set clientList=##class(EF.config.clientList).getListOfClients()
	set key=""
	for {
		set clientData=clientList.GetNext(.key)
		if key="" quit
		set environment=$ZCVT($p(clientData,"|",1),"U")
		set NS=$ZCVT($p(clientData,"|",3),"U")
		// make sure we only act on namespaces listed against the current environment (we may have the same namespace name in live and in test)
		if (##class(EF.config.clientList).isInEnvironment(environment)) {
			// then check to make sure ^%ZCSPAPPS exists 
			//  - in case the account has just been deleted from live (or is being deleted)
			//  - and for test areas where each instance will have it's own set of namespaces
			if $Data(^%ZCSPAPPS(NS)) {
				ZN NS
				if '$Data(^cod.objItemDataD) {  // this is how 'setup.objInstall).init()' determines status
					do ..installDefaults(NS)
				}
			}
		}
	}
	zn orgNS
	return
]]></Implementation>
</Method>

<Method name="installDefaults">
<Description>
run all the setup code inside a blank database</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>newNameSpace</FormalSpec>
<Implementation><![CDATA[
    ZNSpace newNameSpace
	// run the initialisation
	set version=##class(EF.config.server).getEFversion()
	set logPath=##class(EF.config.server).getLogPath()
	do ##class(%File).CreateDirectoryChain(logPath)
	set file3 = logPath_newNameSpace_"_"_version_"_install.txt" 
	write !,"Opening log file: ",file3
	open file3:"WNS":5
	if '$T write !,"Could not open ",file3 quit
	use file3
	hang 2

	set ok=##class(setup.objInstall).init()
	write !,"setup.objInstall:init finished with status:",ok,!
    if 'ok quit
	kill %objlasterror

	write !!,$zt($p($H,",",2))," Setting Version"
	set ok=##class(setup.objSetting).setParameter("system","version",version)

	set myDomain=##class(EF.config.server).getDefaultApplicationDomain()
	set ok=##class(setup.objSetting).setParameter("system","domain 1",myDomain) 
    if ok write !,"Updated the domain 1 to "_myDomain,!

	do ##class(storage.methods).activateCloudStorageForNS()
	
	close file3
	quit
]]></Implementation>
</Method>

<Method name="GetErrMsg">
<Description>
GetErrMsg - extracts error message from status</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>status:%Status</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ret=""
	Do DecomposeStatus^%apiOBJ(status,.err,"-d") For i=1:1:err Set ret=ret_" "_err(i)
	Quit ret
]]></Implementation>
</Method>

<Method name="createCSPApplication">
<ClassMethod>1</ClassMethod>
<FormalSpec>cspAppName,namespace</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set orgNamespace=$ZNSPACE
	set cspAppName=$ZCVT(cspAppName,"L")
	zn "%SYS"
	hang 2
	set Properties("AutoCompile")=0
	set Properties("CookiePath")="/"
	set Properties("UseCookies")=1
	set Properties("ErrorPage")="/"_cspAppName_"/system/errorPage.csp"
	set Properties("LockCSPName")=0
	set Properties("NameSpace")=namespace
	set Properties("Description")=namespace
	set Properties("Path")=##class(EF.config.server).getEFRootPathSourceNew()

	set Properties("Package")="cspRealEV"
	set Properties("ServeFiles")=0
	set Properties("Timeout")=7200 // two hours
	set Properties("SuperClass")="shared.pCSPmanage"
	set Properties("EventClass")="shared.efSessionEvents"
	set ok=##class(Security.Applications).Create("/"_cspAppName,.Properties)
	
	ZN orgNamespace
	return ok
]]></Implementation>
</Method>

<Method name="createCSPApplicationForAPI">
<ClassMethod>1</ClassMethod>
<FormalSpec>cspAppName,namespace</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set orgNamespace=$ZNSPACE
	set cspAppName=$ZCVT(cspAppName,"L")
	zn "%SYS"
	hang 2
	set Properties("AutoCompile")=0
	set Properties("UseCookies")=0
	set Properties("CookiePath")="/"
	set Properties("LockCSPName")=1
	set Properties("NameSpace")=namespace
	set Properties("Description")=namespace_" API"

	set Properties("ServeFiles")=0
	set Properties("Timeout")=3600 // one hour
	set Properties("EventClass")="shared.efSessionEvents"
	set ok=##class(Security.Applications).Create("/"_cspAppName,.Properties)
	
	ZN orgNamespace
	return ok
]]></Implementation>
</Method>

<Method name="updateCSPApplication">
<Description><![CDATA[
update the CSP Application property <name> with <value>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>cspAppName,name,value</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set orgNamespace=$ZNSPACE
	set cspAppName=$ZCVT(cspAppName,"L")
	if (($E(cspAppName,1)="/")!($E(cspAppName,1)="\")) {
		set cspAppName=$E(cspAppName,2,$L(cspAppName))
	}
	zn "%SYS"

	if (##Class(Security.Applications).Exists("/"_cspAppName))	{
		set Properties(name)=value
		set sc=##class(Security.Applications).Modify("/"_cspAppName,.Properties)
	} else {
		set sc=0
	}
	
	ZN orgNamespace
	return sc
]]></Implementation>
</Method>

<Method name="activateCPF">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set orgNamespace=$ZNSPACE

	zn "%SYS"
	hang 2
	set controlBits=$$$CPFSave  // save
		
 	Set sc=##class(Config.CPF).Write()
 	
 	If $$$ISERR(sc) {
	 	w "Error saving CPF: "_..GetErrMsg(sc)
 	} else {
	 	Set sc=##class(Config.CPF).Activate()
	 	If $$$ISERR(sc) {
		 	w "Error activating CPF: "_..GetErrMsg(sc)
	 	} else {
	 	}
 	}
 	
	ZN orgNamespace
]]></Implementation>
</Method>

<Method name="createAllNewAccountsInLive">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set removeZCSPAPPSAfterCreation=0,addToMirror=1,simulate=0
	do ..createAllClientsIfNotExisting("LIVE",removeZCSPAPPSAfterCreation,addToMirror,simulate)
	return
]]></Implementation>
</Method>

<Method name="createAllClientsIfNotExisting">
<Description>
for migrating clients between database servers - but can be used at any time</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inEnvironment,removeZCSPAPPS=0,addToMirror=0,simulate=1</FormalSpec>
<Implementation><![CDATA[
	if inEnvironment="" {
		w !,"Error: no environment specified (allowed: LIVE,DEV,TEST,STAGING)"
		quit
	}
	set clientList=##class(EF.config.clientList).getListOfClients()

	// switch after we get the client list so this works in DEV where code is not mapped
	set orgNamespace=$ZNSPACE
	zn "%SYS"

	set atLeastOneCreated=0
	set key=""
	for {
		set clientData=clientList.GetNext(.key)
		if key="" quit
		set environment=$ZCVT($p(clientData,"|",1),"U")
		set cspAppName=$ZCVT($p(clientData,"|",2),"U")
		set newNameSpace=$ZCVT($p(clientData,"|",3),"U")
		if environment'=inEnvironment continue
		if ##class(Config.Namespaces).Exists(newNameSpace) continue

		if simulate {
			w !,"simulation:"_newNameSpace_" DB would be created."
		} else {
			do ..create(newNameSpace,cspAppName,0,"",addToMirror)
		}
		set atLeastOneCreated=1
		
		if removeZCSPAPPS kill ^%ZCSPAPPS(newNameSpace)
	}
	if (atLeastOneCreated) {
		do ..activateCPF()
	}
	ZN orgNamespace
	quit
]]></Implementation>
</Method>

<Method name="createAllClientsZCSPAPPS">
<ClassMethod>1</ClassMethod>
<FormalSpec>inEnvironment,simulate=1</FormalSpec>
<Implementation><![CDATA[
	if (inEnvironment="") {
		w !,"Error: no environment specified (allowed: LIVE,DEV,TEST,STAGING)"
		quit
	}
	set clientList=##class(EF.config.clientList).getListOfClients()

	// switch after we get the client list so this works in DEV where code is not mapped
	set orgNamespace=$ZNSPACE
	zn "%SYS"

	set key=""
	for {
		zn "%SYS"
		set clientData=clientList.GetNext(.key)
		if key="" quit
		set environment=$ZCVT($p(clientData,"|",1),"U")
		set cspAppName=$ZCVT($p(clientData,"|",2),"U")
		set newNameSpace=$ZCVT($p(clientData,"|",3),"U")
		if environment'=inEnvironment continue
		if $D(^%ZCSPAPPS(newNameSpace)) continue
		if '##class(Config.Namespaces).Exists(newNameSpace) continue
		ZN newNameSpace
		if '$D(^cod.objItemDataD(3)) continue  // must have some data in a real client database so it must have been migrated (rather than a blank one)
		zn "%SYS"

		if simulate {
			w !,"simulation:^%ZCSPAPPS("_newNameSpace_") would be created."
		} else {
			set ^%ZCSPAPPS(newNameSpace)=cspAppName
		}
	}
	ZN orgNamespace
	quit
]]></Implementation>
</Method>

<Method name="createCSPAPPsForAllClients">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	ZN "%SYS"
	set clientList=##class(EF.config.clientList).getListOfClients(),key="" 
	for  {
		set clientData=clientList.GetNext(.key) 
		if key="" quit
		set environment=$ZCVT($p(clientData,"|",1),"U")
		if environment'="LIVE" continue

		set tmpAppName=$ZCVT($p(clientData,"|",2),"U")
		set tmpNS=$ZCVT($p(clientData,"|",3),"U") 

		set cspAppNameToCreate=tmpAppName
		if ('##Class(Security.Applications).Exists("/"_cspAppNameToCreate))	{
			do ..createCSPApplication(cspAppNameToCreate,tmpNS)
		}	
		set cspAppNameToCreate=tmpAppName_"/api"
		if ('##Class(Security.Applications).Exists("/"_cspAppNameToCreate))	{
			do ..createCSPApplicationForAPI(cspAppNameToCreate,tmpNS)
		}	
		
	}
	return
]]></Implementation>
</Method>

<Method name="updateCSPAPPsForAllClients">
<Description>
update a CSPAPP property for all clients, example:
do ##class(EF.config.addClient).updateCSPAPPsForAllClients("UseCookies",1)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>name,value</FormalSpec>
<Implementation><![CDATA[
	set clientList=##class(EF.config.clientList).getListOfClients(),key="" 
	for  {
		set clientData=clientList.GetNext(.key) 
		if key="" quit
		set environment=$ZCVT($p(clientData,"|",1),"U")
		if '##class(EF.config.clientList).isInEnvironment(environment) continue

		set tmpAppName=$ZCVT($p(clientData,"|",2),"U")
		set tmpNS=$ZCVT($p(clientData,"|",3),"U") 

		set cspAppName=tmpAppName
		set sc=..updateCSPApplication(cspAppName,name,value)
		if $$$ISOK(sc) {
			w !,"CSP App:"_"/"_cspAppName_" - updated"
		} else {
			w !,"CSP App:"_"/"_cspAppName_" - FAILED TO UPDATE"
		}
	}
	return
]]></Implementation>
</Method>
</Class>


<Class name="EF.config.application">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.config.application.CLS/EV.0
;vc; Component: CLS.EF.config.application
;vc;  Location: SmallDev
;vc; Date/Time: 02-Feb-14 02:42
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.config.application.CLS/EV.0</td><td>CLS.EF.config.application</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Feb-14 02:42</td><td>ShahadatH</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63158,36660</TimeChanged>
<TimeCreated>63158,36626.38587</TimeCreated>

<Method name="getApplicationName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ret=##class(setup.objSetting).getParameter("application","name")
	
	If ($LENGTH(ret)<1) {
		Set ret="Eventsforce"
	}
	
	Quit ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.config.clientData">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.config.clientData.CLS/EV.17
;vc; Component: CLS.EF.config.clientData
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.config.clientData.CLS/EV.17</td><td>CLS.EF.config.clientData</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63959,52916</TimeChanged>
<TimeCreated>63630,51334.004871</TimeCreated>
<DependsOn>EF.config.clientList</DependsOn>

<Property name="appName">
<Type>%String</Type>
</Property>

<Property name="namespace">
<Type>%String</Type>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>appName,namespace</FormalSpec>
<ReturnType>EF.config.clientData</ReturnType>
<Implementation><![CDATA[
	set cspApp=..%New()
	set cspApp.appName=$ZCVT(appName,"L")
	set cspApp.namespace=namespace
	
	return cspApp
]]></Implementation>
</Method>

<Method name="isAppRedirected">
<ClassMethod>1</ClassMethod>
<FormalSpec>appName</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if (..doesApplicationExist(appName))&&($ISOBJECT(..getClientDataForRedirectedAppName(appName))) {
		return 1
	}
	return 0
]]></Implementation>
</Method>

<Method name="doesApplicationExist">
<ClassMethod>1</ClassMethod>
<FormalSpec>appName</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set out=0
	set curNS=$ZNSPACE
	ZN "%SYS"
	try {
		set out=##Class(Security.Applications).Exists("/"_appName)
	} catch {
		set out=0	
	}
	ZN curNS
	return out
]]></Implementation>
</Method>

<Method name="getCSPAppFromNameSpace">
<ClassMethod>1</ClassMethod>
<FormalSpec>nameSpace</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set clientData=..getClientDataForNameSpace(nameSpace)
	if $ISOBJECT(clientData) {
		return clientData.appName
	} else {
		return ^%ZCSPAPPS($ZCVT(nameSpace,"U"))
	}
]]></Implementation>
</Method>

<Method name="getNameSpaceFromCSPApp">
<ClassMethod>1</ClassMethod>
<FormalSpec>appName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set clientData=..getClientDataForAppName(appName)
	if $ISOBJECT(clientData) {
		return clientData.namespace
	} else {
		throw ##class(shared.exceptions.generalException).%New("No client found for this CSP app name")
	}
]]></Implementation>
</Method>

<Method name="getCSPAppForCurrentNameSpace">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	return ..getCSPAppFromNameSpace($ZNSPACE)
]]></Implementation>
</Method>

<Method name="isValidAppName">
<ClassMethod>1</ClassMethod>
<FormalSpec>appName</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if $ISOBJECT(..getClientDataForAppName(appName)) {
		return 1
	}
	return 0
]]></Implementation>
</Method>

<Method name="getCSPAppFromFullURL">
<ClassMethod>1</ClassMethod>
<FormalSpec>fullURL</FormalSpec>
<ReturnType>EF.config.clientData</ReturnType>
<Implementation><![CDATA[
	set appName=$P(fullURL,"/",4)
	return ..getClientDataForAppName(appName)
]]></Implementation>
</Method>

<Method name="getClientDataForNameSpace">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>nameSpace:%String</FormalSpec>
<GenerateAfter>getListOfClients,generateCreateNew</GenerateAfter>
<ReturnType>EF.config.clientData</ReturnType>
<Implementation><![CDATA[
	Do %code.WriteLine(" set nameSpace=$ZCVT(nameSpace,""L"")")
	set clientList=##class(EF.config.clientList).getListOfClients()
	set key=""
	for {
		set clientData=clientList.GetNext(.key)
		if key="" quit
		set environment=$ZCVT($p(clientData,"|",1),"L")
		set tmpNameSpace=$ZCVT($p(clientData,"|",3),"L")
		Do %code.WriteLine(" if (nameSpace="""_tmpNameSpace_""")&&(##class(EF.config.clientList).isInEnvironment("""_environment_""")) return "_##class(EF.config.clientList).generateCreateNew(clientData)_"")
	}
	
	Do %code.WriteLine(" return """"")
]]></Implementation>
</Method>

<Method name="getClientDataForAppName">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>appName:%String</FormalSpec>
<GenerateAfter>getListOfClients,generateCreateNew</GenerateAfter>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Do %code.WriteLine(" set appName=$ZCVT(appName,""L"")")
	set clientList=##class(EF.config.clientList).getListOfClients()
	set key=""
	for {
		set clientData=clientList.GetNext(.key)
		if key="" quit
		set environment=$ZCVT($p(clientData,"|",1),"L")
		set tmpAppName=$ZCVT($p(clientData,"|",2),"L")
		Do %code.WriteLine(" if (appName="""_tmpAppName_""")&&(##class(EF.config.clientList).isInEnvironment("""_environment_""")) return "_##class(EF.config.clientList).generateCreateNew(clientData)_"")
	}
	
	Do %code.WriteLine(" return """"")
]]></Implementation>
</Method>

<Method name="getClientDataForRedirectedAppName">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>appName</FormalSpec>
<GenerateAfter>getListOfRedirectedClients,generateCreateNew</GenerateAfter>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Do %code.WriteLine(" set appName=$ZCVT(appName,""L"")")
	set redirectList=##class(EF.config.clientList).getListOfRedirectedClients()
	set key=""
	for {
		set redirectData=redirectList.GetNext(.key)
		if key="" quit
		set environment=$ZCVT($p(redirectData,"|",1),"L")
		set oldAppName=$ZCVT($p(redirectData,"|",2),"L")
		set newAppName=$ZCVT($p(redirectData,"|",3),"L")
		Do %code.WriteLine(" if (appName="""_oldAppName_""")&&(##class(EF.config.clientList).isInEnvironment("""_environment_""")) return ..getClientDataForAppName("""_newAppName_""")")
	}
	
	Do %code.WriteLine(" return """"")
]]></Implementation>
</Method>
</Class>


<Class name="EF.config.clientDataProjection">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.config.clientDataProjection.CLS/EV.0
;vc; Component: CLS.EF.config.clientDataProjection
;vc;  Location: SmallDev
;vc; Date/Time: 09-Jun-15 11:37
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.config.clientDataProjection.CLS/EV.0</td><td>CLS.EF.config.clientDataProjection</td><td>SmallDev</td><td style='white-space: nowrap;'>09-Jun-15 11:37</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%Projection.AbstractProjection</Super>
<TimeChanged>63707,58998</TimeChanged>
<TimeCreated>63707,55362.749063</TimeCreated>

<Method name="CreateProjection">
<Description><![CDATA[
This method is called by the Class Compiler whenever an associated 
class has finished compiling. <var>classname</var> contains the name of 
the associated class while <var>parameters</var> contains an array of the 
projection parameters subscripted by parameter name. Also the special parameter value
parameters("%qstruct") contains a merge of the qstruct array this projection is being
compiled with. The <var>modified</var>
for an incremental compile will contain a comma separated list of the methods that were
modified and it will be blank for a full compile<BR>
Any errors reported by this method are reported by the Class Compiler but
do not effect class compilation in any way.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[classname:%String,&parameters:%String,modified:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do $SYSTEM.OBJ.Compile("EF.config.clientData")
	QUIT $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="EF.config.clientList">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.config.clientList.CLS/EV.79
;vc; Component: CLS.EF.config.clientList
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.config.clientList.CLS/EV.79</td><td>CLS.EF.config.clientList</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<IncludeCode>EF.common.macros</IncludeCode>
<TimeChanged>64169,34944.436226</TimeChanged>
<TimeCreated>63514,69297.140624</TimeCreated>

<Projection name="createIISconfig">
<Type>EF.config.createIISconfig</Type>
</Projection>

<Projection name="clientDataProjection">
<Type>EF.config.clientDataProjection</Type>
</Projection>

<Method name="getListOfClients">
<ClassMethod>1</ClassMethod>
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[
	set clientList=##class(%ListOfDataTypes).%New()
	// environment|cspAppName|namespace|Friendly name|Custom Domain|cspApplicationServerName
	
	// note: cspApplicationServerName is the server name used in the CSP Gateway, e.g. BEIGE, BROWN, LARGETEST, LIVE-1
	
    do clientList.Insert("DEV|CRITICALDEVSRC|CRITICALDEVSRC")
    do clientList.Insert("DEV|LARGEDEVSRC|LARGEDEVSRC")
    do clientList.Insert("DEV|SMALLDEVSRC|SMALLDEVSRC")
    do clientList.Insert("FREDDEV|FREDDEV|SMALLDEVSRC")
    
    do clientList.Insert("TEST|ADRIANNEW2|EVADRIAN1")
    do clientList.Insert("TEST|CRITICALTEST-AWARDS|CT-AWARDS")
    do clientList.Insert("TEST|CRITICALTEST-ENTERPRISE|CT-ENTERPRISE")
    do clientList.Insert("TEST|CRITICALTEST-PROFESSIONAL|CT-PROFESSIONAL")
    do clientList.Insert("TEST|CRITICALTESTSRC|CRITICALTESTSRC")
    do clientList.Insert("TEST|CTAPIEXAMPLE|CTAPIEXAMPLE")
    do clientList.Insert("TEST|CTNORTH|EVCTSOUTH")
    do clientList.Insert("TEST|CTJAW1|CTJAW1")
    do clientList.Insert("TEST|KWILSON1|EVKWILSON1")
    do clientList.Insert("TEST|LARGETEST-APIEXAMPLE|LT-APIEXAMPLE")
    do clientList.Insert("TEST|LARGETEST-AWARDS|LT-AWARDS")
    do clientList.Insert("TEST|LARGETEST-ENTERPRISE|LT-ENTERPRISE")
    do clientList.Insert("TEST|LARGETEST-PROFESSIONAL|LT-PROFESSIONAL")
    do clientList.Insert("TEST|LT-AVIVA-FAKE|LT-AVIVA-FAKE")
    do clientList.Insert("TEST|LT-SDT-FIVE|EVLT-SDT-ONE")
    do clientList.Insert("TEST|LT-SH-TWO|EVLT-SH-ONE")
    do clientList.Insert("TEST|LTJAW44|LTJAW1")
    do clientList.Insert("TEST|SMALLTEST-AWARDS|ST-AWARDS")
    do clientList.Insert("TEST|SMALLTEST-ENTERPRISE|ST-ENTERPRISE")
    do clientList.Insert("TEST|SMALLTEST-PROFESSIONAL|ST-PROFESSIONAL")
    do clientList.Insert("TEST|STAJM1|STAJM1")
    do clientList.Insert("TEST|STAJMTEMP|STAJMTEMP")
    do clientList.Insert("TEST|STALDOUS007|STALDOUS007")
    do clientList.Insert("TEST|STALDOUS008|STALDOUS008")
    do clientList.Insert("TEST|STALDOUSPAY|EVSTALDOUSPAY")
    do clientList.Insert("TEST|STAUTOAPP1|STAUTOAPP1")
    do clientList.Insert("TEST|STAUTOSOURCEAPP1|STAUTOSOURCEAPP1")
    do clientList.Insert("TEST|STBMJFAKE|EVSTBMJFAKE|BMJ fake (Small Test)")
    do clientList.Insert("TEST|STDODSFAKE|STDODSFAKE|Dods fake (Small Test)")
    do clientList.Insert("TEST|STJAW1|STJAW1")
    do clientList.Insert("TEST|STKWILSON1|STKWILSON1")
    do clientList.Insert("TEST|STSCHRODERSFAKE|STSCHRODERSFAKE|Schroders fake (Small Test)")
    do clientList.Insert("TEST|LTSCHRODERSFAKE|LTSCHRODERSFAKE|Schroders fake (Large Test)")
    do clientList.Insert("TEST|STTESTRQ|STTESTRQ")
    do clientList.Insert("TEST|TESTFG|EVTESTFG")
    do clientList.Insert("TEST|TESTRQ|EVTESTRQ")
    do clientList.Insert("TEST|TRAVELPLACES|EVTRAVELPLACES")
        
    do clientList.Insert("STAGING|LIVERPOOL|EVLONDON")
    do clientList.Insert("STAGING|PENTEST2|EVPENTEST2")
    do clientList.Insert("STAGING|PENTEST3|EVPENTEST3")
    do clientList.Insert("STAGING|SUPPORT2|EVSUPPORT2")
    do clientList.Insert("STAGING|TESTQM|EVTESTQM")
    do clientList.Insert("STAGING|TRANSTESTA|EVTRANSTESTA")
    do clientList.Insert("STAGING|TRANSTEST|EVTRANSTEST")
    
	do clientList.Insert("LIVE|007|EV007|007 [Paul Harris]||LIVE-1")
	do clientList.Insert("LIVE|AATEVENTS|EVAATEVENTS|||LIVE-1")
	do clientList.Insert("LIVE|AATEVENTS-SANDBOX|EVAATEVENTS-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|ABDO|EVABDO|||LIVE-1")
	do clientList.Insert("LIVE|ABDO-SANDBOX|EVABDO-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|ABHI|EVABHI||www.abhi-events.org.uk|LIVE-1")
	do clientList.Insert("LIVE|ABSTRACTS-TRIAL-01|EVABSTRACTS-TRIAL-01|||LIVE-1")
	do clientList.Insert("LIVE|ABSTRACTS-TRIAL-02|EVABSTRACTS-TRIAL-02|||LIVE-1")
	do clientList.Insert("LIVE|ABSTRACTS-TRIAL-03|EVABSTRACTS-TRIAL-03|||LIVE-1")
	do clientList.Insert("LIVE|ABSTRACTS-TRIAL-04|EVABSTRACTS-TRIAL-04|||LIVE-1")
	do clientList.Insert("LIVE|ABSTRACTS-TRIAL-05|EVABSTRACTS-TRIAL-05|||LIVE-1")
	do clientList.Insert("LIVE|ABSTRACTS-TRIAL-06|EVABSTRACTS-TRIAL-06|||LIVE-1")
	do clientList.Insert("LIVE|ABSTRACTS-TRIAL-07|EVABSTRACTS-TRIAL-07|||LIVE-1")
	do clientList.Insert("LIVE|ABSTRACTS-TRIAL-08|EVABSTRACTS-TRIAL-08|||LIVE-1")
	do clientList.Insert("LIVE|ABSTRACTS-TRIAL-09|EVABSTRACTS-TRIAL-09|||LIVE-1")
	do clientList.Insert("LIVE|ABSTRACTS-TRIAL-10|EVABSTRACTS-TRIAL-10|||LIVE-1")
	do clientList.Insert("LIVE|ACA|EVACA|ANGEL CAPITAL ASSOCIATION||LIVE-1")
	do clientList.Insert("LIVE|ACA-SANDBOX|EVACA-SANDBOX|ANGEL CAPITAL ASSOCIATION-SANDBOX||LIVE-1")
	do clientList.Insert("LIVE|ACP|EVACP|American College of Phlebology||LIVE-1")
	do clientList.Insert("LIVE|ACP-SANDBOX|EVACP-SANDBOX|American College of Phlebology - sandbox||LIVE-1")
	do clientList.Insert("LIVE|ADDINGVALUE|EVADDINGVALUE|||LIVE-1")
	do clientList.Insert("LIVE|ADDINGVALUE-SANDBOX|EVADDINGVALUE-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|AFRICANBRAINS|EVAFRICANBRAINS|||LIVE-1")
	do clientList.Insert("LIVE|AIRA|EVAIRA|||LIVE-1")
	do clientList.Insert("LIVE|AIRA-SANDBOX|EVAIRA-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|ALLIANZ|EVALLIANZ||www.allianzevents.co.uk|LIVE-1")
	do clientList.Insert("LIVE|ALMINTERNATIONAL|EVALMINTERNATIONAL|||LIVE-1")
	do clientList.Insert("LIVE|ALMINTERNATIONAL-SANDBOX|EVALMINTERNATIONAL-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|ALPHA|EVALPHA|||LIVE-1")
	do clientList.Insert("LIVE|AMNESTY|EVAMNESTY|||LIVE-1")
	do clientList.Insert("LIVE|AMNESTY-SANDBOX|EVAMNESTY-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|AMNESTYINTSEC|EVAMNESTYINTSEC|||LIVE-1")
	do clientList.Insert("LIVE|AMNESTYINTSEC-SANDBOX|EVAMNESTYINTSEC-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|ANTHONYV|EVANTHONYV|||LIVE-1")
	do clientList.Insert("LIVE|ANTHONYV-SANDBOX|EVANTHONYV-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|AOC|EVAOC||www.aoccreateevents.co.uk|LIVE-1")
	do clientList.Insert("LIVE|AOCTEST|EVAOCTEST|||LIVE-1")
	do clientList.Insert("LIVE|APIEXAMPLE|EVAPIEXAMPLE|||LIVE-1")
	do clientList.Insert("LIVE|ARTEFACT|EVARTEFACT|||LIVE-1")
	do clientList.Insert("LIVE|ARTEFACT-SANDBOX|EVARTEFACT-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|ASKEVENT|EVASKEVENT|||LIVE-1")
	do clientList.Insert("LIVE|ASKEVENT-SANDBOX|EVASKEVENT-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|ASSUREDEVENTS|EVASSUREDEVENTS|||LIVE-1")
	do clientList.Insert("LIVE|ATHENE|EVATHENE|||LIVE-1")
	do clientList.Insert("LIVE|ATHENE-SANDBOX|EVATHENE-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|ATMEL|EVATMEL|||LIVE-1")
	do clientList.Insert("LIVE|ATMEL-SANDBOX|EVATMEL-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|AVIVA|EVAVIVA||www.globalavivaevents.com|LIVE-1")
	do clientList.Insert("LIVE|AVODIGY|EVAVODIGY|||LIVE-1")
	do clientList.Insert("LIVE|AVODIGY-SANDBOX|EVAVODIGY-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|AWID|EVAWID|||LIVE-1")
	do clientList.Insert("LIVE|AWID-SANDBOX|EVAWID-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|BA|EVBA||events.baplc.com|LIVE-1")
	do clientList.Insert("LIVE|BA-SANDBOX|EVBA-SANDBOX||events.baplc.com|LIVE-1")
	do clientList.Insert("LIVE|BAD|EVBAD|||LIVE-1")
	do clientList.Insert("LIVE|BANKSSADLER|EVBANKSSADLER||registrations.banks-sadler.com|LIVE-1")
	do clientList.Insert("LIVE|BANKSSADLER-SANDBOX|EVBANKSSADLER-SANDBOX||registrations.banks-sadler.com|LIVE-1")
	do clientList.Insert("LIVE|BAUER|EVBAUER|||LIVE-1")
	do clientList.Insert("LIVE|BAUER-SANDBOX|EVBAUER-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|BBVA|EVBBVA||www.eventosbbva.com|LIVE-1")
	do clientList.Insert("LIVE|BCBETA|EVBCBETA|BRITISH COUNCIL BETA TEST||LIVE-1")
	do clientList.Insert("LIVE|BENB|EVBENB|||LIVE-1")
	do clientList.Insert("LIVE|BGGROUP|EVBGGROUP|BG GROUP|groupevents.bg-group.com|LIVE-1")
	do clientList.Insert("LIVE|BHR|EVBHR|||LIVE-1")
	do clientList.Insert("LIVE|BLUEPRINT|EVBLUEPRINT|||LIVE-1")
	do clientList.Insert("LIVE|BMJ|EVBMJ|||LIVE-1")
	do clientList.Insert("LIVE|BMJTEST|EVBMJTEST|||LIVE-1")
	do clientList.Insert("LIVE|BOOKSELLER|EVBOOKSELLER|||LIVE-1")
	do clientList.Insert("LIVE|BPAWARDS|EVBPAWARDS|||LIVE-1")
	do clientList.Insert("LIVE|BPEVENTS|EVBPEVENTS||bpexecutiveevents.bp.com|LIVE-1")
	do clientList.Insert("LIVE|BPTECHNOFEST|EVBPTECHNOFEST|||LIVE-1")
	do clientList.Insert("LIVE|BPTEST|EVBPTEST|||LIVE-1")
	do clientList.Insert("LIVE|BRITISHCOUNCIL|EVBRITISHCOUNCIL|||LIVE-1")
	do clientList.Insert("LIVE|BRITISHCOUNCILTEST|EVBRITISHCOUNCILTEST|||LIVE-1")
	do clientList.Insert("LIVE|CASPIANMEDIA|EVCASPIANMEDIA|||LIVE-1")
	do clientList.Insert("LIVE|CASPIANMEDIA-SANDBOX|EVCASPIANMEDIA-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|CBS|EVCBS|CARDIFF BUSINESS SCHOOL||LIVE-1")
	do clientList.Insert("LIVE|CEIS|EVCEIS|||LIVE-1")
	do clientList.Insert("LIVE|CENTAUR|EVCENTAUR|||LIVE-1")
	do clientList.Insert("LIVE|CENTAUR-SANDBOX|EVCENTAUR-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|CENTRICA|EVCENTRICA|||LIVE-1")
	do clientList.Insert("LIVE|CERA|EVCERA|||LIVE-1")
	do clientList.Insert("LIVE|CIIEVENTS|EVCIIEVENTS|||LIVE-1")
	do clientList.Insert("LIVE|CIIEVENTS-SANDBOX|EVCIIEVENTS-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|CIN|EVCIN|CZECH-IN||LIVE-1")
	do clientList.Insert("LIVE|CLARKWHITEPUBLICATIONS|EVCLARKWHITEPUBLICATIONS|||LIVE-1")
	do clientList.Insert("LIVE|CLARKWHITEPUBLICATIONS-SANDBOX|EVCWPUBLICATIONS-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|CMPI|EVCMPI|||LIVE-1")
	do clientList.Insert("LIVE|CMPITEST|EVCMPITEST|CMPI (UBM)||LIVE-1")
	do clientList.Insert("LIVE|CODE|EVCODE|||LIVE-1")
	do clientList.Insert("LIVE|CODE-SANDBOX|EVCODE-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|CONCENTRA|EVCONCENTRA|||LIVE-1")
	do clientList.Insert("LIVE|CONCENTRA-SANDBOX|EVCONCENTRA-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|CONFERENCECARE|EVCONFCARE||www.cceventslive.com|LIVE-1")
	do clientList.Insert("LIVE|CLEVENTS|EVCONFERENCELINE|||LIVE-1")
	do clientList.Insert("LIVE|CONVENTOR|EVCONVENTOR|||LIVE-1")
	do clientList.Insert("LIVE|CONVENTOR-SANDBOX|EVCONVENTOR-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|COSTAR|EVCOSTAR|||LIVE-1")
	do clientList.Insert("LIVE|COSTAR-SANDBOX|EVCOSTAR-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|CREATIVEREALISATION|EVCR|||LIVE-1")
	do clientList.Insert("LIVE|CREATIVEREALISATION-SANDBOX|EVCR-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|CROWNBC|EVCROWNBC|||LIVE-1")
	do clientList.Insert("LIVE|CROWNBC-SANDBOX|EVCROWNBC-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|CRU|EVCRU|||LIVE-1")
	do clientList.Insert("LIVE|CRU-SANDBOX|EVCRU-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|CSA|EVCSA|CARIBBEAN STUDIES ASSOCIATION||LIVE-1")
	do clientList.Insert("LIVE|CSA-SANDBOX|EVCSA-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|CU|EVCU|COVENTRY UNIVERSITY||LIVE-1")
	do clientList.Insert("LIVE|CU-SANDBOX|EVCU-SANDBOX|COVENTRY UNIVERSITY-SANDBOX||LIVE-1")
	do clientList.Insert("LIVE|CWC|EVCWC|||LIVE-1")
	do clientList.Insert("LIVE|CWC-SANDBOX|EVCWC-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|DEVCON|EVDEVCON|||LIVE-1")
	do clientList.Insert("LIVE|DMSI|EVDMSI|||LIVE-1")
	do clientList.Insert("LIVE|DMSI-SANDBOX|EVDMSI-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|DODS|EVDODS|||LIVE-1")
	do clientList.Insert("LIVE|DODSTEST|EVDODSTEST|||LIVE-1")
	do clientList.Insert("LIVE|DODS-SANDBOX|EVDODS-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|EFUSA|EVEFUSA|||LIVE-1")
	do clientList.Insert("LIVE|EHS|EVEHS|EHS (WILEY BLACKWELL)||LIVE-1")
	do clientList.Insert("LIVE|ELECTROLUX|EVELECTROLUX|||LIVE-1")
	do clientList.Insert("LIVE|ELECTROLUX-SANDBOX|EVELECTROLUX-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|ELLENMACARTHUR|EVELLENMACARTHUR|||LIVE-1")
	do clientList.Insert("LIVE|ELLENMACARTHUR-SANDBOX|EVELLENMACARTHUR-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|ENSLTD|EVENSLTD|||LIVE-1")
	do clientList.Insert("LIVE|ENSLTD-SANDBOX|EVENSLTD-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|ENTERPRISEIRELAND|EVENTERPRISEIRELAND|||LIVE-1")
	do clientList.Insert("LIVE|ENTERPRISEIRELAND-SANDBOX|EVENTERPRISEIRELAND-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|EPF|EVEPF|||LIVE-1")
	do clientList.Insert("LIVE|EQUITY|EVEQUITY||www.iexevents.co.uk|LIVE-1")
	do clientList.Insert("LIVE|ESM|EVESM|ESSENTIALLY SPORTS MARKETING||LIVE-1")
	do clientList.Insert("LIVE|ESTYN|EVESTYN|||LIVE-1")
	do clientList.Insert("LIVE|ESTYN-SANDBOX|EVESTYN-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|EUROPOL|EVEUROPOL|||LIVE-1")
	do clientList.Insert("LIVE|EUROPOL-SANDBOX|EVEUROPOL-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|EVDEMO1|EVDEMO1|||LIVE-1")
	do clientList.Insert("LIVE|EVDEMO2|EVDEMO2|||LIVE-1")
	do clientList.Insert("LIVE|EVENTAGE|EVEVENTAGE|||LIVE-1")
	do clientList.Insert("LIVE|EVENTSTRATEGIES|EVEVENTSTRATEGIES|||LIVE-1")
	do clientList.Insert("LIVE|EVENTSTRATEGIES-SANDBOX|EVEVENTSTRATEGIES-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|EVERSHEDS|EVEVERSHEDS|||LIVE-1")
	do clientList.Insert("LIVE|EVERSHEDS-SANDBOX|EVEVERSHEDS-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|EVTRAINING|EVTRAINING|||LIVE-1")
	do clientList.Insert("LIVE|EVTRIAL|EVTRIAL|||LIVE-1")
	do clientList.Insert("LIVE|EXANTE|EVEXANTE|||LIVE-1")
	do clientList.Insert("LIVE|FAVHOUSE|EVFAVHOUSE|FAVERSHAM HOUSE|www.fhevents.net|LIVE-1")
	do clientList.Insert("LIVE|FIRSTEVENT|EVFIRSTEVENT|||LIVE-1")
	do clientList.Insert("LIVE|FITWISE|EVFITWISE|||LIVE-1")
	do clientList.Insert("LIVE|FJMC|EVFJMC|||LIVE-1")
	do clientList.Insert("LIVE|FJMC-SANDBOX|EVFJMC-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|FMB|EVFMB|||LIVE-1")
	do clientList.Insert("LIVE|FMBTEST|EVFMBTEST|||LIVE-1")
	do clientList.Insert("LIVE|FOPFRIENDS|EVFOPFRIENDS|||LIVE-1")
	do clientList.Insert("LIVE|FOPFRIENDS-SANDBOX|EVFOPFRIENDS-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|FOOTBALLLEAGUE|EVFOOTBALLLEAGUE|||LIVE-1")
	do clientList.Insert("LIVE|FOOTBALLLEAGUE-SANDBOX|EVFOOTBALLLEAGUE-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|FORENSICNETWORK|EVFORENSICNETWORK|||LIVE-1")
	do clientList.Insert("LIVE|FP|EVFP|FUTURE PUBLISHING||LIVE-1")
	do clientList.Insert("LIVE|FP-SANDBOX|EVFP-SANDBOX|FUTURE PUBLISHING-SANDBOX||LIVE-1")
	do clientList.Insert("LIVE|FSBEVENTS|EVFSBEVENTS|||LIVE-1")
	do clientList.Insert("LIVE|FSBEVENTS-SANDBOX|EVFSBEVENTS-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|GFCMEDIAGROUP|EVGFCMEDIAGROUP|||LIVE-1")
	do clientList.Insert("LIVE|GFCMEDIAGROUP-SANDBOX|EVGFCMEDIAGROUP-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|GU|EVGU|GLASGOW UNIVERSITY||LIVE-1")
	do clientList.Insert("LIVE|GU-SANDBOX|EVGU-SANDBOX|GLASGOW UNIVERSITY-SANDBOX||LIVE-1")
	do clientList.Insert("LIVE|GC|EVGC|||LIVE-1")
	do clientList.Insert("LIVE|GC-SANDBOX|EVGC-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|H2EVENTS|EVH2EVENTS|||LIVE-1")
	do clientList.Insert("LIVE|HANNAH|EVHANNAH|||LIVE-1")
	do clientList.Insert("LIVE|HARRYP|EVHARRYP|||LIVE-1")
	do clientList.Insert("LIVE|HARRYP-SANDBOX|EVHARRYP-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|HAYMARKET|EVHAYMARKET|||LIVE-1")
	do clientList.Insert("LIVE|HAYMARKETUS|EVHAYMARKETUS|||LIVE-1")
	do clientList.Insert("LIVE|HCPC|EVHCPC|||LIVE-1")
	do clientList.Insert("LIVE|HG3|EVHG3|||LIVE-1")
	do clientList.Insert("LIVE|HG3-SANDBOX|EVHG3-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|HIGHTOWER|EVHIGHTOWER|||LIVE-1")
	do clientList.Insert("LIVE|HIGHTOWER-SANDBOX|EVHIGHTOWER-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|HINZ|EVHINZ|||LIVE-1")
	do clientList.Insert("LIVE|HINZ-SANDBOX|EVHINZ-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|HM|EVHM|HAYMARKET HM||LIVE-1")
	do clientList.Insert("LIVE|HMA|EVHMA|||LIVE-1")
	do clientList.Insert("LIVE|HMA-SANDBOX|EVHMA-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|HMTEST|EVHMTEST|||LIVE-1")
	do clientList.Insert("LIVE|HOLYROOD|EVHOLYROOD|||LIVE-1")
	do clientList.Insert("LIVE|HPA|EVHPA|||LIVE-1")
	do clientList.Insert("LIVE|HPA-SANDBOX|EVHPA-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|HPA2|EVHPA2|||LIVE-1")
	do clientList.Insert("LIVE|HPA2-SANDBOX|EVHPA2-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|HRC|EVHRC|||LIVE-1")
	do clientList.Insert("LIVE|HRC-SANDBOX|EVHRC-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|IANW|EVIANW|||LIVE-1")
	do clientList.Insert("LIVE|IANW-SANDBOX|EVIANW-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|ICAP|EVICAP|||LIVE-1")
	do clientList.Insert("LIVE|ICAP-SANDBOX|EVICAP-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|ICH|EVICH|||LIVE-1")
	do clientList.Insert("LIVE|ICH-SANDBOX|EVICH-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|ICMIAWARDS|EVICMIAWARDS|||LIVE-1")
	do clientList.Insert("LIVE|ICSA|EVICSA|||LIVE-1")
	do clientList.Insert("LIVE|ICSA-SANDBOX|EVICSA-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|IFACTOR|EVIFACTOR|||LIVE-1")
	do clientList.Insert("LIVE|IFACTOR-SANDBOX|EVIFACTOR-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|IM|EVIM|||LIVE-1")
	do clientList.Insert("LIVE|IM-SANDBOX|EVIM-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|IMA|EVIMA|INCISIVE MEDIA AWARDS||LIVE-1")
	do clientList.Insert("LIVE|IMLSS|EVIMLSS|||LIVE-1")
	do clientList.Insert("LIVE|IMLSS-SANDBOX|EVIMLSS-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|INACOL|EVINACOL|||LIVE-1")
	do clientList.Insert("LIVE|INACOL-SANDBOX|EVINACOL-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|INNOVATEFINANCE|EVINNOVATEFINANCE|||LIVE-1")
	do clientList.Insert("LIVE|INNOVATEFINANCE-SANDBOX|EVINNOVATEFINANCE-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|INSTRUCTURE|EVINSTRUCTURE|||LIVE-1")
	do clientList.Insert("LIVE|INSTRUCTURE-SANDBOX|EVINSTRUCTURE-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|INTERNAL|EVINTERNAL|||LIVE-1")
	do clientList.Insert("LIVE|INTERNALDESIGN|EVDESIGN|DESIGN SPACE||LIVE-1")
	do clientList.Insert("LIVE|IOM|EVIOM|||LIVE-1")
	do clientList.Insert("LIVE|IOP|EVIOP||www.iopconferences.org|LIVE-1")
	do clientList.Insert("LIVE|IOP-SANDBOX|EVIOP-SANDBOX||www.iopconferences.org|LIVE-1")
	do clientList.Insert("LIVE|IRM|EVIRM|||LIVE-1")
	do clientList.Insert("LIVE|IRM-SANDBOX|EVIRM-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|ISEVENTS|EVISEVENTS|IS EVENTS|www.iseventsregistration.co.uk|LIVE-1")
	do clientList.Insert("LIVE|ISME|EVISME|||LIVE-1")
	do clientList.Insert("LIVE|IVOCLARVIVADENT|EVIVOCLARVIVADENT|||LIVE-1")
	do clientList.Insert("LIVE|IVOCLARVIVADENT-SANDBOX|EVIVOCLARVIVADENT-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|IWH|EVIWH|||LIVE-1")
	do clientList.Insert("LIVE|IWH-SANDBOX|EVIWH-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|JAMESW|EVJAMESW|||LIVE-1")
	do clientList.Insert("LIVE|JAMESW-SANDBOX|EVJAMESW-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|JEREMYW|EVJEREMYW|||LIVE-1")
	do clientList.Insert("LIVE|JEREMYW-SANDBOX|EVJEREMYW-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|JISC|EVJISC|||LIVE-1")
	do clientList.Insert("LIVE|JISC-SANDBOX|EVJISC-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|JISCEVENTS|EVJISCEVENTS|||LIVE-1")
	do clientList.Insert("LIVE|JISCEVENTS-SANDBOX|EVJISCEVENTS-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|JOHCM|EVJOHCM|||LIVE-1")
	do clientList.Insert("LIVE|JOHCM-SANDBOX|EVJOHCM-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|JPL|EVJPL|||LIVE-1")
	do clientList.Insert("LIVE|JPL-SANDBOX|EVJPL-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|KEELE|EVKEELE|||LIVE-1")
	do clientList.Insert("LIVE|KEELE-SANDBOX|EVKEELE-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|KIMDV|EVKIMDV|||LIVE-1")
	do clientList.Insert("LIVE|KIMDV-SANDBOX|EVKIMDV-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|LANDGASSURANCE|EVLANDGASSURANCE|LEGAL AND GENERAL ASSURANCE|www.legalandgeneral-events.co.uk|LIVE-1")
	do clientList.Insert("LIVE|LAZARD|EVLAZARD|||LIVE-1")
	do clientList.Insert("LIVE|LAZARD-SANDBOX|EVLAZARD-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|LGA|EVLGA||lgaevents.local.gov.uk|LIVE-1")
	do clientList.Insert("LIVE|LGATEST|EVLGATEST||lgaevents.local.gov.uk|LIVE-1")
	do clientList.Insert("LIVE|LGIM|EVLGIM|||LIVE-1")
	do clientList.Insert("LIVE|LIBDEMS|EVLIBDEMS|||LIVE-1")
	do clientList.Insert("LIVE|LIBDEMS-SANDBOX|EVLIBDEMS-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|LSECT|EVLSECT|||LIVE-1")
	do clientList.Insert("LIVE|LYNDAB|EVLYNDAB|||LIVE-1")
	do clientList.Insert("LIVE|LYNDAB-SANDBOX|EVLYNDAB-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|MAG|EVMAG|||LIVE-1")
	do clientList.Insert("LIVE|MAG-SANDBOX|EVMAG-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|MARCELOZ|EVMARCELOZ|||LIVE-1")
	do clientList.Insert("LIVE|MARCELOZ-SANDBOX|EVMARCELOZ-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|MARKERSTUDY|EVMARKERSTUDY|||LIVE-1")
	do clientList.Insert("LIVE|MARKETING|EVMARKETING|||LIVE-1")
	do clientList.Insert("LIVE|MAXIMILLION|EVMAXIMILLION|||LIVE-1")
	do clientList.Insert("LIVE|MAXIMILLION-SANDBOX|EVMAXIMILLION-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|MBI|EVMBI|||LIVE-1")
	do clientList.Insert("LIVE|MBI-SANDBOX|EVMBI-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|MERCHANT-TAYLORS|EVMERCHANTTAYLORS|||LIVE-1")
	do clientList.Insert("LIVE|MERCHANT-TAYLORS-SANDBOX|EVMERCHANTTAYLORS-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|METAPACK|EVMETAPACK|||LIVE-1")
	do clientList.Insert("LIVE|METAPACK-SANDBOX|EVMETAPACK-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|MILLSTREAM|EVMILLSTREAM|||LIVE-1")
	do clientList.Insert("LIVE|MPMA|EVMPMA|||LIVE-1")
	do clientList.Insert("LIVE|MPMA-SANDBOX|EVMPMA-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|MRONETWORK|EVMRONETWORK|||LIVE-1")
	do clientList.Insert("LIVE|MRONETWORK-SANDBOX|EVMRONETWORK-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|NATURE|EVNATURE|||LIVE-1")
	do clientList.Insert("LIVE|NCFE|EVNCFE|||LIVE-1")
	do clientList.Insert("LIVE|NCRI|EVNCRI|NCRI (CANCER RESEARCH)||LIVE-1")
	do clientList.Insert("LIVE|NCRI-SANDBOX|EVNCRI-SANDBOX|NCRI SANDBOX (CANCER RESEARCH)||LIVE-1")
	do clientList.Insert("LIVE|NEWFLYER|EVNEWFLYER|||LIVE-1")
	do clientList.Insert("LIVE|NHSENGLAND|EVNHSENGLAND|||LIVE-1")
	do clientList.Insert("LIVE|NHSENGLAND-SANDBOX|EVNHSENGLAND-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|NHSPROVIDERS|EVNHSPROVIDERS|||LIVE-1")
	do clientList.Insert("LIVE|NHSPROVIDERS-SANDBOX|EVNHSPROVIDERS-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|NLIAH|EVNLIAH|||LIVE-1")
	do clientList.Insert("LIVE|NO5|EVNO5|||LIVE-1")
	do clientList.Insert("LIVE|NO5-SANDBOX|EVNO5-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|NORTHUMBRIAAM|EVNORTHUMBRIAAM|||LIVE-1")
	do clientList.Insert("LIVE|NORTHUMBRIAAM-SANDBOX|EVNORTHUMBRIAAM-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|NPC|EVNPC|||LIVE-1")
	do clientList.Insert("LIVE|NUCLEUSFINANCIAL|EVNUCLEUSFINANCIAL|||LIVE-1")
	do clientList.Insert("LIVE|NUCLEUSFINANCIAL-SANDBOX|EVNUCLEUSFINANCIAL-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|OAEYC|EVOAEYC|||LIVE-1")
	do clientList.Insert("LIVE|OAEYC-SANDBOX|EVOAEYC-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|ODMPUBLISHING|EVODMPUBLISHING|||LIVE-1")
	do clientList.Insert("LIVE|ODMPUBLISHING-SANDBOX|EVODMPUBLISHING-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|ODYSSEY|EVODYSSEY|||LIVE-1")
	do clientList.Insert("LIVE|ODYSSEY-SANDBOX|EVODYSSEY-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|OGILVY|EVOGILVY|||LIVE-1")
	do clientList.Insert("LIVE|OMB|EVOMB|FINANCIAL OMBUDSMAN||LIVE-1")
	do clientList.Insert("LIVE|OMB-SANDBOX|EVOMB-SANDBOX|FINANCIAL OMBUDSMAN-SANDBOX||LIVE-1")
	do clientList.Insert("LIVE|OPI|EVOPI|||LIVE-1")
	do clientList.Insert("LIVE|OSOBLEO|EVOSOBLEO|||LIVE-1")
	do clientList.Insert("LIVE|OSOBLEO-SANDBOX|EVOSOBLEO-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|PCC|EVPCC|PCC (PRIMARY CARE COMMISSIONING)|www.pccevents.co.uk|LIVE-1")
	do clientList.Insert("LIVE|PEAKLEARNING|EVPEAKLEARNING|||LIVE-1")
	do clientList.Insert("LIVE|PEAKLEARNING-SANDBOX|EVPEAKLEARNING-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|PEN3|EVPEN3|||LIVE-1")
	do clientList.Insert("LIVE|PLANETCONNECT|EVPLANETCONNECT|||LIVE-1")
	do clientList.Insert("LIVE|PLANETCONNECT-SANDBOX|EVPLANETCONNECT-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|PLTW|EVPLTW|||LIVE-1")
	do clientList.Insert("LIVE|PLTW-SANDBOX|EVPLTW-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|PP1|EVPP1|Panacea Publishing||LIVE-1")
	do clientList.Insert("LIVE|PP1-SANDBOX|EVPP1-SANDBOX|Panacea Publishing sandbox||LIVE-1")
	do clientList.Insert("LIVE|PROTEKT|EVPROTEKT|||LIVE-1")
	do clientList.Insert("LIVE|PULSE|EVPULSE|||LIVE-1")
	do clientList.Insert("LIVE|QAA|EVQAA|||LIVE-1")
	do clientList.Insert("LIVE|QAA-SANDBOX|EVQAA-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|QMUEDUEVENTS|EVQMUEDUEVENTS|||LIVE-1")
	do clientList.Insert("LIVE|QMUEDUEVENTS-SANDBOX|EVQMUEDUEVENTS-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|QMUEVENTS|EVQMUEVENTS|||LIVE-1")
	do clientList.Insert("LIVE|QMUEVENTS-SANDBOX|EVQMUEVENTS-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|QUICKMOBILE|EVQUICKMOBILE|||LIVE-1")
	do clientList.Insert("LIVE|RAYMONDJAMES|EVRAYMONDJAMES|||LIVE-1")
	do clientList.Insert("LIVE|RAYMONDJAMES-SANDBOX|EVRAYMONDJAMES-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|RCN|EVRCN|||LIVE-1")
	do clientList.Insert("LIVE|REEDMAC|EVREEDMAC|||LIVE-1")
	do clientList.Insert("LIVE|REEDMAC-SANDBOX|EVREEDMAC-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|RGA|EVRGA|||LIVE-1")
	do clientList.Insert("LIVE|RGA-SANDBOX|EVRGA-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|RILEY|EVRILEY|EURO RSCG RILEY||LIVE-1")
	do clientList.Insert("LIVE|RIVERSYMPOSIUM|EVRIVERSYMPOSIUM|||LIVE-1")
	do clientList.Insert("LIVE|RIVERSYMPOSIUM-SANDBOX|EVRIVERSYMPOSIUM-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|RLC|EVRLC|||LIVE-1")
	do clientList.Insert("LIVE|RLC-SANDBOX|EVRLC-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|ROYALHOLLOWAY|EVROYALHOLLOWAY|||LIVE-1")
	do clientList.Insert("LIVE|ROYALLONDON|EVSCOTTISHLIFE|||LIVE-1")
	do clientList.Insert("LIVE|ROYALLONDON-SANDBOX|EVROYALLONDON-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|RSC|EVRSC|||LIVE-1")
	do clientList.Insert("LIVE|RSC-SANDBOX|EVRSC-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|RSCTEST|EVRSCTEST|||LIVE-1")
	do clientList.Insert("LIVE|RSS|EVRSS|||LIVE-1")
	do clientList.Insert("LIVE|RSS-SANDBOX|EVRSS-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|SABMILLEREVENTS|EVSABMILLEREVENTS|||LIVE-1")
	do clientList.Insert("LIVE|SABMILLEREVENTS-SANDBOX|EVSABMILLEREVENTS-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|SALES|EVSALES|||LIVE-1")
	do clientList.Insert("LIVE|SANTANDER|EVSANTANDER|||LIVE-1")
	do clientList.Insert("LIVE|SANTANDER-SANDBOX|EVSANTANDER-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|SCOE|EVSCOE|||LIVE-1")
	do clientList.Insert("LIVE|SCOE-SANDBOX|EVSCOE-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|SCHRODERS|EVSCHRODERS||www.schrodersevents.co.uk|LIVE-1")
	do clientList.Insert("LIVE|SCHRODERSTEST|EVSCHRODERSTEST|||LIVE-1")
	do clientList.Insert("LIVE|SCIENTIFICGAMES|EVSCIENTIFICGAMES|||LIVE-1")
	do clientList.Insert("LIVE|SCIENTIFICGAMES-SANDBOX|EVSCIENTIFICGAMES-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|SCOUTEVENTS|EVSCOUTEVENTS|||LIVE-1")
	do clientList.Insert("LIVE|SCOUTEVENTS-SANDBOX|EVSCOUTEVENTS-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|SEM|EVSEM|||LIVE-1")
	do clientList.Insert("LIVE|SEMTA|EVSEMTA|||LIVE-1")
	do clientList.Insert("LIVE|SEMTA-SANDBOX|EVSEMTA-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|SES|EVSES|SES (SPLASH EVENTS)||LIVE-1")
	do clientList.Insert("LIVE|SETS|EVSETS|||LIVE-1")
	do clientList.Insert("LIVE|SETUP|EVSETUP|SETUP ACCOUNT (JEREMY)||LIVE-1")
	do clientList.Insert("LIVE|SFE|EVSFE|||LIVE-1")
	do clientList.Insert("LIVE|SFE-SANDBOX|EVSFE-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|SHSC|EVSHSC|||LIVE-1")
	do clientList.Insert("LIVE|SHSC-SANDBOX|EVSHSC-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|SKILLSFORCARE|EVSKILLSFORCARE|||LIVE-1")
	do clientList.Insert("LIVE|SKILLSFORCARE-SANDBOX|EVSKILLSFORCARE-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|SLAVIN|EVSLAVIN|||LIVE-1")
	do clientList.Insert("LIVE|SLI|EVSLI|SLI (STANDARD LIFE INVESTMENTS)||LIVE-1")
	do clientList.Insert("LIVE|SLI-SANDBOX|EVSLI-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|SOCIALIMPACT|EVSOCIALIMPACT|||LIVE-1")
	do clientList.Insert("LIVE|SOCIALIMPACT-SANDBOX|EVSOCIALIMPACT-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|SOLDIERINGONAWARDS|EVSOLDIERINGONAWARDS|||LIVE-1")
	do clientList.Insert("LIVE|SOLDIERINGONAWARDS-SANDBOX|EVSOLDIERINGONAWARDS-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|SOUTHERNGAS|EVSOUTHERNGAS|||LIVE-1")
	do clientList.Insert("LIVE|SOUTHERNGAS-SANDBOX|EVSOUTHERNGAS-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|SRA|EVSRA|||LIVE-1")
	do clientList.Insert("LIVE|STANDREWS|EVSTANDREWS|||LIVE-1")
	do clientList.Insert("LIVE|STANDREWS-SANDBOX|EVSTANDREWS-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|START2FINISH|EVSTART2FINISH|||LIVE-1")
	do clientList.Insert("LIVE|START2FINISH-SANDBOX|EVSTART2FINISH-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|STEPHL|EVSTEPHL|||LIVE-1")
	do clientList.Insert("LIVE|STRATEGY|EVSTRATEGY|||LIVE-1")
	do clientList.Insert("LIVE|STRATEGY-SANDBOX|EVSTRATEGY-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|SU|EVSU|SU (SCIENTIFIC UPDATE)||LIVE-1")
	do clientList.Insert("LIVE|SU-SANDBOX|EVSU-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|SUPPORT|EVSUPPORT|||LIVE-1")
	do clientList.Insert("LIVE|SUPPORT2|EVSUPPORT2|||LIVE-1")
	do clientList.Insert("LIVE|SYMPORG|EVSYMPORG||www.symporg-registrations.com|LIVE-1")
	do clientList.Insert("LIVE|SYNERGYVISION|EVSYNERGYVISION|||LIVE-1")
	do clientList.Insert("LIVE|TAP|EVTAP|ACTUARIAL PROFESSION||LIVE-1")
	do clientList.Insert("LIVE|TAPTEST|EVTAPTEST|||LIVE-1")
	do clientList.Insert("LIVE|TBA|EVTBA|||LIVE-1")
	do clientList.Insert("LIVE|TBA-SANDBOX|EVTBA-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|TCSP|EVTCSP|CHARTERED SOCIETY OF PHYSIOTHERAPIST||LIVE-1")
	do clientList.Insert("LIVE|TFI|EVTFI||meeting.tfigroup.com|LIVE-1")
	do clientList.Insert("LIVE|THEFINANCIALBRAND|EVTHEFINANCIALBRAND|||LIVE-1")
	do clientList.Insert("LIVE|THEFINANCIALBRAND-SANDBOX|EVTHEFINANCIALBRAND-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|THEKEY|EVTHEKEYS||book.thekeysupport.com|LIVE-1")
	do clientList.Insert("LIVE|THEKEY-SANDBOX|EVTHEKEYS-SANDBOX||book.thekeysupport.com|LIVE-1")
	do clientList.Insert("LIVE|THINKTMB|EVTHINKTMB||www.thinktmbevents.com|LIVE-1")
	do clientList.Insert("LIVE|TIES|EVTIES|||LIVE-1")
	do clientList.Insert("LIVE|TIES-SANDBOX|EVTIES-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|TLSEA|EVTLSEA|||LIVE-1")
	do clientList.Insert("LIVE|TLSEA-SANDBOX|EVTLSEA-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|TRAINING2|EVTRAINING2|||LIVE-1")
	do clientList.Insert("LIVE|TRAINING3|EVTRAINING3|||LIVE-1")
	do clientList.Insert("LIVE|TRAINING4|EVTRAINING4|||LIVE-1")
	do clientList.Insert("LIVE|TRAVELPLANNERS|EVTRAVELPLANNERS|||LIVE-1")
	do clientList.Insert("LIVE|TRIAL2|EVTRIAL2|||LIVE-1")
	do clientList.Insert("LIVE|TRIAL3|EVTRIAL3|||LIVE-1")
	do clientList.Insert("LIVE|TRIAL4|EVTRIAL4|||LIVE-1")
	do clientList.Insert("LIVE|TRIAL5|EVTRIAL5|||LIVE-1")
	do clientList.Insert("LIVE|TSL|EVTSL|TSL (SOHO LOFT)||LIVE-1")
	do clientList.Insert("LIVE|TTG|EV84EVENTS|||LIVE-1")
	do clientList.Insert("LIVE|TWI|EVTWI|||LIVE-1")
	do clientList.Insert("LIVE|UCAS|EVUCAS||www.ucasevents.com|LIVE-1")
	do clientList.Insert("LIVE|UCAS-SANDBOX|EVUCAS-SANDBOX||www.ucasevents.com|LIVE-1")
	do clientList.Insert("LIVE|UKSI|EVUKSI|||LIVE-1")
	do clientList.Insert("LIVE|ULTERIOREVENTS|EVULTERIOREVENTS||www.ulterioreventsregistration.co.uk|LIVE-1")
	do clientList.Insert("LIVE|ULTIMATEEVENT|EVULTIMATEEVENT|||LIVE-1")
	do clientList.Insert("LIVE|ULTIMATEEVENT-SANDBOX|EVULTIMATEEVENT-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|VENUESELECT|EVVENUESELECT|||LIVE-1")
	do clientList.Insert("LIVE|VISUALRESPONSE|EVVISUALRESPONSE|||LIVE-1")
	do clientList.Insert("LIVE|WATERFRONT|EVWATERFRONT|||LIVE-1")
	do clientList.Insert("LIVE|WELLCOME|EVWELLCOME||www.wellcometrustevents.org|LIVE-1")
	do clientList.Insert("LIVE|WELLCOME-SANDBOX|EVWELLCOME-SANDBOX||www.wellcometrustevents.org|LIVE-1")
	do clientList.Insert("LIVE|WELLINGTONCOLLEGE|EVWELLINGTONCOLLEGE|||LIVE-1")
	do clientList.Insert("LIVE|WELLINGTONCOLLEGE-SANDBOX|EVWELLINGTONCOLLEGE-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|WHICH|EVWHICH|||LIVE-1")
	do clientList.Insert("LIVE|WHICH-SANDBOX|EVWHICH-SANDBOX|||LIVE-1")
	do clientList.Insert("LIVE|WTG|EVWTG|||LIVE-1")
	do clientList.Insert("LIVE|ZERISTA|EVZERISTA|||LIVE-1")
	do clientList.Insert("LIVE|ZIBRANTLIVE|EVZIBRANTLIVE|||LIVE-1")
	do clientList.Insert("LIVE|ZIBRANTLIVE-SANDBOX|EVZIBRANTLIVE-SANDBOX|||LIVE-1")

	return clientList
]]></Implementation>
</Method>

<Method name="getListOfRedirectedClients">
<ClassMethod>1</ClassMethod>
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[
	set redirectList=##class(%ListOfDataTypes).%New()
	// environment|oldCSPAppName|newCSPAppName
	do redirectList.Insert("TEST|ADRIAN1|ADRIANNEW2")
	do redirectList.Insert("TEST|LT-SDT-ONE|LT-SDT-FIVE")
	do redirectList.Insert("TEST|LT-SDT-TWO|LT-SDT-FIVE")
	do redirectList.Insert("TEST|LT-SDT-THREE|LT-SDT-FIVE")
	do redirectList.Insert("TEST|LT-SDT-FOUR|LT-SDT-FIVE")
	do redirectList.Insert("TEST|LT-SH-ONE|LT-SH-TWO")
	do redirectList.Insert("TEST|CTSOUTH|CTNORTH")
	do redirectList.Insert("STAGING|LONDON|LIVERPOOL")
	
	do redirectList.Insert("LIVE|CONFERENCELINE|CLEVENTS")
	do redirectList.Insert("LIVE|SCOTTISHLIFE|ROYALLONDON")
	do redirectList.Insert("LIVE|THEKEYS-SANDBOX|THEKEY-SANDBOX")
	
	return redirectList
]]></Implementation>
</Method>

<Method name="isInEnvironment">
<ClassMethod>1</ClassMethod>
<FormalSpec>environment</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set environment=$ZCVT(environment,"U")
	if environment="FREDDEV" {
		if ##class(EF.config.server).isThisDev() {
			return 1
		}	
	} elseif environment="TEST" {
		if ##class(EF.config.server).isThisReallyTest() {
			return 1
		}	
	} elseif environment="STAGING" {
		if ##class(EF.config.server).isThisStaging() {
			return 1
		}
	} elseif environment="LIVE" {
		if ##class(EF.config.server).isThisLive() {
			return 1
		}	
	}
	return 0
]]></Implementation>
</Method>

<Method name="generateCreateNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>clientData</FormalSpec>
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[
	set appName=$ZCVT($p(clientData,"|",2),"L")
	set nameSpace=$p(clientData,"|",3)
	return "##class(EF.config.clientData).createNew("""_appName_""","""_nameSpace_""")"
]]></Implementation>
</Method>

<Method name="updateRedirectedClient">
<ClassMethod>1</ClassMethod>
<FormalSpec>oldAppName,createNewApplication=1</FormalSpec>
<Implementation><![CDATA[
	
	if ##class(EF.config.clientData).isValidAppName(oldAppName) {
		throw ##class(shared.exceptions.generalException).%New("remove client from getListOfClients before running updateRedirectedClient")	
	}
	
	set clientData=##class(EF.config.clientData).getClientDataForRedirectedAppName(oldAppName)
	if '$ISOBJECT(clientData) {
		throw ##class(shared.exceptions.generalException).%New("Add client to getListOfRedirectedClients and getListOfClients before running updateRedirectedClient")
	}
	if $ZCVT(clientData.namespace,"L")'=$ZCVT($ZNSPACE,"L") {
		throw ##class(shared.exceptions.generalException).%New("Should be run in client's namespace")	
	}
	
	set ^%ZCSPAPPS($ZCVT(clientData.namespace,"U"))=$ZCVT(clientData.appName,"U")
	
	do ..updateRedirectedTextBlocks(oldAppName,clientData.appName)
	do ..updateMailTemplates(oldAppName,clientData.appName)
	do ..updateMenuItems(oldAppName,clientData.appName)
	do ..updateSettings(oldAppName,clientData.appName)
	do ..updateUploadedFilesPath(oldAppName)
	
	// Create new CSP application 
	// To ensure that the new application name is not automatically created in case it already exists (e.g. an old dead client's settings)
	if createNewApplication { 
		write !,"Create new CSP application status=",##class(EF.config.addClient).createCSPApplication(clientData.appName,clientData.namespace)
	}
]]></Implementation>
</Method>

<Method name="updateRedirectedTextBlocks">
<ClassMethod>1</ClassMethod>
<FormalSpec>oldAppName,newAppName</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare("SELECT ID FROM sc_xModules.objText WHERE (active = 1)")
	do rs.Execute() 
	while rs.Next() {
		set textID=rs.Get("ID")
		set objText=##class(sc.xModules.objText).%OpenId(textID)
		if objText.textStream.Size<=($$$maxStringLength-1000) {
			set isUpdated=0
			set updatedString=..updateRedirectedClientString(objText.textStream.Read($$$maxStringLength),oldAppName,newAppName,.isUpdated)
			if isUpdated {
				do objText.textStream.Clear()
				do objText.textStream.Write(updatedString)
				do objText.%Save()
			}
		}
		kill objText
	}
]]></Implementation>
</Method>

<Method name="updateMailTemplates">
<ClassMethod>1</ClassMethod>
<FormalSpec>oldAppName,newAppName</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare("SELECT ID FROM mail.objMailTemplate WHERE (active = 1)")
	do rs.Execute() 
	while rs.Next() {
		set mailTemplateID=rs.Get("ID")
		set objMailTemplate=##class(mail.objMailTemplate).%OpenId(mailTemplateID)
		if objMailTemplate.messageHTML.Size<=($$$maxStringLength-1000) {
			set isUpdated=0
			set updatedMessageHTML=..updateRedirectedClientString(objMailTemplate.messageHTML.Read($$$maxStringLength),oldAppName,newAppName,.isUpdated)
			set updatedMessageText=..updateRedirectedClientString(objMailTemplate.messageText.Read($$$maxStringLength),oldAppName,newAppName,.isUpdated)
			
			if isUpdated {
				do objMailTemplate.messageHTML.Clear()
				do objMailTemplate.messageHTML.Write(updatedMessageHTML)
				do objMailTemplate.messageText.Clear()
				do objMailTemplate.messageText.Write(updatedMessageText)
				do objMailTemplate.%Save()
			}
		}
		kill objMailTemplate
	}
]]></Implementation>
</Method>

<Method name="updateMenuItems">
<ClassMethod>1</ClassMethod>
<FormalSpec>oldAppName,newAppName</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare("SELECT ID FROM layout.objMenuItem")
	do rs.Execute() 
	while rs.Next() {
		set menuItemID=rs.Get("ID")
		set objMenuItem=##class(layout.objMenuItem).%OpenId(menuItemID)
		
		set isUpdated=0
		set updatedlinkURL=..updateRedirectedClientString(objMenuItem.linkURL,oldAppName,newAppName,.isUpdated)
		if isUpdated {
			set objMenuItem.linkURL=updatedlinkURL
			do objMenuItem.%Save()
		}
		kill objMenuItem
	}
]]></Implementation>
</Method>

<Method name="updateSettings">
<ClassMethod>1</ClassMethod>
<FormalSpec>oldAppName,newAppName</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare("SELECT objEvent, settingValue FROM setup.objEventSetting WHERE setting = 'file web path' AND settingGroup='awards'")
	do rs.Execute() 
	while rs.Next() {
		set eventID=rs.Get("objEvent")
		set settingValue=rs.Get("settingValue")
		set updatedValue=..updateRedirectedClientString(settingValue,oldAppName,newAppName)
		do ##class(setup.objEventSetting).setParameter("awards","file web path",updatedValue,eventID)
	}
	
	set settingValue=##class(setup.objSetting).getParameter("moxie","absolute web path")
	set updatedValue=..updateRedirectedClientString(settingValue,oldAppName,newAppName)
	do ##class(setup.objSetting).setParameter("moxie","absolute web path",updatedValue)
	
	set settingValue=##class(setup.objSetting).getParameter("moxie","full web path")
	set updatedValue=..updateRedirectedClientString(settingValue,oldAppName,newAppName)
	do ##class(setup.objSetting).setParameter("moxie","full web path",updatedValue)
]]></Implementation>
</Method>

<Method name="updateUploadedFilesPath">
<ClassMethod>1</ClassMethod>
<FormalSpec>oldAppName</FormalSpec>
<Implementation><![CDATA[
	if ##class(setup.objSetting).getParameter("sc.xModules.objFileUpload","file upload client sub-directory")="" {
		do ##class(setup.objSetting).setParameter("sc.xModules.objFileUpload","file upload client sub-directory",oldAppName)
	}
]]></Implementation>
</Method>

<Method name="updateRedirectedClientString">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[string,oldAppName,newAppName,&isUpdated]]></FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set updatedString=string
	set lowerString=$ZCVT(string,"L")
	set oldAppName=$ZCVT(oldAppName,"L")
	set newAppName=$ZCVT(newAppName,"L")
	set oldPath="/"_oldAppName_"/frontend/"
	set newPath="/"_newAppName_"/frontend/"
	if lowerString[oldPath {
		set updatedString=$REPLACE(updatedString,oldPath,newPath,,,1)
		set isUpdated=1
	}
	set oldPath="/"_oldAppName_"/media/"
	set newPath="/"_newAppName_"/media/"
	if lowerString[oldPath {
		set updatedString=$REPLACE(updatedString,oldPath,newPath,,,1)
		set isUpdated=1
	}
	set oldPath="/"_oldAppName_"/system/"
	set newPath="/"_newAppName_"/system/"
	if lowerString[oldPath {
		set updatedString=$REPLACE(updatedString,oldPath,newPath,,,1)
		set isUpdated=1
	}
	
	return updatedString
]]></Implementation>
</Method>
</Class>


<Class name="EF.config.createIISconfig">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.config.createIISconfig.CLS/EV.2
;vc; Component: CLS.EF.config.createIISconfig
;vc;  Location: SmallDev
;vc; Date/Time: 12-Jun-15 10:30
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.config.createIISconfig.CLS/EV.2</td><td>CLS.EF.config.createIISconfig</td><td>SmallDev</td><td style='white-space: nowrap;'>12-Jun-15 10:30</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%Projection.AbstractProjection</Super>
<TimeChanged>63714,47977</TimeChanged>
<TimeCreated>63690,39134.825233</TimeCreated>

<Method name="EndCompile">
<Description><![CDATA[
This is called as close to the end of the compile as possible so it can do cleanup work or more
usefully it can avoid doing work multiple times. For example if class User.A would modify MyFile.txt
normally in the <method>CreateProjection</method> method and class User.B would normally modify the same
file when it is compiled and you compile both these classes together then you may end up generating
MyFile.txt twice and so doing duplicate work. By changing this so <method>CreateProjection</method> just
adds 'MyFile.txt' to the queue of things to be done and then processing this list in this method, making
sure to only do each piece of work once, you can process the fully up to date state of User.A and User.B
to create the correct MyFile.txt just once.<p>
Note that this method will be called just once per projection subclass, so <method>CreateProjection</method>
may be called multiple times for each class with this projection type, but this method will only be called
once at the end of the compile.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// This creates three files:
	// 1. the DOS batch file: iiscreateonevirtualdir.bat   // checks if a vdir exists and creates if it does
	// 2. the DOS batch file: iiscreatevirtualdirs.bat  // walks through list of clients and calls iiscreateonevirtualdir.bat for each one
	// 3. the list of clients with configuration for input into that batch file: iisclientlist.cfg - this will be different on each server
	
	set iisInstallProgramDir="C:\install\iis\"
	set iisclientconfigfilename="iisclientlist.cfg"
	set iisPathForAPI=##class(EF.config.server).getIISPathForAPI()
	set websitename="efdefault"  // this is the IIS website name - it is set to this on all web servers

	// create the batch file 1
	set file=..prepareNewFile(iisInstallProgramDir,"iiscreateonevirtualdir.bat")
	do file.WriteLine("@ECHO OFF")
	do file.WriteLine("%windir%\system32\inetsrv\appcmd list vdir /app.name:efdefault/ /path:%1 >NUL")
	do file.WriteLine("if %ERRORLEVEL%==1 (")
	do file.WriteLine("@ECHO %1")
	do file.WriteLine("%windir%\system32\inetsrv\appcmd add vdir /app.name:efdefault/ /path:%1 /physicalPath:%2")
	do file.WriteLine(")") 
	do ..finaliseFile(file)
	// create the batch file 2
	set file=..prepareNewFile(iisInstallProgramDir,"iiscreatevirtualdirs.bat")
	do file.WriteLine("@ECHO OFF")
	do file.WriteLine("for /F ""eol=; tokens=1,2 delims=,"" %%i in ("_iisclientconfigfilename_") do (")
	do file.WriteLine("call iiscreateonevirtualdir.bat %%i %%j")
	do file.WriteLine(")")
	do file.WriteLine("pause")  // so we can see any errors before the dos prompt closes
	do ..finaliseFile(file)

	// create the client list with the correct directory for the server where this is compiling
	set file=..prepareNewFile(iisInstallProgramDir,iisclientconfigfilename)
	set clientList=##class(EF.config.clientList).getListOfClients()
	set key=""
	for {
		set clientData=clientList.GetNext(.key)
		if key="" quit
		set environment=$ZCVT($p(clientData,"|",1),"L")
		set tmpAppName=$ZCVT($p(clientData,"|",2),"L")
		set tmpNS=$ZCVT($p(clientData,"|",3),"L")
		if (##class(EF.config.clientList).isInEnvironment(environment)) {
			// For NON-LIVE servers: deal with the paths in test/staging where we compile from different instances for the same server
			if ##class(EF.config.server).isThisLive()	{
				set iisPath=##class(EF.config.server).getIISPath()
			} else {
				set instance=##class(EF.config.server).guessInstanceFromNS(tmpNS)
				set iisPath=##class(EF.config.server).getIISPath(instance,tmpNS)
			}
			do file.WriteLine("/"_tmpAppName_","_iisPath)  //line output must be like this: /support2,D:\websites\eventsforce.net\eventsforceV4
			do file.WriteLine("/"_tmpAppName_"/api,"_iisPathForAPI)  //line output must be like this: /support2/api,D:\websites\api
		}
	}
	
	do ..finaliseFile(file)

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="prepareNewFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>dir,filename</FormalSpec>
<ReturnType>%File</ReturnType>
<Implementation><![CDATA[
	w !,"Creating:",dir_filename
	set ok=##class(%Library.File).CreateDirectoryChain(dir)
	
	if ##class(%File).Exists(dir_filename)	{
		// existing file delete first
		set deletedOK=##class(%File).Delete(dir_filename)
	}

	// new file
	set file=##class(%File).%New(dir_filename)
	set ok=file.Open("WSN")
	if 'ok { 
		//throw 
	}
	quit file
]]></Implementation>
</Method>

<Method name="finaliseFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>file</FormalSpec>
<Implementation><![CDATA[
	do file.Close()
	do file.%Close()
	kill file
]]></Implementation>
</Method>
</Class>


<Class name="EF.config.database">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.config.database.CLS/EV.2
;vc; Component: CLS.EF.config.database
;vc;  Location: SmallDev
;vc; Date/Time: 31-Oct-15 12:49
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.config.database.CLS/EV.2</td><td>CLS.EF.config.database</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Oct-15 12:49</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63852,58216</TimeChanged>
<TimeCreated>63335,63709.356666</TimeCreated>

<Method name="CreateDB">
<ClassMethod>1</ClassMethod>
<FormalSpec>newDB=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if newDB="" quit

	set origNS=$ZNSPACE
	zn "%SYS"
	
	set rootDir="d:\databases\"_newDB
	if $ZUTIL(131,0)="JEREMYWIN7" set rootDir="c:\Dats\"_newDB

	if $E(rootDir,$l(rootDir))="\" set rootDir=$E(rootDir,1,$L(rootDir)-1)
	set path=rootDir
 	set path=$ZCVT(path,"U"),rootDir=$ZCVT(rootDir,"U"),newDB=$ZCVT(newDB,"U")

	// create new directory
	s ok=$zf(-1,"MD "_path)

	// create ALL namespace
	set ok=##class(SYS.Database).CreateDatabase(path,10,8192)
	write !,"Create Database status=",ok

	if ok {
		// add new database to the configuration
		set Properties("Directory")=path
		set Properties("MountAtStartup")=1
		set Properties("MountRequired")=1
		set ok=##Class(Config.Databases).Create(newDB,.Properties)
		write !,"Add New database status=",ok
	}
	hang 1
	
	ZN origNS
	quit ok
]]></Implementation>
</Method>

<Method name="CreateNS">
<ClassMethod>1</ClassMethod>
<FormalSpec>newNS="",db=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if newNS="" quit
	if db="" quit

	set origNS=$ZNSPACE
	zn "%SYS"

	set newNS=$ZCVT(newNS,"U")

	// create %All namespace
	set Properties("Globals")=db
	set Properties("Routines")=db
	set ok=##Class(Config.Namespaces).Create(newNS,.Properties)
	write !,"New namespace create status=",ok
	hang 2

	ZN origNS
	quit ok
]]></Implementation>
</Method>

<Method name="getDatabaseDirectoryForNamespace">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set origNS=$ZNSPACE
	ZN "%SYS"
	set directory=""
	set sc=##class(Config.Databases).Get(namespace,.props)
	if '$$$ISERR(sc) {
		set directory=props("Directory")
		kill props
	}
	ZN origNS
	return directory
]]></Implementation>
</Method>

<Method name="canWriteToNamespace">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set directory=..getDatabaseDirectoryForNamespace(namespace)
	if $L(directory)	{
		set canWriteTo=+..canWriteToDatabase(directory)
	} else {
		set canWriteTo=0
	}
	return canWriteTo
]]></Implementation>
</Method>

<Method name="canWriteToDatabase">
<ClassMethod>1</ClassMethod>
<FormalSpec>databaseDirectory</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set origNS=$ZNSPACE
	ZN "%SYS"
	set canWriteTo=0
	try {
		if (##class(SYS.Database).%OpenId(databaseDirectory).ReadOnlyMounted) {
			// this deals with mirroring - if mirrored and this runs on any non-primary server, the DB will be readonly.
			//  - also means we can set up the mirror on a server and not mirror EVCOMMON while we migrate over gradually
			set canWriteTo=0
		} else {
			set canWriteTo=1
		}
		ZN origNS
	} catch errObj {
		ZN origNS
		do ##class(EF.errors.loggingMethods).logCaughtError("EF.lib.queueMethods:runQueue","Cannot find EVCOMMON database")
		set canWriteTo=0
	}
	
	return canWriteTo
]]></Implementation>
</Method>
</Class>


<Class name="EF.config.deleteClient">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.config.deleteClient.CLS/EV.18
;vc; Component: CLS.EF.config.deleteClient
;vc;  Location: SmallDev
;vc; Date/Time: 12-Jun-16 02:38
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.config.deleteClient.CLS/EV.18</td><td>CLS.EF.config.deleteClient</td><td>SmallDev</td><td style='white-space: nowrap;'>12-Jun-16 02:38</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<IncludeCode>%occStatus</IncludeCode>
<TimeChanged>64076,63507</TimeChanged>
<TimeCreated>63225,62126.375639</TimeCreated>

<Method name="help">
<Description>
explains how to use this</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	if ..isActiveMode() {
		w !!,"*** WARNING!! DELETION MODE ACTIVE: CHANGES WILL BE MADE ***"
		w !,"Run this to turn off deletion mode: do ##class(EF.config.deleteClient).deletionmode(0)"
	} else {
		w !!,"*** Deletion mode OFF, no changes will be made ***"
		w !,"Run this to turn on deletion mode: do ##class(EF.config.deleteClient).deletionmode(1)"
	}
	w !!,"1. Turn on terminal logging to record what happended."

	w !,"2. Run this to check databases and populate ^%ZOKTODELETE :"
	w !,"    do ##class(EF.config.deleteClient).checkAll()"
	w !,"     ** NOTE if you need to bypass the checking (eg for test areas) then ignore this step and manually set this:" 
	w !,"        set ^%ZOKTODELETE(ns)=^%ZCSPAPPS(ns)"
	w !,"        Then continue - but you have to manually do step 5 and 6 (read the code) as they use the database list not ^%ZOKTODELETE"

	w !,"3. If any namespaces look uncertain after running the check, then remove from deleteClientList otherwise other bits for that namespace will get deleted."

	w !,"4. Run this to actually delete the CSP app, namespace and database (DAT file is moved to D:\datsToDelete) ** :"
	w !,"    do ##class(EF.config.deleteClient).deleteAll()"

	w !,"5. Run this to delete REDIRECTS for each NS :"
	w !,"    do ##class(EF.config.deleteClient).deleteRedirects()"

	w !!,"6. **** TURN OFF THE ACTIVE MODE NOW ****"

	w !!,"7. Delete the IIS entries from all webservers: WSL1 & WSL2."

	w !,"8. Delete the CSP Gateway entries from all webservers: WSL1 & WSL2."

	w !,"9. Find any bespoke code for this client/namespace."

	w !!,"Tasks marked with ** use ^%ZOKTODELETE to decide which NS to act on."
	w !!,"In the next few weeks: Securely delete the cache.dats using sdelete:"

	w !
	quit
]]></Implementation>
</Method>

<Method name="deletionmode">
<Description>
turn deletion mode on or off</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>on=1</FormalSpec>
<Implementation><![CDATA[
	if on {
		w !,"Deletion mode turned ON"
		s ^%ZDELETIONACTIVE=1
	} else {
		w !,"Deletion mode turned OFF"
		s ^%ZDELETIONACTIVE=0
	}
]]></Implementation>
</Method>

<Method name="isActiveMode">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if $G(^%ZDELETIONACTIVE)=1 quit 1
	quit 0
]]></Implementation>
</Method>

<Method name="list">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	do ##class(EF.config.deleteClientList).getArrayOfNS(.nsList)
	set ns=""
	for  {
		set ns=$O(nsList(ns))
		if ns="" quit
		w !,ns
	}
	q
]]></Implementation>
</Method>

<Method name="listDeletions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set ns=""
	for  {
		set ns=$O(^%ZOKTODELETE(ns))
		if ns="" quit
		w !,ns
	}
	q
]]></Implementation>
</Method>

<Method name="deleteAll">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set curNS=$ZNSPACE
	ZN "%SYS"
	if ..isActiveMode()&&($O(^%ZOKTODELETE(""))="") {
		w !!,"Nothing to be deleted, nothing in ^%ZOKTODELETE, quitting."
		quit
	}
	kill tmpDeleted
	set ns=""
	for  {
		set ns=$O(^%ZOKTODELETE(ns))
		if ns="" quit
		w !,ns,"...starting deletion"
		set tmpDeleted(ns)=^%ZOKTODELETE(ns)
		do ..deleteOne(ns)
		if $D(^%ZOKTODELETE(ns)) kill tmpDeleted(ns)
	}

	w !,"   ...activating config"
	if ..isActiveMode() do ..activateConfig()
	w "...done!"

	w !!,"starting web server script..."
	do ..createWebserverScript(.tmpDeleted)
	w !!,"All finished."

	q
]]></Implementation>
</Method>

<Method name="deleteSEO">
<ClassMethod>1</ClassMethod>
<FormalSpec>ns</FormalSpec>
<Implementation><![CDATA[
	if ($SYSTEM.Mirror.IsMember()&&('$SYSTEM.Mirror.IsPrimary())) {
		w !,"Not primary mirror, skipping SEO deletions."
		quit
	}
	set ns=$ZCVT(ns,"U")
	ZN ns
	if ##class(%Dictionary.ClassDefinition).%ExistsId("setup.seoFiles") {
		do ##class(setup.seoFiles).deleteAllSites()
	} else {
		w !,"setup.seoFiles not found"
	}
	quit
]]></Implementation>
</Method>

<Method name="deleteOne">
<ClassMethod>1</ClassMethod>
<FormalSpec>ns</FormalSpec>
<Implementation><![CDATA[
	if ..isActiveMode()&&('$D(^%ZOKTODELETE(ns))) {
		w !,"   ...ERROR no entry in ^%ZOKTODELETE(ns), forcing exit"
		w 1/0
	}

	// remove SEO sites
	w !,"Deleting SEO sites:",ns
	do ..deleteSEO(ns)
	
	do ..deleteOneWithNoChecking(ns)
	
	quit
]]></Implementation>
</Method>

<Method name="deleteOneWithNoChecking">
<ClassMethod>1</ClassMethod>
<FormalSpec>ns</FormalSpec>
<Implementation><![CDATA[
	set ns=$ZCVT(ns,"U")
	set cspapp=^%ZOKTODELETE(ns)
	set cspappAPI=cspapp_"/api"

	w !,"Switching to %SYS"
	ZN "%SYS"
	
	if ..isActiveMode() {
		w !,"Starting deletion of:",ns
	} else {
		w !,"Starting simulated deletion of:",ns
	}

	if ##class(Config.Databases).Get(ns,.props)	{
		set directory=props("Directory")
		kill props
	} else {
		w !,"   ...ERROR finding database in CPF using ns name:"_ns_", forcing exit"
		w 1/0
	}
	w !,"   ...database directory:"_directory

	// Delete CSP app
	set ret=..deleteCSPAPP(cspapp)
	w !,$P(ret,"|",2)
	if ('ret) {
		w 1/0
	}
	// Delete CSP app for API
	set ret=..deleteCSPAPP(cspappAPI)
	w !,$P(ret,"|",2)
	if ('ret) {
		w 1/0
	}

	// Delete namespace
	if ..isActiveMode() {
		set sta=##class(Config.Namespaces).Delete(ns)
	} else {
		set sta=$$$OK
	}
	if $$$ISOK(sta) {
		w !,"   ...deleted namespace"
	} else {
		w !,"   ...ERROR deleting namespace, forcing exit"
		w !,..getErrMsg(sta)
		w 1/0
	}

	// Dismount database (otherwise you cannot delete physical file later) from primary server and Black
	if ..isActiveMode() {
		set sta=##class(SYS.Database).DismountDatabase(directory)
	} else {
		set sta=$$$OK
	}
	if $$$ISOK(sta) {
		w !,"   ...dismounted database"
	} else {
		w !,"   ...ERROR deleting CSP app:"_cspapp_", forcing exit"
		w !,..getErrMsg(sta)
		w 1/0
	}

	// Delete database (but keep cache.dat) from primary server and black
	if ..isActiveMode() {
		set sta=##class(Config.Databases).Delete(ns)
	} else {
		set sta=$$$OK
	}
	if $$$ISOK(sta) {
		w !,"   ...deleted database"
	} else {
		w !,"   ...ERROR deleting CSP app:"_cspapp_", forcing exit"
		w !,..getErrMsg(sta)
		w 1/0
	}
	
	set dateH=+$ZTS
	if ..isActiveMode() {
		set ^%ZDELETED(dateH,ns,"cspapp")=^%ZOKTODELETE(ns)
		if $D(^%ZCSPAPPS(ns))	{
			kill ^%ZCSPAPPS(ns)
			w !,"   ...killed ^%ZCSPAPPS"
		}
	}
	
	w !,"   ...saving config"
	if ..isActiveMode() do ..saveConfig()
	w "...finished!"

	if ..isActiveMode() {
		set ^%ZDELETED(dateH,ns)=$ZTS
	}

	do ..moveOne(ns,directory)
	
	quit
]]></Implementation>
</Method>

<Method name="deleteRedirects">
<Description>
can be run on any box - but will only do stuff where there exists a REDIRECTS namespace</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	if ($SYSTEM.Mirror.IsMember()&&('$SYSTEM.Mirror.IsPrimary())) {
		w !,"Not primary mirror, skipping redirect deletions."
		quit
	}
	if '##class(%SYS.Namespace).Exists("REDIRECTS")	{
		w !,"No redirects namespace found, quitting."
		quit
	}
	
	set curNS=$ZNSPACE
	ZN "REDIRECTS"
	
	do ##class(EF.config.deleteClientList).getArrayOfNS(.nsList)
	set ns=""
	for  {
		set ns=$O(nsList(ns))
		if ns="" quit
		w !,ns,"...starting redirects"
		if ..isActiveMode() do ##class(redirects.main).deleteAllForNamespace(ns)
	}

	ZN curNS

	quit
]]></Implementation>
</Method>

<Method name="moveAll">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set curNS=$ZNSPACE
	ZN "%SYS"
	set ns=""
	for  {
		set ns=$O(^%ZOKTODELETE(ns))
		if ns="" quit
		w !,ns,"...starting move"
		do ..moveOne(ns)
	}
	ZN curNS
	q
]]></Implementation>
</Method>

<Method name="moveOne">
<ClassMethod>1</ClassMethod>
<FormalSpec>ns,dbdirectory</FormalSpec>
<Implementation><![CDATA[
	if ..isActiveMode()&&('$D(^%ZOKTODELETE(ns))) {
		w !,"   ...ERROR no entry in ^%ZOKTODELETE(ns), forcing exit"
		w 1/0
	}

	if '##class(%Library.File).DirectoryExists("d:\datsToDelete\") {
		do ##class(%Library.File).CreateDirectoryChain("d:\datsToDelete\")
	}
	set cmd="robocopy "_dbdirectory_" d:\datsToDelete\"_ns_" /E /IS /MOVE"
	if ..isActiveMode() {
		w !,cmd
		set ok=$ZF(-1,cmd)
	} else {
		w !,cmd
		set ok=1
	}
	if ok {
		w !,"...moved ok" 
		kill ^%ZOKTODELETE(ns)
	} else {
		w !,"...move failed" 
	}
	quit
]]></Implementation>
</Method>

<Method name="checkAll">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	if ..isActiveMode() kill ^%ZOKTODELETE
	set curNS=$ZNSPACE
	ZN "%SYS"
	do ##class(EF.config.deleteClientList).getArrayOfNS(.nsList)
	set ns=""
	for  {
		set ns=$O(nsList(ns))
		if ns="" quit
		w !,ns,"...starting"
		do ..checkOne(ns)
	}
	ZN curNS
	q
]]></Implementation>
</Method>

<Method name="checkOne">
<ClassMethod>1</ClassMethod>
<FormalSpec>ns</FormalSpec>
<Implementation><![CDATA[
	if '##class(%SYS.Namespace).Exists(ns) {
		w "..."_ns_" does not exist on this server, skipping NS."
		quit
	}
	w "...found"_ns
	ZN ns
	
	do ..getEFusers(.EFusers)
	
	w !,"    ...checking license"
	if ..hasActiveLicense() {
		w "...found a current license, skipping NS."
		quit
	} else {
		w "...no valid license found, continuing..."
	}

	w !,"    ...checking last login"
	if ..wasLastLoginInLastMonth(.EFusers) {
		w "...found a login in the last 2 months, skipping NS."
		quit
	} else {
		w "...no login found in the last 2 months, continuing..."
	}
	w !,"    ...checking last cod data change"
	if ..wasCodChangeInLastMonth(.EFusers) {
		w "...found a data change in the last 2 months, skipping NS."
		quit
	} else {
		w "...no data change found in the last 2 months, continuing..."
	}
	w !,"    ...CONFIRMED OK TO DELETE."
	if ..isActiveMode() s ^%ZOKTODELETE(ns)=^%ZCSPAPPS(ns)
	
	q
]]></Implementation>
</Method>

<Method name="hasActiveLicense">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Return ##class(EF.licensing.objLicense).isCurrentLicenseValid()
]]></Implementation>
</Method>

<Method name="wasCodChangeInLastMonth">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&EFusers]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set lastCodDate=..getLastCodChange(.EFusers)
	if lastCodDate="" set lastCodDate=$ZDATETIME($ZTS-1000,3)
	set curtimestamp=$ZDATETIME($ZTS,3)
	set diff=$SYSTEM.SQL.DATEDIFF("m",lastCodDate,curtimestamp)
	set ret=0
	if diff<1 set ret=1
	quit ret
]]></Implementation>
</Method>

<Method name="getLastCodChange">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&EFusers]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare("SELECT *,objItemName->description FROM cod.objChanges ORDER BY xCRstamp DESC")	
	do rs.Execute()
	set date="",found=0
	while (rs.Next()&&('found)) {
		set personID=rs.Data("objPerson")
		set desc=$ZCVT(rs.Data("description"),"U")
		
		set userData=1
		// ignore if data change was by an EF user
		if $D(EFusers(personID)) set userData=0
		// or if the active flag was changed (disabling a backend user)
		if desc="ACTIVE" set userData=0
		
		if userData {
			set found=1
			set date=rs.Data("xCRstamp")
		}
	}
	do rs.Close()
	q date
]]></Implementation>
</Method>

<Method name="wasLastLoginInLastMonth">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&EFusers]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set lastLoginDate=..getLastLoginDate(.EFusers)
	if lastLoginDate="" set lastLoginDate=$ZDATETIME($ZTS-1000,3)
	set curtimestamp=$ZDATETIME($ZTS,3)
	set diff=$SYSTEM.SQL.DATEDIFF("m",lastLoginDate,curtimestamp)
	set ret=0
	if diff<1 set ret=1
	quit ret
]]></Implementation>
</Method>

<Method name="getLastLoginDate">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&EFusers]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare("SELECT * FROM access.objLoginAttempt WHERE %SQLUPPER(status)=%SQLUPPER('ok') ORDER BY ID DESC")	
	do rs.Execute()
	set date="",found=0
	while (rs.Next()&&('found)) {
		set personID=rs.Data("objPerson")
		if '$D(EFusers(personID)) {
			set found=1
			set date=rs.Data("xCRstamp")
		}
	}
	do rs.Close()
	q date
]]></Implementation>
</Method>

<Method name="getEFusers">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&EFusers]]></FormalSpec>
<Implementation><![CDATA[
	kill EFusers
	set rs=##class(%ResultSet).%New("admin.objUser:qGetBackendPersonIDs")
	do rs.Execute()
	while rs.Next() {
		set personID=rs.Data("objPerson")
		if ##class(admin.objUser).isEFuser(personID) {
			set EFusers(personID)=""
		}
	}
	do rs.Close()
	quit
]]></Implementation>
</Method>

<Method name="createWebserverScript">
<Description>
outputs dos commands that can be copied and pasted into web servers
- to move all client uploaded files to the "ToDelete" directory</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&tmpDeleted]]></FormalSpec>
<Implementation><![CDATA[
	set sourcedir=##class(EF.config.server).getIISPath()_"\media"
	set destdir=##class(EF.config.server).getDeletedItemsPath()
	
	w !,"#*** COPY THE FOLLOWING TO DOS PROMPT ON WSL1 and WSL2 TO MOVE FILES ***"
	set ns=""
	for  {
		set ns=$O(tmpDeleted(ns))
		if ns="" quit
		set cspapp=tmpDeleted(ns)
		
		w !,"robocopy "_sourcedir_"\abstracts\"_cspapp_" "_destdir_"\abstracts\"_cspapp_" /E /IS /MOVE"
		w !,"robocopy "_sourcedir_"\awards\"_cspapp_" "_destdir_"\awards\"_cspapp_" /E /IS /MOVE"
		w !,"robocopy "_sourcedir_"\delegate_files\"_cspapp_" "_destdir_"\delegate_files\"_cspapp_" /E /IS /MOVE"
		w !,"robocopy "_sourcedir_"\meeting_manager\"_cspapp_" "_destdir_"\meeting_manager\"_cspapp_" /E /IS /MOVE"
		w !,"robocopy "_sourcedir_"\templates\"_ns_" "_destdir_"\templates\"_ns_" /E /IS /MOVE"
		w !,"robocopy "_sourcedir_"\uploaded\"_ns_" "_destdir_"\uploaded\"_ns_" /E /IS /MOVE"
	}
	w !,"#*** END OF WEB SERVER SCRIPTS ***"
]]></Implementation>
</Method>

<Method name="saveConfig">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	ZN "%SYS"
	w !,"Saving config..."
	Set Status=##class(Config.CPF).Write()
	
	If $$$ISERR(Status) {
		Write !,"Error saving config: "_..getErrMsg(Status)
	} else {
		w !,"saved config..."
	}
]]></Implementation>
</Method>

<Method name="activateConfig">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	ZN "%SYS"
	w !,"Activating config..."
	Set Status=##class(Config.CPF).Activate()
	If $$$ISERR(Status) {
		Write !,"Error activating config: "_..getErrMsg(Status)
	} else {
		w !,"activated config..."
	}
]]></Implementation>
</Method>

<Method name="getErrMsg">
<Description>
GetErrMsg - extracts error message from status</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>status:%Status</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ret=""
	Do DecomposeStatus^%apiOBJ(status,.err,"-d") For i=1:1:err Set ret=ret_" "_err(i)
	Quit ret
]]></Implementation>
</Method>

<Method name="deleteAllData">
<Description>
WARNING - this will delete all client data in their namespace! Used in dev, test, staging only</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	if ##class(EF.config.server).isThisLive() {
		w !,"Not allowed to run in live."
		quit
	}
	
 	read !,"Are you sure you want to delete all the EF data globals in this current namespace?<N>",answer
 	if answer'="Y" {
	 	w !,"No changes made, quitting"
	 	quit
 	}
	
	do ..getGlobalsForEF(.globallist)
	
	set glob=""
	for  {
		set glob=$O(globallist(glob))
		if glob="" quit
		w !,"killing: "_glob
		set cmd="kill "_glob
		xecute cmd
	}
	quit
]]></Implementation>
</Method>

<Method name="getGlobalsForEF">
<Description>
get all the globals used by EF (only the ones referenced via class storage)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&globallist]]></FormalSpec>
<Implementation><![CDATA[
	kill globallist
	set packagelist=##class(EF.config.mappings).getPackagesString()
	set package=""
	for i=1:1:$L(packagelist,",") {
		set package=$P(packagelist,",",i)
		do ..getGlobalsForPackage(package,.globals)
		merge globallist=globals
	}	
	quit
]]></Implementation>
</Method>

<Method name="getGlobalsForPackage">
<Description>
get all the globals associated with all classes with the name beginning with "package"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[package,&globals]]></FormalSpec>
<Implementation><![CDATA[
	kill globals
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare("SELECT DataLocation,IndexLocation,StreamLocation FROM %Dictionary.CompiledStorage WHERE parent LIKE ? ")
	do rs.Execute(package_"%")
	while rs.Next() {
		set dataglob=rs.Get("DataLocation")
		if $L(dataglob) set globals(dataglob)=""
		set indexglob=rs.Get("IndexLocation")
		if $L(indexglob) set globals(indexglob)=""
		set streamglob=rs.Get("StreamLocation")
		if $L(streamglob) set globals(streamglob)=""
	}
	do rs.Close()
	kill rs
	quit
]]></Implementation>
</Method>

<Method name="killTempGlobals">
<Description>
get rid of all our temp globals</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	k ^sfErrors
	k ^tagErrors
	k ^x                   
	k ^xAJM
	k ^xAJMProcessed       
	k ^xAJMSameAsUpdate
	k ^xAMZ                
	k ^xAPIDEBUG
	k ^xAPIDEBUGLOG        
	k ^xAdian
	k ^xAdrian             
	k ^xAdrian1
	k ^xAdrian2
	k ^xAdrianLog
	k ^xAdrianLongishGlobalName
	k ^xAdrianLongishGlobalNameNameNam
	k ^xApplyThemeLog      
	k ^xBARCODEIMPORT
	k ^xBulkEdit           
	k ^xCID
	k ^xCODCONVERT         
	k ^xCODDELETION
	k ^xCODDELETIONFAIL    
	k ^xCOPYAUDIT
	k ^xCOPYERRORS         
	k ^xCallOutError
	k ^xCompile            
	k ^xDEBUG
	k ^xDEBUGFORCEMAIL     
	k ^xDEBUGOUT
	k ^xDEBUGPAGES         
	k ^xDN
	k ^xERROR              
	k ^xErrors
	k ^xErrors201403111521 
	k ^xErrorsEmail
	k ^xExportLog          
	k ^xFixSingleEventQuestions                
	k ^xForceStopFrameBreaker 
	k ^xFINDPAGES
	k ^xFORCESENDEMAIL     
	k ^xForceFeedbackify
	k ^xGetBookingsConfirm 
	k ^xINTEG
	k ^xImage              
	k ^xImportLog
	k ^xJADE               
	k ^xJAW
	k ^xJAWCOLUMNS         
	k ^xJAWCSVIMPORT
	k ^xJAWIMPORT          
	k ^xJAWINV
	k ^xJAWMENU            
	k ^xJAWP
	k ^xJAWQ               
	k ^xJAWSFXML
	k ^xJAWSQL             
	k ^xJAWdata
	k ^xJAWmenu            
	k ^xKillAllBJ
	k ^xMailSent           
	k ^xNetbanxFail
	k ^xNetbanxLog         
	k ^xPDFCMDS
	k ^xPDFDEBUG           
	k ^xPage
	k ^xPageNav            
	k ^xProtxLog
	k ^xQueueManagerErrors 
	k ^xRQ
	k ^xRQBA               
	k ^xRQSAMLR
	k ^xRQbadLine          
	k ^xRQgoodLine
	k ^xRQmodulesNotFound  
	k ^xRQpass
	k ^xRQpost
	k ^xRQtns              
	k ^xSA
	k ^xSAMLcertificate    
	k ^xSFCRMlog
	k ^xSFEF               
	k ^xSFTIMING
	k ^xSHA                
	k ^xSHA1
	k ^xSendWarningEmailsTest
	k ^xTempAudit          
	k ^xTempDeDupeData
	k ^xTempReport         
	k ^xUTF8
	k ^xUpdateAbstractTextStreamsOld
	k ^xUsernames          
	k ^xWebSSOlog
	k ^xZCLEAN             
	k ^xZDEF
	k ^xf                  
	k ^xfg
	k ^xfg1                
	k ^xfg2
	k ^xfg3                
	k ^xfg33
	k ^xfoo                
	k ^xjSHA
	k ^xpj                 
	k ^xpjc
	k ^xpjc2               
	k ^xpjc999
	k ^xpjcDBI             
	k ^xpjcTPI
	k ^xtemp               
	k ^zendeskUsers
	
	quit
]]></Implementation>
</Method>

<Method name="deleteCSPAPP">
<ClassMethod>1</ClassMethod>
<FormalSpec>cspAppNameToDelete</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if $E(cspAppNameToDelete,1)'="/" set cspAppNameToDelete="/"_cspAppNameToDelete
	if $E(cspAppNameToDelete,$L(cspAppNameToDelete))="/" set cspAppNameToDelete=$E(cspAppNameToDelete,1,$L(cspAppNameToDelete)-1)

	if (##Class(Security.Applications).Exists(cspAppNameToDelete)) {
		set sc=##Class(Security.Applications).Delete(cspAppNameToDelete)
		if $$$ISOK(sc) {
			set out="1|CSP App: "_cspAppNameToDelete_" deleted OK"
		} else {
			set out="0|***FAILED TO DELETE: CSP App:"_cspAppNameToDelete
		}
	} else {
		set out="2|CSP App: "_cspAppNameToDelete_" not found"
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.config.deleteClientList">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.config.deleteClientList.CLS/EV.13
;vc; Component: CLS.EF.config.deleteClientList
;vc;  Location: SmallDev
;vc; Date/Time: 12-Jun-16 02:38
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.config.deleteClientList.CLS/EV.13</td><td>CLS.EF.config.deleteClientList</td><td>SmallDev</td><td style='white-space: nowrap;'>12-Jun-16 02:38</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>64076,64952</TimeChanged>
<TimeCreated>63287,81787.285305</TimeCreated>

<Method name="getArrayOfNS">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&nsList]]></FormalSpec>
<Implementation><![CDATA[
	kill nsList
	if ##class(EF.config.server).isThisLive() {
		do ..namespacesToDelete(.nsList)
	} else {
		set nsList("EVTESTDELETE1")=""
		set nsList("EVTESTDELETE2")=""
		set nsList("EVTESTDELETE3")=""
		set nsList("EVTESTDELETE4")=""
	}
	q
]]></Implementation>
</Method>

<Method name="namespacesToDelete">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&nsList]]></FormalSpec>
<Implementation><![CDATA[
	kill nsList
	set nsList("EVAMNESTYUK")=""
	set nsList("EVEPA")=""
	set nsList("EVBBTS")=""
	set nsList("EVBCEASIA")=""
	set nsList("EVBCSASIA")=""
	set nsList("EVFAFN")=""
	set nsList("EVFAFN-SANDBOX")=""
	set nsList("EVHSLDA")=""
	set nsList("EVHSLDA-SANDBOX")=""
	set nsList("EVISBE")=""
	set nsList("EVITSEVENTS")=""
	set nsList("EVITSEVENTS-SANDBOX")=""
	set nsList("EVJOHNA")=""
	set nsList("EVMW")=""
	set nsList("EVRUGBYWORLDCUP")=""
	set nsList("EVRUGBYWORLDCUP-SANDBOX")=""
	set nsList("EVTRAVELPLACES")=""
	set nsList("EVUME")=""
	set nsList("EVUME-SANDBOX")=""
	Q
]]></Implementation>
</Method>
</Class>


<Class name="EF.config.mappings">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.config.mappings.CLS/EV.3
;vc; Component: CLS.EF.config.mappings
;vc;  Location: SmallDev
;vc; Date/Time: 12-Aug-16 11:19
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.config.mappings.CLS/EV.3</td><td>CLS.EF.config.mappings</td><td>SmallDev</td><td style='white-space: nowrap;'>12-Aug-16 11:19</td><td>RajibQ</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<IncludeCode>%syConfig,%occStatus</IncludeCode>
<TimeChanged>64142,40983.966398</TimeChanged>
<TimeCreated>63070,54092.586966</TimeCreated>

<Method name="getPackagesString">
<Description>
returns a comma delimited string of the packages that we need to map</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// please keep in alphabetical order to make it easy to check if we have the package mapped. 
	// **** Do not use asterisks. ****
	set str="abstract,access,accom,admin,api,authorize,awards,barcodes,bulk"
	set str=str_",calendar,cmpi,cod,commidea,crossNamespace,customCode"
	set str=str_",datacash,datatrans,eCom,EF,epdq,evMan,eventWizard,export"
	set str=str_",GMPDomino,import,layout,legacymap,links,mail,meetMan,netbanx,netForumXMLx0020OnDemand"
	set str=str_",pageClasses,paymentPortal,pdf,protx,redirects,reports"
	set str=str_",sage,sc,setup,sfEF,sfSoap,shared,storage,suppliers,translations,worldPay"
	// add CSP application package names and rules
	set str=str_",csr,cspRealEV"    //maybe at some point: ,cspredirects,cspepdq"
	quit str
]]></Implementation>
</Method>

<Method name="getRoutinesString">
<Description>
returns a comma delimited string of the routines that we need to map</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// please keep in alphabetical order to make it easy to check if we have the package mapped. 
	// **** You have to use asterisks. ****
	set str="q*,tag*"
	quit str
]]></Implementation>
</Method>

<Method name="createALLnsdb">
<Description>
creates the %ALL namespace and the ALL database</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	if ($ZNSPACE'["SRC")&&($ZNSPACE'["SOURCE") {
		w !,"Please run this from the source code namespace. It will switch to %SYS when needed."
		quit
	}
	set origNS=$ZNSPACE
	ZN "%SYS"
	if '##Class(Config.Namespaces).Exists("%ALL")	{
		ZN origNS
		set Status=##class(EF.config.database).CreateDB("ALL")  // "ALL" will not be used but we need something to put the NS against
		If $$$ISERR(Status) {
			write !,"Error creating ALL database:"_..GetErrMsg(Status)
		} else {
			ZN origNS
			set Status=##class(EF.config.database).CreateNS("%All","ALL")
			If $$$ISERR(Status) {
				write !,"Error creating %ALL namespace:"_..GetErrMsg(Status)
			}
		}
	}
]]></Implementation>
</Method>

<Method name="updateMappings">
<Description>
updates the package mappings for SOURCENEW to %ALL using the packages defined in getPackagesString method above</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>mapTo="%ALL",mapFrom="SOURCENEW",activate=1</FormalSpec>
<Implementation><![CDATA[
	// map package from "mapFrom" (where the class exists) to "mapTo" (where the data exists = client database)
	// CALL THIS ONE TO SET TO %ALL, SAFE TO RUN AND RE-RUN ANY TIME using the defaults
	// Use this also to add new packages to all (also add to the above PackageList)
	
	if ($ZNSPACE'["SRC")&&($ZNSPACE'["SOURCE") {
		w !,"Please run this from the source code namespace. It will switch to %SYS when needed."
		quit
	}
	set origNS=$ZNSPACE
	if mapTo="%ALL",##class(EF.config.server).isThisDev() quit "0~Error: cannot use %ALL in DEV"

	if $L(mapTo)=0 quit "0~Error no mapTo NS"

	ZN "%SYS"

	if mapTo="%ALL",'##Class(Config.Namespaces).Exists("%All") quit "0~Error no %All Namespace - run createALLnsdb"
	if activate="" set activate=1
	
	w !,"Getting packagelist..."
	set packages=..getPackagesString()
	w "done."
 	
	w !,"Creating package mappings..."
 	for i=1:1:$L(packages,",") {
	 	set packageName=$p(packages,",",i)
		if $ZSTRIP(packageName,"<>W")'="" {
			if ##Class(Config.MapPackages).Exists(mapTo,packageName) {
				// skip
				w "x"
			} else {
				kill Properties
				set Properties("Database")=mapFrom
				set Status=##Class(Config.MapPackages).Create(mapTo,packageName,.Properties,,$$$CPFSave)
				if $$$ISERR(Status) {
					w !,"Error adding package "_packageName_" mapping: "_..GetErrMsg(Status),!
				} else {
					w "+("_packageName_")"
				}
			}
		}
 	}
	w !,"Getting routinelist..."
	set routines=..getRoutinesString()
	w "done."
	w !,"Creating routine mappings..."
 	for i=1:1:$L(routines,",") {
	 	set routineName=$p(routines,",",i)
		if $ZSTRIP($p(routines,",",i),"<>W")'="" {
			if ##class(Config.MapRoutines).Exists(mapTo,routineName) {
				// skip
				w "x"
			} else {
				kill Properties
				set Properties("Database")=mapFrom
				set Status=##class(Config.MapRoutines).Create(mapTo,routineName,.Properties,,$$$CPFSave)
				if $$$ISERR(Status) {
					w !,"Error adding routine "_routineName_" mapping: "_..GetErrMsg(Status),!
				} else {
					w "+("_routineName_")"
				}
			}
		}
 	}
 	
	if activate do ..saveAndActivateConfig()
	ZN origNS
	quit 1
]]></Implementation>
</Method>

<Method name="saveAndActivateConfig">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	w !,"Saving config..."
	Set Status=##class(Config.CPF).Write()
	
	If $$$ISERR(Status) {
		Write !,"Error saving config: "_..GetErrMsg(Status)
	} else {
		w !,"Activating config..."
		Set Status=##class(Config.CPF).Activate()
		If $$$ISERR(Status) {
			Write !,"Error activating config: "_..GetErrMsg(Status)
		}
	}
]]></Implementation>
</Method>

<Method name="deleteAllMappedClasses">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	if $ZNSPACE="EVDEV" w !,"Error: namespace not allowed" quit
	set packages=..getPackagesString()
 	for i=1:1:$L(packages,",") {
	 	set packageName=$p(packages,",",i)
		if $ZSTRIP(packageName,"<>W")'="" {
			w !,"deleting:"_packageName
			set status=$SYSTEM.OBJ.DeletePackage(packageName)
		}	
 	}
]]></Implementation>
</Method>

<Method name="loopAllSources">
<ClassMethod>1</ClassMethod>
<FormalSpec>class,classmethodToRun</FormalSpec>
<Implementation><![CDATA[
	for ns="LARGEDEVSRC","LARGETESTSRC","LARGEDONESRC","LARGESTAGINGSRC","CRITICALDEVSRC","CRITICALTESTSRC","CRITICALDONESRC","SMALLDEVSRC","SMALLTESTSRC","SMALLDONESRC","SMALLSTAGINGSRC"	{
		w !,ns
		zn ns
		do $CLASSMETHOD(class,classmethodToRun)
	}
]]></Implementation>
</Method>

<Method name="GetErrMsg">
<Description>
GetErrMsg - extracts error message from status</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>status:%Status</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ret=""
	Do DecomposeStatus^%apiOBJ(status,.err,"-d") For i=1:1:err Set ret=ret_" "_err(i)
	Quit ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.config.server">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.config.server.CLS/EV.23
;vc; Component: CLS.EF.config.server
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.config.server.CLS/EV.23</td><td>CLS.EF.config.server</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>64142,46900</TimeChanged>
<TimeCreated>62987,40901.666108</TimeCreated>

<Method name="getDevDomain">
<Description>
system domain</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "dev.efsys.net"
]]></Implementation>
</Method>

<Method name="getTestDomain">
<Description>
system domain</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "test.efsys.net"
]]></Implementation>
</Method>

<Method name="getStagingDomain">
<Description>
system domain</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "staging.efsys.net"
]]></Implementation>
</Method>

<Method name="getLiveDomain">
<Description>
system domain</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "www.eventsforce.net"
]]></Implementation>
</Method>

<Method name="getEFversion">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set version=$G(^%ZEF)
	if version="" set version="5.2.1"
	return version
]]></Implementation>
</Method>

<Method name="getIISPath">
<Description>
returns the path used on the webservers</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inInstance="",inNamespace=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set instance=##class(%SYS.System).GetInstanceName()  // CACHELARGE; CACHESMALL; CACHECRITICAL, CACHEDEV
	if $L(inInstance) set instance=inInstance
	set instance=$ZCVT(instance,"U")

	set namespace=$ZNSPACE
	if $L(inNamespace) set namespace=inNamespace
	set namespace=$ZCVT(namespace,"U")
	
	if ..isThisLive()	{
		set path="D:\websites\eventsforce.net\eventsforceV4"  // this is the path on the WEB server not DATABASE server!
	} elseif ..isThisStaging() {
		if instance="CACHELARGE" set path="C:\websites\efsys.net\largestaging" 
		if instance="CACHESMALL" set path="C:\websites\efsys.net\smallstaging" 
	} elseif ..isThisDev()	{
		if namespace="CRITICALDEVSRC" set path="C:\websites\efsys.net\criticaldev"
		if namespace="SMALLDEVSRC" set path="C:\websites\efsys.net\smalldev"
		if namespace="LARGEDEVSRC" set path="C:\websites\efsys.net\largedev"
	} else { // must be on TEST
		if instance="CACHELARGE" set path="C:\websites\efsys.net\largetest"
		if instance="CACHESMALL" set path="C:\websites\efsys.net\smalltest"
		if instance="CACHECRITICAL" set path="C:\websites\efsys.net\criticaltest"
	}
	
	return path
]]></Implementation>
</Method>

<Method name="getIISPathForAPI">
<Description>
returns the path used for the API on the webservers</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if ..isThisLive()	{
		set path="D:\websites\api"  // this is the path on the WEB server not DATABASE server!
	} else {
		set path="C:\websites\api"
	}
	
	quit path
]]></Implementation>
</Method>

<Method name="getLogPath">
<Description>
used for ef installation and upgrade log files</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set path="D:\ef-upgrade-install-logs\"
	return path
]]></Implementation>
</Method>

<Method name="getFTPsettings">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&arrayOfSettings]]></FormalSpec>
<Implementation><![CDATA[
	#dim instance as %String = ##class(%SYS.System).GetInstanceName()
	#dim serverNumber as %Integer = ""
	kill arrayOfSettings
	set arrayOfSettings(1,"ftpPort")=21 
	
	if ##class(EF.config.server).isThisLive() {
		set arrayOfSettings(1,"ftpServer")="wsl1.internal.efsys.net" // 10.179.71.59    - aka "primary" FTP server
		set arrayOfSettings(2,"ftpServer")="wsl2.internal.efsys.net" // 10.178.198.141  - aka "backup" FTP server
		
		for  {
			set serverNumber=$O(arrayOfSettings(serverNumber))
			if serverNumber="" quit
			set arrayOfSettings(serverNumber,"ftpPort")=21 
			set arrayOfSettings(serverNumber,"ftpUser")="interServerV4"
			set arrayOfSettings(serverNumber,"ftpPassword")="kAmpa1!"
		}
		
	} elseif ##class(EF.config.server).isThisStaging() {
		set arrayOfSettings(1,"ftpServer")="stagingws.internal.efsys.net"
		set arrayOfSettings(1,"ftpUser")="interServerV4"
		set arrayOfSettings(1,"ftpPassword")="kAmpa1!"
							
	} elseif ##class(EF.config.server).isThisReallyTest() {
		if instance="CACHELARGE" {
			set arrayOfSettings(1,"ftpServer")="test.internal.efsys.net"
			set arrayOfSettings(1,"ftpUser")="interServerV4"
			set arrayOfSettings(1,"ftpPassword")="kAmpa1!"
			
		} elseif instance="CACHESMALL" {
			set arrayOfSettings(1,"ftpServer")="test.internal.efsys.net"
			set arrayOfSettings(1,"ftpUser")="iSMALLTEST"
			set arrayOfSettings(1,"ftpPassword")="kAmpa1!"
			
		} elseif instance="CACHECRITICAL" {
			set arrayOfSettings(1,"ftpServer")="test.internal.efsys.net"
			set arrayOfSettings(1,"ftpUser")="iCRITICALTEST"
			set arrayOfSettings(1,"ftpPassword")="kAmpa1!"
		}
			
	} elseif ##class(EF.config.server).isThisDev() {
		if $ZNSPACE="LARGEDEVSRC" {
			set arrayOfSettings(1,"ftpServer")="dev.internal.efsys.net"
			set arrayOfSettings(1,"ftpUser")="interLargeDev"
			set arrayOfSettings(1,"ftpPassword")="n44b2647987Rd9H"
			
		} elseif $ZNSPACE="SMALLDEVSRC" {
			set arrayOfSettings(1,"ftpServer")="dev.internal.efsys.net"
			set arrayOfSettings(1,"ftpUser")="interSmallDev"
			set arrayOfSettings(1,"ftpPassword")="n44b2647987Rd9H"
			
		} elseif $ZNSPACE="CRITICALDEVSRC" {
			set arrayOfSettings(1,"ftpServer")="dev.internal.efsys.net"
			set arrayOfSettings(1,"ftpUser")="interCriticalDev"
			set arrayOfSettings(1,"ftpPassword")="n44b2647987Rd9H"
		}		
	}
]]></Implementation>
</Method>

<Method name="getDeletedItemsPath">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set path="D:\ToDelete\"
	return path
]]></Implementation>
</Method>

<Method name="getTempFileOutputPath">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set path="D:\uploads\output\"
	return path
]]></Implementation>
</Method>

<Method name="getTempInvoiceFileOutputPath">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// replaces: ##class(setup.objSetting).setParameter("invoicing","Invoice Output Path","D:\uploads\output\invoices\")
	set path=..getTempFileOutputPath()_"invoices\"
	return path
]]></Implementation>
</Method>

<Method name="getTempReportFileOutputPath">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set path=..getTempFileOutputPath()_"reportAttachments\"
	return path
]]></Implementation>
</Method>

<Method name="getImageMagickTempPath">
<Description>
used for ef installation and upgrade log files</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set path="D:\temp"
	return path
]]></Implementation>
</Method>

<Method name="getImageMagickProgramPath">
<Description>
the path to the imageMagick programs</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set path="c:\progra~2\imagemagick-6.0.2-Q16\" // redsides in "Frogram Files (x86)" because it is a 32bit program in 64 bit windows
	return path
]]></Implementation>
</Method>

<Method name="getJSXSSProgramCommand">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set cmd="C:\progra~1\nodejs\node_modules\.bin\xss.cmd"
	return cmd
]]></Implementation>
</Method>

<Method name="getJSXSSTempPath">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set path="D:\temp\jsxss\"
	return path
]]></Implementation>
</Method>

<Method name="getEFRootPath">
<Description>
get eventsforce root path - this is NOT where VC/m distributes the code - it should be merged into getEFRootPathSourceNew - only different in live</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set instance=##class(%SYS.System).GetInstanceName()  // CACHELARGE; CACHESMALL; CACHECRITICAL, CACHEDEV
	set instance=$ZCVT(instance,"U")
	set nodename=##class(%SYS.System).GetNodeName()  // STAGE1DB; TESTDONE1; DEV1
	set namespace=$ZNSPACE
	set namespace=$ZCVT(namespace,"U")
	
	// do this first and quit - avoids the complicated dev/test/staging stuff getting in the way later
	if ..isThisLive()	{
		set rootPath="D:\websites\eventsforce.net\eventsforce"
	} elseif ..isThisStaging() {
		if instance="CACHELARGE" set rootPath="C:\websites\efsys.net\largestaging" 
		if instance="CACHESMALL" set rootPath="C:\websites\efsys.net\smallstaging" 
	} elseif ..isThisDev()	{
		if namespace="CRITICALDEVSRC" set rootPath="C:\websites\efsys.net\criticaldev"
		if namespace="SMALLDEVSRC" set rootPath="C:\websites\efsys.net\smalldev"
		if namespace="LARGEDEVSRC" set rootPath="C:\websites\efsys.net\largedev"
	} else { // must be on TEST
		if instance="CACHELARGE" set rootPath="C:\websites\efsys.net\largetest"
		if instance="CACHESMALL" set rootPath="C:\websites\efsys.net\smalltest"
		if instance="CACHECRITICAL" set rootPath="C:\websites\efsys.net\criticaltest"
	}
	
	quit rootPath
]]></Implementation>
</Method>

<Method name="getEFRootPathSourceNew">
<Description>
get eventsforce root path - this is where VC/m distributes the code</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set instance=##class(%SYS.System).GetInstanceName()  // CACHELARGE; CACHESMALL; CACHECRITICAL, CACHEDEV
	set instance=$ZCVT(instance,"U")
	set nodename=##class(%SYS.System).GetNodeName()  // STAGE1DB; TESTDONE1; DEV1
	set namespace=$ZNSPACE
	set namespace=$ZCVT(namespace,"U")

	// do this first and quit - avoids the complicated dev/test/staging stuff getting in the way later
	if ..isThisLive()	{
		set rootPath="D:\websites\eventsforce.net\sourcenew"
	} elseif ..isThisStaging() {
		if instance="CACHELARGE" set rootPath="C:\websites\efsys.net\largestaging" 
		if instance="CACHESMALL" set rootPath="C:\websites\efsys.net\smallstaging" 
	} elseif ..isThisDev()	{
		if namespace="CRITICALDEVSRC" set rootPath="C:\websites\efsys.net\criticaldev"
		if namespace="SMALLDEVSRC" set rootPath="C:\websites\efsys.net\smalldev"
		if namespace="LARGEDEVSRC" set rootPath="C:\websites\efsys.net\largedev"
	} else { // must be on TEST
		if instance="CACHELARGE" set rootPath="C:\websites\efsys.net\largetest"
		if instance="CACHESMALL" set rootPath="C:\websites\efsys.net\smalltest"
		if instance="CACHECRITICAL" set rootPath="C:\websites\efsys.net\criticaltest"
	}

	return rootPath
]]></Implementation>
</Method>

<Method name="getDefaultDatabasePath">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set path="D:\databases\"  // existing BEIGE etc.
	if ##class(%Library.File).DirectoryExists("D:\ef-db\") set path="D:\ef-db\"   // e.g. new dedicated DATABASE-LIVE-1
	if ##class(%Library.File).DirectoryExists("E:\ef-db\") set path="E:\ef-db\"   // e.g. new cloud svr MIRROR-LIVE-1
	return path
]]></Implementation>
</Method>

<Method name="getEFmediaFolder">
<Description>
get media folder - this is not a web url but a local file system directory</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set rootPath=..getEFRootPath()_"\media"
	return rootPath
]]></Implementation>
</Method>

<Method name="getTemplatesRootPathOld">
<Description>
get template root path2 - seems there are two used </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set rootPath=..getEFRootPathSourceNew()_"\frontend\layouts"
	return rootPath
]]></Implementation>
</Method>

<Method name="getTemplatesBatchFile">
<Description>
get template root path for bespoke templates - used by themeLoad2.csp</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set pathFile="c:\ef-template-bat\unzipTemplate.bat"
	return pathFile
]]></Implementation>
</Method>

<Method name="getTemplatesRoot">
<Description>
get template root path for bespoke templates - used by themeLoad2.csp</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set path=..getEFRootPathSourceNew()_"\media"
	if $E(path,$L(path))'="\" set path=path_"\"
	set path = path_"templates"
	quit path
]]></Implementation>
</Method>

<Method name="getTemplatesRootBespoke">
<Description>
get template root path for bespoke templates - not used yet</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set path=..getTemplatesRoot()
	if $E(path,$L(path))'="\" set path=path_"\"
	set path = path_$ZNSPACE
	quit path
]]></Implementation>
</Method>

<Method name="getTemplatesRootShared">
<Description>
get template root path for shared all client templates - not used yet</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set path=..getTemplatesRoot()
	if $E(path,$L(path))'="\" set path=path_"\"
	set path = path_"ALL_CLIENTS"
	quit path
]]></Implementation>
</Method>

<Method name="getDefaultApplicationDomain">
<Description>
the domain used as the default for an environment</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set domain=""
	if ..isThisLive()	{
		set domain=..getLiveDomain()
	} elseif ..isThisDev() {  
		set domain=..getDevDomain()
	} elseif ..isThisStaging() {
		set domain=..getStagingDomain()
	} else {
		set domain=..getTestDomain()
	}

	quit domain
]]></Implementation>
</Method>

<Method name="getRedirectsDomain">
<Description>
the server used to post and get data from (the central database for all)</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set server=""
	if ..isThisLive()	{
		set server=..getLiveDomain()
		if $L(##class(setup.objSetting).getParameter("redirects","server"))	{
			set server=##class(setup.objSetting).getParameter("redirects","server")
		}
	} elseif ..isThisDev() {  
		set server=..getDevDomain()
	} elseif ..isThisStaging() {
		set server=..getStagingDomain()
	} else {
		set server=..getTestDomain()
	}

	quit server
]]></Implementation>
</Method>

<Method name="getUserMessagesDomain">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set msgServer=""
	if ..isThisLive()	{
		set msgServer=..getLiveDomain()
		if $L(##class(setup.objSetting).getParameter("user messages","server")) {
			set msgServer=##class(setup.objSetting).getParameter("user messages","server")
		}
	} elseif ..isThisDev() {  
		set msgServer=..getDevDomain()
	} elseif ..isThisStaging() {
		set msgServer=..getStagingDomain()
	} else {
		set msgServer=..getTestDomain()
	}
	quit msgServer
]]></Implementation>
</Method>

<Method name="guessInstanceFromNS">
<Description>
guess the instance from the namespace name 
 - needed for test and staging to set up IIS config with correct paths</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ns</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set ns=$ZCVT(ns,"U")
	set instanceChars="",instance=""
	set nsPrefix=$E(ns,1,2)
	if nsPrefix="EV" {
		set nsPrefix=$E(ns,3,4)
	}
	if (nsPrefix="CT")!(nsPrefix="ST")!(nsPrefix="LT") {
		set instanceChars=nsPrefix
	} else {
		if ns["CRITICAL" set instanceChars="CT"
		if ns["SMALL" set instanceChars="ST"
		if ns["LARGE" set instanceChars="LT"
	}
	if instanceChars="CT" set instance="CACHECRITICAL"
	if instanceChars="ST" set instance="CACHESMALL"
	if instanceChars="LT" set instance="CACHELARGE"
	if instance="" set instance="CACHELARGE"  // assume large stream if we cannot determine
	
	return instance
]]></Implementation>
</Method>

<Method name="isThisDev">
<Description>
used to determine if I'm in a test system - if so returns server name too</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set server=$ZUTIL(131,0) // STAGE1DB; TESTDONE1; DEV1
	set server=$ZCVT(server,"U")

	set dev=0
	if $E(server,1,3)="DEV" set dev=1
	quit dev_"~"_server
]]></Implementation>
</Method>

<Method name="isThisLive">
<Description>
used to determine if I'm in a test system - if so returns server name too</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set server=$ZCVT($ZUTIL(131,0),"U") // STAGE1DB; TESTDONE1; DEV1
	set isLive=0
	if server["DATABASE-LIVE-" set isLive=1
	if server["MIRROR-LIVE-" set isLive=1
	quit isLive_"~"_server
]]></Implementation>
</Method>

<Method name="isThisLivePrimary">
<Description>
used to determine if I'm in a live server that is the primary live - to determine if I can send emails for example.
e.g. beige or brown and not black; aviva bronze and not aviva silver; mirror primary and not mirror backup</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set server=$ZCVT($ZUTIL(131,0),"U") // STAGE1DB; TESTDONE1; DEV1
	set isLivePrimary=0
	if (..isThisLive() && $System.Mirror.IsPrimary()) set isLivePrimary=1
	quit isLivePrimary_"~"_server
]]></Implementation>
</Method>

<Method name="isThisTest">
<Description>
used to determine if I'm in a non-live system
 *** Note this is an older method and should not be used: use '..isThisLive() instead ***</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set server=$ZUTIL(131,0) // STAGE1DB; TESTDONE1; DEV1
	set server=$ZCVT(server,"U")

	set isTest='(..isThisLive())
	quit isTest_"~"_server
]]></Implementation>
</Method>

<Method name="isThisReallyTest">
<Description>
new method as other one will return 1 for staging, done and dev</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set server=$ZUTIL(131,0) // STAGE1DB; TESTDONE1; DEV1
	set server=$ZCVT(server,"U")

	set isTest=0
	if server["TESTDONE" set isTest=1
	quit isTest_"~"_server
]]></Implementation>
</Method>

<Method name="isThisTestDone">
<Description>
is this a test or done environment?</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set server=$ZUTIL(131,0) // STAGE1DB; TESTDONE1; DEV1
	set server=$ZCVT(server,"U")

	set isTest=0
	if server["TESTDONE" set isTest=1
	quit isTest_"~"_server
]]></Implementation>
</Method>

<Method name="isThisStaging">
<Description>
used to determine if I'm in a test system - if so returns server name too</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set server=$ZUTIL(131,0) // STAGE1DB; TESTDONE1; DEV1
	set server=$ZCVT(server,"U")
	
	set isStaging=0
	if server["STAGE"	{
		set isStaging=1
	}
	quit isStaging_"~"_server
]]></Implementation>
</Method>

<Method name="getSourceCodeNameSpace">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set sourceCodeNamespace=""
	set instance=##class(%SYS.System).GetInstanceName()  // CACHELARGE; CACHESMALL; CACHECRITICAL, CACHEDEV
	set instance=$ZCVT(instance,"U")
	set namespace=$ZNSPACE
	set namespace=$ZCVT(namespace,"U")
	
	// do this first and quit - avoids the complicated dev/test/staging stuff getting in the way later
	if ..isThisLive()	{
		set sourceCodeNamespace="SOURCENEW"
	} elseif ..isThisStaging() {
		if instance="CACHELARGE" set sourceCodeNamespace="LARGESTAGINGSRC"
	} elseif ..isThisDev()	{
		if namespace="CRITICALDEVSRC" set sourceCodeNamespace="CRITICALDEVSRC"
		if namespace="SMALLDEVSRC" set sourceCodeNamespace="SMALLDEVSRC"
		if namespace="LARGEDEVSRC" set sourceCodeNamespace="LARGEDEVSRC"
	} else { // must be on TEST
		if instance="CACHELARGE" set sourceCodeNamespace="LARGETESTSRC"
		if instance="CACHESMALL" set sourceCodeNamespace="SMALLTESTSRC"
		if instance="CACHECRITICAL" set sourceCodeNamespace="CRITICALTESTSRC"
	}
	return sourceCodeNamespace
]]></Implementation>
</Method>

<Method name="getAppNameForCSPPages">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return $ZCVT(..getSourceCodeNameSpace(),"L")
]]></Implementation>
</Method>

<Method name="testConfigMethods">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	w !," servers:"
	w !,"isThisDev=",..isThisDev()
	w !,"isThisTest=",..isThisTest()
	w !,"isThisReallyTest=",..isThisReallyTest()
	w !,"isThisTestDone=",..isThisTestDone()
	w !,"isThisStaging=",..isThisStaging()
	w !,"isThisLive=",..isThisLive()
	w !," domains:"
	w !,"getUserMessagesDomain=",..getUserMessagesDomain()
	w !,"getRedirectsDomain=",..getRedirectsDomain()
	w !," paths:"
	w !,"getEFRootPath=",..getEFRootPath()
	w !,"getEFRootPathSourceNew=",..getEFRootPathSourceNew()
	w !,"getTemplatesRootBespoke=",..getTemplatesRootBespoke()
	w !,"getTemplatesRootPathOld=",..getTemplatesRootPathOld()
	w !,"getTemplatesRootShared=",..getTemplatesRootShared()
	w !,"getIISPath=",..getIISPath()
	w !,"getIISPathForAPI=",..getIISPathForAPI()
]]></Implementation>
</Method>
</Class>


<Class name="EF.contextData">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.contextData.CLS/EV.3
;vc; Component: CLS.EF.contextData
;vc;  Location: SmallDev
;vc; Date/Time: 20-Apr-16 11:19
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.contextData.CLS/EV.3</td><td>CLS.EF.contextData</td><td>SmallDev</td><td style='white-space: nowrap;'>20-Apr-16 11:19</td><td>FredG</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64028,40841.07578</TimeChanged>
<TimeCreated>63755,56076.63566</TimeCreated>

<Property name="eventID">
<Type>%Integer</Type>
</Property>

<Property name="languageID">
<Type>%Integer</Type>
</Property>

<Property name="context">
<Type>%String</Type>
<InitialExpression>"none"</InitialExpression>
<Parameter name="VALUELIST" value=",registration,agenda,none"/>
</Property>

<Property name="auditPersonID">
<Type>%String</Type>
</Property>

<Property name="sessionID">
<Type>%String</Type>
</Property>

<Property name="IPaddress">
<Type>%String</Type>
<InitialExpression>..getIPaddress()</InitialExpression>
</Property>

<Property name="controllerID">
<Type>%Integer</Type>
</Property>

<Method name="createFromFrontendCSPSession">
<ClassMethod>1</ClassMethod>
<ReturnType>EF.contextData</ReturnType>
<Implementation><![CDATA[
	set contextData = ..%New()	
	set contextData.eventID=$G(%session.Data("eventsforce","frontend","xEventID"))
	
	Do contextData.setControllerID()
	
	set contextData.languageID=$G(%session.Data("eventsforce","frontend","xPrefLangID"))
	if contextData.languageID="" {
		 set contextData.languageID=$G(%session.Data("eventsforce","frontend","xLangID"))
	}
	do contextData.setAuditPersonIDfromFrontend()
	
	set contextData.sessionID=%session.SessionId
	return contextData
]]></Implementation>
</Method>

<Method name="setControllerID">
<Implementation><![CDATA[
	if (..eventID) {
		Set ..controllerID=##class(setup.objEvent).getControllerID(..eventID)
	}
]]></Implementation>
</Method>

<Method name="createFromBackendCSPSession">
<ClassMethod>1</ClassMethod>
<ReturnType>EF.contextData</ReturnType>
<Implementation><![CDATA[
	set contextData = ..%New()	
	set contextData.eventID=$G(%session.Data("eventsforce","backend","xEventID"))
	
	Do contextData.setControllerID()

	set contextData.languageID=$G(%session.Data("eventsforce","backend","xLangID"))

	do contextData.setAuditPersonIDfromBackend()
	
	set contextData.sessionID=%session.SessionId
	return contextData
]]></Implementation>
</Method>

<Method name="getIPaddress">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	if $data(%request) {
		return %request.GetCgiEnv("REMOTE_ADDR","no ip")
	} else {
		return ""
	}
]]></Implementation>
</Method>

<Method name="setAuditPersonIDfromFrontend">
<Implementation><![CDATA[
	if $data(%session) {
		set ..auditPersonID = $G(%session.Data("eventsforce","frontend","submitterPersonID"))
	}
]]></Implementation>
</Method>

<Method name="setAuditPersonIDfromBackend">
<Implementation><![CDATA[
	if $data(%session) {
		set ..auditPersonID = $G(%session.Data("eventsforce","backend","xPersonID")	)
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.contextDataAgenda">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.contextDataAgenda.CLS/EV.1
;vc; Component: CLS.EF.contextDataAgenda
;vc;  Location: SmallDev
;vc; Date/Time: 19-Apr-16 15:17
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.contextDataAgenda.CLS/EV.1</td><td>CLS.EF.contextDataAgenda</td><td>SmallDev</td><td style='white-space: nowrap;'>19-Apr-16 15:17</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.contextData</Super>
<TimeChanged>64027,55502.546261</TimeChanged>
<TimeCreated>63755,56086.762652</TimeCreated>

<Property name="context">
<Type>%String</Type>
<InitialExpression>"agenda"</InitialExpression>
</Property>

<Property name="attendeeCategoryID">
<Type>%Integer</Type>
</Property>

<Property name="tempPersonID">
<Type>%Integer</Type>
</Property>

<Property name="loggedInPersonID">
<Description>
if website is private, this will be set to the cod.objPerson.ID of that logged in person</Description>
<Type>%Integer</Type>
</Property>

<Property name="isTestMode">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="prowebMode">
<Type>%String</Type>
<Cardinality>one</Cardinality>
<Parameter name="VALUELIST" value=",&quot;edit&quot;,&quot;preview&quot;"/>
</Property>

<Method name="createFromFrontendCSPSession">
<ClassMethod>1</ClassMethod>
<ReturnType>EF.contextDataRegistration</ReturnType>
<Implementation><![CDATA[
	#dim sessionID as %String = %session.SessionId
	
	set contextData = ##super()
	
	set contextData.tempPersonID=$G(%session.Data("eventsforce","frontend","currentPersonID"))
	set contextData.loggedInPersonID=$G(%session.Data("eventsforce","xtfrontend","MyAccount","personID"))
	set contextData.attendeeCategoryID=##class(eCom.tempPurchase).getEventCategory(sessionID,contextData.tempPersonID)
	if contextData.attendeeCategoryID="" {
		if contextData.loggedInPersonID {
			// this will be used to restrict the categories of sessions in the daily agenda before registration
			set contextData.attendeeCategoryID=##class(links.lnkPersonEventCategory).getPreSelectedAttendeeCategoryID(contextData.eventID,contextData.loggedInPersonID)
		}
	}
	
	set contextData.prowebMode=%session.Get("mode")
	do contextData.setAuditPersonIDfromFrontend()
	return contextData
]]></Implementation>
</Method>
</Class>


<Class name="EF.contextDataRegistration">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.contextDataRegistration.CLS/EV.4
;vc; Component: CLS.EF.contextDataRegistration
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.contextDataRegistration.CLS/EV.4</td><td>CLS.EF.contextDataRegistration</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.contextData</Super>
<TimeChanged>64178,51430.579562</TimeChanged>
<TimeCreated>63755,56082.660879</TimeCreated>

<Property name="tempPurchaseID">
<Type>%Integer</Type>
</Property>

<Property name="isAmendment">
<Type>%Boolean</Type>
<InitialExpression>"0"</InitialExpression>
</Property>

<Property name="attendeeCategoryID">
<Type>%Integer</Type>
</Property>

<Property name="currencyID">
<Type>%Integer</Type>
</Property>

<Property name="tempPersonID">
<Type>%Integer</Type>
</Property>

<Property name="loggedInPersonID">
<Description>
if website is private, this will be set to the cod.objPerson.ID of that logged in person</Description>
<Type>%Integer</Type>
</Property>

<Property name="isBackendBooking">
<Type>%Boolean</Type>
<InitialExpression>"0"</InitialExpression>
</Property>

<Property name="pricingHorologUTC">
<Type>%Integer</Type>
</Property>

<Property name="isTestMode">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="prowebMode">
<Type>%String</Type>
<Cardinality>one</Cardinality>
<Parameter name="VALUELIST" value=",&quot;edit&quot;,&quot;preview&quot;"/>
</Property>

<Property name="context">
<Type>%String</Type>
<InitialExpression>"registration"</InitialExpression>
</Property>

<Property name="backendPersonID">
<Type>%Integer</Type>
</Property>

<Property name="pageID">
<Type>%Integer</Type>
</Property>

<Property name="listID">
<Type>%Integer</Type>
</Property>

<Property name="isBackendSuperUser">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="componentName">
<Type>%String</Type>
</Property>

<Method name="createFromFrontendCSPSession">
<ClassMethod>1</ClassMethod>
<ReturnType>EF.contextDataRegistration</ReturnType>
<Implementation><![CDATA[
	#dim sessionID as %String = %session.SessionId
	
	set contextData = ##super()
	
	set contextData.tempPersonID=$G(%session.Data("eventsforce","frontend","currentPersonID"))
	set contextData.loggedInPersonID=$G(%session.Data("eventsforce","xtfrontend","MyAccount","personID"))
	set contextData.backendPersonID=$G(%session.Data("eventsforce","backend","xPersonID"))
	set contextData.attendeeCategoryID=##class(eCom.tempPurchase).getEventCategory(sessionID,contextData.tempPersonID)
	if contextData.attendeeCategoryID="" {
		if contextData.loggedInPersonID {
			// this will be used to restrict the categories of sessions in the daily agenda before registration
			set contextData.attendeeCategoryID=##class(links.lnkPersonEventCategory).getPreSelectedAttendeeCategoryID(contextData.eventID,contextData.loggedInPersonID)
		} else {
			set contextData.attendeeCategoryID = ##class(setup.lnkCategoryEvent).getDefault(contextData.eventID)	
		}
	}
	set contextData.currencyID=+##class(eCom.tempPurchase).getCurrencyID(sessionID)
	set contextData.isAmendment=+$G(%session.Data("eventsforce","frontend","amend"))
	set contextData.tempPurchaseID=##class(eCom.tempPerson).getTempPurchaseID(contextData.tempPersonID)
	set contextData.isBackendBooking=##class(eCom.tempPurchase).isBackendBooking(sessionID)
	set contextData.pricingHorologUTC=##class(eCom.tempPurchase).getPriceHorologUTC(contextData.tempPurchaseID)	
	set contextData.prowebMode=%session.Get("mode")
	set contextData.pageID=%session.Get("pageID")
	do contextData.setAuditPersonIDfromFrontend()
	
	set contextData.isBackendSuperUser=##class(eCom.tempPurchase).isBackendSuperUser(sessionID)
	
	return contextData
]]></Implementation>
</Method>

<Method name="createFromTempPersonID">
<ClassMethod>1</ClassMethod>
<FormalSpec>tempPersonID,langID,isAmendment:%Boolean</FormalSpec>
<ReturnType>EF.contextDataRegistration</ReturnType>
<Implementation><![CDATA[
	
	set contextData = ..%New()
	set tempPerson=##class(eCom.tempPerson).%OpenId(tempPersonID)
	do tempPerson.%Reload()
	
	set contextData.tempPurchaseID=tempPerson.tempPurchase.%Id()
	
	set controllerID=tempPerson.tempPurchase.objController.%Id()
	set contextData.eventID=##class(eCom.objController).getEventID(controllerID)
	set contextData.languageID=langID
	set contextData.tempPersonID=tempPerson.%Id()
	set contextData.sessionID=tempPerson.tempPurchase.sessionID
	set contextData.loggedInPersonID=""
	
	set contextData.attendeeCategoryID=##class(eCom.tempPurchase).getEventCategory(contextData.sessionID,contextData.tempPersonID)
	if contextData.attendeeCategoryID="" {
		if contextData.loggedInPersonID {
			// this will be used to restrict the categories of sessions in the daily agenda before registration
			set contextData.attendeeCategoryID=##class(links.lnkPersonEventCategory).getPreSelectedAttendeeCategoryID(contextData.eventID,contextData.loggedInPersonID)
		} else {
			set contextData.attendeeCategoryID = ##class(setup.lnkCategoryEvent).getDefault(contextData.eventID)	
		}
	}
	set contextData.currencyID=+##class(eCom.tempPurchase).getCurrencyID(contextData.sessionID)
	set contextData.isAmendment=isAmendment
	
	set contextData.isBackendBooking=##class(eCom.tempPurchase).isBackendBooking(contextData.sessionID)
	set contextData.pricingHorologUTC=##class(eCom.tempPurchase).getPriceHorologUTC(contextData.tempPurchaseID)	
	set contextData.prowebMode=""
	
	do contextData.setAuditPersonIDfromFrontend()
	if contextData.auditPersonID = "" {
		do contextData.setAuditPersonIDfromBackend()	
	}
	kill tempPerson
	return contextData
]]></Implementation>
</Method>

<Method name="createMock">
<ClassMethod>1</ClassMethod>
<ReturnType>EF.contextDataRegistration</ReturnType>
<Implementation><![CDATA[
	#dim mockpersonID as %Integer = 1
	
	set contextData = ..%New()
	
	set contextData.eventID=1
	set contextData.languageID=1
	set contextData.tempPersonID=mockpersonID
	set contextData.loggedInPersonID=mockpersonID
	set contextData.attendeeCategoryID=1
	set contextData.currencyID=1
	set contextData.isAmendment=0
	set contextData.tempPurchaseID=1
	set contextData.isBackendBooking=0
	set contextData.pricingHorologUTC=##class(shared.timeFunctions).getCurrentHorologUTC()
	set contextData.prowebMode="preview"
	set contextData.sessionID="mockSession"
	
	return contextData
]]></Implementation>
</Method>

<Method name="isMockSession">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	return ..sessionID = "mockSession"
]]></Implementation>
</Method>
</Class>


<Class name="EF.contextDataRegistrationMock">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.contextDataRegistration.CLS/EV.4
;vc; Component: CLS.EF.contextDataRegistration
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.contextDataRegistration.CLS/EV.4</td><td>CLS.EF.contextDataRegistration</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.contextDataRegistration</Super>
<TimeChanged>64178,51986.405601</TimeChanged>
<TimeCreated>63755,56082.660879</TimeCreated>

<Property name="tempPurchaseID">
<Type>%Integer</Type>
</Property>

<Property name="isAmendment">
<Type>%Boolean</Type>
<InitialExpression>"0"</InitialExpression>
</Property>

<Property name="attendeeCategoryID">
<Type>%Integer</Type>
</Property>

<Property name="currencyID">
<Type>%Integer</Type>
</Property>

<Property name="tempPersonID">
<Type>%Integer</Type>
</Property>

<Property name="loggedInPersonID">
<Description>
if website is private, this will be set to the cod.objPerson.ID of that logged in person</Description>
<Type>%Integer</Type>
</Property>

<Property name="isBackendBooking">
<Type>%Boolean</Type>
<InitialExpression>"0"</InitialExpression>
</Property>

<Property name="pricingHorologUTC">
<Type>%Integer</Type>
</Property>

<Property name="isTestMode">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="prowebMode">
<Type>%String</Type>
<Cardinality>one</Cardinality>
<Parameter name="VALUELIST" value=",&quot;edit&quot;,&quot;preview&quot;"/>
</Property>

<Property name="context">
<Type>%String</Type>
<InitialExpression>"registration"</InitialExpression>
</Property>

<Property name="backendPersonID">
<Type>%Integer</Type>
</Property>

<Property name="pageID">
<Type>%Integer</Type>
</Property>

<Property name="listID">
<Type>%Integer</Type>
</Property>

<Property name="isBackendSuperUser">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<ReturnType>EF.contextDataRegistration</ReturnType>
<Implementation><![CDATA[
	#dim mockTempPersonID as %Integer = 100
	#dim mockBackendUserD as %Integer = 1
	#dim mockEventID as %Integer = 15235
	#dim mockPageID as %Integer = 122589
	
	
	set contextData = ..%New()
	
	set contextData.componentName = "Main List"
	set contextData.eventID = mockEventID
	set contextData.pageID = mockPageID
	set contextData.languageID=1
	set contextData.tempPersonID = mockTempPersonID
	set contextData.loggedInPersonID = mockBackendUserD
	set contextData.attendeeCategoryID=1
	set contextData.currencyID=1
	set contextData.isAmendment=0
	set contextData.tempPurchaseID=1
	set contextData.isBackendBooking=0
	set contextData.pricingHorologUTC=##class(shared.timeFunctions).getCurrentHorologUTC()
	set contextData.prowebMode="preview"
	set contextData.sessionID="mockSession"
	
	return contextData
]]></Implementation>
</Method>
</Class>


<Class name="EF.conversions.htmlToText">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.conversions.htmlToText.CLS/EV.1
;vc; Component: CLS.EF.conversions.htmlToText
;vc;  Location: SmallDev
;vc; Date/Time: 25-Jul-16 16:50
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.conversions.htmlToText.CLS/EV.1</td><td>CLS.EF.conversions.htmlToText</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Jul-16 16:50</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>64124,61267.912244</TimeChanged>
<TimeCreated>63348,34640.534251</TimeCreated>

<Method name="stripHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set result=inString
	
    
    set result=..stripHTMLConvertExcessWhitespace(result)
	
	set result=..stripHTMLRemoveHeadTags(result)
	
	set result=..stripHTMLRemoveXML(result)
	
	set result=..stripHTMLRemoveScriptTags(result)
    
   	set result=..stripHTMLRemoveStyleTags(result)
	
    set result=..stripHTMLConvertTDTags(result)
	
	set result=..stripHTMLConvertBlockElements(result)
	
	set result=..stripHTMLRemoveAllTags(result)
	
	set result=..stripHTMLReplaceSpecialCharacters(result)
	
	set result=..stripHTMLRemoveSpecialCharacters(result)

    // make line breaking consistent
    //result = result.Replace("\n", "\r");
    set result=##class(EF.utils.regex).replaceAll(result,"\n",$C(10))
    
    set result=..stripHTMLRemoveExtraLineBreaksAndTabs(result)
    
    quit result
]]></Implementation>
</Method>

<Method name="stripHTMLConvertExcessWhitespace">
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set result=inString
	
	//result = source.Replace("\r", " ");
    set result = $TR(result,$C(10),"")
    
    // Replace line breaks with space
    // because browsers inserts space
    //result = result.Replace("\n", " ");
    set result = $TR(result,$C(13),"")
    
    // Remove step-formatting
    //result = result.Replace("\t", string.Empty);
    set result = $TR(result,$C(9),"")
    
    // Remove repeating spaces because browsers ignore them
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //                                                      @"( )+", " ");
    set result=##class(EF.utils.regex).replaceAll(result,"( )+", " ")
    
    quit result
]]></Implementation>
</Method>

<Method name="stripHTMLRemoveHeadTags">
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set result=inString
	 // Remove the header (prepare first by clearing attributes)
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"<( )*head([^>])*>","<head>",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    set result=##class(EF.utils.regex).replaceAll(result,"<( )*head([^>])*>","<head>",1)
    
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"(<( )*(/)( )*head( )*>)","</head>",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    
    set result=##class(EF.utils.regex).replaceAll(result,"(<( )*(/)( )*head( )*>)","</head>",1)
    // result = System.Text.RegularExpressions.Regex.Replace(result,
    //         "(<head>).*(</head>)",string.Empty,
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
	set result=##class(EF.utils.regex).replaceAll(result,"(<head>).*?(</head>)","",1)
    
    quit result
]]></Implementation>
</Method>

<Method name="stripHTMLRemoveXML">
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set result=inString
    set result=##class(EF.utils.regex).replaceAll(result,"<( )*xml([^>])*>","<xml>",1)
    set result=##class(EF.utils.regex).replaceAll(result,"(<( )*(/)( )*xml( )*>)","</xml>",1)

	set result=##class(EF.utils.regex).replaceAll(result,"(<xml>).*?(</xml>)","",1)
    
    quit result
]]></Implementation>
</Method>

<Method name="stripHTMLRemoveScriptTags">
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set result=inString
	
	// remove all scripts (prepare first by clearing attributes)
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"<( )*script([^>])*>","<script>",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    set result=##class(EF.utils.regex).replaceAll(result,"<( )*script([^>])*>","<script>",1)
    
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"(<( )*(/)( )*script( )*>)","</script>",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    set result=##class(EF.utils.regex).replaceAll(result,"(<( )*(/)( )*script( )*>)","</script>")
    
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"(<script>)([^(<script>\.</script>)])*(</script>)",
    //         string.Empty,
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    set result=##class(EF.utils.regex).replaceAll(result,"(<script>)([^(<script>\.</script>)])*(</script>)","")
    
   	//result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"(<script>).*(</script>)",string.Empty,
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    set result=##class(EF.utils.regex).replaceAll(result,"(<script>).*?(</script>)","")

    quit result
]]></Implementation>
</Method>

<Method name="stripHTMLRemoveStyleTags">
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set result=inString
	
    // remove all styles (prepare first by clearing attributes)
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"<( )*style([^>])*>","<style>",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    set result=##class(EF.utils.regex).replaceAll(result,"<( )*style([^>])*>","<style>",1)
    
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"(<( )*(/)( )*style( )*>)","</style>",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    set result=##class(EF.utils.regex).replaceAll(result,"(<( )*(/)( )*style( )*>)","</style>",1)
    
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         "(<style>).*(</style>)",string.Empty,
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    set result=##class(EF.utils.regex).replaceAll(result,"(<style>).*?(</style>)","",1)
    
    quit result
]]></Implementation>
</Method>

<Method name="stripHTMLConvertTDTags">
<Description><![CDATA[
insert tabs in spaces of <td> tags]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	 
	set result=inString
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"<( )*td([^>])*>","\t",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    set result=##class(EF.utils.regex).replaceAll(result,"<( )*td([^>])*>"," ",1)
   
    quit result
]]></Implementation>
</Method>

<Method name="stripHTMLConvertBlockElements">
<Description><![CDATA[
insert line breaks in places of <BR> and <LI> tags
insert line paragraphs (double line breaks) in place
if <P>, <DIV> and <TR> tags]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set result=inString
	set CRLF=$C(13,10)
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"<( )*br( )*>","\r",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    set result=##class(EF.utils.regex).replaceAll(result,"<( )*br( )*>",CRLF,1)
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"<( )*li( )*>","\r",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
	set result=##class(EF.utils.regex).replaceAll(result,"<( )*li( )*>",CRLF,1)
	
    // insert line paragraphs (double line breaks) in place
    // if <P>, <DIV> and <TR> tags
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"<( )*div([^>])*>","\r\r",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    set result=##class(EF.utils.regex).replaceAll(result,"<( )*div([^>])*>",CRLF_CRLF,1)
    
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"<( )*tr([^>])*>","\r\r",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    set result=##class(EF.utils.regex).replaceAll(result,"<( )*tr([^>])*>",CRLF_CRLF,1)
    
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"<( )*p([^>])*>","\r\r",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    set result=##class(EF.utils.regex).replaceAll(result,"<( )*p([^>])*>",CRLF_CRLF,1)
    
    quit result
]]></Implementation>
</Method>

<Method name="stripHTMLRemoveAllTags">
<Description><![CDATA[
Remove remaining tags like <a>, links, images,
comments etc - anything that's enclosed inside < >]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set result=inString
   // result = System.Text.RegularExpressions.Regex.Replace(result,
   //          @"<[^>]*>",string.Empty,
   //          System.Text.RegularExpressions.RegexOptions.IgnoreCase);
   set result=##class(EF.utils.regex).replaceAll(result,"<[^>]*>","",1)
    
   quit result
]]></Implementation>
</Method>

<Method name="stripHTMLReplaceSpecialCharacters">
<Description>
replace special characters:</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set result=inString
	
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @" "," ",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
	set result=##class(EF.utils.regex).replaceAll(result," "," ",1)
	
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"&bull;"," * ",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
	set result=##class(EF.utils.regex).replaceAll(result,"&bull;"," * ",1)
	
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"&lsaquo;","<",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
	set result=##class(EF.utils.regex).replaceAll(result,"&lsaquo;","<",1)
	
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"&rsaquo;",">",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
	set result=##class(EF.utils.regex).replaceAll(result,"&rsaquo;",">",1)
	
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"&trade;","(tm)",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
	set result=##class(EF.utils.regex).replaceAll(result,"&trade;","(tm)",1)
	
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"&frasl;","/",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
	set result=##class(EF.utils.regex).replaceAll(result,"&frasl;","/",1)
    
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"&lt;","<",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
	set result=##class(EF.utils.regex).replaceAll(result,"&lt;","<",1)
    
    
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"&gt;",">",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    set result=##class(EF.utils.regex).replaceAll(result,"&gt;",">",1)
    
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"&copy;","(c)",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    set result=##class(EF.utils.regex).replaceAll(result,"&copy;","(c)",1)
    
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"&reg;","(r)",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);	
    set result=##class(EF.utils.regex).replaceAll(result,"&reg;","(r)",1)
    
    set result=##class(EF.utils.regex).replaceAll(result,"&nbsp;"," ",1)
    
    
    quit result
]]></Implementation>
</Method>

<Method name="stripHTMLRemoveSpecialCharacters">
<Description>
Remove all others. More can be added, see</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set result=inString
	
    // http://hotwired.lycos.com/webmonkey/reference/special_characters/
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         @"&(.{2,6});", string.Empty,
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
	set result=##class(EF.utils.regex).replaceAll(result,"&(.{2,6});","",1)
	
    // for testing
    //System.Text.RegularExpressions.Regex.Replace(result,
    //       this.txtRegex.Text,string.Empty,
    //       System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    
    quit result
]]></Implementation>
</Method>

<Method name="stripHTMLRemoveExtraLineBreaksAndTabs">
<Description>
Remove extra line breaks and tabs:
replace over 2 breaks with 2 and over 4 tabs with 4.
Prepare first to remove any whitespaces in between
the escaped characters and remove redundant tabs in between line breaks</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set result=inString
	
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         "(\r)( )+(\r)","\r\r",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    set result=##class(EF.utils.regex).replaceAll(result,"(\r)( )+(\r)"," ",1)
    
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         "(\t)( )+(\t)","\t\t",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    set result=##class(EF.utils.regex).replaceAll(result,"(\t)( )+(\t)"," ",1)
    
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         "(\t)( )+(\r)","\t\r",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    set result=##class(EF.utils.regex).replaceAll(result,"(\t)( )+(\r)"," ",1)
    
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         "(\r)( )+(\t)","\r\t",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    set result=##class(EF.utils.regex).replaceAll(result,"(\r)( )+(\t)"," ",1)
    
    // Remove redundant tabs
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         "(\r)(\t)+(\r)","\r\r",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    set result=##class(EF.utils.regex).replaceAll(result,"(\r)(\t)+(\r)"," ",1)
    
    // Remove multiple tabs following a line break with just one tab
    //result = System.Text.RegularExpressions.Regex.Replace(result,
    //         "(\r)(\t)+","\r\t",
    //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    set result=##class(EF.utils.regex).replaceAll(result,"(\r)(\t)+"," ",1)
    
    // Remove leading whitespace (from replacing a block character at the beginning
	set result=##class(EF.utils.regex).replaceAll(result,"^[ \t]+","")
	
    quit result
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataCollections.dataSet">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.dataCollections.dataSet.CLS/EV.1
;vc; Component: CLS.EF.dataCollections.dataSet
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataCollections.dataSet.CLS/EV.1</td><td>CLS.EF.dataCollections.dataSet</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63727,58034</TimeChanged>
<TimeCreated>63208,41377.111211</TimeCreated>

<Method name="getRootNode">
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="createRootNode">
<FormalSpec>name=""</FormalSpec>
<ReturnType>dataSetNode</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="open">
<ClassMethod>1</ClassMethod>
<FormalSpec>idx</FormalSpec>
<ReturnType>dataSet</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="getXMLStream">
<FormalSpec>rootNodeName=""</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="createFromXMLStream">
<ClassMethod>1</ClassMethod>
<FormalSpec>xmlStream:%GlobalCharacterStream,pathMatching=""</FormalSpec>
<ReturnType>dataSet</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="addFromXMLStream">
<FormalSpec>xmlStream:%GlobalCharacterStream,pathMatching=""</FormalSpec>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="getJSONStream">
<FormalSpec>rootNodeName=""</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataCollections.dataSetNode">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.dataCollections.dataSetNode.CLS/EV.3
;vc; Component: CLS.EF.dataCollections.dataSetNode
;vc;  Location: SmallDev
;vc; Date/Time: 25-Feb-15 09:46
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataCollections.dataSetNode.CLS/EV.3</td><td>CLS.EF.dataCollections.dataSetNode</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Feb-15 09:46</td><td>AdrianM</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63586,56770</TimeChanged>
<TimeCreated>63208,41301.65956</TimeCreated>

<Property name="name">
<Type>%String</Type>
</Property>

<Property name="value">
<Type>%String</Type>
</Property>

<Method name="createChild">
<FormalSpec>name</FormalSpec>
<ReturnType>dataSetNodeTempGlobal</ReturnType>
<Implementation><![CDATA[
	
	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="addValue">
<FormalSpec>value</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="addAttribute">
<FormalSpec>name,value</FormalSpec>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="appendValue">
<FormalSpec>value</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="getNextChild">
<ReturnType>dataSetNode</ReturnType>
<Implementation><![CDATA[
	
	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="getNextChildByName">
<FormalSpec>name</FormalSpec>
<ReturnType>dataSetNode</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="getValueForFirstChildByName">
<FormalSpec>name</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="addElemToXML">
<FormalSpec><![CDATA[&writer:%XML.Writer]]></FormalSpec>
<Implementation><![CDATA[
	
	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="readElemFromXML">
<FormalSpec><![CDATA[&reader:%XML.TextReader,pathMatching=""]]></FormalSpec>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="convertToObject">
<FormalSpec>className:%String</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="convertToFlattenedArray">
<FormalSpec><![CDATA[&inArray,pathDelim:%String="/",relPath:%String=""]]></FormalSpec>
<Implementation><![CDATA[
	Set newIdx=$I(inArray)
	Set path=relPath_$SELECT(($LENGTH(relPath)>0):pathDelim,1:"")_..name
	Set inArray(newIdx,"path")=path
	Set inArray(newIdx,"value")=..value
	
	Do ..resetChildIterator()
	
	For {
		Set nextChild=..getNextChild()
		If ('$IsObject(nextChild)) Quit
		
		Do nextChild.convertToFlattenedArray(.inArray, pathDelim, path)
	}
]]></Implementation>
</Method>

<Method name="resetChildIterator">
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataCollections.dataSetNodeTempGlobal">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataCollections.dataSetNodeTempGlobal.CLS/EV.7
;vc; Component: CLS.EF.dataCollections.dataSetNodeTempGlobal
;vc;  Location: SmallDev
;vc; Date/Time: 16-Dec-15 16:31
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataCollections.dataSetNodeTempGlobal.CLS/EV.7</td><td>CLS.EF.dataCollections.dataSetNodeTempGlobal</td><td>SmallDev</td><td style='white-space: nowrap;'>16-Dec-15 16:31</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.dataCollections.dataSetNode</Super>
<TimeChanged>63903,56215.165594</TimeChanged>
<TimeCreated>63208,42528.524885</TimeCreated>

<Property name="dataSet">
<Type>dataSetTempGlobal</Type>
</Property>

<Property name="idx">
<Type>%String</Type>
</Property>

<Property name="currentChildIdx">
<Type>%String</Type>
</Property>

<Property name="currentAttributeIdx">
<Type>%Integer</Type>
</Property>

<Method name="createChild">
<FormalSpec>name</FormalSpec>
<ReturnType>dataSetNodeTempGlobal</ReturnType>
<Implementation><![CDATA[
	set dataSetNodeTempGlobal=..%New()
	set childIdx=$I(^CacheTemp(..dataSet.idx,"sfData"))
	set dataSetNodeTempGlobal.dataSet=..dataSet
	set dataSetNodeTempGlobal.idx=childIdx
	set ^CacheTemp(..dataSet.idx,"sfData",childIdx,"name")=name
	set ^CacheTemp(..dataSet.idx,"sfData",..idx,"children",childIdx)=""
	quit dataSetNodeTempGlobal
]]></Implementation>
</Method>

<Method name="addValue">
<FormalSpec>value</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	set ^CacheTemp(..dataSet.idx,"sfData",..idx,"value")=value
]]></Implementation>
</Method>

<Method name="addAttribute">
<FormalSpec>name,value</FormalSpec>
<Implementation><![CDATA[
	set attributeIdx=$I(^CacheTemp(..dataSet.idx,"sfData",..idx,"attributes"))
	set ^CacheTemp(..dataSet.idx,"sfData",..idx,"attributes",attributeIdx,"name")=name
	set ^CacheTemp(..dataSet.idx,"sfData",..idx,"attributes",attributeIdx,"value")=value
]]></Implementation>
</Method>

<Method name="appendValue">
<FormalSpec>value</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	set ^CacheTemp(..dataSet.idx,"sfData",..idx,"value")=$G(^CacheTemp(..dataSet.idx,"sfData",..idx,"value"))_value
]]></Implementation>
</Method>

<Method name="getNode">
<FormalSpec>idx</FormalSpec>
<Private>1</Private>
<ReturnType>dataSetNodeTempGlobal</ReturnType>
<Implementation><![CDATA[
	set dataSetNodeTempGlobal=..%New()
	set dataSetNodeTempGlobal.idx=idx
	set dataSetNodeTempGlobal.dataSet=..dataSet
	set dataSetNodeTempGlobal.name=^CacheTemp(..dataSet.idx,"sfData",idx,"name")
	if $d(^CacheTemp(..dataSet.idx,"sfData",idx,"value")) {
		set dataSetNodeTempGlobal.value=^CacheTemp(..dataSet.idx,"sfData",idx,"value")
	}
	quit dataSetNodeTempGlobal
]]></Implementation>
</Method>

<Method name="hasChild">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	return $D(^CacheTemp(..dataSet.idx,"sfData",..idx,"children"))>1
]]></Implementation>
</Method>

<Method name="getNextChild">
<ReturnType>dataSetNodeTempGlobal</ReturnType>
<Implementation><![CDATA[
	set out=""
	set ..currentChildIdx=$O(^CacheTemp(..dataSet.idx,"sfData",..idx,"children",..currentChildIdx))
	if ..currentChildIdx {
		set out=..getNode(..currentChildIdx)
	}
	
	Quit out
]]></Implementation>
</Method>

<Method name="getNextAttributeName">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set attributeName=""
	set ..currentAttributeIdx=$O(^CacheTemp(..dataSet.idx,"sfData",..idx,"attributes",..currentAttributeIdx))
	if ..currentAttributeIdx'="" {
		set attributeName=^CacheTemp(..dataSet.idx,"sfData",..idx,"attributes",..currentAttributeIdx,"name")		
	}
	return attributeName
]]></Implementation>
</Method>

<Method name="getCurrentAttributeValue">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ^CacheTemp(..dataSet.idx,"sfData",..idx,"attributes",..currentAttributeIdx,"value")
]]></Implementation>
</Method>

<Method name="getNextChildByName">
<FormalSpec>name</FormalSpec>
<ReturnType>dataSetNodeTempGlobal</ReturnType>
<Implementation><![CDATA[
	set name=$ZCVT(name,"L")
	set out=""
	for {
		set ..currentChildIdx=$O(^CacheTemp(..dataSet.idx,"sfData",..idx,"children",..currentChildIdx))
		if ..currentChildIdx="" quit
		if $ZCVT(^CacheTemp(..dataSet.idx,"sfData",..currentChildIdx,"name"),"L")=name quit
		
	}
	if ..currentChildIdx {
		set out=..getNode(..currentChildIdx)
	}
	
	Quit out
]]></Implementation>
</Method>

<Method name="getValueForFirstChildByName">
<FormalSpec>name</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set name=$ZCVT(name,"L")
	set out=""
	set tmpIdx=""
	for {
		set tmpIdx=$O(^CacheTemp(..dataSet.idx,"sfData",..idx,"children",tmpIdx))
		if tmpIdx="" quit
		if $ZCVT(^CacheTemp(..dataSet.idx,"sfData",tmpIdx,"name"),"L")'=name continue
		set out=..getNode(tmpIdx).value
		quit //loop
		
	}
	quit out
]]></Implementation>
</Method>

<Method name="addElemToXML">
<FormalSpec><![CDATA[&writer:%XML.Writer]]></FormalSpec>
<Implementation><![CDATA[
	for {
		set childElem=..getNextChild()
		if '$ISOBJECT(childElem) quit
		set xmlElement=##class(%XML.Element).%New(childElem.name)
		for {
			set attributeName=childElem.getNextAttributeName()
			if attributeName="" quit //loop
			do xmlElement.AddAttribute(attributeName,##class(shared.xmlFunctions).stripInvalidChars(childElem.getCurrentAttributeValue()))
		}
		
		set sta=writer.Element(xmlElement)
		if $$$ISERR(sta) throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sta)
		set sta=writer.WriteChars(childElem.value)
		if $$$ISERR(sta) throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sta)
		do childElem.addElemToXML(.writer)	
		set sta=writer.EndElement()
		if $$$ISERR(sta) throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sta)	
	}
]]></Implementation>
</Method>

<Method name="addElemToJSON">
<FormalSpec><![CDATA[&stream:%GlobalCharacterStream]]></FormalSpec>
<Implementation><![CDATA[
	#dim attributeName as %String
	#dim childElem 
	#dim isFirstSibling as %Boolean = 1
	
	if ..hasChild() {
		
		for {
			set childElem=..getNextChild()
			if '$ISOBJECT(childElem) quit
			if isFirstSibling {
				set isFirstSibling=0
			} else {
				do stream.Write(",")	
			}
			if $l(childElem.name) {
				do stream.Write(##class(EF.htmlGenerator).encodeForJSONName(childElem.name)_" : ")
			
				do stream.Write(##class(EF.htmlGenerator).encodeForJSONValue(childElem.value))
			} else {
				do stream.Write("{")
				do childElem.addElemToJSON(.stream) // recursive call
				do stream.Write("}")
			}				 
		}
	}
]]></Implementation>
</Method>

<Method name="readElemFromXML">
<FormalSpec><![CDATA[&reader:%XML.TextReader,pathMatching=""]]></FormalSpec>
<Implementation><![CDATA[
	while reader.Read() {
		Set pathMatches=1
		
		If (pathMatching'="") {
			If ($IsObject(pathMatching)) {
				If (pathMatching.%IsA("%Regex.Matcher")) {
					if (pathMatching.Match(reader.Path)) {
						Set pathMatches=1
					} else {
						Set pathMatches=0
					}
				}
			}
			
		}
		If (pathMatches) {
			if (reader.NodeType="element") {
				set child=..createChild(reader.Name)
				do child.readElemFromXML(.reader, pathMatching)
			} elseif (reader.NodeType="attribute") {
				set child=..createChild(reader.Name)
				do child.setValue(reader.Value)
			} elseif (reader.NodeType="chars") {
				do ..appendValue(reader.Value)
			} elseif (reader.NodeType="endelement") {
				quit
			}
		}
	}
]]></Implementation>
</Method>

<Method name="convertToObject">
<FormalSpec>className:%String</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[	Quit $CLASSMETHOD(className,"createFromDataSetNode",$this)
]]></Implementation>
</Method>

<Method name="resetChildIterator">
<Implementation><![CDATA[	Set ..currentChildIdx=""
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataCollections.dataSetTempGlobal">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.dataCollections.dataSetTempGlobal.CLS/EV.1
;vc; Component: CLS.EF.dataCollections.dataSetTempGlobal
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataCollections.dataSetTempGlobal.CLS/EV.1</td><td>CLS.EF.dataCollections.dataSetTempGlobal</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.dataCollections.dataSet</Super>
<TimeChanged>63727,59482</TimeChanged>
<TimeCreated>63208,41775.841277</TimeCreated>

<Property name="idx">
<Type>%String</Type>
</Property>

<Property name="rootNode">
<Type>dataSetNodeTempGlobal</Type>
</Property>

<Method name="%OnClose">
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	kill ^CacheTemp(..idx)
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>rootNodeName=""</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	set ..idx=$I(^CacheTemp)
	do ..createRootNode(rootNodeName)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="createRootNode">
<FormalSpec>name=""</FormalSpec>
<ReturnType>dataSetNodeTempGlobal</ReturnType>
<Implementation><![CDATA[
	set rootNode=##class(dataSetNodeTempGlobal).%New()
	set rootNode.idx="root"
	set rootNode.name=name
	set ^CacheTemp(..idx,"sfData",rootNode.idx,"name")=name
	set rootNode.dataSet=$this
	set ..rootNode=rootNode
]]></Implementation>
</Method>

<Method name="getRootNode">
<Implementation><![CDATA[	quit ..rootNode
]]></Implementation>
</Method>

<Method name="open">
<ClassMethod>1</ClassMethod>
<FormalSpec>idx</FormalSpec>
<ReturnType>dataSetTempGlobal</ReturnType>
<Implementation><![CDATA[
	set dataSet=..%New()
	set dataSet.idx=idx
	quit dataSet
]]></Implementation>
</Method>

<Method name="test">
<ClassMethod>1</ClassMethod>
<ReturnType>dataSetTempGlobal</ReturnType>
<Implementation><![CDATA[
	set dataSetTempGlobal=##class(dataSetTempGlobal).createNew()
	set rootNode=dataSetTempGlobal.rootNode
	set child=rootNode.createChild("id")
	do child.addValue("oid1")
	set owner=rootNode.createChild("owner")
	set name=owner.createChild("name")
	do name.addValue("oname1")
	set one=name.createChild("one")
	do one.addValue("a")
	set two=name.createChild("two")
	do two.addValue("b")
	set name=owner.createChild("name")
	do name.addValue("oname2")
	set one=name.createChild("one")
	do one.addValue("c")
	set two=name.createChild("two")
	do two.addValue("d")
	quit dataSetTempGlobal
]]></Implementation>
</Method>

<Method name="testCreateXMLFrom">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set dataSet=..%New("efconnector__EF_Registration__c")
	set event=dataSet.rootNode.createChild("efconnector__EF_Event_obj__r")
	do event.createChild("efconnector__EF_Event_ID__c").addValue(31)
	do event.createChild("efconnector__Contact__c").addValue("Mr Smith")
	do event.createChild("efconnector__EF_Person_ID__c").addValue(1230)
	do dataSet.getXMLStream().OutputToDevice()
	quit 
	
	/*
	set xm=xm_"<efconnector__EF_Event_Registration__c>"
	set xm=xm_"<efconnector__EF_Event__r>"
	set xm=xm_##class(sfEF.internalMethods).createXmlFragment("efconnector__Event_ID__c",eventID)  // requires the EF event to be created
	set xm=xm_"</efconnector__EF_Event__r>"
	if $L(contactID) set xm=xm_##class(sfEF.internalMethods).createXmlFragment("efconnector__Contact__c",contactID)
	if $L(leadID) set xm=xm_##class(sfEF.internalMethods).createXmlFragment("efconnector__Lead__c",leadID)
	set xm=xm_##class(sfEF.internalMethods).createXmlFragment("efconnector__EF_person_ID__c",personID)
	set xm=xm_##class(sfEF.internalMethods).createXmlFragment("efconnector__Invitation_status__c",invitationStatus)
	set xm=xm_##class(sfEF.internalMethods).createXmlFragment("efconnector__Attendee_category__c",attendeeCategory)
	set xm=xm_"</efconnector__EF_Event_Registration__c>"
	*/
]]></Implementation>
</Method>

<Method name="getXMLStream">
<FormalSpec>rootNodeName=""</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	if '$l(rootNodeName) {
		set rootNodeName=..getRootNode().name	
	}
	if '$l(rootNodeName) {
		throw ##class(shared.exceptions.generalException).%New("Root node must be named for XML")
	}
	set stream=##class(%GlobalCharacterStream).%New()
	set writer=##class(%XML.Writer).%New()
	set writer.Charset="UTF-8"
	set sta=writer.OutputToStream(stream)
	if $$$ISERR(sta) throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sta)
	set sta=writer.RootElement(rootNodeName)
	if $$$ISERR(sta) throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sta)
	do ..rootNode.addElemToXML(.writer)
	set sta=writer.EndRootElement()
	if $$$ISERR(sta) throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sta)
	quit stream
]]></Implementation>
</Method>

<Method name="getJSONStream">
<FormalSpec>rootNodeName=""</FormalSpec>
<ReturnType>%GlobalCharacterStream</ReturnType>
<Implementation><![CDATA[
	if '$l(rootNodeName) {
		set rootNodeName=..getRootNode().name	
	}
	if '$l(rootNodeName) {
		throw ##class(shared.exceptions.generalException).%New("Root node must be named for XML")
	}
	set stream=##class(%GlobalCharacterStream).%New()
	do stream.Write("[")
	
	do ..rootNode.addElemToJSON(.stream)
	
	do stream.Write("]")
	
	return stream
]]></Implementation>
</Method>

<Method name="testCreateFromXML">
<ClassMethod>1</ClassMethod>
<ReturnType>dataSet</ReturnType>
<Implementation><![CDATA[
	do ##class(sfEF.internalMethods).getHTTPrequest(.httprequest)
	
	set fullpath="/services/data/v20.0/sobjects/Lead/describe/"
	set httpstatus=httprequest.Get(fullpath)
	
	write "Logged In",!
	set dataSet=..createFromXMLStream(httprequest.HttpResponse.Data)
	quit dataSet
]]></Implementation>
</Method>

<Method name="createFromXMLStream">
<ClassMethod>1</ClassMethod>
<FormalSpec>xmlStream:%GlobalCharacterStream,pathMatching=""</FormalSpec>
<ReturnType>dataSet</ReturnType>
<Implementation><![CDATA[
	set dataSet=##class(dataSetTempGlobal).%New()
	do xmlStream.Rewind()
	do dataSet.addFromXMLStream(xmlStream,pathMatching)
	quit dataSet
]]></Implementation>
</Method>

<Method name="addFromXMLStream">
<FormalSpec>xmlStream:%GlobalCharacterStream,pathMatching=""</FormalSpec>
<Implementation><![CDATA[
	s sta=##class(%XML.TextReader).ParseStream(xmlStream,.returnData)
	if $$$ISERR(sta) throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sta)
	do ..rootNode.readElemFromXML(.returnData, pathMatching)
	quit
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataCollections.index">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.dataCollections.index.CLS/EV.0
;vc; Component: CLS.EF.dataCollections.index
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataCollections.index.CLS/EV.0</td><td>CLS.EF.dataCollections.index</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63741,46907</TimeChanged>
<TimeCreated>63741,46058.404764</TimeCreated>

<Property name="reference">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>reference</FormalSpec>
<ReturnType>EF.dataCollections.index</ReturnType>
<Implementation><![CDATA[
	set indexTempGlobal=..%New()
	set indexTempGlobal.reference=reference
	return indexTempGlobal
]]></Implementation>
</Method>

<Method name="open">
<ClassMethod>1</ClassMethod>
<FormalSpec>reference</FormalSpec>
<ReturnType>EF.dataCollections.index</ReturnType>
<Implementation><![CDATA[	throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>

<Method name="exists">
<ClassMethod>1</ClassMethod>
<FormalSpec>reference</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>

<Method name="addIndex">
<FormalSpec>name,value</FormalSpec>
<Implementation><![CDATA[	throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>

<Method name="getValue">
<FormalSpec>name</FormalSpec>
<Implementation><![CDATA[	throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>

<Method name="delete">
<Implementation><![CDATA[	throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataCollections.indexTempGlobal">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.dataCollections.indexTempGlobal.CLS/EV.0
;vc; Component: CLS.EF.dataCollections.indexTempGlobal
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataCollections.indexTempGlobal.CLS/EV.0</td><td>CLS.EF.dataCollections.indexTempGlobal</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.dataCollections.index</Super>
<TimeChanged>63741,58760</TimeChanged>
<TimeCreated>63741,46428.065529</TimeCreated>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>reference</FormalSpec>
<ReturnType>EF.dataCollections.index</ReturnType>
<Implementation><![CDATA[
	#dim indexTempGlobal As EF.dataCollections.index
	set indexTempGlobal=##super(reference)
	kill ^CacheTempIndexTempGlobal(indexTempGlobal.reference)
	set ^CacheTempIndexTempGlobal(indexTempGlobal.reference)=""
	return indexTempGlobal
]]></Implementation>
</Method>

<Method name="open">
<ClassMethod>1</ClassMethod>
<FormalSpec>reference</FormalSpec>
<ReturnType>EF.dataCollections.index</ReturnType>
<Implementation><![CDATA[
	if ..exists(reference) {
		set indexTempGlobal=..%New()
		set indexTempGlobal.reference=reference	
	} else {
		throw ##class(shared.exceptions.generalException).%New("EF.dataCollections.indexTempGlobal does not exist")
	}
	return indexTempGlobal
]]></Implementation>
</Method>

<Method name="exists">
<ClassMethod>1</ClassMethod>
<FormalSpec>reference</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if $D(^CacheTempIndexTempGlobal(reference)) {
		return 1	
	}
	return 0
]]></Implementation>
</Method>

<Method name="addIndex">
<FormalSpec>name,value</FormalSpec>
<Implementation><![CDATA[	set ^CacheTempIndexTempGlobal(..reference,name)=value
]]></Implementation>
</Method>

<Method name="getValue">
<FormalSpec>name</FormalSpec>
<Implementation><![CDATA[
	if '$D(^CacheTempIndexTempGlobal(..reference,name)) {
		throw ##class(shared.exceptions.generalException).%New("getValue - name does not exist")	
	}
	return ^CacheTempIndexTempGlobal(..reference,name)
]]></Implementation>
</Method>

<Method name="delete">
<Implementation><![CDATA[	kill ^CacheTempIndexTempGlobal(..reference)
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataCollections.serverStorageUserPage">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataCollections.serverStorageUserPage.CLS/EV.2
;vc; Component: CLS.EF.dataCollections.serverStorageUserPage
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataCollections.serverStorageUserPage.CLS/EV.2</td><td>CLS.EF.dataCollections.serverStorageUserPage</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Library.Persistent,shared.timeStamp</Super>
<TimeChanged>63809,57947</TimeChanged>
<TimeCreated>63767,40953.992982</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="key">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="value">
<Type>%String</Type>
<Parameter name="MAXLEN" value="3000000"/>
</Property>

<Property name="objPerson">
<Type>cod.objPerson</Type>
<Required>1</Required>
</Property>

<Property name="pageIdentifier">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Index name="keyIndex">
<Properties>key</Properties>
</Index>

<Index name="personIndex">
<Properties>objPerson</Properties>
</Index>

<Index name="pageIdentifierIndex">
<Properties>pageIdentifier</Properties>
</Index>

<Method name="set">
<ClassMethod>1</ClassMethod>
<FormalSpec>key,value,userID,url</FormalSpec>
<Implementation><![CDATA[
	set pageIdentifier=..getPageIdentifierFromURL(url)
	set serverStoragePage = ..openByKeyUserAndPage(key,userID,pageIdentifier)
	if '$IsObject(serverStoragePage) {
		set serverStoragePage=..createNew(key, userID, pageIdentifier)
	}
	set serverStoragePage.value = value
	do serverStoragePage.%Save()
	kill serverStoragePage
]]></Implementation>
</Method>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>key,userID,pageIdentifier</FormalSpec>
<ReturnType>EF.dataCollections.serverStorageUserPage</ReturnType>
<Implementation><![CDATA[
	
	if key="" {
		throw ##class(shared.exceptions.generalException).%New("No key passed in to server storage")	
	}	
	if userID="" {
		throw ##class(shared.exceptions.generalException).%New("No userID passed in to server storage")	
	}
	if pageIdentifier="" {
		throw ##class(shared.exceptions.generalException).%New("No pageIdentifier passed in to server storage")	
	}	
	set serverStoragePage = ..%New()
	set serverStoragePage.key = key
	do serverStoragePage.objPersonSetObjectId(userID)
	set serverStoragePage.pageIdentifier=pageIdentifier
	
	return serverStoragePage
]]></Implementation>
</Method>

<Method name="openByKeyUserAndPage">
<ClassMethod>1</ClassMethod>
<FormalSpec>key,userID,pageIdentifier</FormalSpec>
<Private>1</Private>
<ReturnType>EF.dataCollections.serverStorageUserPage</ReturnType>
<Implementation><![CDATA[
	&SQL(SELECT ID INTO :tmp FROM EF_dataCollections.serverStorageUserPage  WHERE (%SQLUPPER(key) = %SQLUPPER(:key)) AND (objPerson = :userID) AND (%SQLUPPER(pageIdentifier) = %SQLUPPER(:pageIdentifier)))
	if +SQLCODE=0 {
		set serverStoragePage = ..%OpenId(tmp)
		do serverStoragePage.%Reload()
		return serverStoragePage
	} else {
		return ""	
	}
]]></Implementation>
</Method>

<Method name="getAllKeyValuesForUserAndURL">
<ClassMethod>1</ClassMethod>
<FormalSpec>userID,url</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set pageIdentifier=..getPageIdentifierFromURL(url)
	set returnObject=##class(%ZEN.proxyObject).%New()
	set rs=##class(%ResultSet).%New("EF.dataCollections.serverStorageUserPage:qAllForUserAndPage")
	set sc = rs.Execute(userID, pageIdentifier)
	while rs.Next() {
		set $Property(returnObject,rs.Get("key")) = rs.Get("value")
	}
	return returnObject
]]></Implementation>
</Method>

<Method name="getPageIdentifierFromURL">
<ClassMethod>1</ClassMethod>
<FormalSpec>url</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return $ZCVT(##class(shared.pageMethods).getPathWithoutApplicationFromURL(url),"L")
]]></Implementation>
</Method>

<Query name="qAllForUserAndPage">
<Description>
show items that are not hidden items</Description>
<Type>%SQLQuery</Type>
<FormalSpec>userID,pageIdentifier</FormalSpec>
<SqlQuery>	SELECT key,value FROM EF_dataCollections.serverStorageUserPage
	WHERE (objPerson = :userID) AND  (%SQLUPPER(pageIdentifier) = %SQLUPPER(:pageIdentifier))</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^EF.dataCol43DC.serverStora78C2D</DataLocation>
<DefaultData>serverStorageUserPageDefaultData</DefaultData>
<IdLocation>^EF.dataCol43DC.serverStora78C2D</IdLocation>
<IndexLocation>^EF.dataCol43DC.serverStora78C2I</IndexLocation>
<StreamLocation>^EF.dataCol43DC.serverStora78C2S</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="serverStorageUserPageDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>key</Value>
</Value>
<Value name="3">
<Value>value</Value>
</Value>
<Value name="4">
<Value>objPerson</Value>
</Value>
<Value name="5">
<Value>pageIdentifier</Value>
</Value>
<Value name="6">
<Value>xCRstamp</Value>
</Value>
<Value name="7">
<Value>xCRuserID</Value>
</Value>
<Value name="8">
<Value>xMOstamp</Value>
</Value>
<Value name="9">
<Value>xMOuserID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.dataCollections.serverStorageUserPageEvent">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataCollections.serverStorageUserPageEvent.CLS/EV.1
;vc; Component: CLS.EF.dataCollections.serverStorageUserPageEvent
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataCollections.serverStorageUserPageEvent.CLS/EV.1</td><td>CLS.EF.dataCollections.serverStorageUserPageEvent</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.dataCollections.serverStorageUserPage</Super>
<TimeChanged>63834,41737</TimeChanged>
<TimeCreated>63767,40953.992982</TimeCreated>

<Property name="objEvent">
<Type>setup.objEvent</Type>
<Required>1</Required>
</Property>

<Index name="eventIndex">
<Properties>objEvent</Properties>
</Index>

<Method name="set">
<ClassMethod>1</ClassMethod>
<FormalSpec>key,value,userID,url,eventID</FormalSpec>
<Implementation><![CDATA[
	set pageIdentifier=..getPageIdentifierFromURL(url)
	set serverStoragePage = ..openByKeyUserPageAndEvent(key,userID,pageIdentifier,eventID)
	if '$IsObject(serverStoragePage) {
		set serverStoragePage=..createNew(key, userID, pageIdentifier, eventID)
	}
	set serverStoragePage.value = value
	do serverStoragePage.%Save()
	kill serverStoragePage
]]></Implementation>
</Method>

<Method name="get">
<ClassMethod>1</ClassMethod>
<FormalSpec>key,userID,url,eventID</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set pageIdentifier=..getPageIdentifierFromURL(url)
	set serverStoragePage = ..openByKeyUserPageAndEvent(key,userID,pageIdentifier,eventID)
	if $IsObject(serverStoragePage) {
		return serverStoragePage.value
	}
	return ""
]]></Implementation>
</Method>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>key,userID,pageIdentifier,eventID</FormalSpec>
<ReturnType>EF.dataCollections.serverStorageUserPage</ReturnType>
<Implementation><![CDATA[
	
	
	if 'eventID {
		throw ##class(shared.exceptions.generalException).%New("No eventID passed in to server storage")	
	}	
	set serverStoragePage = ##super(key, userID, pageIdentifier)
	do serverStoragePage.objEventSetObjectId(eventID)
	
	return serverStoragePage
]]></Implementation>
</Method>

<Method name="openByKeyUserPageAndEvent">
<ClassMethod>1</ClassMethod>
<FormalSpec>key,userID,pageIdentifier,eventID</FormalSpec>
<Private>1</Private>
<ReturnType>EF.dataCollections.serverStorageUserPage</ReturnType>
<Implementation><![CDATA[
	&SQL(SELECT ID INTO :tmp FROM EF_dataCollections.serverStorageUserPageEvent
		WHERE (%SQLUPPER(key) = %SQLUPPER(:key)) 
		AND (objPerson = :userID)
		AND (%SQLUPPER(pageIdentifier) = %SQLUPPER(:pageIdentifier))
		AND (objEvent = :eventID))
	if +SQLCODE=0 {
		set serverStoragePage = ..%OpenId(tmp)
		do serverStoragePage.%Reload()
		return serverStoragePage
	} else {
		return ""	
	}
]]></Implementation>
</Method>

<Method name="getAllKeyValuesForUserURLAndEvent">
<ClassMethod>1</ClassMethod>
<FormalSpec>userID,url,eventID</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set pageIdentifier=..getPageIdentifierFromURL(url)
	set returnObject=##class(%ZEN.proxyObject).%New()
	set rs=##class(%ResultSet).%New("EF.dataCollections.serverStorageUserPageEvent:qAllForUserPageAndEvent")
	set sc = rs.Execute(userID, pageIdentifier,eventID)
	while rs.Next() {
		set $Property(returnObject,rs.Get("key")) = rs.Get("value")
	}
	return returnObject
]]></Implementation>
</Method>

<Query name="qAllForUserPageAndEvent">
<Description>
show items that are not hidden items</Description>
<Type>%SQLQuery</Type>
<FormalSpec>userID,pageIdentifier,eventID</FormalSpec>
<SqlQuery>	SELECT key,value 
	FROM EF_dataCollections.serverStorageUserPageEvent
	WHERE (objPerson = :userID)
	AND (objEvent = :eventID)
	AND (%SQLUPPER(pageIdentifier) = %SQLUPPER(:pageIdentifier))</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>serverStorageUserPageEventDefaultData</DefaultData>
<Data name="serverStorageUserPageEventDefaultData">
<Subscript>"serverStorageUserPageEvent"</Subscript>
<Value name="1">
<Value>objEvent</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.dataSources.abstractEventList">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.abstractEventList.CLS/EV.0
;vc; Component: CLS.EF.dataSources.abstractEventList
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.abstractEventList.CLS/EV.0</td><td>CLS.EF.dataSources.abstractEventList</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.dataSources.eventList</Super>
<TimeChanged>63855,38499</TimeChanged>
<TimeCreated>63853,46675.985838</TimeCreated>

<Method name="getResultSet">
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	set rsEvents=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rsEvents.Prepare("SELECT ID FROM setup.viewAbstractEvents")
	do rsEvents.Execute()
	
	return rsEvents
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.accountSummary">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.accountSummary.CLS/EV.2
;vc; Component: CLS.EF.dataSources.accountSummary
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.accountSummary.CLS/EV.2</td><td>CLS.EF.dataSources.accountSummary</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.dataSources.dashboardSummary</Super>
<TimeChanged>63872,37185</TimeChanged>
<TimeCreated>63834,37908.805827</TimeCreated>

<Parameter name="requiresAllEventAccess">
<Default>1</Default>
</Parameter>

<Method name="populateData">
<Implementation><![CDATA[
	s start=$p($ZTS,",",2)
	do ..populateLicense()
	do ..populateAllTime()
 	do ..populateRevenue()
]]></Implementation>
</Method>

<Method name="populateLicense">
<Private>1</Private>
<Implementation><![CDATA[
	#dim currentLicense as EF.licensing.objLicense
	#dim licenseStartHoro as %Integer = 0
	#dim licenseEndHoro as %Integer = 0

	set currentLicense=##class(EF.licensing.objLicense).getCurrentLicense()
	if $IsObject(currentLicense) {
		set licenseStartHoro=$PIECE(##class(shared.dateFunctions).timestampToHorolog(currentLicense.startTimeStampUTC),",",1)
		set licenseEndHoro=$PIECE(##class(shared.dateFunctions).timestampToHorolog(currentLicense.endTimeStampUTC),",",1)
	
		do ..addSection("License")

		do ..addRow("License start",licenseStartHoro,"date")
		do ..addRow("License end",licenseEndHoro,"date")
		do ..addRow("Events in progress",##class(EF.stats.events).getEventCountForPeriod($LISTBUILD("live","notlive","archived"),currentLicense.startTimeStampUTC,currentLicense.endTimeStampUTC))
		do ..addRow("Live events",##class(EF.stats.events).getEventCountForPeriod($LISTBUILD("live"),currentLicense.startTimeStampUTC,currentLicense.endTimeStampUTC))
		do ..addRow("Archived events",##class(EF.stats.events).getEventCountForPeriod($LISTBUILD("archived"),currentLicense.startTimeStampUTC,currentLicense.endTimeStampUTC))
		do ..addRow("Registrations",##class(EF.stats.bookings).getAttendeeCountForPeriod(currentLicense.startTimeStampUTC,currentLicense.endTimeStampUTC))
		do ..addRow("Abstracts",##class(EF.stats.abstractSubmissions).getAbstractsSubmissionCountForPeriod(currentLicense.startTimeStampUTC,currentLicense.endTimeStampUTC))
		do ..addRow("Award entries",##class(EF.stats.awardEntries).getAwardsSubmissionCountForPeriod(currentLicense.startTimeStampUTC,currentLicense.endTimeStampUTC))
	}
]]></Implementation>
</Method>

<Method name="populateAllTime">
<Private>1</Private>
<Implementation><![CDATA[
	do ..addSection("All Time")
	do ..addRow("Active events",(##class(admin.dashBoard).getNotLiveEventCount() + ##class(admin.dashBoard).getLiveEventCount()))	
	do ..addRow("Archived events",##class(admin.dashBoard).getArchivedEventCount())
	do ..addRow("Registrations",##class(EF.stats.bookings).getAttendeeCount())
	do ..addRow("Abstracts",##class(EF.stats.abstractSubmissions).getAbstractsSubmissionCount())

	do ..addRow("Award entries",##class(EF.stats.awardEntries).getAwardsSubmissionCount())
	do ..addRow("People in database",##class(admin.dashBoard).getTotalPeopleCount())
]]></Implementation>
</Method>

<Method name="populateRevenue">
<Private>1</Private>
<Implementation><![CDATA[
	#dim tmpIncomeWithCurrencyCode as %String
	#dim tmpIncomeAmount as %Integer
	
	do ..addSection("Revenue")

	set rsCurrencies=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	set ok=rsCurrencies.Prepare("SELECT SUM(totalPrice) AS totalPrice,objCurrency AS currencyID,SUM(vat) AS VAT,objCurrency->code FROM eCom.objPurchase WHERE (status <> 'cancelled') GROUP BY objCurrency")
	set ok=rsCurrencies.Execute()
	while rsCurrencies.Next()	{
		set total=rsCurrencies.Get("totalPrice")
		set VAT=rsCurrencies.Get("VAT")
		set currencyID=rsCurrencies.Get("currencyID")
		do ..addRow("Total ("_rsCurrencies.Get("code")_")",$p(##class(eCom.objPrice).formatAmount(total-VAT,currencyID),".",1)_" ("_$p(##class(eCom.objPrice).formatAmount(total,currencyID),".",1)_" incl. VAT)")
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.allEvents">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.allEvents.CLS/EV.0
;vc; Component: CLS.EF.dataSources.allEvents
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.allEvents.CLS/EV.0</td><td>CLS.EF.dataSources.allEvents</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.dataSources.base</Super>
<TimeChanged>63845,55912</TimeChanged>
<TimeCreated>63845,55730.482659</TimeCreated>

<Method name="canAccess">
<ClassMethod>1</ClassMethod>
<FormalSpec>contextData:EF.contextData</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if ##class(access.lnkFunctionRole).userHasAccessToAllEvents(contextData.auditPersonID) {
		return 1	
	} else {
		return 0	
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.allRegistrationsByEvent">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.allRegistrationsByEvent.CLS/EV.0
;vc; Component: CLS.EF.dataSources.allRegistrationsByEvent
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.allRegistrationsByEvent.CLS/EV.0</td><td>CLS.EF.dataSources.allRegistrationsByEvent</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.dataSources.allEvents</Super>
<TimeChanged>63853,59264</TimeChanged>
<TimeCreated>63832,63354.248837</TimeCreated>

<Method name="populateDataSet">
<Implementation><![CDATA[
	set ..dataSet = ##class(EF.dataCollections.dataSetTempGlobal).%New("data set")

	set rsEvents=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rsEvents.Prepare("SELECT objPurchase->objEvent As eventID,COUNT(ID) as xCount FROM links.viewAttendees WHERE (objPurchase->objEvent->status = 'live') GROUP BY objPurchase->objEvent")
	do rsEvents.Execute()
	while rsEvents.Next() {
		
		set node = ..addNode(..dataSet)
		do ..addNameValuePair(node,"Event",##class(setup.objEventDetails).getDetails(rsEvents.Get("eventID"),$$$efEnglishLangID))
		do ..addNameValuePair(node,"Value",rsEvents.Get("xCount"))
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.allRegistrationsMonth">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.allRegistrationsMonth.CLS/EV.0
;vc; Component: CLS.EF.dataSources.allRegistrationsMonth
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.allRegistrationsMonth.CLS/EV.0</td><td>CLS.EF.dataSources.allRegistrationsMonth</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.dataSources.allEvents</Super>
<TimeChanged>63846,60450</TimeChanged>
<TimeCreated>63832,63354.248837</TimeCreated>

<Method name="populateDataSet">
<Implementation><![CDATA[
	#dim startTimestampUTC as %String
	#dim endTimestampUTC as %String
	#dim firstDayOfMonthHoro as %Integer
	#dim lastDayOfMonthHoro as %Integer
	
	set ..dataSet = ##class(EF.dataCollections.dataSetTempGlobal).%New("data set")

	set rsEvents=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rsEvents.Prepare("SELECT count(ID) AS xcount,YEAR(purchaseCreationTimestamp) as year,MONTH(purchaseCreationTimestamp) as month FROM links.viewAttendees GROUP BY YEAR(purchaseCreationTimestamp),MONTH(purchaseCreationTimestamp)")
	do rsEvents.Execute()
	while rsEvents.Next() {
		set firstDayOfMonthHoro = ##class(shared.dateFunctions).multiDate(rsEvents.Get("year")_"-"_rsEvents.Get("month")_"-01",$$$horologFormat)
		set lastDayOfMonthHoro = (##class(shared.dateFunctions).getNextStartOfMonth(firstDayOfMonthHoro)-1)
		
		set node = ..addNode(..dataSet)
		do ..addNameValuePair(node,"date",##class(shared.dateFunctions).multiDate(lastDayOfMonthHoro,$$$kendoDateFormat))
		do ..addNameValuePair(node,"value",rsEvents.Get("xcount"))
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.allRevenueByEvent">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.allRevenueByEvent.CLS/EV.1
;vc; Component: CLS.EF.dataSources.allRevenueByEvent
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.allRevenueByEvent.CLS/EV.1</td><td>CLS.EF.dataSources.allRevenueByEvent</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.dataSources.allEvents</Super>
<TimeChanged>63862,43306</TimeChanged>
<TimeCreated>63832,63354.248837</TimeCreated>

<Method name="populateDataSet">
<Implementation><![CDATA[
	set ..dataSet = ##class(EF.dataCollections.dataSetTempGlobal).%New("data set")
	
	if '$IsObject(..getCurrency()) return
	set rsEvents=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rsEvents.Prepare("SELECT objEvent As eventID,SUM(totalPrice - vat) as xSum FROM eCom.objPurchase WHERE (objEvent->status = 'live') GROUP BY objEvent")
	do rsEvents.Execute()
	while rsEvents.Next() {
		set node = ..addNode(..dataSet)
		do ..addNameValuePair(node,"Event",##class(setup.objEventDetails).getDetails(rsEvents.Get("eventID"),$$$efEnglishLangID))
		do ..addNameValuePair(node,"Value",rsEvents.Get("xSum"))
	}
]]></Implementation>
</Method>

<Method name="getCurrency">
<ClassMethod>1</ClassMethod>
<ReturnType>eCom.objCurrency</ReturnType>
<Implementation><![CDATA[
	#dim objCurrency As eCom.objCurrency = ""
	&SQL(SELECT COUNT(DISTINCT objCurrency),objCurrency INTO :currencyCount,:currencyID FROM eCom.viewActivePurchases WHERE (objEvent->status = 'live')  ) 
	if +SQLCODE=0 {
		if currencyCount=1 {  // do not output any data for multi currency namespaces
			set objCurrency=##class(eCom.objCurrency).%OpenId(currencyID)
			do objCurrency.%Reload()
		}
	}
	
	return objCurrency
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.allRevenueGrowth">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.allRevenueGrowth.CLS/EV.1
;vc; Component: CLS.EF.dataSources.allRevenueGrowth
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.allRevenueGrowth.CLS/EV.1</td><td>CLS.EF.dataSources.allRevenueGrowth</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.dataSources.allEvents</Super>
<TimeChanged>63873,50880</TimeChanged>
<TimeCreated>63832,63354.248837</TimeCreated>

<Method name="populateDataSet">
<Implementation><![CDATA[
	#dim startTimestampUTC as %String
	#dim firstDayOfMonthHoro as %Integer
	#dim lastDayOfMonthHoro as %Integer
	
	set ..dataSet = ##class(EF.dataCollections.dataSetTempGlobal).%New("data set")
	
	set rsEvents=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rsEvents.Prepare("SELECT SUM(totalPrice-vat) AS xSum, YEAR(xCRstamp) as year,MONTH(xCRstamp) as month FROM eCom.objInvoice WHERE (xCRstamp>=?) AND (xCRstamp<?) GROUP BY YEAR(xCRstamp),MONTH(xCRstamp)")
	set thisYearStartDate=$SYSTEM.SQL.DATEADD("mm",-11,##class(%Library.UTC).NowUTC())
	set $P(thisYearStartDate,"-",3)="01 00:00:00"
	
	do rsEvents.Execute(thisYearStartDate,##class(%Library.UTC).NowUTC())
	while rsEvents.Next() {
		set firstDayOfMonth = rsEvents.Get("year")_"-"_rsEvents.Get("month")_"-01 00:00:00"
		set lastDayOfMonth = $SYSTEM.SQL.DATEADD("mm",1,firstDayOfMonth)		
		set node = ..addNode(..dataSet)
		do ..addNameValuePair(node,"Month",$SYSTEM.SQL.MONTHNAME(firstDayOfMonth))
		
		set monthlyRevenuePreviousYear = 0
		set timeStampFrom = $SYSTEM.SQL.DATEADD("yyyy",-1,firstDayOfMonth)
		set timeStampTo = $SYSTEM.SQL.DATEADD("yyyy",-1,lastDayOfMonth)
		&SQL(SELECT SUM(totalPrice-vat) INTO :tmp FROM eCom.objPurchase WHERE (xCRstamp>=:timeStampFrom) AND (xCRstamp<:timeStampTo))
		if +SQLCODE=0 set monthlyRevenuePreviousYear = tmp
		
		do ..addNameValuePair(node,"Previous",+monthlyRevenuePreviousYear)
		do ..addNameValuePair(node,"Current",+rsEvents.Get("xSum"))
	}
]]></Implementation>
</Method>

<Method name="isCriteriaValid">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if '##super() {
		return 0	
	}
	&SQL(SELECT COUNT(DISTINCT objCurrency) INTO :tmp FROM eCom.viewActivePurchases  ) 
	if tmp>1 {
		return 0	
	}
	
	// Since this relies on the invoice table, this cannot work for any account where they can switch off credit notes
	if ##class(setup.objSetting).getParameter("invoicing","create credit notes - per event") {
		set ..errorMessage="This chart cannot be displayed because your account allows credit notes to be switched off for events"
		return 0	
	}
	if '##class(setup.objSetting).getParameter("invoicing","create credit notes - default") {
		set ..errorMessage="This chart cannot be displayed because your account is not set up to generate credit notes"
		return 0	
	}
	return 1
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.awardsEventList">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.awardsEventList.CLS/EV.0
;vc; Component: CLS.EF.dataSources.awardsEventList
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.awardsEventList.CLS/EV.0</td><td>CLS.EF.dataSources.awardsEventList</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.dataSources.eventList</Super>
<TimeChanged>63853,54050</TimeChanged>
<TimeCreated>63853,46675.985838</TimeCreated>

<Method name="getResultSet">
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	set rsEvents=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rsEvents.Prepare("SELECT ID FROM setup.viewAwardsEvents")
	do rsEvents.Execute()
	
	return rsEvents
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.base">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.base.CLS/EV.2
;vc; Component: CLS.EF.dataSources.base
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.base.CLS/EV.2</td><td>CLS.EF.dataSources.base</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<IncludeCode>EF.common.macros</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeChanged>63872,54153</TimeChanged>
<TimeCreated>63832,63199.685843</TimeCreated>

<Property name="dataSet">
<Type>EF.dataCollections.dataSet</Type>
</Property>

<Property name="ouputDateFormat">
<Type>%Integer</Type>
</Property>

<Property name="contextData">
<Type>EF.contextData</Type>
</Property>

<Property name="errorMessage">
<Type>%String</Type>
</Property>

<Parameter name="requiresAllEventAccess">
</Parameter>

<Parameter name="isForAwardsEventOnly">
<Default>0</Default>
</Parameter>

<Parameter name="isForRegistrationEventOnly">
<Default>0</Default>
</Parameter>

<Parameter name="isForSingleCurrencyEvent">
<Default>0</Default>
</Parameter>

<Method name="canAccessDataSourceType">
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String,contextData:EF.contextData</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	#dim nameOfDataSourceClass as %String = "EF.dataSources."_type
	
	if (##class(EF.utils.classes).classExists(nameOfDataSourceClass)) {
		if $ClassMethod(nameOfDataSourceClass,"canAccess",contextData) {
			return 1
		}
	}
	
	return 0
]]></Implementation>
</Method>

<Method name="getDataSource">
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String,contextData:EF.contextData</FormalSpec>
<ReturnType>EF.dataSources.base</ReturnType>
<Implementation><![CDATA[
	#dim nameOfDataSourceClass as %String = "EF.dataSources."_type
	
	if '..canAccessDataSourceType(type, contextData) {
		throw ##class(shared.exceptions.generalException).%New("User does not have access to data source")
	}
	
	set dataSource = $ClassMethod(nameOfDataSourceClass,"createNew")
	set dataSource.contextData=contextData
	
	return dataSource
]]></Implementation>
</Method>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<ReturnType>EF.dataSources.base</ReturnType>
<Implementation><![CDATA[
	set dataSource = ..%New()
	return dataSource
]]></Implementation>
</Method>

<Method name="createDataSet">
<Implementation><![CDATA[
	set ..dataSet = ##class(EF.dataCollections.dataSetTempGlobal).%New("data set")
	if '..isCriteriaValid() return
	do ..populateDataSet()
]]></Implementation>
</Method>

<Method name="populateDataSet">
<FormalSpec>eventID</FormalSpec>
<Implementation><![CDATA[	throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>

<Method name="isCriteriaValid">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	return 1
]]></Implementation>
</Method>

<Method name="addNode">
<FormalSpec>root:EF.dataCollections.dataSetNodeTempGlobal</FormalSpec>
<ReturnType>EF.dataCollections.dataSetNodeTempGlobal</ReturnType>
<Implementation><![CDATA[
	set node=root.rootNode.createChild("")
	return node
]]></Implementation>
</Method>

<Method name="addNameValuePair">
<FormalSpec>node:EF.dataCollections.dataSetNodeTempGlobal,name:%String,value:%String</FormalSpec>
<Implementation><![CDATA[
	#dim cell As EF.dataCollections.dataSetNodeTempGlobal
	
	set cell=node.createChild(name)
	do cell.addValue(##class(EF.htmlGenerator).unescapeXSSFix(value))
]]></Implementation>
</Method>

<Method name="canAccess">
<ClassMethod>1</ClassMethod>
<FormalSpec>contextData:EF.contextData</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	return 0
]]></Implementation>
</Method>

<Method name="isAuthorised">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	return ..canAccess(..contextData)
]]></Implementation>
</Method>

<Method name="outputJSON">
<Implementation><![CDATA[
	if $l(..errorMessage) {
		set errObj=##class(%ZEN.proxyObject).%New()
		set errObj.errorMessage=..errorMessage
		do ##class(shared.jsonFunctions).outputObjectAsJSON(errObj)
	} else {
		do ..dataSet.getJSONStream("data set").OutputToDevice()
	}
]]></Implementation>
</Method>

<Method name="isEventOfCorrectType">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set isAwardsEvent=##class(setup.objEvent).isAwardsEvent(eventID)

	if ..#isForAwardsEventOnly {
		if 'isAwardsEvent {
			return 0
		}
	}
	if ..#isForRegistrationEventOnly {
		if isAwardsEvent {
			return 0	
		}
	}
	
	return 1
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.dashboardSummary">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.dashboardSummary.CLS/EV.2
;vc; Component: CLS.EF.dataSources.dashboardSummary
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.dashboardSummary.CLS/EV.2</td><td>CLS.EF.dataSources.dashboardSummary</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<IncludeCode>EF.common.macros</IncludeCode>
<Super>%RegisteredObject,EF.htmlGenerator</Super>
<TimeChanged>63928,57462</TimeChanged>
<TimeCreated>63831,59865.072926</TimeCreated>

<Property name="arrayOfData">
<Type>EF.dataSources.dashboardSummaryItem</Type>
<MultiDimensional>1</MultiDimensional>
<Private>1</Private>
</Property>

<Property name="sectionCounter">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Private>1</Private>
</Property>

<Property name="contextData">
<Type>EF.contextData</Type>
</Property>

<Property name="dateFormat">
<Type>%Integer</Type>
</Property>

<Parameter name="requiresAllEventAccess">
</Parameter>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>contextData:EF.contextData</FormalSpec>
<ReturnType>EF.dataSources.dashboardSummary</ReturnType>
<Implementation><![CDATA[
	set dashboardSummary = ..%New()
	set dashboardSummary.contextData = contextData
	set dashboardSummary.dateFormat = ##class(shared.dateFunctions).getBackendOutputDateFormat()
	return dashboardSummary
]]></Implementation>
</Method>

<Method name="renderSummaryHTML">
<Implementation><![CDATA[
	#dim rowNo as %Integer = 0
	#dim sectionNo as %Integer = ""
	#dim sectionTitle as %String

	&HTML<
        <div class="row">
        	<div class="col-lg-6"> >
				for  {
					set sectionNo = $Order(..arrayOfData(sectionNo))
					if sectionNo = "" quit
					
					set sectionTitle = ..arrayOfData(sectionNo)
					&HTML<
						<DIV class="ef-section-title">#(..encodeForHTML(sectionTitle))#</DIV>
						<DL class="ef-dl-horizontal">
					>	

					set rowNo=""
					for  {
						set rowNo=$Order(..arrayOfData(sectionNo,rowNo))
						if rowNo="" quit
						
						set eventSummaryItem = ..arrayOfData(sectionNo,rowNo)
						write !,"<DT>",..encodeForHTML(eventSummaryItem.getLabel()),":</DT>"	
						write !,"<DD>",..encodeForHTML(eventSummaryItem.getDataFormattedForHTML()),"</DD>"	
					}

					&HTML<</DL>>
					if sectionNo=..getFirstSectionOfSecondColumn() {
						&HTML<</div><div class="col-lg-6">>	
					}					

				}
				&HTML<
			</div>
		</div>
	>
]]></Implementation>
</Method>

<Method name="getFirstSectionOfSecondColumn">
<Private>1</Private>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	#dim section as %String=""
	#dim item as %String=""
	#dim count as %Integer = 0
	#dim arrayOfSectionsByLastCount as %String
	
	for  {
		set section=$Order(..arrayOfData(section))
		if section="" quit
		
		for  {
			set item=$Order(..arrayOfData(section,item))
			if item="" {
				set arrayOfSectionsByLastCount(count)=section	
				quit
			}
			set count=count+1	
		}	
	}	
	set middle=count\2
	set nextSection=$Order(arrayOfSectionsByLastCount(middle))
	return arrayOfSectionsByLastCount(nextSection)
]]></Implementation>
</Method>

<Method name="addSection">
<FormalSpec>sectionTitle:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set ..sectionCounter = ..sectionCounter + 1
	set ..arrayOfData(..sectionCounter) = sectionTitle
]]></Implementation>
</Method>

<Method name="addRow">
<FormalSpec>name,value,type:%String="string"</FormalSpec>
<Private>1</Private>
<ReturnType>EF.dataSources.dashboardSummaryItem</ReturnType>
<Implementation><![CDATA[
	#dim rowNo as %Integer = ($Order(..arrayOfData(..sectionCounter,""),-1)+1)
	
	if type="datePeriod" {
		set eventSummaryItem = ##class(EF.dataSources.dashboardSummaryItemDatePeriod).createNew(name,value,..dateFormat)
	} elseif type="date" {
		set eventSummaryItem = ##class(EF.dataSources.dashboardSummaryItemDate).createNew(name,value,..dateFormat)
	} elseif type="action" {
		set eventSummaryItem = ##class(EF.dataSources.dashboardSummaryItemAction).createNew(name,value)
	} else {
		set eventSummaryItem = ##class(EF.dataSources.dashboardSummaryItem).createNew(name,value)
	}
	set ..arrayOfData(..sectionCounter,rowNo) = eventSummaryItem
	
	return eventSummaryItem
]]></Implementation>
</Method>

<Method name="canAccess">
<ClassMethod>1</ClassMethod>
<FormalSpec>contextData:EF.contextData</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if ..#requiresAllEventAccess=0 {
		return 1
	} elseif ..#requiresAllEventAccess=1 {
		if ##class(access.lnkFunctionRole).userHasAccessToAllEvents(contextData.auditPersonID) {
			return 1	
		} else {
			return 0	
		}
	} else {
		// This must be set for each sub class
		return 0
	}
]]></Implementation>
</Method>

<Method name="canAccessDataSourceType">
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String,contextData:EF.contextData</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	#dim nameOfDataSourceClass as %String = "EF.dataSources."_type
	
	If (##class(EF.utils.classes).classExists(nameOfDataSourceClass)) {
		set dataSource = $ClassMethod(nameOfDataSourceClass,"%New")
		if dataSource.canAccess(contextData) {
			return 1
		}
	}
	
	return 0
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.dashboardSummaryItem">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.dashboardSummaryItem.CLS/EV.0
;vc; Component: CLS.EF.dataSources.dashboardSummaryItem
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.dashboardSummaryItem.CLS/EV.0</td><td>CLS.EF.dataSources.dashboardSummaryItem</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<IncludeCode>EF.common.macros</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeChanged>63834,37436</TimeChanged>
<TimeCreated>63831,60047.59563</TimeCreated>

<Property name="label">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="value">
<Type>%String</Type>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>label:%String,value:%String</FormalSpec>
<ReturnType>EF.dataSources.dashboardSummaryItem</ReturnType>
<Implementation><![CDATA[
	set item = ..%New()
	set item.label = label
	set item.value = value
	return item
]]></Implementation>
</Method>

<Method name="getDataFormattedForHTML">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ..value
]]></Implementation>
</Method>

<Method name="getLabel">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ..label
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.dashboardSummaryItemAction">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.dashboardSummaryItemAction.CLS/EV.0
;vc; Component: CLS.EF.dataSources.dashboardSummaryItemAction
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.dashboardSummaryItemAction.CLS/EV.0</td><td>CLS.EF.dataSources.dashboardSummaryItemAction</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.dataSources.dashboardSummaryItem</Super>
<TimeChanged>63865,44120</TimeChanged>
<TimeCreated>63860,50007.956006</TimeCreated>

<Property name="isMandatory">
<Type>%Boolean</Type>
</Property>

<Property name="accessID">
<Type>%String</Type>
</Property>
</Class>


<Class name="EF.dataSources.dashboardSummaryItemDate">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.dashboardSummaryItemDate.CLS/EV.1
;vc; Component: CLS.EF.dataSources.dashboardSummaryItemDate
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.dashboardSummaryItemDate.CLS/EV.1</td><td>CLS.EF.dataSources.dashboardSummaryItemDate</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.dataSources.dashboardSummaryItem</Super>
<TimeChanged>63928,56722</TimeChanged>
<TimeCreated>63831,60063.047761</TimeCreated>

<Property name="dateFormat">
<Type>%Integer</Type>
<Private>1</Private>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>label:%String,value:%String,dateFormat</FormalSpec>
<ReturnType>EF.dataSources.dashboardSummaryItemDate</ReturnType>
<Implementation><![CDATA[
	set item = ##super(label,value)
	set item.dateFormat = dateFormat
	
	return item
]]></Implementation>
</Method>

<Method name="getDataFormattedForHTML">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim dateHoro as %Integer
	set dateHoro = ..value

	return ##class(shared.dateFunctions).multiDate(dateHoro,..dateFormat)
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.dashboardSummaryItemDatePeriod">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.dashboardSummaryItemDatePeriod.CLS/EV.1
;vc; Component: CLS.EF.dataSources.dashboardSummaryItemDatePeriod
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.dashboardSummaryItemDatePeriod.CLS/EV.1</td><td>CLS.EF.dataSources.dashboardSummaryItemDatePeriod</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.dataSources.dashboardSummaryItem</Super>
<TimeChanged>63928,56727</TimeChanged>
<TimeCreated>63831,60077.835211</TimeCreated>

<Property name="dateFormat">
<Type>%Integer</Type>
<Private>1</Private>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>label:%String,value:%String,dateFormat</FormalSpec>
<ReturnType>EF.dataSources.dashboardSummaryItemDatePeriod</ReturnType>
<Implementation><![CDATA[
	set item = ##super(label,value)
	set item.dateFormat = dateFormat
	
	return item
]]></Implementation>
</Method>

<Method name="getDataFormattedForHTML">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim fromDateHoro as %Integer
	#dim toDateHoro as %Integer
	#dim result as %String = ""
	
	set fromDateHoro = $ListGet(..value,1)
	set toDateHoro = $ListGet(..value,2)
	
	set result = ##class(shared.dateFunctions).multiDate(fromDateHoro,..dateFormat)
	if (toDateHoro) && (fromDateHoro '= toDateHoro) {
		set result = result_" - "_##class(shared.dateFunctions).multiDate(toDateHoro,..dateFormat)
	}
	
	return result
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.dashboardSummaryMock">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.dashboardSummaryMock.CLS/EV.0
;vc; Component: CLS.EF.dataSources.dashboardSummaryMock
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.dashboardSummaryMock.CLS/EV.0</td><td>CLS.EF.dataSources.dashboardSummaryMock</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.dataSources.dashboardSummary</Super>
<TimeChanged>63837,45867</TimeChanged>
<TimeCreated>63831,59865.072926</TimeCreated>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<ReturnType>EF.dataSources.dashboardSummaryMock</ReturnType>
<Implementation><![CDATA[
	set summaryMock = ..%New()
	return summaryMock
]]></Implementation>
</Method>

<Method name="populateData">
<Implementation><![CDATA[
	do ..addSection("All Time")
	do ..addRow("Active events",100)	
	do ..addRow("Archived events",50)
	do ..addRow("Registrations",200)
	do ..addRow("Created on",##class(shared.dateFunctions).multiDate("2015-09-01",$$$horologFormat),"date") 
	do ..addRow("Event date range",$ListBuild("24/07/2017","30/07/2017"),"datePeriod")
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.dashboardSummaryTestCase">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.dashboardSummaryTestCase.CLS/EV.1
;vc; Component: CLS.EF.dataSources.dashboardSummaryTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.dashboardSummaryTestCase.CLS/EV.1</td><td>CLS.EF.dataSources.dashboardSummaryTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<IncludeCode>EF.common.macros</IncludeCode>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63928,56968</TimeChanged>
<TimeCreated>63837,38073.41091</TimeCreated>

<Method name="Test01DashboardSummaryUK">
<Implementation><![CDATA[
	 #dim dashboardSummaryMock = ##class(EF.dataSources.dashboardSummaryMock).createNew()
	 set dashboardSummaryMock.dateFormat = $$$DDMmmYYYY // 44
	 do dashboardSummaryMock.populateData()
	 set returnedDashboardSummaryHTML=##class(EF.utils.outputRedirection).redirectMethodOutputToString(dashboardSummaryMock,"renderSummaryHTML")
	 set referenceData="<divclass=""row""><divclass=""col-lg-6""><DIVclass=""ef-section-title"">AllTime</DIV><DLclass=""ef-dl-horizontal""><DT>Activeevents:</DT><DD>100</DD><DT>Archivedevents:</DT><DD>50</DD><DT>Registrations:</DT><DD>200</DD><DT>Createdon:</DT><DD>1Sep2015</DD><DT>Eventdaterange:</DT><DD>24Jul2017-30Jul2017</DD></DL></div><divclass=""col-lg-6""></div></div>"
	 do $$$AssertEquals($ZSTRIP(returnedDashboardSummaryHTML,"*WC"),$ZSTRIP(referenceData,"*WC"))
]]></Implementation>
</Method>

<Method name="Test01DashboardSummaryUSA">
<Implementation><![CDATA[
	 #dim dashboardSummaryMock = ##class(EF.dataSources.dashboardSummaryMock).createNew()
	 set dashboardSummaryMock.dateFormat = $$$MmmDDYYYY // 39
	 do dashboardSummaryMock.populateData()
	 set returnedDashboardSummaryHTML=##class(EF.utils.outputRedirection).redirectMethodOutputToString(dashboardSummaryMock,"renderSummaryHTML")
	 set referenceData="<divclass=""row""><divclass=""col-lg-6""><DIVclass=""ef-section-title"">AllTime</DIV><DLclass=""ef-dl-horizontal""><DT>Activeevents:</DT><DD>100</DD><DT>Archivedevents:</DT><DD>50</DD><DT>Registrations:</DT><DD>200</DD><DT>Createdon:</DT><DD>Sep01,2015</DD><DT>Eventdaterange:</DT><DD>Jul24,2017-Jul30,2017</DD></DL></div><divclass=""col-lg-6""></div></div>"
	 do $$$AssertEquals($ZSTRIP(returnedDashboardSummaryHTML,"*WC"),$ZSTRIP(referenceData,"*WC"))
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.eventAbstractSubmissionsByTopic">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventAbstractSubmissionsByTopic.CLS/EV.0
;vc; Component: CLS.EF.dataSources.eventAbstractSubmissionsByTopic
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventAbstractSubmissionsByTopic.CLS/EV.0</td><td>CLS.EF.dataSources.eventAbstractSubmissionsByTopic</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.dataSources.singleEvent</Super>
<TimeChanged>63855,35153</TimeChanged>
<TimeCreated>63832,63354.248837</TimeCreated>

<Parameter name="isForRegistrationEventOnly">
<Default>1</Default>
</Parameter>

<Method name="populateDataSet">
<Implementation><![CDATA[

	set rsTopicCount = ##class(%ResultSet).%New()
	do rsTopicCount.Prepare("SELECT count(ID) AS xCount,objTopic AS topicID FROM abstract.viewSubmittedAbstracts WHERE (objTopic->objEvent = ?) GROUP BY objTopic")
	do rsTopicCount.Execute(..eventID)
	while rsTopicCount.Next() {
		set topicName = ##class(abstract.objTopicDescription).getDescription(rsTopicCount.Get("topicID"),$$$efEnglishLangID)
		
		set node=..addNode(..dataSet)
		do ..addNameValuePair(node,"Topic",topicName)
		do ..addNameValuePair(node,"Value",rsTopicCount.Get("xCount"))	
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.eventAbstractSubmissionsComparison">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventAbstractSubmissionsComparison.CLS/EV.1
;vc; Component: CLS.EF.dataSources.eventAbstractSubmissionsComparison
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventAbstractSubmissionsComparison.CLS/EV.1</td><td>CLS.EF.dataSources.eventAbstractSubmissionsComparison</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.dataSources.eventComparison</Super>
<TimeChanged>63874,36785</TimeChanged>
<TimeCreated>63832,63354.248837</TimeCreated>

<Parameter name="isForAwardsEventOnly">
<Default>0</Default>
</Parameter>

<Query name="mainQuery">
<Type>%SQLQuery</Type>
<FormalSpec>eventID:%String</FormalSpec>
<SqlQuery><![CDATA[	SELECT count(ID) AS xCount,
		{fn CONVERT(xCRstamp,SQL_DATE)} AS xDate
	FROM abstract.viewSubmittedAbstracts 
	WHERE (objTopic->objEvent = :eventID)
	GROUP BY {fn CONVERT(xCRstamp,SQL_DATE)}]]></SqlQuery>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="xCount:%String,xDate:%Integer"/>
</Query>
</Class>


<Class name="EF.dataSources.eventAbstractSubmissionsOverTime">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventAbstractSubmissionsOverTime.CLS/EV.3
;vc; Component: CLS.EF.dataSources.eventAbstractSubmissionsOverTime
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventAbstractSubmissionsOverTime.CLS/EV.3</td><td>CLS.EF.dataSources.eventAbstractSubmissionsOverTime</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.dataSources.singleEventOverTime</Super>
<TimeChanged>63873,55708</TimeChanged>
<TimeCreated>63832,63354.248837</TimeCreated>

<Parameter name="isForRegistrationEventOnly">
<Default>1</Default>
</Parameter>

<Query name="mainQuery">
<Type>%SQLQuery</Type>
<FormalSpec>eventID:%String</FormalSpec>
<SqlQuery><![CDATA[	SELECT count(ID) AS xCount,{fn CONVERT(xCRstamp,SQL_DATE)} as xDate
	FROM abstract.viewSubmittedAbstracts WHERE (objTopic->objEvent = :eventID) 
	GROUP BY {fn CONVERT(xCRstamp,SQL_DATE)}]]></SqlQuery>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="xCount:%String,xDate:%TimeStamp"/>
</Query>
</Class>


<Class name="EF.dataSources.eventActionSummary">
<Description><![CDATA[
Displayes the action list for the current event
<!-- ;vc;
;vc;    Object: EF.dataSources.eventActionSummary.CLS/EV.1
;vc; Component: CLS.EF.dataSources.eventActionSummary
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventActionSummary.CLS/EV.1</td><td>CLS.EF.dataSources.eventActionSummary</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.dataSources.dashboardSummary</Super>
<TimeChanged>63872,43326</TimeChanged>
<TimeCreated>63855,56814.096703</TimeCreated>

<Property name="objEvent">
<Type>setup.objEvent</Type>
<Private>1</Private>
</Property>

<Property name="userID">
<Type>%Integer</Type>
<Private>1</Private>
</Property>

<Parameter name="requiresAllEventAccess">
<Default>0</Default>
</Parameter>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>contextData:EF.contextData</FormalSpec>
<ReturnType>EF.dataSources.eventSummary</ReturnType>
<Implementation><![CDATA[
	set eventSummary = ##super(contextData)
	set eventSummary.objEvent = ##class(setup.objEvent).%OpenId(contextData.eventID)
	do eventSummary.objEvent.%Reload()
	set eventSummary.userID = contextData.auditPersonID
	return eventSummary
]]></Implementation>
</Method>

<Method name="populateData">
<Implementation><![CDATA[
	set eventID=..objEvent.%Id() 
	set wizardID=##class(eventWizard.objWizard).getWizardForEvent(eventID)
	if 'wizardID quit
	set actionTotal=0
	&SQL(SELECT COUNT(ID) INTO :tmp
		FROM eventWizard.lnkWizardAction
		WHERE objWizard = :wizardID
	)
	if +SQLCODE=0 {
		set actionTotal=tmp
	}
	
	set comments="",description="None"
	&SQL(SELECT comments,description INTO :tmp,:tmp2
		FROM eventWizard.objWizard
		WHERE ID = :wizardID
	)
	if +SQLCODE=0 {
		set comments=tmp,description=tmp2
	}
	set showAll=%request.Get("actionListStatusDisp")="all"
	
	set actionCount=0
	set hasMandatory=0
	do ..addSection("")
	
	set rsWizActions=##class(%ResultSet).%New("eventWizard.objWizard:qAllWizardActions")
	do rsWizActions.Execute(wizardID)
	while rsWizActions.Next() {
		set actionCount=actionCount+1
		set actionID=rsWizActions.Get("objAction")
		set isMandatory=rsWizActions.Get("isMandatory")
		if isMandatory set hasMandatory=1
		set comments=rsWizActions.Get("comments")
		
		set notes=""
		set status="not started"
		&SQL(SELECT status,notes INTO :tmp,:tmp2
			FROM eventWizard.lnkActionEvent
			WHERE objEvent = :eventID
			AND objAction = :actionID
		)
		if +SQLCODE=0 {
			set status=$ZCVT(tmp,"L"),notes=tmp2
		}
		set description=rsWizActions.Get("description")
		set summaryItem=..addRow(description,status,"action")
		set summaryItem.isMandatory = isMandatory
		set summaryItem.accessID = rsWizActions.Get("accessID")	
	}
]]></Implementation>
</Method>

<Method name="renderSummaryHTML">
<Implementation><![CDATA[
	#dim rowNo as %Integer = 0
	#dim sectionNo as %Integer = ""
	#dim sectionTitle as %String
	
	if $Data(..arrayOfData)>1 {
		&HTML<
	        <div class="row">
	        	<div class="col-lg-12"> >
					for  {
						set sectionNo = $Order(..arrayOfData(sectionNo))
						if sectionNo = "" quit
						
						set sectionTitle = ..arrayOfData(sectionNo)
						&HTML< <UL class="list-unstyled"> >	

						set rowNo=""
						for  {
							set rowNo=$Order(..arrayOfData(sectionNo,rowNo))
							if rowNo="" quit
							
							set eventSummaryItem = ..arrayOfData(sectionNo,rowNo)
							set status = eventSummaryItem.value
							set iconClass = $Case(status,
												"not started":"fa fa-circle-thin ef-error-icon",
												"in progress":"fa fa-circle ef-warning-icon",
												"completed":"fa fa-check-circle ef-success-icon",
												:""
											)
							set iconTitle = $Case(status,
												"not started":"Not Started",
												"in progress":"In Progress",
												"completed":"Completed",
												:""
											)						write !,"<LI>"
							write "<I class='",..encodeForHTMLAttribute(iconClass)," aria-hidden='true' title='",..encodeForHTMLAttribute(iconTitle),"'></I> "
							
							if eventSummaryItem.accessID="" {
								write ..encodeForHTML(eventSummaryItem.getLabel())
							} else {
								set targetPage = ##class(setup.backendMenu).getURLFromAccessID(..objEvent.%Id(),..userID,eventSummaryItem.accessID)
								set URL=..linkURL("../../backend/home/backendMenuRedirect.csp?URL="_targetPage)
								
								write "<a href='",..encodeForHTMLAttribute(URL),"'>",..encodeForHTML(eventSummaryItem.getLabel()),"</a>"	
							}
							
							if ((eventSummaryItem.isMandatory) && (status '= "completed")) {
								write " <i class='fa fa-exclamation-triangle ef-warning-icon' aria-hidden='true' title='Should be completed before the event goes live'></i>"	
							}
							write "</LI>"	
						}

						&HTML< </UL> >
					}
					&HTML<
					
				</div>
			</div>
		>
	} else {
		&HTML<
			<div class="row">
				<div class='ef-chart-no-records-message'>No actions to show</div>	
			</div>
		>
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.eventAttendeeCategories">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventAttendeeCategories.CLS/EV.1
;vc; Component: CLS.EF.dataSources.eventAttendeeCategories
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventAttendeeCategories.CLS/EV.1</td><td>CLS.EF.dataSources.eventAttendeeCategories</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.dataSources.singleEvent</Super>
<TimeChanged>63859,62184</TimeChanged>
<TimeCreated>63834,29948.885756</TimeCreated>

<Parameter name="isForRegistrationEventOnly">
<Default>1</Default>
</Parameter>

<Method name="populateDataSet">
<Implementation><![CDATA[
	
	set rsCats=##class(%ResultSet).%New("links.lnkPersonPurchase:qCountPerAttendeeCategory")
	do rsCats.Execute(..eventID)
	while rsCats.Next() {
		set attCount=rsCats.Get("attCount")
		if attCount {
			set categoryID=rsCats.Get("objEventCategory")
			set node=..addNode(..dataSet)
			do ..addNameValuePair(node,"category",##class(setup.objEventCategory).getDescription(categoryID,1))
			do ..addNameValuePair(node,"value",attCount)
		}
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.eventAwardEntriesByCategory">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventAwardEntriesByCategory.CLS/EV.1
;vc; Component: CLS.EF.dataSources.eventAwardEntriesByCategory
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventAwardEntriesByCategory.CLS/EV.1</td><td>CLS.EF.dataSources.eventAwardEntriesByCategory</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.dataSources.singleEvent</Super>
<TimeChanged>63855,36163</TimeChanged>
<TimeCreated>63832,63354.248837</TimeCreated>

<Parameter name="isForAwardsEventOnly">
<Default>1</Default>
</Parameter>

<Method name="populateDataSet">
<Implementation><![CDATA[
	set rsCategoryCount = ##class(%ResultSet).%New()
	do rsCategoryCount.Prepare("SELECT count(ID) AS xCount,objCategory AS categoryID FROM awards.viewSubmittedAwards WHERE (objCategory->objEvent = ?) GROUP BY objCategory")
	do rsCategoryCount.Execute(..eventID)
	while rsCategoryCount.Next() {
		set categoryName = ##class(awards.objCategory).getDescriptionFromID(rsCategoryCount.Get("categoryID"))
		
		set node=..addNode(..dataSet)
		do ..addNameValuePair(node,"Category",categoryName)
		do ..addNameValuePair(node,"Value",rsCategoryCount.Get("xCount"))	
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.eventAwardEntriesComparison">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventAwardEntriesComparison.CLS/EV.1
;vc; Component: CLS.EF.dataSources.eventAwardEntriesComparison
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventAwardEntriesComparison.CLS/EV.1</td><td>CLS.EF.dataSources.eventAwardEntriesComparison</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.dataSources.eventComparison</Super>
<TimeChanged>63874,39378</TimeChanged>
<TimeCreated>63832,63354.248837</TimeCreated>

<Parameter name="isForAwardsEventOnly">
<Default>1</Default>
</Parameter>

<Query name="mainQuery">
<Type>%SQLQuery</Type>
<FormalSpec>eventID:%String</FormalSpec>
<SqlQuery><![CDATA[	SELECT count(ID) AS xCount
 			,{fn CONVERT(awards.objItemData_get(ID,'Award Submission Date'),SQL_DATE)} As xDate
	FROM awards.viewSubmittedAwards 
	WHERE (objCategory->objEvent = :eventID)
	GROUP BY {fn CONVERT(awards.objItemData_get(ID,'Award Submission Date'),SQL_DATE)}]]></SqlQuery>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="xCount:%String,xDate:%Integer"/>
</Query>
</Class>


<Class name="EF.dataSources.eventAwardEntriesOverTime">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventAwardEntriesOverTime.CLS/EV.2
;vc; Component: CLS.EF.dataSources.eventAwardEntriesOverTime
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventAwardEntriesOverTime.CLS/EV.2</td><td>CLS.EF.dataSources.eventAwardEntriesOverTime</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.dataSources.singleEventOverTime</Super>
<TimeChanged>63854,59315</TimeChanged>
<TimeCreated>63832,63354.248837</TimeCreated>

<Parameter name="isForAwardsEventOnly">
<Default>1</Default>
</Parameter>

<Query name="mainQuery">
<Type>%SQLQuery</Type>
<FormalSpec>eventID:%String</FormalSpec>
<SqlQuery><![CDATA[	SELECT count(ID) AS xCount,{fn CONVERT(awards.objItemData_get(ID,'Award Submission Date'),SQL_DATE)} AS xDate 
	FROM awards.viewSubmittedAwards WHERE (objCategory->objEvent = :eventID) 
	GROUP BY {fn CONVERT(awards.objItemData_get(ID,'Award Submission Date'),SQL_DATE)}]]></SqlQuery>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="xCount:%String,xDate:%TimeStamp"/>
</Query>
</Class>


<Class name="EF.dataSources.eventCapacity">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventCapacity.CLS/EV.3
;vc; Component: CLS.EF.dataSources.eventCapacity
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventCapacity.CLS/EV.3</td><td>CLS.EF.dataSources.eventCapacity</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.dataSources.singleEvent</Super>
<TimeChanged>64120,42559</TimeChanged>
<TimeCreated>63832,63354.248837</TimeCreated>

<Method name="populateDataSet">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[

	set objEvent=##class(setup.objEvent).%OpenId(..eventID)
	set controllerID = ##class(setup.objEvent).getControllerID(..eventID)
	
	// day capacity
	for dayNumber = 1:1:(objEvent.dateTo-objEvent.dateFrom+1) {
		set dayItemID=##class(setup.objItem).getDayItemID(..eventID,dayNumber)
		
		set description = ##class(setup.objItem).getDayDescription(..eventID,dayNumber,$$$efEnglishLangID)
		set used=##class(setup.itemBackendMethods).getBookingLevel(dayItemID)
		set objItem = ##class(setup.objItem).%OpenId(dayItemID)
		set remaining = objItem.capacity-used
		
		if objItem.capacity {
			do ..outputColumn(description,used,remaining)
		}
		kill objItem
	}
	
	// session capacity
	set rsSession=##class(%ResultSet).%New("setup.objItem:qSessionsForEventOrdered")
	do rsSession.Execute(..eventID,$$$efEnglishLangID)
	while rsSession.Next() {
		set sessionItemID = rsSession.Get("ID")
		
		set description = ##class(setup.objItemDetails).getDetails(sessionItemID,$$$efEnglishLangID)
		set used=##class(setup.itemBackendMethods).getBookingLevel(sessionItemID)
		set objItem = ##class(setup.objItem).%OpenId(sessionItemID)
		set remaining = objItem.capacity-used
		
		if objItem.capacity {
			do ..outputColumn(description,used,remaining)
		}
		kill objItem
	}

	// ABI capacity
	set rsABI=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rsABI.Prepare("SELECT ae.ID AS extrasID FROM cod.objAlternativeExtras AS ae JOIN eCom.objBasketItem AS bi ON (ae.basketItemID = bi.ID) WHERE (capacity>0) AND (bi.objEvent = ?) ORDER BY objItemAlternative->description")
	do rsABI.Execute(..eventID)
	while rsABI.Next() {
		set abiItemID = rsABI.Get("extrasID")
		set objItem = ##class(cod.objAlternativeExtras).%OpenId(abiItemID)

		set description = objItem.getDatabaseNameAndAlternative()
		set tmp=##class(cod.objAlternativeExtras).currentBookingLevel(controllerID,abiItemID,1,1)
		set used=$P(tmp,"/",1)
		
		set remaining = objItem.capacity-used
		
		if objItem.capacity {
			do ..outputColumn(description,used,remaining)
		}
		kill objItem
	}
]]></Implementation>
</Method>

<Method name="outputColumn">
<FormalSpec>description,used,remaining</FormalSpec>
<Implementation><![CDATA[
	set node=..addNode(..dataSet)
	do ..addNameValuePair(node,"name",description)
	do ..addNameValuePair(node,"used",used)
	do ..addNameValuePair(node,"remaining",remaining)
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.eventComparison">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventComparison.CLS/EV.1
;vc; Component: CLS.EF.dataSources.eventComparison
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventComparison.CLS/EV.1</td><td>CLS.EF.dataSources.eventComparison</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.dataSources.base</Super>
<TimeChanged>63874,54288</TimeChanged>
<TimeCreated>63845,55521.339657</TimeCreated>

<Property name="eventID">
<Type>%Integer</Type>
</Property>

<Property name="comparisonEventID">
<Type>%Integer</Type>
</Property>

<Method name="canAccess">
<ClassMethod>1</ClassMethod>
<FormalSpec>contextData:EF.contextData</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	return 1
]]></Implementation>
</Method>

<Method name="isAuthorised">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set isAuthorised=##super()
	
	if '##class(links.lnkAccessPersonEvent).hasEvent(..contextData.auditPersonID,..eventID) {
		set isAuthorised=0	
	}
	
	if '##class(links.lnkAccessPersonEvent).hasEvent(..contextData.auditPersonID,..comparisonEventID) {
		set isAuthorised=0	
	}
	
	return isAuthorised
]]></Implementation>
</Method>

<Method name="isCriteriaValid">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if ..#isForSingleCurrencyEvent {
		set thisEvent = ##class(setup.objEvent).%OpenId(..eventID)
		set compareToEvent = ##class(setup.objEvent).%OpenId(..getComparisonEventID())
		if (thisEvent.hasMultiCurrencyPurchases()) ! (compareToEvent.hasMultiCurrencyPurchases()) {
			return 0	
		}
	}	
	return ..isEventOfCorrectType(..eventID)
]]></Implementation>
</Method>

<Method name="getComparisonEventID">
<Implementation><![CDATA[
	
	if '..comparisonEventID {
		return ..eventID	
	}
	if '..isEventOfCorrectType(..comparisonEventID) {
		return ..eventID
	} 
	
	return ..comparisonEventID
]]></Implementation>
</Method>

<Method name="populateDataSet">
<Implementation><![CDATA[
	#dim eventData as EF.dataSources.utils.eventDatesForChart
	#dim rollingTotal as %Integer
	#dim countOfLiveRegsOnThisDate as %Integer = 0
	#dim countOfLiveRegsOnThisDateCompare as %Integer = 0
	#dim cancelsToDate as %Integer = 0
	#dim regsToDate as %Integer = 0
	#dim compareToEventID as %Integer = ..getComparisonEventID()
	#dim firstDay as %Integer = ""
	#dim lastDay as %Integer = ""
	
	for eventID=..eventID,compareToEventID {
		set eventData =  ##class(EF.dataSources.utils.eventDatesForChart).createNew(eventID)
		for queryName="mainQuery","secondaryQuery" {
			set rollingTotal = 0
			set rs = ##class(%ResultSet).%New($CLASSNAME()_":"_queryName) 
			do rs.Execute(eventID)
			while rs.Next() {
				set rollingTotal = rollingTotal + rs.Get("xCount")
				set daysBeforeEvent = rs.Get("xDate")-eventData.eventStartDateHoro
				set comparisonData(queryName, eventID, daysBeforeEvent) = rollingTotal
				set days(daysBeforeEvent)=""
				set daysForEvent(eventID,daysBeforeEvent)=""
			}
		}
		kill eventData
	}
	
	set firstDay=$O(days(""))-1
	set lastDay=$O(days(""),-1)
		
	for dayNumber = firstDay:1:lastDay {
		set node=..addNode(..dataSet)
		do ..addNameValuePair(node,"daysBeforeEvent",-dayNumber)
		for eventID=..eventID,compareToEventID {
			set firstDayForEvent=$O(daysForEvent(eventID,""))-1
			set lastDayForEvent=$O(daysForEvent(eventID,""),-1)
			if (dayNumber >= firstDayForEvent) && (dayNumber <= lastDayForEvent) {
				set dailyCount=0
				set queryName=""
				for  {
					set queryName=$Order(comparisonData(queryName))
					if queryName="" quit
					set prevDat = $Order(comparisonData(queryName,eventID,dayNumber+1),-1)
					if $l(prevDat) {
						set dailyCount = dailyCount + comparisonData(queryName,eventID,prevDat)
					}
				}
				if eventID=..eventID {
					do ..addNameValuePair(node,"thisEvent",dailyCount)
				} else {
					do ..addNameValuePair(node,"comparisonEvent",dailyCount)	
				}	
			}
		
		}		
	}
]]></Implementation>
</Method>

<Query name="secondaryQuery">
<Description>
Dummy query that should never return any data, needed because we always run the seondary query.</Description>
<Type>%SQLQuery</Type>
<FormalSpec>eventID:%String</FormalSpec>
<SqlQuery>	SELECT -count(ID) AS xCount,{fn CONVERT(xMOstamp, SQL_DATE) } AS xDate 
		FROM setup.objEvent
		WHERE 0 = 1</SqlQuery>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="xCount:%String,xDate:%Integer"/>
</Query>
</Class>


<Class name="EF.dataSources.eventEmailOpens">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventEmailOpens.CLS/EV.0
;vc; Component: CLS.EF.dataSources.eventEmailOpens
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventEmailOpens.CLS/EV.0</td><td>CLS.EF.dataSources.eventEmailOpens</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.dataSources.singleEvent</Super>
<TimeChanged>63855,45164</TimeChanged>
<TimeCreated>63832,63354.248837</TimeCreated>

<Method name="populateDataSet">
<Implementation><![CDATA[

	set eventID = ..eventID
	
	&SQL(SELECT COUNT(*) INTO :unOpenedCount FROM mail.viewAllEmails WHERE (eventID = :eventID) AND (openingTimeStamp IS NULL))
	if +SQLCODE=0 {
		&SQL(SELECT COUNT(*) INTO :openedCount FROM mail.viewAllEmails WHERE (eventID = :eventID) AND (NOT openingTimeStamp IS NULL))
		if +SQLCODE=0 {
			if (unOpenedCount) ! (openedCount) {
				set node=..addNode(..dataSet)
				do ..addNameValuePair(node,"Category","Opened")
				do ..addNameValuePair(node,"Value",openedCount)
				
				set node=..addNode(..dataSet)
				do ..addNameValuePair(node,"Category","Unopened")
				do ..addNameValuePair(node,"Value",unOpenedCount)
			}
		}
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.eventInvitationStatus">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventInvitationStatus.CLS/EV.1
;vc; Component: CLS.EF.dataSources.eventInvitationStatus
;vc;  Location: SmallDev
;vc; Date/Time: 16-Mar-16 16:52
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventInvitationStatus.CLS/EV.1</td><td>CLS.EF.dataSources.eventInvitationStatus</td><td>SmallDev</td><td style='white-space: nowrap;'>16-Mar-16 16:52</td><td>RajibQ</td></tr></table>
]]></Description>
<Super>EF.dataSources.singleEvent</Super>
<TimeChanged>63993,61181.854907</TimeChanged>
<TimeCreated>63834,29948.885756</TimeCreated>

<Method name="populateDataSet">
<Implementation><![CDATA[
	set rsInvitations=##class(%ResultSet).%New("setup.objPreRegister:qInvitationStatusCounts")
	do rsInvitations.Prepare()
	do rsInvitations.Execute(..eventID)
	while rsInvitations.Next() {
		set attCount=rsInvitations.Get("xCount")
		set node=..addNode(..dataSet)
		do ..addNameValuePair(node,"Status",rsInvitations.Get("invitationStatus"))
		do ..addNameValuePair(node,"Value",attCount)
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.eventList">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventList.CLS/EV.1
;vc; Component: CLS.EF.dataSources.eventList
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventList.CLS/EV.1</td><td>CLS.EF.dataSources.eventList</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.dataSources.allEvents</Super>
<TimeChanged>63853,46840</TimeChanged>
<TimeCreated>63834,29948.885756</TimeCreated>

<Method name="populateDataSet">
<Implementation><![CDATA[
	set ..dataSet = ##class(EF.dataCollections.dataSetTempGlobal).%New("data set")
	
	set rs=..getResultSet()
	
	while rs.Next() {
		set eventID=rs.Get("ID")
		if ##class(links.lnkAccessPersonEvent).hasEvent(..contextData.auditPersonID,eventID) {
			set eventName=##class(setup.objEventDetails).getDetails(eventID,1)
			set node=..addNode(..dataSet)
			do ..addNameValuePair(node,"id",eventID)
			do ..addNameValuePair(node,"name",eventName)
			do ..addNameValuePair(node,"idAndName",eventID_" "_eventName)
		}
	}
]]></Implementation>
</Method>

<Method name="getResultSet">
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	set rsEvents=##class(%ResultSet).%New("setup.objEvent:qAllEvents")
	do rsEvents.Execute(1)
	
	return rsEvents
]]></Implementation>
</Method>

<Method name="canAccess">
<ClassMethod>1</ClassMethod>
<FormalSpec>contextData:EF.contextData</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	/// Anyone can access but the will only get the events they have access to
	return 1
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.eventRegistrationsComparison">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventRegistrationsComparison.CLS/EV.1
;vc; Component: CLS.EF.dataSources.eventRegistrationsComparison
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventRegistrationsComparison.CLS/EV.1</td><td>CLS.EF.dataSources.eventRegistrationsComparison</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.dataSources.eventComparison</Super>
<TimeChanged>63874,40014</TimeChanged>
<TimeCreated>63832,63354.248837</TimeCreated>

<Parameter name="isForRegistrationEventOnly">
<Default>1</Default>
</Parameter>

<Query name="mainQuery">
<Type>%SQLQuery</Type>
<FormalSpec>eventID:%String</FormalSpec>
<SqlQuery><![CDATA[	SELECT count(ID) AS xCount,{fn CONVERT(objPurchase->xCRstamp,SQL_DATE)} AS xDate 
	FROM links.lnkPersonPurchase 
	WHERE (objPurchase->objEvent = :eventID) 
	AND ((personType='delegate') OR (personType='cancelledDelegate')) 
	GROUP BY {fn CONVERT(objPurchase->xCRstamp,SQL_DATE)}]]></SqlQuery>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="xCount:%String,xDate:%Integer"/>
</Query>

<Query name="secondaryQuery">
<Type>%SQLQuery</Type>
<FormalSpec>eventID:%String</FormalSpec>
<SqlQuery><![CDATA[	SELECT -count(ID) AS xCount,{fn CONVERT(objPurchase->xMOstamp, SQL_DATE) } AS xDate 
	FROM links.lnkPersonPurchase 
	WHERE (objPurchase->objEvent = :eventID) AND (personType='cancelledDelegate')
	GROUP BY {fn CONVERT(objPurchase->xMOstamp,SQL_DATE)}]]></SqlQuery>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="xCount:%String,xDate:%Integer"/>
</Query>
</Class>


<Class name="EF.dataSources.eventRegistrationsMonth">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventRegistrationsMonth.CLS/EV.3
;vc; Component: CLS.EF.dataSources.eventRegistrationsMonth
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventRegistrationsMonth.CLS/EV.3</td><td>CLS.EF.dataSources.eventRegistrationsMonth</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.dataSources.singleEvent</Super>
<TimeChanged>63872,56923</TimeChanged>
<TimeCreated>63832,63354.248837</TimeCreated>

<Parameter name="isForRegistrationEventOnly">
<Default>1</Default>
</Parameter>

<Method name="populateDataSet">
<Implementation><![CDATA[
	#dim objEvent as setup.objEvent
	#dim startTimestampUTC as %String
	#dim endTimestampUTC as %String
	#dim loopingDateHoro as %Integer
	#dim eventDatesForChart As EF.dataSources.utils.eventDatesForChart
	
	set objEvent=##class(setup.objEvent).%OpenId(..eventID)
	
	set eventDatesForChart=##class(EF.dataSources.utils.eventDatesForChart).createNew(..eventID)
	if 'eventDatesForChart.firstRegistrationDateHoro {
		quit	
	}
	set loopingDateHoro=##class(shared.dateFunctions).getMonthStartForDate(eventDatesForChart.firstRegistrationDateHoro) //start from the 1st of the month of the first registration.
	while (loopingDateHoro<=eventDatesForChart.lastModificationDateHoro) {
		set node=..addNode(..dataSet)
		do ..addNameValuePair(node,"date",##class(shared.dateFunctions).multiDate(loopingDateHoro,$$$kendoDateFormat))
		
		set startTimestampUTC = ##class(shared.dateFunctions).getStartOfDayTimestamp(loopingDateHoro)
		set loopingDateHoro = ##class(shared.dateFunctions).getNextStartOfMonth(loopingDateHoro)-1 //last day of this month.
		set endTimestampUTC =  ##class(shared.dateFunctions).getEndOfDayTimestamp(loopingDateHoro)
		do ..addNameValuePair(node,"value",objEvent.getCountOfNewAttendeesForPeriod(startTimestampUTC,endTimestampUTC))
		
		set loopingDateHoro = loopingDateHoro+1 //first day of next month.
		
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.eventRegistrationsTotal">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventRegistrationsTotal.CLS/EV.4
;vc; Component: CLS.EF.dataSources.eventRegistrationsTotal
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventRegistrationsTotal.CLS/EV.4</td><td>CLS.EF.dataSources.eventRegistrationsTotal</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.dataSources.singleEventOverTime</Super>
<TimeChanged>63873,53366</TimeChanged>
<TimeCreated>63832,63354.248837</TimeCreated>

<Parameter name="isForRegistrationEventOnly">
<Default>1</Default>
</Parameter>

<Method name="populateDataSet">
<Implementation><![CDATA[
	#dim eventData as EF.dataSources.utils.eventDatesForChart
	#dim isFirstIteration as %Boolean = 1
	#dim previousDateHoro as %Integer = 0
	#dim rollingTotal as %Integer = 0
	#dim countOfLiveRegsOnThisDate as %Integer = 0
	#dim cancelsToDate as %Integer = 0
	
	set rsRegs = ##class(%ResultSet).%New() 
	do rsRegs.Prepare("SELECT count(ID) AS xCount,{fn CONVERT(objPurchase->xCRstamp,SQL_DATE)} AS xDate FROM links.lnkPersonPurchase WHERE (objPurchase->objEvent = ?) AND ((personType='delegate') OR (personType='cancelledDelegate')) GROUP BY {fn CONVERT(objPurchase->xCRstamp,SQL_DATE)}")
	do rsRegs.Execute(..eventID)
	while rsRegs.Next() {
		set rollingTotal = rollingTotal + rsRegs.Get("xCount")
		set arrayOfRegs(rsRegs.Get("xDate")) = rollingTotal
	}
	
	set rollingTotal = 0
	set rsCancels = ##class(%ResultSet).%New()
	do rsCancels.Prepare("SELECT count(ID) AS xCount,{fn CONVERT(objPurchase->xMOstamp,SQL_DATE)} AS xDate FROM links.lnkPersonPurchase WHERE (objPurchase->objEvent = ?) AND (personType='cancelledDelegate') GROUP BY {fn CONVERT(objPurchase->xMOstamp,SQL_DATE)}")
	do rsCancels.Execute(..eventID)
	while rsCancels.Next() {
		set rollingTotal = rollingTotal + rsCancels.Get("xCount")
		set arrayOfCancels(rsCancels.Get("xDate")) = rollingTotal	
	}
	
	set firstDate = $Order(arrayOfRegs(""))
	if 'firstDate {
		quit  // no data
	}
	set lastDate = $Order(arrayOfRegs(""),-1)
	if $Order(arrayOfCancels(""),-1) > lastDate {
		 set lastDate = $Order(arrayOfCancels(""),-1)
	}
	if lastDate<+$H {
		set eventData =  ##class(EF.dataSources.utils.eventDatesForChart).createNew(..eventID)
		set lastDate = eventData.endOfChartDate
	}

	for dateHoro = firstDate:1:lastDate {
		if isFirstIteration {
			set node=..addNode(..dataSet)
			do ..addNameValuePair(node,"date",##class(shared.dateFunctions).multiDate(dateHoro-1,$$$kendoDateFormat))
			do ..addNameValuePair(node,"value",0)
			set isFirstIteration=0			
		}		
		
		// pad out with data point for the missing dates
		if (dateHoro-previousDateHoro'=1) && (previousDateHoro'=0) {
			for tempDateHoro=(previousDateHoro+1):1:(dateHoro-1) {
				set node=..addNode(..dataSet)
				do ..addNameValuePair(node,"date",##class(shared.dateFunctions).multiDate(tempDateHoro,$$$kendoDateFormat))					
				do ..addNameValuePair(node,"value",countOfLiveRegsOnThisDate)
			}
		}
		
		set node=..addNode(..dataSet)
		do ..addNameValuePair(node,"date",##class(shared.dateFunctions).multiDate(dateHoro,$$$kendoDateFormat))
		
		set (regsToDate,cancelsToDate)=0
		set prevDat = $Order(arrayOfRegs(dateHoro+1),-1)
		if prevDat set regsToDate = arrayOfRegs(prevDat)
		set prevDat = $Order(arrayOfCancels(dateHoro+1),-1)
		if prevDat set cancelsToDate = arrayOfCancels(prevDat)
	
		set countOfLiveRegsOnThisDate = regsToDate - cancelsToDate
		do ..addNameValuePair(node,"value",countOfLiveRegsOnThisDate)	
		
		set previousDateHoro = dateHoro
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.eventRegistrationsWeek">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventRegistrationsWeek.CLS/EV.4
;vc; Component: CLS.EF.dataSources.eventRegistrationsWeek
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventRegistrationsWeek.CLS/EV.4</td><td>CLS.EF.dataSources.eventRegistrationsWeek</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.dataSources.singleEvent</Super>
<TimeChanged>63872,56777</TimeChanged>
<TimeCreated>63832,63354.248837</TimeCreated>

<Parameter name="isForRegistrationEventOnly">
<Default>1</Default>
</Parameter>

<Method name="populateDataSet">
<Implementation><![CDATA[
	#dim eventDates as EF.dataSources.utils.eventDatesForChart = ##class(EF.dataSources.utils.eventDatesForChart).createNew(..eventID)
	#dim dateHoro as %Integer
	#dim startTimestampUTC as %String
	#dim endTimestampUTC as %String
	set objEvent=##class(setup.objEvent).%OpenId(..eventID)
	
	if 'eventDates.firstRegistrationDateHoro {
		quit	
	}	// Force the data series to start on Monday to make Kendo aggregate by calendar weeks rather then 'first reg+7 days)'-weeks
	set mondayBeforeFirstRegistrationHoro = ##class(shared.dateFunctions).getNextMonday(eventDates.firstRegistrationDateHoro-7)
	
	for dateHoro=mondayBeforeFirstRegistrationHoro:7:eventDates.lastModificationDateHoro {
		set startTimestampUTC = ##class(shared.dateFunctions).getStartOfDayTimestamp(dateHoro)
		set endTimestampUTC =  ##class(shared.dateFunctions).getEndOfDayTimestamp(dateHoro+6)

		set registrationCount = objEvent.getCountOfNewAttendeesForPeriod(startTimestampUTC,endTimestampUTC)

		set node=..addNode(..dataSet)
		do ..addNameValuePair(node,"date",##class(shared.dateFunctions).multiDate(dateHoro,$$$kendoDateFormat))
		do ..addNameValuePair(node,"value",registrationCount)
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.eventRevenueByCurrency">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventRevenueByCurrency.CLS/EV.0
;vc; Component: CLS.EF.dataSources.eventRevenueByCurrency
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventRevenueByCurrency.CLS/EV.0</td><td>CLS.EF.dataSources.eventRevenueByCurrency</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.dataSources.singleEvent</Super>
<TimeChanged>63861,47284</TimeChanged>
<TimeCreated>63832,63354.248837</TimeCreated>

<Method name="populateDataSet">
<Implementation><![CDATA[
	#dim eventID as %Integer = ..eventID
	
	set rsCurrency = ##class(%ResultSet).%New()
	do rsCurrency.Prepare("SELECT SUM(totalPrice) As totalPrice,objCurrency AS currencyID FROM eCom.objPurchase WHERE (objEvent = ?) GROUP BY objCurrency")
	do rsCurrency.Execute(..eventID)
	while rsCurrency.Next() {
		set currencyID = rsCurrency.Get("currencyID")
		set currencyCode = ##class(eCom.objCurrency).getCode(currencyID)
		set currencySymbol = ##class(eCom.objCurrency).getSymbol(currencyID)
		set received=0
		&SQL(SELECT SUM(amount) INTO :tmp FROM eCom.objPayment WHERE (objPurchase->objEvent = :eventID) AND (objCurrency=:currencyID)) 
		if +SQLCODE=0 {
			set received=tmp
		}
			
		set node=..addNode(..dataSet)
		do ..addNameValuePair(node,"name",currencyCode)
		do ..addNameValuePair(node,"received",+received)
		do ..addNameValuePair(node,"remaining",rsCurrency.Get("totalPrice")-received)
		do ..addNameValuePair(node,"currencySymbol",currencySymbol)
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.eventRevenueComparison">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventRevenueComparison.CLS/EV.1
;vc; Component: CLS.EF.dataSources.eventRevenueComparison
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventRevenueComparison.CLS/EV.1</td><td>CLS.EF.dataSources.eventRevenueComparison</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.dataSources.eventComparison</Super>
<TimeChanged>63874,53064</TimeChanged>
<TimeCreated>63832,63354.248837</TimeCreated>

<Parameter name="isForRegistrationEventOnly">
<Default>0</Default>
</Parameter>

<Parameter name="isForSingleCurrencyEvent">
<Default>1</Default>
</Parameter>

<Query name="mainQuery">
<Type>%SQLQuery</Type>
<FormalSpec>eventID:%String</FormalSpec>
<SqlQuery>	SELECT SUM(totalPrice - vat) AS xCount,{fn CONVERT(xCRstamp,SQL_DATE)} AS xDate 
	FROM eCom.objInvoice
	WHERE eventID = :eventID
	GROUP BY {fn CONVERT(xCRstamp, SQL_DATE) }</SqlQuery>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="xCount:%String,xDate:%Integer"/>
</Query>

<Method name="isCriteriaValid">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if '##super() {
		return 0
	}
	if ##class(setup.objEvent).getBaseCurrency(..eventID)'=##class(setup.objEvent).getBaseCurrency(..comparisonEventID) {
		return 0
	}
	if '##class(setup.objEventSetting).getParameter("invoicing","create credit notes",..eventID) {
		set ..errorMessage="This chart cannot be displayed because credit notes are switched off for this event"
		return 0	
	}
	if '##class(setup.objEventSetting).getParameter("invoicing","create credit notes",..comparisonEventID) {
		set ..errorMessage="This chart cannot be displayed because credit notes are switched off for the comparison event"
		return 0	
	}
	return 1
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.eventRevenueOverTime">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventRevenueOverTime.CLS/EV.3
;vc; Component: CLS.EF.dataSources.eventRevenueOverTime
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventRevenueOverTime.CLS/EV.3</td><td>CLS.EF.dataSources.eventRevenueOverTime</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.dataSources.singleEventOverTime</Super>
<TimeChanged>63874,39993</TimeChanged>
<TimeCreated>63832,63354.248837</TimeCreated>

<Parameter name="includeCurrencySymbol">
<Default>1</Default>
</Parameter>

<Query name="mainQuery">
<Type>%SQLQuery</Type>
<FormalSpec>eventID:%String</FormalSpec>
<SqlQuery>	SELECT SUM(totalPrice-vat) AS xCount,{fn CONVERT(xCRstamp,SQL_DATE)} AS xDate 
	FROM eCom.objInvoice 
	WHERE (eventID = :eventID) 
	GROUP BY {fn CONVERT(xCRstamp,SQL_DATE)}</SqlQuery>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="xCount:%String,xDate:%TimeStamp"/>
</Query>

<Method name="populateDataSet">
<Implementation><![CDATA[
	set objEvent=##class(setup.objEvent).%OpenId(..eventID)
	if objEvent.hasMultiCurrencyPurchases() {
		quit
	}
	do ##super()
]]></Implementation>
</Method>

<Method name="isCriteriaValid">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if '##super() {
		return 0	
	}
	if '##class(setup.objEventSetting).getParameter("invoicing","create credit notes",..eventID) {
		set ..errorMessage="This chart cannot be displayed because credit notes are switched off for this event"
		return 0	
	}
	
	return 1
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.eventSummary">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventSummary.CLS/EV.6
;vc; Component: CLS.EF.dataSources.eventSummary
;vc;  Location: SmallDev
;vc; Date/Time: 15-Jul-16 16:27
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventSummary.CLS/EV.6</td><td>CLS.EF.dataSources.eventSummary</td><td>SmallDev</td><td style='white-space: nowrap;'>15-Jul-16 16:27</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.dataSources.dashboardSummary</Super>
<TimeChanged>64114,59593.905665</TimeChanged>
<TimeCreated>63830,34876.172887</TimeCreated>

<Property name="objEvent">
<Type>setup.objEvent</Type>
<Private>1</Private>
</Property>

<Property name="eventConfiguration">
<Type>setup.eventConfiguration</Type>
</Property>

<Parameter name="requiresAllEventAccess">
<Default>0</Default>
</Parameter>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>contextData:EF.contextData</FormalSpec>
<ReturnType>EF.dataSources.eventSummary</ReturnType>
<Implementation><![CDATA[
	set eventSummary = ##super(contextData)
	set eventSummary.objEvent = ##class(setup.objEvent).%OpenId(contextData.eventID)
	do eventSummary.objEvent.%Reload()
	set eventSummary.eventConfiguration = ##class(setup.eventConfiguration).createForEventID(contextData.eventID)
	return eventSummary
]]></Implementation>
</Method>

<Method name="populateData">
<Implementation><![CDATA[
	do ..populateBasicInformation()
	do ..populateDates()
	do ..populateRegistrationsByCategory()
	do ..populateRevenue()
	do ..populateAbstracts()
	do ..populateAwards()
	do ..populateCustomFields()
	do ..populateInvitations()
]]></Implementation>
</Method>

<Method name="populateBasicInformation">
<Private>1</Private>
<Implementation><![CDATA[
	do ..addSection("Basic Information")
	
	do ..addRow("Event status",..objEvent.getStatusBeautified())
	do ..addRow("Created on",##class(shared.dateFunctions).multiDate($piece(..objEvent.xCRstamp," ",1),$$$horologFormat),"date") 
	do ..addRow("Created by",##class(cod.objPerson).getFullName(..objEvent.xCRuserID))
	if +##class(setup.objEventSetting).getParameter("system","isAwardsEvent",..objEvent.%Id()) = 0 {
		do ..addRow("Registrations",+##class(setup.eventBookingMethods).getMenuAttendeeCountData(..objEvent.%Id()))
		do ..addRow("Cancellations",..objEvent.getNumberOfCancelledRegistrations())
	}
]]></Implementation>
</Method>

<Method name="populateDates">
<Private>1</Private>
<Implementation><![CDATA[
	// all dates in $Horolog format
	do ..addSection("Dates")	
	
	do ..addRow("Event",$ListBuild(..objEvent.dateFrom,..objEvent.dateTo),"datePeriod")
	
	set regStartTimestampUTC = ..eventConfiguration.getRegistrationTimestampFrom()
	set regStartDateHoro = ##class(shared.dateFunctions).multiDate($Piece(regStartTimestampUTC," ",1),$$$horologFormat)

	set regEndTimestampUTC = ..eventConfiguration.getRegistrationTimestampTo()
	set regEndDateHoro = ##class(shared.dateFunctions).multiDate($Piece(regEndTimestampUTC," ",1),$$$horologFormat)
	
	do ..addRow("Registration",$ListBuild(regStartDateHoro,regEndDateHoro),"datePeriod")

	set amendStartTimestampUTC = ..eventConfiguration.getRegistrationAmendmentTimestampFrom()
	set amendStartDateHoro = ##class(shared.dateFunctions).multiDate($Piece(amendStartTimestampUTC," ",1),$$$horologFormat)
	
	set amendEndTimestampUTC = ..eventConfiguration.getRegistrationAmendmentTimestampTo()
	set amendEndDateHoro = ##class(shared.dateFunctions).multiDate($Piece(amendEndTimestampUTC," ",1),$$$horologFormat)
	
	do ..addRow("Amendment",$ListBuild(amendStartDateHoro,amendEndDateHoro),"datePeriod")
]]></Implementation>
</Method>

<Method name="populateRegistrationsByCategory">
<Private>1</Private>
<Implementation><![CDATA[
	#dim attendeeCategoryID as %Integer
	#dim attendeeCount as %Integer
	
	if ..objEvent.hasMultipleAttendeeCategories() { 
		do ..addSection("Registrations by Category")
		
		set rsAttCats = ##class(%ResultSet).%New("setup.lnkAttendeeCategoryDetailsEvent:qAllActiveCategories")
		do rsAttCats.Execute(..objEvent.%Id())
		while rsAttCats.Next() {
			set attendeeCategoryID = rsAttCats.Get("objEventCategory")
			set attendeeCount = +##class(admin.dashBoard).getCountByCategory(..objEvent.%Id(),attendeeCategoryID)
			
			do ..addRow(rsAttCats.Get("description"),attendeeCount)
		}	
	}
]]></Implementation>
</Method>

<Method name="populateRevenue">
<Private>1</Private>
<Implementation><![CDATA[
	if (	(..contextData.auditPersonID)
			&& (##class(access.objFunction).hasFunctionByAccessID(..contextData.auditPersonID,"FINSETT"))
			) {
		#dim currencyID as %Integer
		#dim currencyCode as %String
		#dim totalIncludingVAT as %Numeric
		#dim totalExcludingVAT as %Numeric
		#dim hasCreatedSection as %Boolean = 0
		
		set rsCurrency = ##class(%ResultSet).%New("eCom.objPurchase:qUsedCurrenciesByEventID")
		do rsCurrency.Execute(..objEvent.%Id())
		while rsCurrency.Next() {
			set currencyID = rsCurrency.Get("currencyID")
			set currencyCode = ##class(eCom.objCurrency).getCode(currencyID)
			
			set totalIncludingVAT = ..objEvent.getTotalAmountByCurrencyIDIncludingVAT(currencyID)
			set totalExcludingVAT = ..objEvent.getTotalAmountByCurrencyIDExcludingVAT(currencyID)
			set balanceUnpaidIncludingVAT = ..objEvent.getTotalOutstandingAmountByCurrencyIDIncludingVAT(currencyID)
			
			if (totalIncludingVAT '= 0) {
				if 'hasCreatedSection {
					do ..addSection("Revenue")
					set hasCreatedSection=1
				}
				
				do ..addRow("Total income ("_currencyCode_")",##class(eCom.objPrice).formatAmount(totalExcludingVAT,currencyID)_" ("_##class(eCom.objPrice).formatAmount(totalIncludingVAT,currencyID)_" incl. VAT)")
				do ..addRow("Balance unpaid ("_currencyCode_")",##class(eCom.objPrice).formatAmount(balanceUnpaidIncludingVAT,currencyID))
			}
		}
	}
]]></Implementation>
</Method>

<Method name="populateAbstracts">
<Private>1</Private>
<Implementation><![CDATA[
	if ##class(setup.objEvent).isAbstractsEvent(..objEvent.%Id()) {
		do ..addSection("Abstracts")
		do ..addRow("Submissions",..objEvent.getNumberOfSubmittedAbstracts())
	}
]]></Implementation>
</Method>

<Method name="populateAwards">
<Private>1</Private>
<Implementation><![CDATA[
	if ##class(setup.objEvent).isAwardsEvent(..objEvent.%Id()) {
		do ..addSection("Awards")
		do ..addRow("Closing date",##class(setup.objEventSetting).getParameter("Awards","lastSubmissionDate",..objEvent.%Id()),"date")
		do ..addRow("Entries",..objEvent.getNumberOfSubmittedAwards())
	}
]]></Implementation>
</Method>

<Method name="populateCustomFields">
<Private>1</Private>
<Implementation><![CDATA[
	#dim hasCreatedSection as %Boolean = 0
	#dim customFieldName as %String 
	#dim customFieldValue as %String
	
	set rsCustomFields = ##class(%ResultSet).%New("setup.objEventPrompt:qActiveSoftPrompts")
	do rsCustomFields.Execute()
	while rsCustomFields.Next() {
		set customFieldName = rsCustomFields.Get("description")
		set customFieldValue = ##class(setup.objEventData).getDataFromDescription(..objEvent.%Id(),customFieldName)
		
		if 'hasCreatedSection {
			do ..addSection("Custom Fields")
			set hasCreatedSection=1
		}
		do ..addRow(customFieldName,customFieldValue)
	}
]]></Implementation>
</Method>

<Method name="populateInvitations">
<Private>1</Private>
<Implementation><![CDATA[
	#dim hasCreatedSection as %Boolean = 0
	
	Set rsInvitations=##class(%ResultSet).%New("setup.objPreRegister:qInvitationStatusCounts")
	Do rsInvitations.Prepare()
	Do rsInvitations.Execute(..objEvent.%Id())
	While rsInvitations.Next() {
		Set invStatus=rsInvitations.Get("invitationStatus")
		Set attCount=rsInvitations.Get("xCount")
		If (attCount>0) {
			If ('hasCreatedSection) {
				Do ..addSection("Invitations")
				Set hasCreatedSection=1
			}
			do ..addRow(invStatus,attCount)
		}
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.eventsRegistrationsByPaymentStatus">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventsRegistrationsByPaymentStatus.CLS/EV.0
;vc; Component: CLS.EF.dataSources.eventsRegistrationsByPaymentStatus
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventsRegistrationsByPaymentStatus.CLS/EV.0</td><td>CLS.EF.dataSources.eventsRegistrationsByPaymentStatus</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.dataSources.singleEvent</Super>
<TimeChanged>63855,36388</TimeChanged>
<TimeCreated>63832,63354.248837</TimeCreated>

<Parameter name="isForRegistrationEventOnly">
<Default>1</Default>
</Parameter>

<Method name="populateDataSet">
<Implementation><![CDATA[
	set rsStatus = ##class(%ResultSet).%New()
	do rsStatus.Prepare("SELECT COUNT(ID) AS xCount,status FROM eCom.viewActivePurchases WHERE (objEvent = ?) GROUP BY status")
	do rsStatus.Execute(..eventID)
	while rsStatus.Next() {
		set statusName = $ZConvert(rsStatus.Get("status"),"W") // title case
		
		set node=..addNode(..dataSet)
		do ..addNameValuePair(node,"Category",statusName)
		do ..addNameValuePair(node,"Value",rsStatus.Get("xCount"))	
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.eventsSalesByPaymentMethod">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.eventsSalesByPaymentMethod.CLS/EV.2
;vc; Component: CLS.EF.dataSources.eventsSalesByPaymentMethod
;vc;  Location: SmallDev
;vc; Date/Time: 08-Feb-16 12:34
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.eventsSalesByPaymentMethod.CLS/EV.2</td><td>CLS.EF.dataSources.eventsSalesByPaymentMethod</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Feb-16 12:34</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.dataSources.singleEvent</Super>
<TimeChanged>63956,39676</TimeChanged>
<TimeCreated>63832,63354.248837</TimeCreated>

<Method name="populateDataSet">
<Implementation><![CDATA[

	set objEvent=##class(setup.objEvent).%OpenId(..eventID)
	if objEvent.hasMultiCurrencyPurchases() {
		quit
	}

	set rsMethod = ##class(%ResultSet).%New()
	do rsMethod.Prepare("SELECT SUM(totalPrice) AS xSum,objPaymentMethod AS paymentMethodID FROM eCom.objPurchase WHERE (objEvent = ?) GROUP BY objPaymentMethod")
	do rsMethod.Execute(..eventID)
	while rsMethod.Next() {
		set paymentMethodID = rsMethod.Get("paymentMethodID")
		if paymentMethodID {
			set paymentMethodName = ##class(eCom.objPaymentMethod).getDetails(paymentMethodID,$$$efEnglishLangID)
		} else {
			set paymentMethodName = "None"	
		}
		
		set node=..addNode(..dataSet)
		do ..addNameValuePair(node,"Category",paymentMethodName)
		do ..addNameValuePair(node,"Value",rsMethod.Get("xSum"))	
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.registrationEventList">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.registrationEventList.CLS/EV.0
;vc; Component: CLS.EF.dataSources.registrationEventList
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.registrationEventList.CLS/EV.0</td><td>CLS.EF.dataSources.registrationEventList</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.dataSources.eventList</Super>
<TimeChanged>63853,54081</TimeChanged>
<TimeCreated>63853,46827.380269</TimeCreated>

<Method name="getResultSet">
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[

	set rsEvents=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rsEvents.Prepare("SELECT ID FROM setup.viewRegistrationEvents")
	do rsEvents.Execute()
	
	return rsEvents
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.singleEvent">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataSources.singleEvent.CLS/EV.0
;vc; Component: CLS.EF.dataSources.singleEvent
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.singleEvent.CLS/EV.0</td><td>CLS.EF.dataSources.singleEvent</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.dataSources.base</Super>
<TimeChanged>63855,61756</TimeChanged>
<TimeCreated>63845,36973.107507</TimeCreated>

<Property name="eventID">
<Type>%Integer</Type>
</Property>

<Parameter name="requiresAllEventAccess">
<Default>0</Default>
</Parameter>

<Method name="canAccess">
<ClassMethod>1</ClassMethod>
<FormalSpec>contextData:EF.contextData</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	return 1
]]></Implementation>
</Method>

<Method name="isAuthorised">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set isAuthorised=##super()
	
	if '##class(links.lnkAccessPersonEvent).hasEvent(..contextData.auditPersonID,..eventID) {
		set isAuthorised=0	
	}
	
	return isAuthorised
]]></Implementation>
</Method>

<Method name="isCriteriaValid">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	return ..isEventOfCorrectType(..eventID)
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataSources.singleEventOverTime">
<Description><![CDATA[
super class for charts that plots data over time for a single event
<!-- ;vc;
;vc;    Object: EF.dataSources.singleEventOverTime.CLS/EV.1
;vc; Component: CLS.EF.dataSources.singleEventOverTime
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.singleEventOverTime.CLS/EV.1</td><td>CLS.EF.dataSources.singleEventOverTime</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.dataSources.singleEvent</Super>
<TimeChanged>63880,61897</TimeChanged>
<TimeCreated>63854,51528.702799</TimeCreated>

<Method name="populateDataSet">
<Implementation><![CDATA[
	#dim eventDates as EF.dataSources.utils.eventDatesForChart = ##class(EF.dataSources.utils.eventDatesForChart).createNew(..eventID)
	#dim rollingTotal as %Integer = 0
	#dim arrayOfUsedDates
	#dim dateHoro as %Integer 
	#dim previousDateHoro as %Integer = 0
	#dim isFirstIteration as %Boolean = 1
	#dim resultCount as %Integer = 0 
	
	set rsDayCount=##class(%ResultSet).%New($CLASSNAME()_":mainQuery")
	do rsDayCount.Execute(..eventID)
	while rsDayCount.Next() {
		set resultCount=resultCount+1
		set dateHoro = ##class(shared.dateFunctions).multiDate(rsDayCount.Get("xDate"),$$$horologFormat)
		
		if isFirstIteration {
			set node=..addNode(..dataSet)
			do ..addNameValuePair(node,"date",##class(shared.dateFunctions).multiDate(dateHoro-1,$$$kendoDateFormat))
			do ..addNameValuePair(node,"value",0)
			set isFirstIteration=0			
		}

		// pad out with data point for the missing dates
		if (dateHoro-previousDateHoro'=1) && (previousDateHoro'=0) {
			for tempDateHoro=(previousDateHoro+1):1:(dateHoro-1) {
				set node=..addNode(..dataSet)
				do ..addNameValuePair(node,"date",##class(shared.dateFunctions).multiDate(tempDateHoro,$$$kendoDateFormat))					
				do ..addNameValuePair(node,"value",rollingTotal)
			}
		}
		
		set node=..addNode(..dataSet)
		do ..addNameValuePair(node,"date",##class(shared.dateFunctions).multiDate(rsDayCount.Get("xDate"),$$$kendoDateFormat))
		set rollingTotal = rollingTotal + rsDayCount.Get("xCount")
		do ..addNameValuePair(node,"value",rollingTotal)	
		
		set previousDateHoro = dateHoro
	}
	
	if resultCount > 0 {
		// pad out with data point up till today (if later than last reg date but earlier than the event start date)
		for i=dateHoro+1:1:eventDates.endOfChartDate {
			set node=..addNode(..dataSet)
			do ..addNameValuePair(node,"date",##class(shared.dateFunctions).multiDate(i,$$$kendoDateFormat))					
			do ..addNameValuePair(node,"value",rollingTotal)
		}
	}
]]></Implementation>
</Method>

<Query name="mainQuery">
<Description>
Dummy query overridden in subclasses</Description>
<Type>%SQLQuery</Type>
<FormalSpec>eventID:%String</FormalSpec>
<SqlQuery>	SELECT 1 AS xCount,1 AS xDate 
	FROM setup.objEvent WHERE (ID = :eventID)</SqlQuery>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="xCount:%String,xDate:%TimeStamp"/>
</Query>
</Class>


<Class name="EF.dataSources.utils.eventDatesForChart">
<Description><![CDATA[
Finds out the first and last registration date for a given eventID. 
This is to be used in the registration (per event and all) charts. 
<!-- ;vc;
;vc;    Object: EF.dataSources.utils.eventDatesForChart.CLS/EV.4
;vc; Component: CLS.EF.dataSources.utils.eventDatesForChart
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataSources.utils.eventDatesForChart.CLS/EV.4</td><td>CLS.EF.dataSources.utils.eventDatesForChart</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63872,58012</TimeChanged>
<TimeCreated>63839,59800.036454</TimeCreated>

<Property name="firstRegistrationDateHoro">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="lastRegistrationDateHoro">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="lastModificationDateHoro">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="firstAwardSubmissionDateHoro">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="lastAwardSubmissionDateHoro">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="firstAbstractSubmissionDateHoro">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="lastAbstractSubmissionDateHoro">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="eventStartDateHoro">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="endOfChartDate">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>EF.dataSources.utils.eventDatesForChart</ReturnType>
<Implementation><![CDATA[
	#dim eventDates As EF.dataSources.utils.eventDatesForChart=..%New()
	#dim objEvent As setup.objEvent
	
	set objEvent=##class(setup.objEvent).%OpenId(eventID)
	
	set eventDates.eventStartDateHoro = +objEvent.dateFrom
	// awards
	set startDateHoro = objEvent.getFirstAwardSubmissionDateHoro()
	set endDateHoro = objEvent.getLastAwardSubmissionDateHoro()
	
	set eventDates.firstAwardSubmissionDateHoro=startDateHoro
	set eventDates.lastAwardSubmissionDateHoro=endDateHoro
		

	// registrations
	set startDateHoro = objEvent.getFirstRegistrationDateHoro()
	set endDateHoro = objEvent.getLastRegistrationDateHoro()
	
	set eventDates.firstRegistrationDateHoro=startDateHoro
	set eventDates.lastRegistrationDateHoro=endDateHoro
	set eventDates.lastModificationDateHoro=objEvent.getLastModificationDateHoro()
	
	// abstracts
	set startDateHoro = objEvent.getFirstAbstractSubmissionDateHoro()
	set endDateHoro = objEvent.getLastAbstractSubmissionDateHoro()
	
	set eventDates.firstAbstractSubmissionDateHoro=startDateHoro
	set eventDates.lastAbstractSubmissionDateHoro=endDateHoro

	set eventDates.endOfChartDate = endDateHoro
	if +$ZTS>endDateHoro {
		if +$ZTS<eventDates.eventStartDateHoro {
			set eventDates.endOfChartDate = +$ZTS
		} else {
			set eventDates.endOfChartDate = eventDates.eventStartDateHoro	
		}
	}
	
	return eventDates
]]></Implementation>
</Method>
</Class>


<Class name="EF.dataTypes.hexColour">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.dataTypes.hexColour.CLS/EV.2
;vc; Component: CLS.EF.dataTypes.hexColour
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.dataTypes.hexColour.CLS/EV.2</td><td>CLS.EF.dataTypes.hexColour</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Library.String</Super>
<TimeChanged>64099,36296</TimeChanged>
<TimeCreated>63687,39532.998575</TimeCreated>

<Method name="IsValid">
<ClassMethod>1</ClassMethod>
<FormalSpec>%val:%CacheString</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>0</ServerOnly>
<Implementation><![CDATA[
	set validator=##class(EF.validator.hexColour).%New()
	if validator.isInputValid(%val) {
		return $$$OK
	}
	
	return $$$ERROR($$$GeneralError,validator.getErrorMessage())
]]></Implementation>
</Method>

<Method name="fixMissingHash">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set validator=##class(EF.validator.hexColour).%New()
	set query="SELECT ID,backgroundColor,foregroundColor FROM setup.objItem ORDER BY ID"
	set sqlStatement=##class(%SQL.Statement).%New()
	set sc=sqlStatement.%Prepare(query)
	set rs=sqlStatement.%Execute() 
	while rs.%Next() {
		set ID=rs.%Get("ID")
		set backgroundColour=rs.%Get("backGroundColor")
		set foregroundColour=rs.%Get("foregroundColor")
		if ('validator.isInputValid(backgroundColour)) {
			set newBackgroundColour="#"_backgroundColour
			if validator.isInputValid(newBackgroundColour) {
				&SQL(UPDATE setup.objItem SET backgroundColor=:newBackgroundColour WHERE ID = :ID)
			}
		}
		if ('validator.isInputValid(foregroundColour)) {
			set newForegroundColour="#"_foregroundColour
			if validator.isInputValid(newForegroundColour) {
				&SQL(UPDATE setup.objItem SET foregroundColor=:newForegroundColour WHERE ID = :ID)
			}
		}
	}
	
	set validator=##class(EF.validator.hexColour).%New()
	set query="SELECT ID,backgroundColor,foregroundColor FROM setup.objSessionType ORDER BY ID"
	set sqlStatement=##class(%SQL.Statement).%New()
	set sc=sqlStatement.%Prepare(query)
	set rs=sqlStatement.%Execute() 
	while rs.%Next() {
		set ID=rs.%Get("ID")
		set backgroundColour=rs.%Get("backGroundColor")
		set foregroundColour=rs.%Get("foregroundColor")
		if ('validator.isInputValid(backgroundColour)) {
			set newBackgroundColour="#"_backgroundColour
			if validator.isInputValid(newBackgroundColour) {
				&SQL(UPDATE setup.objSessionType SET backgroundColor=:newBackgroundColour WHERE ID = :ID)
			}
		}
		if ('validator.isInputValid(foregroundColour)) {
			set newForegroundColour="#"_foregroundColour
			if validator.isInputValid(newForegroundColour) {
				&SQL(UPDATE setup.objSessionType SET foregroundColor=:newForegroundColour WHERE ID = ID)
			}
		}
	}
	quit
]]></Implementation>
</Method>
</Class>


<Class name="EF.encoders.html">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.encoders.html.CLS/EV.0
;vc; Component: CLS.EF.encoders.html
;vc;  Location: SmallDev
;vc; Date/Time: 15-Jul-14 15:25
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.encoders.html.CLS/EV.0</td><td>CLS.EF.encoders.html</td><td>SmallDev</td><td style='white-space: nowrap;'>15-Jul-14 15:25</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63368,63493</TimeChanged>
<TimeCreated>63368,63493.4391</TimeCreated>

<Method name="encodeHTMLContent">
<ClassMethod>1</ClassMethod>
<FormalSpec>inHTML</FormalSpec>
<Implementation><![CDATA[	quit ##class(shared.pCSP).EscapeHTML(inHTML)
]]></Implementation>
</Method>

<Method name="encodeHTMLAttribute">
<ClassMethod>1</ClassMethod>
<FormalSpec>inHTML</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(shared.pCSP).EscapeHTML(inHTML)
]]></Implementation>
</Method>

<Method name="encodeJS">
<ClassMethod>1</ClassMethod>
<FormalSpec>string</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $zconvert(string,"O","JS")
]]></Implementation>
</Method>

<Method name="encodeURL">
<ClassMethod>1</ClassMethod>
<FormalSpec>inURL</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(shared.pCSP).EscapeURL(inURL)
]]></Implementation>
</Method>
</Class>


<Class name="EF.encoders.sql">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.encoders.sql.CLS/EV.2
;vc; Component: CLS.EF.encoders.sql
;vc;  Location: SmallDev
;vc; Date/Time: 24-Sep-15 11:59
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.encoders.sql.CLS/EV.2</td><td>CLS.EF.encoders.sql</td><td>SmallDev</td><td style='white-space: nowrap;'>24-Sep-15 11:59</td><td>RajibQ</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63819,44764.224154</TimeChanged>
<TimeCreated>63620,44395.936866</TimeCreated>

<Parameter name="efSQLLIKEescapeChar">
<Type>%String</Type>
<Default>\</Default>
</Parameter>

<Method name="encodeString">
<Description>
Escapes strings for dynamic SQL</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inStr:%String</FormalSpec>
<Implementation><![CDATA[
	Set ret=inStr
	
	Set ret=$REPLACE(ret,"'","''")
	
	Return ret
]]></Implementation>
</Method>

<Method name="encodeTableName">
<Description>
Escapes table names for dynamic SQL</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inStr:%String</FormalSpec>
<Implementation><![CDATA[
	Set ret=inStr
	
	Set ret=$REPLACE(ret,"""","""""")
	
	Return ret
]]></Implementation>
</Method>

<Method name="encodePropertyName">
<Description>
Escapes property names for dynamic SQL</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inStr:%String</FormalSpec>
<Implementation><![CDATA[
	Set ret=inStr
	
	Set ret=$REPLACE(ret,"""","""""")
	
	Return ret
]]></Implementation>
</Method>

<Method name="doNotEncodeString">
<Description>
Does NOT escape string</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inStr:%String</FormalSpec>
<Implementation><![CDATA[	Return inStr
]]></Implementation>
</Method>

<Method name="encodeNumber">
<Description>
Encodes numbers</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inStr:%String</FormalSpec>
<Implementation><![CDATA[
	Set ret=inStr
	
	Set ret=+ret
	
	Return ret
]]></Implementation>
</Method>

<Method name="escapeForSQLLike">
<Description>
Escape string for SQL LIKE special characters... e.g. % and _</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inStr:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	Set ret=inStr
	
	For char=..getSQLLIKEescapeChar(),"%","_" {
		Set ret=$REPLACE(ret,char,..getSQLLIKEescapeChar()_char)
	}
	
	Return ret
]]></Implementation>
</Method>

<Method name="getSQLLIKEescapeChar">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[	Return ..#efSQLLIKEescapeChar
]]></Implementation>
</Method>
</Class>


<Class name="EF.errors.loggingMethods">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.errors.loggingMethods.CLS/EV.3
;vc; Component: CLS.EF.errors.loggingMethods
;vc;  Location: SmallDev
;vc; Date/Time: 07-Jul-16 11:11
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.errors.loggingMethods.CLS/EV.3</td><td>CLS.EF.errors.loggingMethods</td><td>SmallDev</td><td style='white-space: nowrap;'>07-Jul-16 11:11</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>64106,40509.149917</TimeChanged>
<TimeCreated>63154,41683.724378</TimeCreated>

<Method name="logCaughtError">
<Description>
errorDescription just allows for clearer logging in xErrors global</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>errorMessage,errorDescription=""</FormalSpec>
<Implementation><![CDATA[
	set errorIndex=$I(^xErrors)
	set errorIndex=-errorIndex
	set ^xErrors(errorIndex,"0 Error")=errorMessage
	set ^xErrors(errorIndex,"2 Timestamp")=##class(%Library.UTC).NowUTC()
	if $L(errorDescription)	{
		set ^xErrors(errorIndex,"9 Description")=errorDescription
	}
	quit
]]></Implementation>
</Method>

<Method name="logException">
<ClassMethod>1</ClassMethod>
<FormalSpec>exceptionObj:%Exception.AbstractException,errorDescription=""</FormalSpec>
<Implementation><![CDATA[
	set errorIndex=$I(^xErrors)
	set errorIndex=-errorIndex
	set ^xErrors(errorIndex,"0 Error")=exceptionObj.DisplayString()
	set ^xErrors(errorIndex,"2 Timestamp")=##class(%Library.UTC).NowUTC()
	if $L(errorDescription)	{
		set ^xErrors(errorIndex,"9 Description")=errorDescription
	}
	try {
		set status=exceptionObj.AsStatus()
		do ##class(%CSP.Error).DecomposeError(status,.xerr)
		merge ^xErrors(errorIndex,"1 $ZError")=xerr
	} catch errObj {
		set ^xErrors(errorIndex,"1 $ZError","Desc")="Failed to log further details: "_errObj.DisplayString()
	}
	set ^xErrors(errorIndex,"10 Location")=exceptionObj.Location
]]></Implementation>
</Method>
</Class>


<Class name="EF.extSys.CRMintegration">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.extSys.CRMintegration.CLS/EV.3
;vc; Component: CLS.EF.extSys.CRMintegration
;vc;  Location: SmallDev
;vc; Date/Time: 24-Sep-15 16:04
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.extSys.CRMintegration.CLS/EV.3</td><td>CLS.EF.extSys.CRMintegration</td><td>SmallDev</td><td style='white-space: nowrap;'>24-Sep-15 16:04</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63820,36410.836452</TimeChanged>
<TimeCreated>63209,40959.217931</TimeCreated>

<Method name="getActiveIntegrationClassesForEvent">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	Set ret=""
	
	For integClass="EF.extSys.salesforce.CRMintegrationSF" {
		If $CLASSMETHOD(integClass,"isIntegrationActiveForEvent",eventID) {
			Set ret=ret_$LISTBUILD(integClass)
		}
	}
	
	Quit ret
]]></Implementation>
</Method>

<Method name="getIntegrationsFromClasses">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>integClasses</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	Set ret=##class(%ListOfObjects).%New()
	
	For idx=1:1:$LISTLENGTH(integClasses) {
		Set integClass=$LISTGET(integClasses,idx)
		Try {
			Set integ=$CLASSMETHOD(integClass,"createWithDefaultConnection")
			If ($IsObject(integ)) {
				Do ret.Insert(integ)
			}
		} catch ex {
			// ignore
		}
	}
	
	Quit ret
]]></Implementation>
</Method>

<Method name="getActiveIntegrationsForEvent">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	Set integClasses=..getActiveIntegrationClassesForEvent(eventID)
	
	Quit ..getIntegrationsFromClasses(integClasses)
]]></Implementation>
</Method>

<Method name="getInvitationCollectionImportIntegrations">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	Set integClasses=..getActiveIntegrationClassesForEvent(eventID)
	Set integClassesInvCollImpAllowed=""
	
	For idx=1:1:$LISTLENGTH(integClasses) {
		Set integClass=$LISTGET(integClasses,idx)
		If $CLASSMETHOD(integClass,"isInvitationCollectionImportAllowedForEvent",eventID) {
			Set integClassesInvCollImpAllowed=integClassesInvCollImpAllowed_$LISTBUILD(integClass)
		}
	}
	Quit ..getIntegrationsFromClasses(integClassesInvCollImpAllowed)
]]></Implementation>
</Method>

<Method name="getIdentifier">
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="getCRMClassByIdentifier">
<ClassMethod>1</ClassMethod>
<FormalSpec>identifier</FormalSpec>
<Implementation><![CDATA[
	Set ret=""
	
	If (identifier="CRMSalesforce") {
		Set ret=##class(EF.extSys.salesforce.CRMintegrationSF).%ClassName(1)
	}
	
	Quit ret
]]></Implementation>
</Method>

<Method name="setConnectionFromAccount">
<FormalSpec>account:EF.extSys.objAccount</FormalSpec>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="createWithDefaultConnection">
<ClassMethod>1</ClassMethod>
<ReturnType>CRMintegration</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="getContactMetaData">
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="getLeadMetaData">
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="getInvitationCollections">
<ReturnType>CRMitemsList</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="isIntegrationActiveForEvent">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="personRegistrationTrigger">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID,personID,personType</FormalSpec>
<Implementation><![CDATA[
	if ##class(EF.extSys.salesforce.CRMintegrationSF).getActiveIntegrationVersion()=2	{
		do ##class(EF.extSys.salesforce.CRMintegrationSF).personRegistrationTriggerSF(eventID,personID,personType)
	}
	quit
]]></Implementation>
</Method>

<Method name="personInvitedTrigger">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID,personID</FormalSpec>
<Implementation><![CDATA[
	if ##class(EF.extSys.salesforce.CRMintegrationSF).getActiveIntegrationVersion()=2	{
		do ##class(EF.extSys.salesforce.CRMintegrationSF).personInvitedTrigger(eventID,personID)
	}
]]></Implementation>
</Method>

<Method name="jobImportInvFromCRMInvColl">
<ClassMethod>1</ClassMethod>
<FormalSpec>backgroundJobInfoIdx,backgroundJobInfoSecurityToken,collectionID,eventID,eventCategoryID=0,eventOwnerID=0</FormalSpec>
<Implementation><![CDATA[
	Do ##class(shared.efSessionEvents).OnStartSession()
	
	Set backgroundJobInfo=""
	If ($GET(backgroundJobInfoIdx)) {
		Set backgroundJobInfo=##class(EF.utils.backgroundJobInfo).loadFromIdx(backgroundJobInfoIdx,backgroundJobInfoSecurityToken)
		Set backgroundJobInfo.jobID=$JOB
		Set backgroundJobInfo.completed=0
	}
	
	Try {
		Set integ=..createWithDefaultConnection()
		If ($IsObject(backgroundJobInfo)) {
			Set integ.currentBackgroundJobInfo=backgroundJobInfo
		}
		Do integ.importInviteesFromCRMInvitationCollection(collectionID, eventID, eventCategoryID, eventOwnerID)
		If ($IsObject(backgroundJobInfo)) {
			Set backgroundJobInfo.completed=1
		}
	} catch ex {
		If ($IsObject(backgroundJobInfo)) {
			Set backgroundJobInfo.crashed=1
			Set backgroundJobInfo.errorText=ex.DisplayString()
			If (ex.%IsA("shared.exceptions.generalException")) {
				Set statusText=statusText_backgroundJobInfo.errorText
			} else {
				Set statusText=statusText_##class(shared.pCSP).translateAdmin("System failure")
			}
			Set statusText=##class(shared.pCSP).translateAdmin("Import failed: {{{VAR01}}}",,statusText)
			Set backgroundJobInfo.statusText=statusText
		}
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.extSys.CRMinvitationCollection">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.extSys.CRMinvitationCollection.CLS/EV.0
;vc; Component: CLS.EF.extSys.CRMinvitationCollection
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.extSys.CRMinvitationCollection.CLS/EV.0</td><td>CLS.EF.extSys.CRMinvitationCollection</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63216,39578</TimeChanged>
<TimeCreated>63216,39578.670405</TimeCreated>

<Property name="itemID">
<Type>%String</Type>
</Property>

<Property name="name">
<Type>%String</Type>
</Property>

<Property name="description">
<Type>%String</Type>
</Property>
</Class>


<Class name="EF.extSys.CRMitemsList">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.extSys.CRMitemsList.CLS/EV.0
;vc; Component: CLS.EF.extSys.CRMitemsList
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.extSys.CRMitemsList.CLS/EV.0</td><td>CLS.EF.extSys.CRMitemsList</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63216,51175</TimeChanged>
<TimeCreated>63216,50468.390864</TimeCreated>

<Property name="itemCount">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="itemClassName">
<Type>%String</Type>
</Property>

<Method name="getNext">
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>
</Class>


<Class name="EF.extSys.CRMperson">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.extSys.CRMperson.CLS/EV.0
;vc; Component: CLS.EF.extSys.CRMperson
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.extSys.CRMperson.CLS/EV.0</td><td>CLS.EF.extSys.CRMperson</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63224,47128</TimeChanged>
<TimeCreated>63224,45791.310864</TimeCreated>

<Property name="personID">
<Type>cod.objPerson</Type>
<Required>1</Required>
</Property>

<Property name="email">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="firstname">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="lastname">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="company">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Method name="populateFromCOD">
<ClassMethod>1</ClassMethod>
<FormalSpec>personID</FormalSpec>
<ReturnType>EF.extSys.CRMperson</ReturnType>
<Implementation><![CDATA[
	set myObj=..%New()
	do $SYSTEM.OBJ.Dump(myObj)
	do myObj.personIDSetObjectId(personID)
	set myObj.email=##class(cod.objItemData).get(personID,"email")
	set myObj.firstname=##class(cod.objItemData).get(personID,"firstname")
	set myObj.lastname=##class(cod.objItemData).get(personID,"lastname")


	return myObj
]]></Implementation>
</Method>

<Method name="testXMLOutput">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set personSF=..populateFromCOD(1)
	set dataSet=personSF.getDataSet()
	set xmlStream=dataSet.getXMLStream("CRMperson")
	
	do xmlStream.OutputToDevice()
	quit
]]></Implementation>
</Method>

<Method name="getProxyObject">
<Implementation><![CDATA[
	set proxyObj=##class(%ZEN.proxyObject).%New()	
	set proxyObj.email=..email
	set proxyObj.firstname=..firstname
	set proxyObj.lastname=..lastname
	set proxyObj.company=..company
	
	return proxyObj
]]></Implementation>
</Method>
</Class>


<Class name="EF.extSys.objAccount">
<Description><![CDATA[
Abstract type for an external system integration account. 
This class is to be inherited by specific account types (SalesForce etc).
<!-- ;vc;
;vc;    Object: EF.extSys.objAccount.CLS/EV.1
;vc; Component: CLS.EF.extSys.objAccount
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.extSys.objAccount.CLS/EV.1</td><td>CLS.EF.extSys.objAccount</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<Super>%Library.Persistent,shared.timeStamp</Super>
<TimeChanged>63203,71373</TimeChanged>
<TimeCreated>63134,45638.116874</TimeCreated>

<Property name="userName">
<Description><![CDATA[
User / Account Name<br />]]></Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="encryptedPassword">
<Description><![CDATA[
Encrypted password for the account.<br />
Password will be stored in database encrypted. 
Note that this is not a very strong way of protecting the password, but more of a way to hide it from plain sight.<br />]]></Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="64"/>
</Property>

<Property name="encryptionKeyRef">
<Description><![CDATA[
Reference to the encryption key (purposefully not called ID).<br />]]></Description>
<Type>%String</Type>
</Property>

<Parameter name="ENCKEYMISSING">
<Description><![CDATA[
Message to display when encryption key is not found<br />]]></Description>
<Default>Encryption Key could not be found</Default>
</Parameter>

<Parameter name="DEFAULTENCKEYREF">
</Parameter>

<Method name="getDecryptedPassword">
<Description><![CDATA[
Returns decrypted password, or empty string if key is missing.<br />]]></Description>
<FormalSpec>encryptionKeyRef:%String=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set ret=""
	// if supplied, then set it
	If (encryptionKeyRef '= "") {
		Set ..encryptionKeyRef=encryptionKeyRef	
	} else {
		Set ..encryptionKeyRef=..#DEFAULTENCKEYREF
	}
	// obtain the encryption key
	set encKey=$GET(^|"EVCOMMON"|%zEncKeys(..encryptionKeyRef),"")
	
	if (encKey '= "") {
		// deliberately hardcoded to one encryption algorithm
		Set ret=##class(%SYSTEM.Encryption).AESCBCDecrypt(..encryptedPassword,encKey)
	}
	
	Quit ret
]]></Implementation>
</Method>

<Method name="setEncryptedPassword">
<Description><![CDATA[
Sets encrypted password. Fails if key is missing.<br />
Optionally pass in the encryption key reference (otherwise it uses the one set in property).<br />]]></Description>
<FormalSpec>password:%String,encryptionKeyRef:%String=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret=$$$OK
	
	// if supplied, then set it
	If (encryptionKeyRef '= "") {
		Set ..encryptionKeyRef=encryptionKeyRef	
	} else {
		Set ..encryptionKeyRef=..#DEFAULTENCKEYREF
	}
	
	// obtain the encryption key
	set encKey=$GET(^|"EVCOMMON"|%zEncKeys(..encryptionKeyRef),"")
	
	if (encKey '= "") {
		// deliberately hardcoded to one encryption algorithm
		Set ..encryptedPassword=##class(%SYSTEM.Encryption).AESCBCEncrypt(password,encKey)
	} else {
		Set ret=$$$ERROR(..#ENCKEYMISSING)
	}
	
	Quit ret
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^EF.extSys.objAccountD</DataLocation>
<DefaultData>objAccountDefaultData</DefaultData>
<IdLocation>^EF.extSys.objAccountD</IdLocation>
<IndexLocation>^EF.extSys.objAccountI</IndexLocation>
<StreamLocation>^EF.extSys.objAccountS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="objAccountDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>userName</Value>
</Value>
<Value name="3">
<Value>password</Value>
</Value>
<Value name="4">
<Value>encryptionKeyRef</Value>
</Value>
<Value name="5">
<Value>xMOuserID</Value>
</Value>
<Value name="6">
<Value>xCRstamp</Value>
</Value>
<Value name="7">
<Value>xCRuserID</Value>
</Value>
<Value name="8">
<Value>xMOstamp</Value>
</Value>
<Value name="9">
<Value>encryptedPassword</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.extSys.objFieldMapping">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.extSys.objFieldMapping.CLS/EV.0
;vc; Component: CLS.EF.extSys.objFieldMapping
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.extSys.objFieldMapping.CLS/EV.0</td><td>CLS.EF.extSys.objFieldMapping</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<Super>%Library.RegisteredObject,shared.timeStamp</Super>
<TimeChanged>63221,56475</TimeChanged>
<TimeCreated>63201,51161.99937</TimeCreated>

<Property name="objItemName">
<Type>cod.objItemName</Type>
<Required>1</Required>
</Property>

<Property name="extSysFieldName">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="250"/>
</Property>

<Property name="type">
<Type>%String</Type>
<Parameter name="MAXLEN" value="250"/>
</Property>

<Index name="objItemNameIndex">
<Data>result</Data>
<Properties>objItemName</Properties>
</Index>

<Index name="extSysFieldNameIndex">
<Properties>extSysFieldName</Properties>
</Index>

<Method name="isReadOnly">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="populateMapping">
<FormalSpec>codItemName,extSysFieldName,type</FormalSpec>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="delete">
<ClassMethod>1</ClassMethod>
<FormalSpec>fieldMappingID</FormalSpec>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="getFieldMappingForCodItem">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemName</FormalSpec>
<ReturnType>EF.extSys.salesforce.objFieldMappingSF</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="getFieldMappingForExtSysFieldName">
<ClassMethod>1</ClassMethod>
<FormalSpec>extSysFieldName</FormalSpec>
<ReturnType>EF.extSys.salesforce.objFieldMappingSF</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="fieldMappingForCodItemExists">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemName</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="add">
<ClassMethod>1</ClassMethod>
<FormalSpec>codItemName,extSysFieldName,type</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="update">
<ClassMethod>1</ClassMethod>
<FormalSpec>fieldMappingID,codItemName,extSysFieldName,type</FormalSpec>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="getAvailableFieldsFromEventsforce">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&returnArray]]></FormalSpec>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="getAvailableFieldsFromExternalSystem">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&sfInteg:EF.extSys.CRMintegration,&returnArray]]></FormalSpec>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="getHardCodedMappingsByCodItemName">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&returnArray]]></FormalSpec>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="getHardCodedMappingsByExternalField">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&returnArray]]></FormalSpec>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Method name="install">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^EF.extSys.objFieldMappingD</DataLocation>
<DefaultData>objFieldMappingDefaultData</DefaultData>
<IdLocation>^EF.extSys.objFieldMappingD</IdLocation>
<IndexLocation>^EF.extSys.objFieldMappingI</IndexLocation>
<StreamLocation>^EF.extSys.objFieldMappingS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="objFieldMappingDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>objItemName</Value>
</Value>
<Value name="3">
<Value>extSysFieldName</Value>
</Value>
<Value name="4">
<Value>xCRuserID</Value>
</Value>
<Value name="5">
<Value>xMOuserID</Value>
</Value>
<Value name="6">
<Value>xCRstamp</Value>
</Value>
<Value name="7">
<Value>xMOstamp</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.extSys.objPrivateCertificatePassword">
<Super>EF.extSys.objAccount</Super>
<TimeChanged>63470,45770.253727</TimeChanged>
<TimeCreated>63470,45769.259105</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.extSys.salesforce.CRMintegrationSF">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.extSys.salesforce.CRMintegrationSF.CLS/EV.10
;vc; Component: CLS.EF.extSys.salesforce.CRMintegrationSF
;vc;  Location: SmallDev
;vc; Date/Time: 25-Sep-15 12:29
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.extSys.salesforce.CRMintegrationSF.CLS/EV.10</td><td>CLS.EF.extSys.salesforce.CRMintegrationSF</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Sep-15 12:29</td><td>AdrianM2</td></tr></table>
]]></Description>
<Import>EF.lib.salesforce.soql</Import>
<Super>EF.extSys.CRMintegration</Super>
<TimeChanged>63820,44973.931299</TimeChanged>
<TimeCreated>63209,41074.945256</TimeCreated>

<Property name="sfConn">
<Type>EF.lib.salesforce.connection</Type>
</Property>

<Property name="leadFields">
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="contactFields">
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="currentBackgroundJobInfo">
<Type>EF.utils.backgroundJobInfo</Type>
</Property>

<Method name="getIdentifier">
<Implementation><![CDATA[	Return "CRMSalesforce"
]]></Implementation>
</Method>

<Method name="setConnectionFromAccount">
<FormalSpec>account:EF.extSys.salesforce.objAccountSF</FormalSpec>
<Implementation><![CDATA[	set ..sfConn=account.getConnection()
]]></Implementation>
</Method>

<Method name="createWithDefaultConnection">
<ClassMethod>1</ClassMethod>
<ReturnType>CRMintegrationSF</ReturnType>
<Implementation><![CDATA[
	Set ret=..%New()
	
	Do ret.setConnectionFromAccount(##class(objAccountSF).getDefaultAccount())
	
	Quit ret
]]></Implementation>
</Method>

<Method name="personRegistrationTriggerSF">
<Description>
called from setup.eventBookingMethods when a registration, amendment or cancellation occurs</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID,personID,personType</FormalSpec>
<Implementation><![CDATA[
	set personTypeLower=$ZCVT(personType,"L")
	if personTypeLower="delegate" {
		do ..initiateCreateOrUpdateRegistration(eventID,personID,"Registered")
	}
	if personTypeLower="cancelleddelegate" {
		do ..initiateCreateOrUpdateRegistration(eventID,personID,"Cancelled")
	}
	quit
]]></Implementation>
</Method>

<Method name="sendAllMappedFieldsToSF">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID,personID</FormalSpec>
<Implementation><![CDATA[
	do ##class(EF.extSys.salesforce.objFieldMappingSF).getArrayOfCodItemsMappedToSalesforce(.allMappedCodItems)
	set controllerID=##class(setup.objEvent).getControllerID(eventID)
	set codItemName=""
	for {
		set codItemName=$O(allMappedCodItems(codItemName))
		if codItemName="" quit
		
		if $ZCVT(codItemName,"L")="salesforce street" {
			set value=##class(EF.extSys.salesforce.objFieldMappingSF).getSalesforceStreet(personID)
		} else {
			set value=##class(cod.objItemData).get(personID,codItemName,controllerID)
		}
		if $l(value) {
			do ##class(sfEF.objTransaction).createTxn("SF person update v2",personID,codItemName,value,controllerID)
		}
	}
]]></Implementation>
</Method>

<Method name="personInvitedTrigger">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID,personID</FormalSpec>
<Implementation><![CDATA[
	if '..isPersonUpdateAllowed(eventID,personID) {
		return
	}
	do ..sendAllMappedFieldsToSF(eventID,personID)
]]></Implementation>
</Method>

<Method name="initiatePersonDataUpdate">
<Description>
out an update person data command on the SF queue</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>personID,codItemName,value,eventID=""</FormalSpec>
<Implementation><![CDATA[
	set controllerID=""
	if eventID set controllerID=##class(setup.objEvent).getControllerID(eventID)
	
	if '##class(EF.extSys.salesforce.objFieldMappingSF).fieldMappingForCodItemExists(codItemName) quit
	
	if '..isPersonUpdateAllowed(eventID,personID) quit
	do ##class(sfEF.objTransaction).createTxn("SF person update v2",personID,codItemName,value,controllerID)
]]></Implementation>
</Method>

<Method name="initiateCreateOrUpdateRegistration">
<Description>
create a registration txn for a person/event</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID,personID,value</FormalSpec>
<Implementation><![CDATA[
	set controllerID=""
	if 'eventID quit
	
	set controllerID=##class(setup.objEvent).getControllerID(eventID)	
	if '..isPersonUpdateAllowed(eventID,personID) quit
	
	if $ZCVT(value,"L")="registered" {
		do ..sendAllMappedFieldsToSF(eventID,personID)
	}
	
	do ##class(sfEF.objTransaction).createTxn("SF person registration v2",personID,,value,controllerID)
	
	quit
]]></Implementation>
</Method>

<Method name="updatePersonRegistrationQueueCallback">
<FormalSpec><![CDATA[&updArr]]></FormalSpec>
<Implementation><![CDATA[
	// get person data
	set loopPersonID=""
	for  {
		set loopPersonID=$O(updArr(loopPersonID))
		if loopPersonID="" quit
		
		set value=updArr(loopPersonID,"EF Event Registration","newValue")
		set eventID=updArr(loopPersonID,"EF Event Registration","eventID")
		set personID=updArr(loopPersonID,"EF Event Registration","personID")
		set updArr(loopPersonID,"EF Event Registration","sfStatus")="ERROR"
		set updArr(loopPersonID,"EF Event Registration","sfResult")="Unknown"
		do ..createOrUpdateEFEventRegistration(eventID,personID,value)
		// if we have got here then we've not thrown an error so all OK...
		set updArr(loopPersonID,"EF Event Registration","sfStatus")="SUCCESS"
		set updArr(loopPersonID,"EF Event Registration","sfResult")=""
	}
	quit
]]></Implementation>
</Method>

<Method name="updatePersonDataQueueCallback">
<Description>
pass in updateArray as
updateArray(personID,coditemName,"value")=...
                                ,"txnID")=...
                                ,"eventID")=...
                                ,"personID")=...</Description>
<FormalSpec><![CDATA[&updateArray]]></FormalSpec>
<Implementation><![CDATA[
	// get person data
	set personID=$O(updateArray(""))
	set eventID=updateArray(personID,$O(updateArray(personID,"")),"eventID")
	if '..isIntegrationActiveForEvent(eventID) quit
	
	do ..findOrCreateMatchingSFPerson(personID)
	set CRMpersonSF=##class(EF.extSys.salesforce.CRMpersonSF).populateFromCOD(personID)
	
	set leadID=CRMpersonSF.leadID
	set contactID=CRMpersonSF.contactID
	
	set resource=""
	// should we update a lead or a contact?
	if contactID'="" {
		set resource="Contact"
		set SFID=contactID
	} elseif $L(leadID)>1 { 
		set resource="Lead"
		set SFID=leadID
	}
	if resource="" quit
	kill dataSet
	set dataSet=##class(EF.dataCollections.dataSetTempGlobal).%New(resource)
	
	// build up a combined data object
	set rootNode=dataSet.getRootNode()
	set codItemName=""
	for  {
		set codItemName=$O(updateArray(personID,codItemName))
		if codItemName="" quit
		
		set codValue=updateArray(personID,codItemName,"value")
		if contactID'="" {
			set objFieldMappingSF=##class(EF.extSys.salesforce.objFieldMappingSFContact).getFieldMappingForCodItem(codItemName)
		} elseif leadID'="" {
			set objFieldMappingSF=##class(EF.extSys.salesforce.objFieldMappingSFLead).getFieldMappingForCodItem(codItemName)
		}
		
		do ##class(EF.extSys.salesforce.CRMpersonSF).addCodItemToDataSet(objFieldMappingSF,.rootNode,codValue)
	}
	
	// call a batched update
	do ..sfConn.updateObject(resource,dataSet, SFID)
	do ..updateTransactionsStatus(.updateArray,"SUCCESS","")
	
	quit
]]></Implementation>
</Method>

<Method name="findOrCreateMatchingSFPerson">
<FormalSpec>personID</FormalSpec>
<Implementation><![CDATA[
	Lock +^findOrCreateMatchingSFPerson(personID)
	set CRMpersonSF=##class(EF.extSys.salesforce.CRMpersonSF).populateFromCOD(personID)
	set leadID=CRMpersonSF.leadID
	set contactID=CRMpersonSF.contactID
	set personID=CRMpersonSF.personID.%Id()
		
	// create person if he doesn't exist
	if (leadID="") && (contactID="") {	
		set mode=..updateOrCreateUnlinkedPeople()
		if mode="searchAndUpdate" {
			if '..findSFpersonFromEmail(CRMpersonSF.email,.leadID,.contactID) {
				do ..sfConn.createLead(.leadID, CRMpersonSF.getNewLeadDataSet())	
			}
		} elseif mode="createNew" {
			do ..sfConn.createLead(.leadID, CRMpersonSF.getNewLeadDataSet())	
		}
		if $L(leadID)>1 {
			do ##class(cod.objItemData).set(personID,"Salesforce Lead ID",leadID,,,,0) 
		}
		if $L(contactID)>1 {
			do ##class(cod.objItemData).set(personID,"Salesforce Contact ID",contactID,,,,0) 
		}
	} elseif (leadID'="") && (contactID="") {
		set contactID=..getConvertedContactID(leadID)
		if contactID'="" {
			set CRMpersonSF.contactID=contactID
			set CRMpersonSF.leadID=""
			do ..switchPersonFromLeadToContact(CRMpersonSF.personID.%Id(),contactID)
		}
	}
	Lock -^findOrCreateMatchingSFPerson(personID)
]]></Implementation>
</Method>

<Method name="switchPersonFromLeadToContact">
<ClassMethod>1</ClassMethod>
<FormalSpec>personID,contactID</FormalSpec>
<Implementation><![CDATA[
	set ok=##class(cod.objItemData).set(personID,"Salesforce Contact ID",contactID,,,,0)	
	set ok=##class(cod.objItemData).set(personID,"Salesforce Lead ID","",,,,0)
]]></Implementation>
</Method>

<Method name="queueEventObjectCreation">
<ClassMethod>1</ClassMethod>
<FormalSpec>personID</FormalSpec>
<Implementation><![CDATA[
	set rsQ=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rsQ.Prepare("SELECT ID FROM sfEF.objTransaction WHERE (type='SF person registration v2') AND (objPerson = ?) AND (efStatus = 'READY')")
	do rsQ.Execute(personID)
	while rsQ.Next() {
		set txnID=rsQ.Get("ID")
		do ##class(sfEF.objTransaction).updateEFstatus(txnID,"QUEUED")
		set ok=##class(sfEF.queue).putOnQueue(txnID)	
	}
]]></Implementation>
</Method>

<Method name="updateTransactionsStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&updateArray,status,message]]></FormalSpec>
<Implementation><![CDATA[
	set personID=$O(updateArray(""))
	set codItemName=""
	for  {
		set codItemName=$O(updateArray(personID,codItemName))
		if codItemName="" quit
		set updateArray(personID,codItemName,"sfStatus")=status
		set updateArray(personID,codItemName,"sfResult")=message
	}
]]></Implementation>
</Method>

<Method name="getContactsByEmail">
<FormalSpec><![CDATA[emailAddress,&totalSize]]></FormalSpec>
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[
	Set soql=##class(SoqlBuilder).%New()
	Set soql=soql.selectx("Id,FirstName,LastName,EmaiL")
	Set soql=soql.fromx("Contact")
	Set soql=soql.wherex(##class(FieldCondition).%New("Email",emailAddress))
	
	set sfDataSet=..sfConn.getSOQLResults(soql)
	
	set results=sfDataSet.getRootNode()
	set totalSize=results.getValueForFirstChildByName("totalSize")
	
	quit sfDataSet
]]></Implementation>
</Method>

<Method name="getLeadsByEmail">
<FormalSpec><![CDATA[emailAddress,&totalSize]]></FormalSpec>
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[
	Set soql=##class(SoqlBuilder).%New()
	Set soql=soql.selectx("Id,FirstName,LastName,EmaiL")
	Set soql=soql.fromx("Lead")
	Set soql=soql.wherex(##class(FieldCondition).%New("Email",emailAddress))
	
	
	set sfDataSet=..sfConn.getSOQLResults(soql)
	set results=sfDataSet.getRootNode()
	set totalSize=results.getValueForFirstChildByName("totalSize")
	
	quit sfDataSet
]]></Implementation>
</Method>

<Method name="findSFpersonFromEmail">
<FormalSpec><![CDATA[email,&leadID,&contactID]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set sfDataSet=..getContactsByEmail(email,.contactCount).getRootNode()
	if contactCount=1 {
		set record=sfDataSet.getNextChildByName("records")
		set contactID=record.getValueForFirstChildByName("Id")
		return 1
	}
	
	set sfDataSet=..getLeadsByEmail(email,.leadCount).getRootNode()
	if leadCount=1 {
		set record=sfDataSet.getNextChildByName("records")
		set leadID=record.getValueForFirstChildByName("Id")
		return 1
	}
	
	return 0
]]></Implementation>
</Method>

<Method name="getConvertedContactID">
<FormalSpec>leadID</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if leadID="" {
		return ""
	} else {
		// ConvertedContactId
		set soql=##class(SoqlBuilder).%New().selectx("Id,ConvertedContactId").fromx("Lead").wherex(##class(FieldCondition).%New("Id",leadID))
		set sfDataSet=..sfConn.getSOQLResults(soql)
		set node=sfDataSet.getRootNode()
		set record=node.getNextChildByName("records")
		if $ISOBJECT(record)	{
			set contactID=record.getValueForFirstChildByName("ConvertedContactId")
			if contactID'="" return contactID
		}
	}
	return ""
]]></Implementation>
</Method>

<Method name="getInvitationCollectionSourceLabel">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ##class(shared.pCSP).translateAdmin("A Salesforce campaign")
]]></Implementation>
</Method>

<Method name="getInvitationCollections">
<ReturnType>CRMitemsListSF</ReturnType>
<Implementation><![CDATA[
	Set soql=##class(SoqlBuilder).%New().selectx(
			"Id,Name,NumberOfContacts,NumberOfLeads"
		).wherex(
			##class(FieldCondition).%New(
				"efconnector__show_in_ef__c"
				,##class(FieldConditionValue).%New(1,"boolean")
			)
		).orderByx(
			"Name"
		)
	
	Set dataSet=..sfConn.getCampaignsList(soql)
	
	Quit ##class(CRMitemsListSF).%New("EF.extSys.salesforce.CRMinvitationCollectionSF",dataSet)
]]></Implementation>
</Method>

<Method name="populateFieldMappingsCache">
<FormalSpec>forceRefresh:%Boolean=0</FormalSpec>
<Implementation><![CDATA[
	If (	(forceRefresh)
		!	('$DATA(..contactFields))
		!	('$DATA(..leadFields))
	) {
		Kill ..contactFields
		Kill ..leadFields
		
		Kill contactFields, leadFields
		Do ##class(objFieldMappingSFContact).getAllMappingsByExternalField(.contactFields,"L")
		Do ##class(objFieldMappingSFLead).getAllMappingsByExternalField(.leadFields,"L")
		Merge ..contactFields=contactFields
		Merge ..leadFields=leadFields
	}
]]></Implementation>
</Method>

<Method name="importInviteesFromCRMInvitationCollection">
<FormalSpec>collectionID,eventID,eventCategoryID=0,eventOwnerID=0</FormalSpec>
<Implementation><![CDATA[
	Set stoppingText=##class(shared.pCSP).translateAdmin("Stopping…")
	
	// Throw ##class(shared.exceptions.generalException).%New("Testing crash...")
	Do ..assertEventSuppportsInvitationCollectionImport(eventID)
	
	If ($IsObject(..currentBackgroundJobInfo)) {
		If (..currentBackgroundJobInfo.stopRequested) {
			Set ..currentBackgroundJobInfo.statusText=stoppingText
		} else {
			Set ..currentBackgroundJobInfo.statusText=##class(shared.pCSP).translateAdmin("Preparing…")
		}
		Do ..currentBackgroundJobInfo.setInfo("sfSessionID",..sfConn.sfAuth.sfSessionID)
		Set ..currentBackgroundJobInfo.started=1
	}
	Set soql=##class(SoqlBuilder).%New().fromx(
			"CampaignMember"
		).wherex(
			##class(FieldCondition).%New("CampaignId",collectionID)
		)
	
	Do ..populateFieldMappingsCache()
	
	Set fieldName=""
	For {
		Set fieldName=$ORDER(..contactFields(fieldName))
		If fieldName="" Quit
		
		Set soql=soql.selectx("Contact."_fieldName)
	}
	
	Set fieldName=""
	For {
		Set fieldName=$ORDER(..leadFields(fieldName))
		If fieldName="" Quit
		
		Set soql=soql.selectx("Lead."_fieldName)
	}
	
	Set soql=soql.selectx("Lead.Id,Contact.Id,Lead.ConvertedContactId")
	
	If ($IsObject(..currentBackgroundJobInfo)) {
		Do ..currentBackgroundJobInfo.setInfo("soql",soql.toSoql())
	}
	
		
	Set totalProcessed=0
	Set totalPersonCreated=0
	Set totalPersonUpdated=0
	Set totalPersonExisted=0
	Set totalAddedToInvitationList=0
	Set totalExistedInInvitationList=0
	Set totalFailedToCreatePerson=0
	Set totalFailedToUpdatePerson=0
	Set totalFailedToInvitePerson=0
	
	Set controllerID=""
	If (eventID) {
		Set controllerID=##class(setup.objEvent).getControllerID(eventID)
	}
	
	Set cursor=""
	For {
		If ($IsObject(..currentBackgroundJobInfo)) {
			If (..currentBackgroundJobInfo.stopRequested) {
				Set ..currentBackgroundJobInfo.statusText=stoppingText
				Set ..currentBackgroundJobInfo.stopped=1
				Quit
			}
			If (..currentBackgroundJobInfo.stopRequested) {
				Set ..currentBackgroundJobInfo.statusText=stoppingText
			} else {
				Set ..currentBackgroundJobInfo.statusText=##class(shared.pCSP).translateAdmin("Getting list of people from Salesforce.com…")
			}
		}
		
		Set dataSet=..sfConn.getSOQLResults(soql,0,.cursor)
		
		If ($IsObject(..currentBackgroundJobInfo)) {
			If (..currentBackgroundJobInfo.stopRequested) {
				Set ..currentBackgroundJobInfo.statusText=stoppingText
			} else {
				Set ..currentBackgroundJobInfo.statusText=##class(shared.pCSP).translateAdmin("Importing people from Salesforce.com…")
			}
		}
		
		Set rootNode=dataSet.getRootNode()
		Set totalSize=rootNode.getValueForFirstChildByName("totalSize") // may be slow?
		
		If ($IsObject(..currentBackgroundJobInfo)) {
			Do ..currentBackgroundJobInfo.setInfo("totalSize",totalSize)
		}
		
		For {
			If ($IsObject(..currentBackgroundJobInfo)) {
				If (..currentBackgroundJobInfo.stopRequested) {
					Set ..currentBackgroundJobInfo.statusText=stoppingText
					Set ..currentBackgroundJobInfo.stopped=1
					Quit
				}
			}
			Set nextRecord=rootNode.getNextChildByName("records")
			If ('$IsObject(nextRecord)) Quit
			
			Set personNode=nextRecord.getNextChildByName("Contact")
			If ('$IsObject(personNode)) {
				Set personNode=nextRecord.getNextChildByName("Lead")
			}
			
			If ($IsObject(personNode)) {
				Set personID=0
				Set sfPersonType=personNode.name
				Set sfPersonID=personNode.getValueForFirstChildByName("id")
				Try {
					Set newPersonCreated=0
					Set personID=..importPerson(personNode,eventID,.newPersonCreated)
					If (newPersonCreated) {
						Set totalPersonCreated=totalPersonCreated+1
					} else {
						Set totalPersonExisted=totalPersonExisted+1
					}
				} catch ex {
					Set totalFailedToCreatePerson=totalFailedToCreatePerson+1
					
					If ($IsObject(..currentBackgroundJobInfo)) {
						Do ..currentBackgroundJobInfo.setInfo("errorAddingPerson_"_totalFailedToCreatePerson,"sfPersonType: "_sfPersonType_" sfPersonID: "_sfPersonID_" PersonID: "_personID_" Err: "_ex.DisplayString())
					}
					
					Set personID=0
				}
				
				If (personID) {
					Try {
						set tempRet=##class(setup.objPreRegister).addPersonToInvitationList(personID,eventID,eventCategoryID,eventOwnerID)
						if tempRet>0 set totalAddedToInvitationList=totalAddedToInvitationList+1
						if tempRet<0 set totalExistedInInvitationList=totalExistedInInvitationList+1
					} catch ex {
						Set totalFailedToInvitePerson=totalFailedToInvitePerson+1
						
						If ($IsObject(..currentBackgroundJobInfo)) {
							Do ..currentBackgroundJobInfo.setInfo("errorAddingPersonToInvitationList_"_totalFailedToInvitePerson,"sfPersonType: "_sfPersonType_" sfPersonID: "_sfPersonID_" PersonID: "_personID_" Err: "_ex.DisplayString())
						}
					}
				}
				
				If (personID) {
					Try {
						Do ..importPersonData(personNode,eventID)
						Set totalPersonUpdated=totalPersonUpdated+1
					} catch ex {
						// TODO - log error?
						Set totalFailedToUpdatePerson=totalFailedToUpdatePerson+1
						
						If ($IsObject(..currentBackgroundJobInfo)) {
							Do ..currentBackgroundJobInfo.setInfo("errorUpdatingPerson_"_totalFailedToUpdatePerson,"sfPersonType: "_sfPersonType_" sfPersonID: "_sfPersonID_" PersonID: "_personID_" Err: "_ex.DisplayString())
						}
					}
				}
				
			}
			
			Set totalProcessed=totalProcessed+1
			
			If ($IsObject(..currentBackgroundJobInfo)) {
				Do ..currentBackgroundJobInfo.setInfo("totalProcessed",totalProcessed)
				Do ..currentBackgroundJobInfo.setInfo("totalPersonCreated",totalPersonCreated)
				Do ..currentBackgroundJobInfo.setInfo("totalPersonUpdated",totalPersonUpdated)
				Do ..currentBackgroundJobInfo.setInfo("totalPersonExisted",totalPersonExisted)
				Do ..currentBackgroundJobInfo.setInfo("totalAddedToInvitationList",totalAddedToInvitationList)
				Do ..currentBackgroundJobInfo.setInfo("totalExistedInInvitationList",totalExistedInInvitationList)
				Do ..currentBackgroundJobInfo.setInfo("totalFailedToCreatePerson",totalFailedToCreatePerson)
				Do ..currentBackgroundJobInfo.setInfo("totalFailedToInvitePerson",totalFailedToInvitePerson)
				Do ..currentBackgroundJobInfo.setInfo("totalFailedToUpdatePerson",totalFailedToUpdatePerson)
				
				Set ..currentBackgroundJobInfo.progressPercentage=(totalProcessed/totalSize)*100
				Set ..currentBackgroundJobInfo.progressText=totalProcessed_"/"_totalSize
			}
		}
		
		If ($LENGTH(cursor)<1) {
			Quit
		}
	}
	
	If ($IsObject(..currentBackgroundJobInfo)) {
		If (..currentBackgroundJobInfo.stopped=1) {
			Set ..currentBackgroundJobInfo.statusText=##class(shared.pCSP).translateAdmin("Stopped importing people from Salesforce.com")
		} else {
			Set ..currentBackgroundJobInfo.statusText=##class(shared.pCSP).translateAdmin("Finished importing people from Salesforce.com")
		}
	}
]]></Implementation>
</Method>

<Method name="assertValidPersonData">
<FormalSpec>personData</FormalSpec>
<Implementation><![CDATA[
	Set validFormat=0
	If ($IsObject(personData)) {
		If (personData.%IsA("EF.dataCollections.dataSetNode")) {
			Set validFormat=1
		}
	}
	
	If ('validFormat) {
		Throw ##class(shared.exceptions.generalException).%New("Person data format invalid")
	}
]]></Implementation>
</Method>

<Method name="assertEventSuppportsInvitationCollectionImport">
<FormalSpec>eventID</FormalSpec>
<Implementation><![CDATA[
	If ('..isInvitationCollectionImportAllowedForEvent(eventID)) {
		Throw ##class(shared.exceptions.generalException).%New("Event "_eventID_" does not support import")
	}
]]></Implementation>
</Method>

<Method name="canIgnorePersonDataOnImport">
<FormalSpec>personData,eventID</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Do ..assertValidPersonData(personData)
	
	Set ret=0
	
	Set leadOrContact=$ZCONVERT(personData.name,"L")
	
	Set email=personData.getValueForFirstChildByName("Email")
	
	If (leadOrContact="lead") {
		Set convertedContactId=personData.getValueForFirstChildByName("ConvertedContactId")
		If ($LENGTH(convertedContactId)>0) {
			Set ret=1
		}				
	}
	
	If ('ret) {
		Set personID=+..findImportPerson(personData,eventID)
		
		If (personID) {
			If (leadOrContact="lead") {
				If ($LENGTH($ZSTRIP(##class(cod.objItemData).get(personID, "Salesforce Contact ID"),"<>W"))>0) {
					// already have a contact record, so don't update from lead
					Set ret=1
				}
			}
		}
	}
	
	Quit ret
]]></Implementation>
</Method>

<Method name="findImportPerson">
<FormalSpec>personData,eventID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set ret=0
	
	Do ..assertValidPersonData(personData)
	
	Set email=personData.getValueForFirstChildByName("Email")
	
	Set attendeeIDMode=##class(setup.eventBookingMethods).getAttendeeIDMode(eventID)
	
	if (attendeeIDMode="email") {
		Set ret=+##class(cod.objItemData).findSingle("email",email)
	} elseif (attendeeIDMode="bookingReference") {
		Set leadOrContact=$ZCONVERT(personData.name,"L")
		Set sfID=personData.getValueForFirstChildByName("id")
		
		Set codItemName=""
		
		If (leadOrContact = "lead") {
			Set codItemName="Salesforce Lead ID"
		} elseif (leadOrContact = "contact") {
			Set codItemName="Salesforce Contact ID"
		}
		
		If ($LENGTH(codItemName)>0) {
			Set qry=""
			&SQL(SELECT		OID.objPerson
							INTO :tmp
					FROM	cod.objItemData OID
							JOIN setup.objPreRegister OPR
								ON OID.objPerson=OPR.objPerson
					WHERE	%SQLUPPER(OID.objItemName->description)=%SQLUPPER(:codItemName)
							AND OID.result=:sfID
							AND OPR.objEvent=:eventID
				)
			
			If (+SQLCODE=0) {
				Set ret=+tmp
			}
		}
	} else {
		Throw ##class(shared.exceptions.generalException).%New("Unsupported event identifier for event "_eventID)
	}
	
	Quit ret
]]></Implementation>
</Method>

<Method name="importPerson">
<FormalSpec><![CDATA[personData,eventID,&newPersonCreated:%Boolean=0]]></FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set ret=0
	
	Do ..assertValidPersonData(personData)
	
	If ('..canIgnorePersonDataOnImport(personData,eventID)) {
		Set controllerID=""
		If (eventID) {
			Set controllerID=##class(setup.objEvent).getControllerID(eventID)
		}
		
		Set email=personData.getValueForFirstChildByName("Email")
		
		If ('##class(EF.utils.dataValidation).isValidEmailAddress(email)) {
			Throw ##class(shared.exceptions.generalException).%New("Invalid email address")
		}
		
		Set firstName=personData.getValueForFirstChildByName("FirstName")
		
		If ($LENGTH($ZSTRIP(firstName,"<>W")) < 1) {
			Throw ##class(shared.exceptions.generalException).%New("Invalid first name")
		}
		
		Set lastName=personData.getValueForFirstChildByName("LastName")
		
		If ($LENGTH($ZSTRIP(lastName,"<>W")) < 1) {
			Throw ##class(shared.exceptions.generalException).%New("Invalid last name")
		}
		
		Set personID=+..findImportPerson(personData,eventID)
		
		Set newPersonCreated=0
		
		If ('personID) {
			Set personID=##class(cod.objPerson).add()
			If ('personID) {
				Throw ##class(shared.exceptions.generalException).%New("Unable to create new person")
			} else {
				Set newPersonCreated=1
			}
			set ok=##class(cod.objItemData).set(personID,"cod origin","SF Import")
			If ('ok) {
				Throw ##class(shared.exceptions.generalException).%New("Unable to set import origin: "_ok)
			}
			
			Do ..populateFieldMappingsCache()
			
			Set leadOrContact=$ZCONVERT(personData.name,"L")
			
			For tmpFieldName="id","email","firstname","lastname" {
				Set fieldValue=personData.getValueForFirstChildByName(tmpFieldName)
				Do ..importPersonDataItem(personID,eventID,leadOrContact_"."_tmpFieldName,fieldValue)
			}
		}
		
		Set ret=personID
		
		set ok=##class(cod.objItemData).set(personID,"SF Import Date Time",$ZD(+$H,2)_" "_$ZT($P($H,",",2),2))
		If ('ok) {
			Throw ##class(shared.exceptions.generalException).%New("Unable to set import date and time: "_ok)
		}
		
		// is this list an event specific list? can only apply department if it is from one
		if ##class(setup.objSetting).getParameter("data separation","use department")	{
			// JAW added this for Schroders but should be for all who use department - COPIED from createPurchase method
			set department=##class(setup.objEventSetting).getParameter("eventsforce","Department",eventID)  // using xEventID but has to be the same as objList:externalID
			set existingDepartment=##class(cod.objItemData).get(personID,"Department")
			if newPersonCreated,department'="" {  // only set department for newly created people (JAW discussed with FRED May2009)
				do ##class(cod.objItemData).set(personID,"Department",department)
			}
			if department'="",existingDepartment'="",existingDepartment'=department {
			 	do ##class(cod.objItemData).set(personID,"Department","")
			}
		}
	}
	
	
	Quit ret
]]></Implementation>
</Method>

<Method name="importPersonData">
<Description>
person must already exist!</Description>
<FormalSpec>personData,eventID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set ret=0
	
	Do ..assertValidPersonData(personData)
	
	If ('..canIgnorePersonDataOnImport(personData,eventID)) {
		Do ..populateFieldMappingsCache()
				
		Set email=personData.getValueForFirstChildByName("Email")
			
		If ('##class(EF.utils.dataValidation).isValidEmailAddress(email)) {
			Throw ##class(shared.exceptions.generalException).%New("Invalid email address")
		}
		
		Set personID=+..findImportPerson(personData,eventID)
		
		If ('personID) {
			Throw ##class(shared.exceptions.generalException).%New("Person does not exist in Eventsforce")
		}
		
		Set ret=personID
		
		set ok=##class(cod.objItemData).set(personID,"SF Import Date Time",$ZD(+$H,2)_" "_$ZT($P($H,",",2),2))
		If ('ok) {
			Throw ##class(shared.exceptions.generalException).%New("Unable to set import date and time: "_ok)
		}
					
		Kill fieldArray
		Do personData.convertToFlattenedArray(.fieldArray,".")
		
		Set errs=""
		
		Set fieldIdx=""
		For {
			Set fieldIdx=$ORDER(fieldArray(fieldIdx))
			If (fieldIdx="") Quit
			
			Set fieldName=$GET(fieldArray(fieldIdx,"path"))
			If (fieldName'="") {
				Set fieldValue=$GET(fieldArray(fieldIdx,"value"))
				Try {
					Do ..importPersonDataItem(personID,eventID,fieldName,fieldValue)
				} catch ex {
					Set errs=errs_$SELECT($LENGTH(errs>0):", ",1:"")_ex.DisplayString()
				}
			}
		}
		
		If ($LENGTH(errs)>0) {
			Throw ##class(shared.exceptions.generalException).%New("Failed to save data for person "_personID_": "_errs)
		}
	}		
	
	Quit ret
]]></Implementation>
</Method>

<Method name="importPersonDataItem">
<FormalSpec>personID,eventID,extFieldName,extFieldValue</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set ret=0
	Do ..populateFieldMappingsCache()
	
	Set controllerID=""
	If (eventID) {
		Set controllerID=##class(setup.objEvent).getControllerID(eventID)
	}
	
	Set fieldName=extFieldName
	Set fieldValue=extFieldValue
	
	Set leadOrContact=$ZCONVERT($PIECE(fieldName,".",1),"L")
	Set tmpFieldName=$ZCONVERT($PIECE(fieldName,".",2,$LENGTH(fieldName,".")),"L")
	If ($LENGTH(tmpFieldName)) {
		Set codItemName=""
		
		If (tmpFieldName="id") {
			If (leadOrContact = "lead") {
				Set codItemName="Salesforce Lead ID"
			} elseif (leadOrContact = "contact") {
				Set codItemName="Salesforce Contact ID"
			}
		} else {
			Set objFieldMapping=""
			
			If (leadOrContact = "lead") {
				Set objFieldMapping=$GET(..leadFields(tmpFieldName))
			} elseif (leadOrContact = "contact") {
				Set objFieldMapping=$GET(..contactFields(tmpFieldName))
			}
			
			If ($IsObject(objFieldMapping)) {
				If (objFieldMapping.%IsA("EF.extSys.salesforce.objFieldMappingSF")) {
					set sfFieldType=$ZCVT(objFieldMapping.type,"L")
					Set codItemName=objFieldMapping.objItemName.description
					if $l(fieldValue) {
						if (sfFieldType="double")!(sfFieldType="int")!(sfFieldType="percent") {
							set fieldValue=+fieldValue
						}
					}
				}
			}
		}
		if $ZCONVERT(codItemName,"L")="salesforce street" {
			do ##class(EF.extSys.salesforce.objFieldMappingSF).setSalesforceStreet(personID,fieldValue)
		} elseif ($LENGTH(codItemName)) {
			If ($ZCONVERT(codItemName,"L")="email") {
				Set codItemName=##class(cod.objItemName).getEmailCodItemNameForEventID(codItemName)
			}
			Try {
				set ok=##class(cod.objItemData).set(personID,codItemName,fieldValue,controllerID,,,0)
				If ('ok) {
					Throw ##class(shared.exceptions.generalException).%New("Unable to save "_codItemName_" for person "_personID_" : "_ok)
				}
			} catch ex {
				Throw ##class(shared.exceptions.generalException).%New("Unable to save "_codItemName_" for person "_personID_" : "_ex.DisplayString())
			}
		} else {
			// Throw ##class(shared.exceptions.generalException).%New("Unable to map "_leadOrContact_"."_tmpFieldName_" to a field for person "_personID)
			// ignore to avoid trying to map things like contact.account
		}
	}
	
	Quit ret
]]></Implementation>
</Method>

<Method name="getEFEventRegistration">
<Description>
gets the EF_Event_Registration SF record if there is one for this person for this event</Description>
<FormalSpec>eventID,personID</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set soql=##class(SoqlBuilder).%New().fromx(
			"efconnector__EF_Registration__c"
		).wherex(
			##class(AndCondition).%New().add(
					##class(FieldCondition).%New(
						"efconnector__EF_Event_obj__r.efconnector__EF_Event_ID__c"
						,##class(FieldConditionValue).%New(eventID,"int")
					)
				).add(
					##class(FieldCondition).%New(
						"efconnector__EF_Person_ID__c"
						,##class(FieldConditionValue).%New(personID,"int")
					)
				)
		)
	
	set sfDataSet=..sfConn.getSOQLResults(soql)
	set EFRegistrationID=""
	try {
		set sfRecords=sfDataSet.getRootNode()
		set record=sfRecords.getNextChildByName("records")
		if $ISOBJECT(record) set EFRegistrationID=record.getValueForFirstChildByName("Id")  // assume first one as should only be one returned
	} catch err {
		// not found, don't need to throw an error
	}
	quit EFRegistrationID
]]></Implementation>
</Method>

<Method name="createOrUpdateEFEvent">
<FormalSpec>eventID</FormalSpec>
<Implementation><![CDATA[
	set xLangID=1
	set eventName=##class(setup.objEventDetails).getDetails(eventID,xLangID)
	if 'eventID Throw ##class(shared.exceptions.generalException).%New("Cannot create EF Event - no eventID")
	if $L(eventName)=0 Throw ##class(shared.exceptions.generalException).%New("Cannot create EF Event - event name is blank")
	set dataSet=##class(EF.dataCollections.dataSetTempGlobal).%New("efconnector__EF_Event__c")
	set rootNode=dataSet.getRootNode()
	do rootNode.createChild("Name").addValue(eventName)
	do ..sfConn.updateObject("efconnector__EF_Event__c/efconnector__EF_Event_ID__c",dataSet,eventID)
	quit
]]></Implementation>
</Method>

<Method name="createOrUpdateEFEventRegistration">
<FormalSpec>eventID,personID,invitationStatus=""</FormalSpec>
<Implementation><![CDATA[
	if 'eventID Throw ##class(shared.exceptions.generalException).%New("Failed: create update EF Event Registration - no eventID")
	if 'personID Throw ##class(shared.exceptions.generalException).%New("Failed: create update EF Event Registration - no personID")
	// first check if we have one already, otherwise we'll get duplicates
	set efEventRegistrationID=..getEFEventRegistration(eventID,personID)
	if $L(efEventRegistrationID) {
		do ..updateEFEventRegistration(efEventRegistrationID,eventID, personID, invitationStatus)
	} else {
		do ..createEFEventRegistration(eventID, personID, invitationStatus)
	}
	quit
]]></Implementation>
</Method>

<Method name="createEFEventRegistration">
<FormalSpec>eventID,personID,invitationStatus=""</FormalSpec>
<Implementation><![CDATA[
	if 'eventID Throw ##class(shared.exceptions.generalException).%New("Cannot create EF Event Registration - no eventID")
	if 'personID Throw ##class(shared.exceptions.generalException).%New("Cannot create EF Event Registration - no personID")
	if '..isIntegrationActiveForEvent(eventID) quit
	
	do ..findOrCreateMatchingSFPerson(personID)
	set CRMpersonSF=##class(EF.extSys.salesforce.CRMpersonSF).populateFromCOD(personID)
	set contactID=CRMpersonSF.contactID
	if $L(contactID)	{
		set leadID=""
	} else {
		set leadID=CRMpersonSF.leadID
	}
	if ($L(leadID)=0)&&($L(contactID)=0) Throw ##class(shared.exceptions.generalException).%New("Cannot create EF Event Registration - no leadID or contactID")
	// need the EF_Event object to exist before we create the registration link to it
	do ..createOrUpdateEFEvent(eventID)
	
	set controllerID=##class(setup.objEvent).getControllerID(eventID)
	if invitationStatus="" set invitationStatus=##class(cod.objItemData).get(personID,"Invitation Status",controllerID)
	set attendeeCategoryID=##class(links.lnkPersonPurchase).getEventCategoryID(eventID,personID)
	set xLangID=1
	set attendeeCategory=##class(setup.objEventCategory).getDescription(attendeeCategoryID,xLangID)
	set dataSet=##class(EF.dataCollections.dataSetTempGlobal).%New("efconnector__EF_Registration__c")
	set rootNode=dataSet.getRootNode()
	if $L(contactID) do rootNode.createChild("efconnector__Contact__c").addValue(contactID)
	if $L(leadID) do rootNode.createChild("efconnector__Lead__c").addValue(leadID)
	do rootNode.createChild("efconnector__EF_Person_ID__c").addValue(personID)
	do rootNode.createChild("efconnector__Registration_Status__c").addValue(invitationStatus)
	if $L(attendeeCategory) do rootNode.createChild("efconnector__Attendee_Category__c").addValue(attendeeCategory)
	set event=rootNode.createChild("efconnector__EF_Event_obj__r")
	do event.createChild("efconnector__EF_Event_ID__c").addValue(eventID)
	do ..sfConn.createObject("efconnector__EF_Registration__c",dataSet)
	quit
]]></Implementation>
</Method>

<Method name="updateEFEventRegistration">
<FormalSpec>efEventRegistrationID,eventID,personID,invitationStatus=""</FormalSpec>
<Implementation><![CDATA[
	if $L(efEventRegistrationID)=0 Throw ##class(shared.exceptions.generalException).%New("Cannot update EF Event Registration - no efEventRegistrationID")
	if 'eventID Throw ##class(shared.exceptions.generalException).%New("Cannot update EF Event Registration - no eventID")
	if 'personID Throw ##class(shared.exceptions.generalException).%New("Cannot update EF Event Registration - no personID")
	set controllerID=##class(setup.objEvent).getControllerID(eventID)
	if invitationStatus="" set invitationStatus=##class(cod.objItemData).get(personID,"Invitation Status",controllerID)
	set attendeeCategoryID=##class(links.lnkPersonPurchase).getEventCategoryID(eventID,personID)
	set xLangID=1
	set attendeeCategory=##class(setup.objEventCategory).getDescription(attendeeCategoryID,xLangID)
	set dataSet=##class(EF.dataCollections.dataSetTempGlobal).%New("efconnector__EF_Registration__c")
	set rootNode=dataSet.getRootNode()
	do rootNode.createChild("efconnector__Registration_Status__c").addValue(invitationStatus)
	if $L(attendeeCategory) do rootNode.createChild("efconnector__Attendee_Category__c").addValue(attendeeCategory)
	do ..sfConn.updateObject("efconnector__EF_Registration__c",dataSet,efEventRegistrationID)
	quit
]]></Implementation>
</Method>

<Method name="getActiveIntegrationVersion">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set version="none"
	if ##class(setup.objSystemTypes).isModuleAllowed("Salesforce Schroders") {
		if ##class(setup.objSetting).getParameter("salesforce","Connection Allowed")=1 set version=1
	}
	
	if ##class(setup.objSystemTypes).isModuleAllowed("Salesforce") {
		try {
			If (##class(EF.extSys.salesforce.objAccountSF).getDefaultAccountID()) {
				set objAccountSF=##class(EF.extSys.salesforce.objAccountSF).getDefaultAccount()
				If ($IsObject(objAccountSF)) {
					if objAccountSF.isIntegrationOn {
						set version=2
					}
				}
			}
		} catch {
		
		} 
	}
	
	return version
]]></Implementation>
</Method>

<Method name="isIntegrationActiveForEvent">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set out=1
	
	If (..getActiveIntegrationVersion() '= "2") {
		Set out=0
	} else {
		Set out=..isIntegrationEnabledForEvent(eventID)
	}
	
	quit out
]]></Implementation>
</Method>

<Method name="isIntegrationEnabledForEvent">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set out=1
	
	If ##class(setup.objEventSetting).getParameter("Salesforce V2","Integration disabled for this event",eventID) {
		set out=0
	}
	
	quit out
]]></Implementation>
</Method>

<Method name="isInvitationCollectionImportAllowedForEvent">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set ret=1
	
	Set attendeeIDMode=##class(setup.eventBookingMethods).getAttendeeIDMode(eventID)
	
	If (attendeeIDMode="username") {
		Set ret=0
	}
		
	Quit ret
]]></Implementation>
</Method>

<Method name="isEFConnectorInstalled">
<ClassMethod>1</ClassMethod>
<FormalSpec>sfInteg:EF.extSys.salesforce.CRMintegrationSF=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if '$ISOBJECT(sfInteg)	{
		set sfInteg=##class(EF.extSys.salesforce.CRMintegrationSF).createWithDefaultConnection()
	}
	try	{
		set sfDataSet=sfInteg.getEventsforceEventMetaData()
		set found=1
	} catch err {
		set found=0
	}
	quit found
]]></Implementation>
</Method>

<Method name="isPersonUpdateAllowed">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID,personID</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if '..isIntegrationActiveForEvent(eventID) {
		return 0
	}
	set objAccountSF=##class(EF.extSys.salesforce.objAccountSF).getDefaultAccount()
	if '..isPersonLinkedToSalesforce(personID) {
		//"if a person is not linked to salesforce:=Do Nothing"
		if objAccountSF.unlinkedPersonAction="doNothing" {
			return 0
		} 
		if 'eventID {
			return 0	
		}
		if ##class(setup.objPreRegister).hasPersonBeenInvited(personID,eventID) {
			return 1	
		}
		if ##class(eCom.objPurchase).doesPersonHavePurchaseForEvent(personID,eventID) {
			return 1
		}
		
		return 0
		
		
	} else {
		// "if a person is already linked to salesforce:=Do Nothing"
		if objAccountSF.islinkedSalesforcePersonUpdated=0 {
			return 0
		} else {
			return 1
		}
	}
]]></Implementation>
</Method>

<Method name="isPersonLinkedToSalesforce">
<ClassMethod>1</ClassMethod>
<FormalSpec>personID</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if (##class(cod.objItemData).get(personID,"Salesforce Lead ID")="") && (##class(cod.objItemData).get(personID,"Salesforce Contact ID")="") {
		return 0	
	}
	return 1
]]></Implementation>
</Method>

<Method name="updateOrCreateUnlinkedPeople">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set value=""
	set objAccountSF=##class(EF.extSys.salesforce.objAccountSF).getDefaultAccount()
	set value=objAccountSF.unlinkedPersonAction
	
	return value
]]></Implementation>
</Method>

<Method name="getContactMetaData">
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[	Quit ..sfConn.getMetaData("Contact")
]]></Implementation>
</Method>

<Method name="getLeadMetaData">
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[	Quit ..sfConn.getMetaData("Lead")
]]></Implementation>
</Method>

<Method name="getAccountMetaData">
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[	Quit ..sfConn.getMetaData("Account")
]]></Implementation>
</Method>

<Method name="getEventsforceEventMetaData">
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[	Quit ..sfConn.getMetaData("efconnector__EF_Event__c")
]]></Implementation>
</Method>
</Class>


<Class name="EF.extSys.salesforce.CRMinvitationCollectionSF">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.extSys.salesforce.CRMinvitationCollectionSF.CLS/EV.0
;vc; Component: CLS.EF.extSys.salesforce.CRMinvitationCollectionSF
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.extSys.salesforce.CRMinvitationCollectionSF.CLS/EV.0</td><td>CLS.EF.extSys.salesforce.CRMinvitationCollectionSF</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.extSys.CRMinvitationCollection</Super>
<TimeChanged>63216,45261</TimeChanged>
<TimeCreated>63216,40163.50743</TimeCreated>

<Method name="createFromDataSetNode">
<ClassMethod>1</ClassMethod>
<FormalSpec>node:EF.dataCollections.dataSetNode</FormalSpec>
<ReturnType>CRMinvitationCollectionSF</ReturnType>
<Implementation><![CDATA[
	Set ret=..%New()
	
	Set ret.itemID=node.getValueForFirstChildByName("Id")
	Set ret.name=node.getValueForFirstChildByName("Name")
	
	Set sfNumOfContacts=+node.getValueForFirstChildByName("NumberOfContacts")
	Set sfNumOfLeads=+node.getValueForFirstChildByName("NumberOfLeads")
	Set ret.description=##class(shared.pCSP).out("Contacts: {{{VAR01}}}, Leads: {{{VAR02}}}",,sfNumOfContacts,sfNumOfLeads)
	
	Quit ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.extSys.salesforce.CRMitemsListSF">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.extSys.salesforce.CRMitemsListSF.CLS/EV.0
;vc; Component: CLS.EF.extSys.salesforce.CRMitemsListSF
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.extSys.salesforce.CRMitemsListSF.CLS/EV.0</td><td>CLS.EF.extSys.salesforce.CRMitemsListSF</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.extSys.CRMitemsList</Super>
<TimeChanged>63216,61939</TimeChanged>
<TimeCreated>63216,50717.571883</TimeCreated>

<Property name="dataSet">
<Type>EF.dataCollections.dataSet</Type>
<Private>1</Private>
</Property>

<Property name="listNode">
<Type>EF.dataCollections.dataSetNode</Type>
<Private>1</Private>
</Property>

<Method name="%OnNew">
<FormalSpec>itemClassName:%String,dataSet:EF.dataCollections.dataSet</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ..itemClassName=itemClassName

	Set ..dataSet=dataSet
	
	Set ..listNode=dataSet.getRootNode()
	
	Set ..itemCount=..listNode.getValueForFirstChildByName("totalSize")
	
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="getNext">
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[
	Set ret=""
	
	Set nextNode=..listNode.getNextChildByName("records")
	If ($IsObject(nextNode)) {
		Set ret=nextNode.convertToObject(..itemClassName)
	}
	
	Quit ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.extSys.salesforce.CRMpersonSF">
<Description><![CDATA[
Used when creating new leads and contacts
<!-- ;vc;
;vc;    Object: EF.extSys.salesforce.CRMpersonSF.CLS/EV.2
;vc; Component: CLS.EF.extSys.salesforce.CRMpersonSF
;vc;  Location: SmallDev
;vc; Date/Time: 25-Sep-15 12:28
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.extSys.salesforce.CRMpersonSF.CLS/EV.2</td><td>CLS.EF.extSys.salesforce.CRMpersonSF</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Sep-15 12:28</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.extSys.CRMperson</Super>
<TimeChanged>63819,59765</TimeChanged>
<TimeCreated>63209,50522.346951</TimeCreated>

<Property name="leadID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="250"/>
</Property>

<Property name="contactID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="250"/>
</Property>

<Method name="populateFromCOD">
<ClassMethod>1</ClassMethod>
<FormalSpec>personID</FormalSpec>
<ReturnType>EF.extSys.salesforce.CRMpersonSF</ReturnType>
<Implementation><![CDATA[
	set myObj=##super(personID)
	set myObj.leadID=##class(cod.objItemData).get(personID,"Salesforce Lead ID")	
	set myObj.contactID=##class(cod.objItemData).get(personID,"Salesforce Contact ID")	
	set codItemForCompany="company"
	if myObj.contactID'="" {
		set codItemForCompany=##class(EF.extSys.salesforce.objFieldMappingSFContact).getFieldMappingForExtSysFieldName("Account.Name").objItemName.description
	} else {
		set codItemForCompany=##class(EF.extSys.salesforce.objFieldMappingSFLead).getFieldMappingForExtSysFieldName("Company").objItemName.description
	}
	set myObj.company=##class(cod.objItemData).get(personID,codItemForCompany)
	if myObj.company="" set myObj.company="--no company available--"
	return myObj
]]></Implementation>
</Method>

<Method name="getNewLeadDataSet">
<FormalSpec>eventID</FormalSpec>
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[
	# dim objFieldMappingSF As EF.extSys.salesforce.objFieldMappingSFLead
	set dataSet=##class(EF.dataCollections.dataSetTempGlobal).%New("Lead")
	set rootNode=dataSet.getRootNode()
	do rootNode.createChild("email").addValue(..email)
	do rootNode.createChild("firstname").addValue(..firstname)
	do rootNode.createChild("lastname").addValue(..lastname)
	do rootNode.createChild("company").addValue(..company)
	quit dataSet
]]></Implementation>
</Method>

<Method name="addCodItemToDataSet">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[objFieldMappingSF:EF.extSys.salesforce.objFieldMappingSF,&rootNode:EF.dataCollections.dataSet,value:%String]]></FormalSpec>
<Implementation><![CDATA[
	if '$ISOBJECT(objFieldMappingSF) return
	if objFieldMappingSF.isReadOnly() return
		
	if objFieldMappingSF.objItemName.type="date" {
		set value=##class(shared.dateFunctions).multiDate(value,25) // YYYY-MM-DD
	}
	do rootNode.createChild(objFieldMappingSF.extSysFieldName).addValue(value)
]]></Implementation>
</Method>
</Class>


<Class name="EF.extSys.salesforce.objAccountSF">
<Description><![CDATA[
Storage object to store Salesforce specific credentials. 
<!-- ;vc;
;vc;    Object: EF.extSys.salesforce.objAccountSF.CLS/EV.2
;vc; Component: CLS.EF.extSys.salesforce.objAccountSF
;vc;  Location: SmallDev
;vc; Date/Time: 04-Sep-14 15:15
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.extSys.salesforce.objAccountSF.CLS/EV.2</td><td>CLS.EF.extSys.salesforce.objAccountSF</td><td>SmallDev</td><td style='white-space: nowrap;'>04-Sep-14 15:15</td><td>AdrianM</td></tr></table>
]]></Description>
<Super>EF.extSys.objAccount</Super>
<TimeChanged>63434,57929.535095</TimeChanged>
<TimeCreated>63134,47038.418848</TimeCreated>

<Property name="securityToken">
<Description>
Security Token is an extra piece of information (if available) that Salesforces uses for login.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="isIntegrationOn">
<Description>
integrationStatus will hold if integrtion is active or not.</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="environment">
<Type>%String</Type>
<InitialExpression>"production"</InitialExpression>
<Parameter name="VALUELIST" value=",production,sandbox"/>
</Property>

<Property name="unlinkedPersonAction">
<Type>%String</Type>
<InitialExpression>"createNew"</InitialExpression>
<Parameter name="VALUELIST" value=",createNew,searchAndUpdate,doNothing"/>
</Property>

<Property name="islinkedSalesforcePersonUpdated">
<Description>
unlinkedPersonAction will hold if the default action the integration needs to take if an unlinked person is found.</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Parameter name="DEFAULTENCKEYREF">
<Default>sfpsw</Default>
</Parameter>

<Method name="getConnection">
<ReturnType>EF.lib.salesforce.connection</ReturnType>
<Implementation><![CDATA[
	Set ret=""
	
	Set auth=##class(EF.lib.salesforce.authentication).%New(..userName,..getDecryptedPassword(), ..securityToken,..environment)
	
	Do auth.authenticate()
	Set ret=##class(EF.lib.salesforce.connection).%New(auth)
	
	Quit ret
]]></Implementation>
</Method>

<Method name="getDefaultAccount">
<Description>
As there is going to be one saleforce account per namespace, the following will return the account object ID. </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>objAccountSF</ReturnType>
<Implementation><![CDATA[
	set accountID=+..getDefaultAccountID()
	
	if ('accountID) {
		Throw ##class(shared.exceptions.generalException).%New("No default account!")
	} else {
		Quit ..%OpenId(accountID)
	}
]]></Implementation>
</Method>

<Method name="getDefaultAccountID">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(setup.objSetting).getParameter("SalesforceV2", "default salesforce account ID")
]]></Implementation>
</Method>

<Method name="setDefaultAccountID">
<ClassMethod>1</ClassMethod>
<FormalSpec>SFaccountID:%String</FormalSpec>
<Implementation><![CDATA[	do ##class(setup.objSetting).setParameter("SalesforceV2", "default salesforce account ID", SFaccountID)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>objAccountSFDefaultData</DefaultData>
<Data name="objAccountSFDefaultData">
<Subscript>"objAccountSF"</Subscript>
<Value name="1">
<Value>securityToken</Value>
</Value>
<Value name="2">
<Value>integrationStatus</Value>
</Value>
<Value name="3">
<Value>unlinkedPersonAction</Value>
</Value>
<Value name="4">
<Value>createNewRecordAs</Value>
</Value>
<Value name="5">
<Value>islinkedSelesforcePersonUpdated</Value>
</Value>
<Value name="6">
<Value>islinkedSalesforcePersonUpdated</Value>
</Value>
<Value name="7">
<Value>isIntegrationOn</Value>
</Value>
<Value name="8">
<Value>environment</Value>
</Value>
</Data>
</Storage>

<Method name="installEnvironmentProperty">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&SQL(UPDATE EF_extSys_salesforce.objAccountSF
		SET environment = 'production'
		WHERE (environment IS NULL) OR (environment = '')
	)
]]></Implementation>
</Method>
</Class>


<Class name="EF.extSys.salesforce.objFieldMappingSF">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.extSys.salesforce.objFieldMappingSF.CLS/EV.6
;vc; Component: CLS.EF.extSys.salesforce.objFieldMappingSF
;vc;  Location: SmallDev
;vc; Date/Time: 24-Sep-15 14:50
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.extSys.salesforce.objFieldMappingSF.CLS/EV.6</td><td>CLS.EF.extSys.salesforce.objFieldMappingSF</td><td>SmallDev</td><td style='white-space: nowrap;'>24-Sep-15 14:50</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>%Library.Persistent,EF.extSys.objFieldMapping</Super>
<TimeChanged>63819,53655.625737</TimeChanged>
<TimeCreated>63202,59074.788912</TimeCreated>

<Parameter name="externalSysObject">
<Type>%String</Type>
</Parameter>

<Method name="isReadOnly">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set out=0
	if ..extSysFieldName["." set out=1
	quit out
]]></Implementation>
</Method>

<Method name="populateMapping">
<FormalSpec>codItemName,extSysFieldName,type</FormalSpec>
<Implementation><![CDATA[
	if '$l(codItemName) {
		throw ##class(shared.exceptions.generalException).%New("No codItemName")
	}
	if '$l(extSysFieldName) {
		throw ##class(shared.exceptions.generalException).%New("No externalSysObject")
	}
	set itemNameID=##class(cod.objItemName).getIDFromDescriptionNoEvent(codItemName)
	if 'itemNameID {
		throw ##class(shared.exceptions.generalException).%New("Invalid codItemName")
	}
	try {
		do ..objItemNameSetObjectId(itemNameID)
		set ..extSysFieldName=extSysFieldName
		set ..type=type	
	} catch errObj {
		throw errObj
	}
]]></Implementation>
</Method>

<Method name="delete">
<ClassMethod>1</ClassMethod>
<FormalSpec>fieldMappingID</FormalSpec>
<Implementation><![CDATA[
	try {
		do ..%DeleteId(fieldMappingID)
	} catch errObj {
		throw errObj
	}
]]></Implementation>
</Method>

<Method name="getFieldMappingForCodItem">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemName</FormalSpec>
<ReturnType>EF.extSys.salesforce.objFieldMappingSF</ReturnType>
<Implementation><![CDATA[
	if '$l(itemName) Throw ##class(shared.exceptions.generalException).%New("itemName is blank")
	
	set itemName=$ZCVT(itemName,"L")
	do ..getHardCodedMappingsByCodItemName(.hardCodedFields)
	if $D(hardCodedFields(itemName)) {
		quit hardCodedFields(itemName)
	}
	Set qry=""
	Set qry=qry_" SELECT ID "
	Set tableName=##class(EF.utils.classes).getFullTableRefFromFullClassName(..%ClassName(1))
	Set qry=qry_" FROM "_##class(EF.encoders.sql).encodeTableName(tableName)_" "
	Set qry=qry_" WHERE %SQLUPPER(objItemName->description) = %SQLUPPER(?)"
	
	Set rs=##class(%ResultSet).%New()
	
	Set sc=rs.Prepare(qry)
	If ($$$ISERR(sc)) {
		Throw ##class(shared.exceptions.generalStatusException).%New(sc)
	}
	
	do rs.Execute(itemName)
	set out=""
	If rs.Next() {
		set out=..%OpenId(rs.Get("ID"))
	}
	quit out
]]></Implementation>
</Method>

<Method name="getFieldMappingForExtSysFieldName">
<ClassMethod>1</ClassMethod>
<FormalSpec>extSysFieldName</FormalSpec>
<ReturnType>EF.extSys.salesforce.objFieldMappingSF</ReturnType>
<Implementation><![CDATA[
	if '$l(extSysFieldName) Throw ##class(shared.exceptions.generalException).%New("extSysFieldName is blank")
	
	set extSysFieldName=$ZCVT(extSysFieldName,"L")
	do ..getHardCodedMappingsByExternalField(extSysFieldName)
	if $D(hardCodedFields(extSysFieldName)) {
		quit hardCodedFields(extSysFieldName)
	}
	Set qry=""
	Set qry=qry_" SELECT ID "
	Set tableName=##class(EF.utils.classes).getFullTableRefFromFullClassName(..%ClassName(1))
	Set qry=qry_" FROM "_##class(EF.encoders.sql).encodeTableName(tableName)_" "
	Set qry=qry_" WHERE %SQLUPPER(extSysFieldName) = %SQLUPPER(?)"
	
	Set rs=##class(%ResultSet).%New()
	
	Set sc=rs.Prepare(qry)
	If ($$$ISERR(sc)) {
		Throw ##class(shared.exceptions.generalStatusException).%New(sc)
	}
	
	do rs.Execute(extSysFieldName)
	set out=""
	If rs.Next() {
		set out=..%OpenId(rs.Get("ID"))
	}
	quit out
]]></Implementation>
</Method>

<Method name="fieldMappingForCodItemExists">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemName</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set out=0
	set itemName=..getCodItemNameForSalesforce(itemName) 
	if $ISOBJECT(##class(EF.extSys.salesforce.objFieldMappingSFLead).getFieldMappingForCodItem(itemName)) set out=1
	if $ISOBJECT(##class(EF.extSys.salesforce.objFieldMappingSFContact).getFieldMappingForCodItem(itemName)) set out=1
	quit out
]]></Implementation>
</Method>

<Method name="getCodItemNameForSalesforce">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemName</FormalSpec>
<Implementation><![CDATA[
	set itemName=$ZCVT(itemName,"L")
	if itemName="address line 1" set itemName="salesforce street"
	if itemName="address line 2" set itemName="salesforce street"
	if itemName="address line 3" set itemName="salesforce street"
	
	quit itemName
]]></Implementation>
</Method>

<Method name="isCodItemSalesforceStreet">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemName</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set itemName=$ZCVT(itemName,"L")
	if itemName="address line 1" quit 1
	if itemName="address line 2" quit 1
	if itemName="address line 3" quit 1
	quit 0
]]></Implementation>
</Method>

<Method name="getSalesforceStreet">
<ClassMethod>1</ClassMethod>
<FormalSpec>personID</FormalSpec>
<Implementation><![CDATA[
	set addressLine1=##class(cod.objItemData).get(personID,"address line 1")
	set addressLine2=##class(cod.objItemData).get(personID,"address line 2")
	set addressLine3=##class(cod.objItemData).get(personID,"address line 3")

	set out=addressLine1
	// using CRLF even though SF uses LF between items - seems that whenever you edit, cache will replace LF with CRLF and therefore oldData'=newData
	if $L(addressLine2) set out=out_$C(10)_addressLine2
	if $L(addressLine3) set out=out_$C(10)_addressLine3
	quit out
]]></Implementation>
</Method>

<Method name="setSalesforceStreet">
<ClassMethod>1</ClassMethod>
<FormalSpec>personID,value</FormalSpec>
<Implementation><![CDATA[
	set addressLine1=$p(value,$C(10),1)
	set addressLine2=$p(value,$C(10),2)	
	set addressLine3=$p(value,$C(10),3,99)
	set addressLine3=$TR(addressLine3,$C(10)," ")
	
	do ##class(cod.objItemData).set(personID,"address line 1",addressLine1)
	do ##class(cod.objItemData).set(personID,"address line 2",addressLine2)
	do ##class(cod.objItemData).set(personID,"address line 3",addressLine3)
]]></Implementation>
</Method>

<Method name="add">
<ClassMethod>1</ClassMethod>
<FormalSpec>codItemName,extSysFieldName,type</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	try {
		set objFieldMapping=..%New()
		do objFieldMapping.populateMapping(codItemName, extSysFieldName,type)
		do objFieldMapping.%Save()
		set fieldMappingID=objFieldMapping.%Id()
	} catch errObj {
		throw errObj
	}
	quit fieldMappingID
]]></Implementation>
</Method>

<Method name="update">
<ClassMethod>1</ClassMethod>
<FormalSpec>fieldMappingID,codItemName,extSysFieldName,type</FormalSpec>
<Implementation><![CDATA[
	
	try {
		set objFieldMappingSF=..%OpenId(fieldMappingID)
		do objFieldMappingSF.populateMapping(codItemName, extSysFieldName,type)
		set ok=objFieldMappingSF.%Save()
	} catch errObj {
		throw errObj
	}
]]></Implementation>
</Method>

<Method name="getAllMappingsByExternalField">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&returnArray,indexConvertCase="L"]]></FormalSpec>
<Implementation><![CDATA[
	do ..getHardCodedMappingsByExternalField(.returnArray, indexConvertCase)
	do ..getCustomMappingsByExternalField(.returnArray, indexConvertCase)
]]></Implementation>
</Method>

<Method name="getCustomMappingsByCodItemName">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&returnArray]]></FormalSpec>
<Implementation><![CDATA[
	set rs=##class(%ResultSet).%New("EF.extSys.salesforce."_##class(EF.encoders.sql).doNotEncodeString(..%ClassName())_":qAllCustomMappings")
	do rs.Execute()
	while rs.Next() {
		set codItemName=$ZCVT(rs.Get("codItemName"),"L")
		set fieldMappingSFID=rs.Get("ID")
		set returnArray(codItemName,fieldMappingSFID)=..%OpenId(fieldMappingSFID)	
	}
]]></Implementation>
</Method>

<Method name="getCustomMappingsByExternalField">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&returnArray,indexConvertCase="L"]]></FormalSpec>
<Implementation><![CDATA[
	set rs=##class(%ResultSet).%New("EF.extSys.salesforce."_##class(EF.encoders.sql).doNotEncodeString(..%ClassName())_":qAllCustomMappings")
	do rs.Execute()
	while rs.Next() {
		set fieldMappingSFID=rs.Get("ID")
		If ($LENGTH(indexConvertCase)) {
			set extSysFieldName=$ZCVT(rs.Get("extSysFieldName"),indexConvertCase)
		} else {
			set extSysFieldName=rs.Get("extSysFieldName")
		}
		set returnArray(extSysFieldName)=..%OpenId(fieldMappingSFID)
	}
]]></Implementation>
</Method>

<Method name="getHardCodedMappingsByExternalField">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&returnArray,indexConvertCase=""]]></FormalSpec>
<Implementation><![CDATA[
	do ..getHardCodedMappingsByCodItemName(.tmpArray)
	set tmp=""
	for {
		set tmp=$O(tmpArray(tmp))
		if tmp="" quit
		set objFieldMapping=tmpArray(tmp)
		
		If ($LENGTH(indexConvertCase)) {
			Set extSysFieldName=$ZCONVERT(objFieldMapping.extSysFieldName,indexConvertCase)
		} else {
			Set extSysFieldName=objFieldMapping.extSysFieldName
		}
		set returnArray(extSysFieldName)=objFieldMapping
	}
]]></Implementation>
</Method>

<Method name="getAvailableFieldsFromEventsforce">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&returnArray]]></FormalSpec>
<Implementation><![CDATA[
	do ..getHardCodedMappingsByCodItemName(.hardCodedFields)
	set rs=##class(%ResultSet).%New("cod.objItemName:qCarryOverItems")
	do rs.Execute()
	while rs.Next() {
		set name=$ZCVT(rs.Get("description"),"L")
		if $D(hardCodedFields(name)) continue
		if $ZCVT(name,"L")="address line 1" continue
		if $ZCVT(name,"L")="address line 2" continue
		if $ZCVT(name,"L")="address line 3" continue
		set returnArray(name,"label")=name
		set returnArray(name,"type")=rs.Get("type")
	}
	set returnArray("salesforce street","label")="Address lines 1, 2 and 3"
	set returnArray("salesforce street","type")="textarea"
]]></Implementation>
</Method>

<Method name="getAvailableFieldsFromDataSet">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&sfDataSet:EF.dataCollections.dataSet,&returnArray,namePrefix="",labelPrefix=""]]></FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set sfDataNode=sfDataSet.getRootNode()
	do ..getHardCodedMappingsByExternalField(.hardCodedFields)
	set objectData=sfDataNode.getNextChild()
	if '$ISOBJECT(objectData) quit
	set objectName=objectData.name
	for {
		set field=objectData.getNextChildByName("fields")
		if '$ISOBJECT(field) quit
		if field.getValueForFirstChildByName("deprecatedAndHidden")="true" continue
		if field.getValueForFirstChildByName("updateable")="false" continue
		
		set type=field.getValueForFirstChildByName("type")
		set canMapTo=..getCodTypesAllowedForSFType(type)
		if '$l(canMapTo) continue
		
		set name=namePrefix_field.getValueForFirstChildByName("name")
		if $D(hardCodedFields(name)) continue
		
		set label=field.getValueForFirstChildByName("label")
		
		set returnArray(name,"label")=labelPrefix_label
		set returnArray(name,"type")=type
		set returnArray(name,"canMapTo")=canMapTo
		
	}
	quit
]]></Implementation>
</Method>

<Method name="getCodTypesAllowedForSFType">
<ClassMethod>1</ClassMethod>
<FormalSpec>sfType</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=$CASE($ZCVT(sfType,"L"),
		"boolean":"checkbox",
		"date":"date",
		"email":"emailaddress|multiemailaddress|text",
		"int":"integer|floatingpointnumber|text",
		"double":"integer|floatingpointnumber|text",
		"percent":"integer|floatingpointnumber",
		"phone":"phonenumber|text",
		"picklist":"radiobutton|dropdown|text",
		"string":"radiobutton|dropdown|text",
		"textarea":"textarea",
		"url":"webaddress|text",:""
	)
	quit out
]]></Implementation>
</Method>

<Method name="getArrayOfCodItemsMappedToSalesforce">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&returnArray]]></FormalSpec>
<Implementation><![CDATA[
	do ##class(EF.extSys.salesforce.objFieldMappingSFLead).getHardCodedMappingsByCodItemName(.returnArray)
	do ##class(EF.extSys.salesforce.objFieldMappingSFLead).getCustomMappingsByCodItemName(.returnArray)
	do ##class(EF.extSys.salesforce.objFieldMappingSFContact).getHardCodedMappingsByCodItemName(.returnArray)
	do ##class(EF.extSys.salesforce.objFieldMappingSFContact).getCustomMappingsByCodItemName(.returnArray)
]]></Implementation>
</Method>

<Method name="install">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	do ##class(cod.objItemName).add("salesforce street",0,"text","SFDC V2",1,1,1,,1,1,1) 
	do ##class(EF.extSys.salesforce.objFieldMappingSFLead).install()	
	do ##class(EF.extSys.salesforce.objFieldMappingSFContact).install()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^EF.extSys5D42.objFieldMapAE12D</DataLocation>
<DefaultData>objFieldMappingSFDefaultData</DefaultData>
<IdLocation>^EF.extSys5D42.objFieldMapAE12D</IdLocation>
<IndexLocation>^EF.extSys5D42.objFieldMapAE12I</IndexLocation>
<StreamLocation>^EF.extSys5D42.objFieldMapAE12S</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="objFieldMappingSFDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>objItemName</Value>
</Value>
<Value name="3">
<Value>extSysFieldName</Value>
</Value>
<Value name="4">
<Value>xCRuserID</Value>
</Value>
<Value name="5">
<Value>xMOuserID</Value>
</Value>
<Value name="6">
<Value>xCRstamp</Value>
</Value>
<Value name="7">
<Value>xMOstamp</Value>
</Value>
<Value name="8">
<Value>type</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.extSys.salesforce.objFieldMappingSFContact">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.extSys.salesforce.objFieldMappingSFContact.CLS/EV.1
;vc; Component: CLS.EF.extSys.salesforce.objFieldMappingSFContact
;vc;  Location: SmallDev
;vc; Date/Time: 24-Feb-14 15:11
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.extSys.salesforce.objFieldMappingSFContact.CLS/EV.1</td><td>CLS.EF.extSys.salesforce.objFieldMappingSFContact</td><td>SmallDev</td><td style='white-space: nowrap;'>24-Feb-14 15:11</td><td>AdrianM</td></tr></table>
]]></Description>
<Super>EF.extSys.salesforce.objFieldMappingSF</Super>
<TimeChanged>63242,63129.653773</TimeChanged>
<TimeCreated>63201,51235.280917</TimeCreated>

<Parameter name="externalSysObject">
<Type>%String</Type>
<Default>Contact</Default>
</Parameter>

<Method name="getAvailableFieldsFromExternalSystem">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&sfInteg:EF.extSys.salesforce.CRMintegrationSF,&returnArray]]></FormalSpec>
<Implementation><![CDATA[
	
	Try {
		set sfDataSetContact=sfInteg.getContactMetaData()
		do ..getAvailableFieldsFromDataSet(.sfDataSetContact,.returnArray)
	} catch ex {
		throw ##class(shared.exceptions.generalException).%New("Unable to get list of available contact fields from Salesforce")
	}
	
	Try {
		set sfDataSetAccount=sfInteg.getAccountMetaData()
		do ..getAvailableFieldsFromDataSet(.sfDataSetAccount,.returnArray,"Account.","Account Details: ")
	} catch ex {
		throw ##class(shared.exceptions.generalException).%New("Unable to get list of available account fields from Salesforce")
	}
	

	
	quit
]]></Implementation>
</Method>

<Method name="getHardCodedMappingsByCodItemName">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&returnArray]]></FormalSpec>
<Implementation><![CDATA[
	set returnArray("firstname")=..%New()
	do returnArray("firstname").populateMapping("firstname","Firstname","string")
	set returnArray("lastname")=..%New()
	do returnArray("lastname").populateMapping("lastname","Lastname","string")
	set returnArray("email")=..%New()
	do returnArray("email").populateMapping("email","Email","email")
]]></Implementation>
</Method>

<Method name="install">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	do ..add("town","MailingCity","string")
	do ..add("postcode","MailingPostalCode","string")
	do ..add("country","MailingCountry","string")
	do ..add("phone number","Phone","phone")
	do ..add("company","Account.Name","string")
	do ..add("salesforce street","MailingStreet","string")
]]></Implementation>
</Method>

<Query name="qAllCustomMappings">
<Type>%SQLQuery</Type>
<SqlQuery><![CDATA[	SELECT ID,extSysFieldName,objItemName->description As codItemName FROM EF_extSys_salesforce.objFieldMappingSFContact]]></SqlQuery>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.extSys.salesforce.objFieldMappingSFLead">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.extSys.salesforce.objFieldMappingSFLead.CLS/EV.1
;vc; Component: CLS.EF.extSys.salesforce.objFieldMappingSFLead
;vc;  Location: SmallDev
;vc; Date/Time: 24-Feb-14 15:13
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.extSys.salesforce.objFieldMappingSFLead.CLS/EV.1</td><td>CLS.EF.extSys.salesforce.objFieldMappingSFLead</td><td>SmallDev</td><td style='white-space: nowrap;'>24-Feb-14 15:13</td><td>AdrianM</td></tr></table>
]]></Description>
<Super>EF.extSys.salesforce.objFieldMappingSF</Super>
<TimeChanged>63242,63139.865888</TimeChanged>
<TimeCreated>63201,51341.126323</TimeCreated>

<Parameter name="externalSysObject">
<Type>%String</Type>
<Default>Lead</Default>
</Parameter>

<Method name="getAvailableFieldsFromExternalSystem">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&sfInteg:EF.extSys.salesforce.CRMintegrationSF,&returnArray]]></FormalSpec>
<Implementation><![CDATA[
	Try {
		set sfDataSet=sfInteg.getLeadMetaData()
	} catch ex {
		throw ##class(shared.exceptions.generalException).%New("Unable to get list of available lead fields from Salesforce")
	}
	do ..getAvailableFieldsFromDataSet(.sfDataSet,.returnArray)
	
	quit
]]></Implementation>
</Method>

<Method name="getHardCodedMappingsByCodItemName">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&returnArray]]></FormalSpec>
<Implementation><![CDATA[
	set returnArray("firstname")=..%New()
	do returnArray("firstname").populateMapping("firstname","Firstname","string")
	set returnArray("lastname")=..%New()
	do returnArray("lastname").populateMapping("lastname","Lastname","string")
	set returnArray("email")=..%New()
	do returnArray("email").populateMapping("email","email","Email")
]]></Implementation>
</Method>

<Method name="install">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	do ..add("town","City","string")
	do ..add("postcode","PostalCode","string")
	do ..add("country","Country","string")
	do ..add("phone number","Phone","phone")
	do ..add("company","Company","string")
	do ..add("salesforce street","Street","string")
]]></Implementation>
</Method>

<Query name="qAllCustomMappings">
<Type>%SQLQuery</Type>
<SqlQuery><![CDATA[	SELECT ID,extSysFieldName,objItemName->description As codItemName FROM EF_extSys_salesforce.objFieldMappingSFLead]]></SqlQuery>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.htmlGenerator">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.htmlGenerator.CLS/EV.25
;vc; Component: CLS.EF.htmlGenerator
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.htmlGenerator.CLS/EV.25</td><td>CLS.EF.htmlGenerator</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<IncludeCode>%ZEN.Utils</IncludeCode>
<TimeChanged>64113,37740</TimeChanged>
<TimeCreated>63393,34874.890725</TimeCreated>

<Method name="encodeForHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out= ..encodeHTMLMain(inString)
	set out= ..replaceCRLFWithBR(out)
	return out
]]></Implementation>
</Method>

<Method name="encodeForHTMLAttribute">
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ..encodeHTMLMain(inString)
]]></Implementation>
</Method>

<Method name="encodeForJavaScript">
<ClassMethod>1</ClassMethod>
<FormalSpec>string</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set string = ##class(shared.stringFunctions).stripDisallowedControlCharacters(string)
	
	quit $zconvert(string,"O","JS")
]]></Implementation>
</Method>

<Method name="encodeForURL">
<ClassMethod>1</ClassMethod>
<FormalSpec>inParameter</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(shared.pCSP).EscapeURL(inParameter)
]]></Implementation>
</Method>

<Method name="encodeForCSS">
<ClassMethod>1</ClassMethod>
<FormalSpec>string</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ##class(shared.stringFunctions).stripDisallowedControlCharacters(string)
]]></Implementation>
</Method>

<Method name="encodeForJSON">
<ClassMethod>1</ClassMethod>
<FormalSpec>string</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set string = ##class(shared.stringFunctions).stripDisallowedControlCharacters(string)
	
	set string = $Replace(string,"\","\\")
	set string = $Replace(string,"""","\""")
	
	return string
]]></Implementation>
</Method>

<Method name="encodeForJSONName">
<Description>
returns quoted json name</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>string</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set string = ##class(shared.stringFunctions).stripDisallowedControlCharacters(string)

	return $$$ZENJSONPROP(string,"aelods")
]]></Implementation>
</Method>

<Method name="encodeForJSONValue">
<Description>
returns quoted json value</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>string</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set string = ##class(shared.stringFunctions).stripDisallowedControlCharacters(string)

	return $$$ZENJSONVALUE(string,"aelods")
]]></Implementation>
</Method>

<Method name="encodeForKendoTemplate">
<ClassMethod>1</ClassMethod>
<FormalSpec>string</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return $Replace(string,"#","\#")
]]></Implementation>
</Method>

<Method name="addParameterToURL">
<ClassMethod>1</ClassMethod>
<FormalSpec>inURL,name,value</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim outURL as %String =inURL
	if ($LENGTH($ZSTRIP(name,"<>WC"))>0) {
		if inURL["?" {
			set outURL=outURL_"&"
		} else {
			set outURL=outURL_"?"
		}
		set outURL=outURL_..encodeForURL(name)_"="_..encodeForURL(value)
	}
	return outURL
]]></Implementation>
</Method>

<Method name="linkURL">
<ClassMethod>1</ClassMethod>
<FormalSpec>inURL</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if $Data(%request) {
		return ##class(shared.pCSP).Link(inURL)
	} else {
		return inURL	
	}
]]></Implementation>
</Method>

<Method name="rawHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>inHTML</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit inHTML
]]></Implementation>
</Method>

<Method name="rawJS">
<ClassMethod>1</ClassMethod>
<FormalSpec>isJS</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit isJS
]]></Implementation>
</Method>

<Method name="rawURL">
<ClassMethod>1</ClassMethod>
<FormalSpec>inURL</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit inURL
]]></Implementation>
</Method>

<Method name="rawCSS">
<ClassMethod>1</ClassMethod>
<FormalSpec>inCSS</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit inCSS
]]></Implementation>
</Method>

<Method name="encodeHTMLContentForTextarea">
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<Implementation><![CDATA[	return ..encodeHTMLMain(inString)
]]></Implementation>
</Method>

<Method name="encodeHTMLContentForTinyMCETextarea">
<ClassMethod>1</ClassMethod>
<FormalSpec>string</FormalSpec>
<Implementation><![CDATA[
	set string=##class(shared.stringFunctions).stripDisallowedControlCharacters(string)
	set string=##class(shared.pCSP).EscapeHTML(string)
	return string
]]></Implementation>
</Method>

<Method name="unescapeXSSFix">
<ClassMethod>1</ClassMethod>
<FormalSpec>string</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set string=$Replace(string,"&lt;","<")
	set string=$Replace(string,"&gt;",">")
	set string=$Replace(string,"&quot;",$C(34))
	return string
]]></Implementation>
</Method>

<Method name="encodeHTMLMain">
<ClassMethod>1</ClassMethod>
<FormalSpec>string</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set string = ##class(shared.stringFunctions).stripDisallowedControlCharacters(string)

	set string= ..unescapeXSSFix(string)
	set string= ##class(shared.pCSP).EscapeHTML(string)
	return string
]]></Implementation>
</Method>

<Method name="replaceCRLFWithBR">
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set out=$REPLACE(inString,$C(13,10),"<br>")
	set out=$REPLACE(out,$C(13),"<br>")
	set out=$REPLACE(out,$C(10),"<br>")
	return out
]]></Implementation>
</Method>

<Method name="createEncodedAttribute">
<ClassMethod>1</ClassMethod>
<FormalSpec>attributeName,attributeValue=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim result as %String = ""
	if $length(attributeValue) {
		set result=attributeName_"="""_..encodeForHTMLAttribute(attributeValue)_""""	
	}	
	return result
]]></Implementation>
</Method>

<Method name="encodeHTMLContent">
<Description>
*** This method is obsolete and should not be used again. ***</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ..encodeForHTML(inString)
]]></Implementation>
</Method>

<Method name="encodeHTMLAttribute">
<Description>
*** This method is obsolete and should not be used again. ***</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ..encodeForHTMLAttribute(inString)
]]></Implementation>
</Method>

<Method name="encodeJS">
<Description>
*** This method is obsolete and should not be used again. ***</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>string</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..encodeForJavaScript(string)
]]></Implementation>
</Method>

<Method name="encodeURL">
<Description>
*** This method is obsolete and should not be used again. ***</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inURL</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..encodeForURL(inURL)
]]></Implementation>
</Method>

<Method name="encodeURLParameter">
<Description>
*** This method is obsolete and should not be used again. ***</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inParameter</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..encodeForURL(inParameter)
]]></Implementation>
</Method>

<Method name="outputDisableUsernameAndPasswordAutoCompleteHTML">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&html<
		<input style="display:none" type="text" class="ef_capture_autofill_username ef_dont_activate_save"/>
		<input style="display:none" type="password" class="ef_capture_autofill_password ef_dont_activate_save"/>
	>
]]></Implementation>
</Method>

<Method name="replaceLinkTagsWithHTML">
<Description><![CDATA[
E.g. Converts 
Your session has timed out, please {{{link-start:01}}}click here{{{link-end:01}}} to go back to the website
to
Your session has timed out, please <a href='url' class='class'click here</a> to go back to the website]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inHtml:%String,listOfUrls:%ListOfDataTypes</FormalSpec>
<Implementation><![CDATA[
	set outHtml=inHtml
	for i=1:1:listOfUrls.Count() {
		set linkRef=##class(shared.stringFunctions).padNumberWithLeadingZeroes(i,2)
		set url=listOfUrls.GetAt(i)
		set linkHtml="<a href='"_..encodeForHTMLAttribute(url)_"'>"
		set outHtml=$replace(outHtml,"{{{link-start:"_linkRef_"}}}",linkHtml)
		set outHtml=$replace(outHtml,"{{{link-end:"_linkRef_"}}}","</a>")
	}
	
	return outHtml
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.CSV.tempImport">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.lib.CSV.tempImport.CLS/EV.1
;vc; Component: CLS.EF.lib.CSV.tempImport
;vc;  Location: SmallDev
;vc; Date/Time: 25-Apr-16 14:48
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.CSV.tempImport.CLS/EV.1</td><td>CLS.EF.lib.CSV.tempImport</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Apr-16 14:48</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%Persistent,shared.timeStamp</Super>
<TimeChanged>63999,39898</TimeChanged>
<TimeCreated>63613,58425.199475</TimeCreated>

<Property name="csvStream">
<Type>EF.ISC.stream.importGlobalCharacterStream</Type>
</Property>

<Property name="csvFileName">
<Type>%String</Type>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="delimiter">
<Type>%String</Type>
<InitialExpression>","</InitialExpression>
</Property>

<Method name="csvFileNameSet">
<Description>
Overrides the set method for csvFileName to set the delimiter</Description>
<FormalSpec>csvFileName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set i%csvFileName=csvFileName
	
	set extension=$p(csvFileName,".",$l(csvFileName,"."))
	if $ZCVT(extension,"U")="TXT" {
		set ..delimiter=$C(9)
	}
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="readAndSplit">
<Description>
reads the next line of the CSV stream and splits into an array</Description>
<FormalSpec><![CDATA[&data:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	kill data
	try {
		set line=..csvStream.ReadLine()
	} catch {
		set line=""	
	}
	if $L(line)=0 quit -1
	if $L($ZSTRIP($TR(line,..delimiter),"<>W"))=0 quit -1
			 
	set commaCount=0
	set tmpData=""
	set inDoubleQuote=0
	set doubleQuoteCount=0
	set lastChar=""
	for i=1:1:$L(line)	{
		set nextChar=""
		if $L(line)'=i set nextChar=$E(line,i+1)   // store next char if not end of line
		
		// if we find a comma then store that bit and increment
		if inDoubleQuote=0,$E(line,i)=..delimiter {
			set data(commaCount) = ##class(EF.sanitiser).sanitise(tmpData)
			set commaCount=commaCount+1
			set tmpData=""
		} elseif $E(line,i)=$C(34),nextChar=$C(34){ // 2 double quotes when we already are in the data item means a quoted piece of data
			// remove one of the quotes by storing one and moving on two
			set tmpData=tmpData_$E(line,i)
			set i=i+1
			// and if the nextone+1 is also a quote then it's the end of the section or start of the section
			if nextChar=..delimiter!(nextChar=""),$E(line,i+2)=$C(34) set inDoubleQuote=inDoubleQuote=0,i=i+1
			
		} elseif inDoubleQuote=0,lastChar=..delimiter!(lastChar=""),$E(line,i)=$C(34) { // double quote immediately after a comma or SOL == starting point of quoted data item
			set inDoubleQuote=1
		} elseif inDoubleQuote=1,nextChar=..delimiter!(nextChar=""),$E(line,i)=$C(34) { // double quote immediately before a comma or EOL == ending point of quoted data item
			set inDoubleQuote=0
		} else {
			set tmpData=tmpData_$E(line,i)
		}
		set lastChar=$E(line,i)
	}
	// catch the last piece
	if $L(tmpData)!(lastChar=..delimiter) set data(commaCount) = ##class(EF.sanitiser).sanitise(tmpData)
	quit 1
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^EF.lib.CSV.tempImportD</DataLocation>
<DefaultData>tempImportDefaultData</DefaultData>
<IdLocation>^EF.lib.CSV.tempImportD</IdLocation>
<IndexLocation>^EF.lib.CSV.tempImportI</IndexLocation>
<StreamLocation>^EF.lib.CSV.tempImportS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="tempImportDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>csvStream</Value>
</Value>
<Value name="3">
<Value>csvFileName</Value>
</Value>
<Value name="4">
<Value>delimiter</Value>
</Value>
<Value name="5">
<Value>xCRstamp</Value>
</Value>
<Value name="6">
<Value>xMOstamp</Value>
</Value>
<Value name="7">
<Value>xCRuserID</Value>
</Value>
<Value name="8">
<Value>xMOuserID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.lib.JSON.adaptor">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.lib.JSON.adaptor.CLS/EV.1
;vc; Component: CLS.EF.lib.JSON.adaptor
;vc;  Location: SmallDev
;vc; Date/Time: 19-Oct-15 11:00
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.JSON.adaptor.CLS/EV.1</td><td>CLS.EF.lib.JSON.adaptor</td><td>SmallDev</td><td style='white-space: nowrap;'>19-Oct-15 11:00</td><td>AdrianM2</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<IncludeCode>EF.common.macros</IncludeCode>
<PropertyClass>propertyParameters</PropertyClass>
<TimeChanged>63844,40056.674142</TimeChanged>
<TimeCreated>63596,42086.205439</TimeCreated>

<Method name="createFromJSON">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&json,ignoreUnknownProperties:%Boolean=0]]></FormalSpec>
<Implementation><![CDATA[
	Set sta=##class(EF.ISC.ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(.json,..%ClassName(1),.ret,ignoreUnknownProperties)
	If $$$ISERR(sta) {
		Throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sta)
	}
	Return ret
]]></Implementation>
</Method>

<Method name="JSONExport">
<FormalSpec>format:%String="aelod"</FormalSpec>
<Implementation><![CDATA[	Do ##class(EF.ISC.ZEN.Auxiliary.jsonProvider).%WriteJSONFromObject(,$this,,,,format)
]]></Implementation>
</Method>

<Method name="JSONGetString">
<FormalSpec>format:%String="aelod"</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ret=""
	
	Do ##class(EF.ISC.ZEN.Auxiliary.jsonProvider).%WriteJSONStreamFromObject(.stream,$this,,,,format)
	
	While ('stream.AtEnd) {
		Set ret=ret_stream.Read()
	}
	
	Return ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.JSON.propertyParameters">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.lib.JSON.propertyParameters.CLS/EV.2
;vc; Component: CLS.EF.lib.JSON.propertyParameters
;vc;  Location: SmallDev
;vc; Date/Time: 09-Oct-15 09:39
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.JSON.propertyParameters.CLS/EV.2</td><td>CLS.EF.lib.JSON.propertyParameters</td><td>SmallDev</td><td style='white-space: nowrap;'>09-Oct-15 09:39</td><td>RajibQ</td></tr></table>
]]></Description>
<TimeChanged>63834,34936.52078</TimeChanged>
<TimeCreated>63596,42047.452033</TimeCreated>

<Parameter name="JSONNAME">
<Description>
This is the JSON key name to be used for this property.</Description>
</Parameter>

<Parameter name="OUTPUTEMPTYSTRINGASJSNULL">
<Description>
Should empty string be output as javascript null?</Description>
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>
</Class>


<Class name="EF.lib.google.api.RESTclient">
<Super>%RegisteredObject</Super>
<TimeChanged>63595,65174.108494</TimeChanged>
<TimeCreated>63595,54088.62673</TimeCreated>

<Property name="apiURL">
<Type>%String</Type>
<InitialExpression>"https://www.googleapis.com/"</InitialExpression>
</Property>

<Method name="getBaseRelativeURL">
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return $PIECE(..apiURL,"/",4,999)
]]></Implementation>
</Method>

<Method name="createHttpRequestREST">
<Private>1</Private>
<ReturnType>%Net.HttpRequest</ReturnType>
<Implementation><![CDATA[
	set httpRequest=##class(EF.utils.httpRequest).createHttpRequestSSLcache()
	set httpRequest.Server=$PIECE(..apiURL,"/",3)
	set httpRequest.ContentType="application/json"

	set httpRequest.ContentCharset="UTF-8"
	do httpRequest.SetHeader("Accept","application/json")
	
	// this is to prevent Caché from converting it to UTF-16 ( https://www.pivotaltracker.com/story/show/77126176 )
	set httpRequest.ReadRawMode=1
	
	quit httpRequest
]]></Implementation>
</Method>

<Method name="getResourceResults">
<FormalSpec>resourcePath:%String,params:%String=""</FormalSpec>
<Implementation><![CDATA[
	set sbDataSet=""
	
	set httpRequest=..createHttpRequestREST()
	
	Set paramName=""
	For {
		Set paramName=$ORDER(params(paramName))
		If (paramName="") Quit
		Do httpRequest.InsertParam(paramName,params(paramName))
	}
	
	Set httpStatus=httpRequest.Get(..getBaseRelativeURL()_resourcePath)
	
	Set ret=httpRequest.HttpResponse.Data
	
	Return ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.google.api.connection">
<Super>%RegisteredObject</Super>
<TimeChanged>63596,58355.505965</TimeChanged>
<TimeCreated>63595,54293.689856</TimeCreated>

<Property name="apiRESTClient">
<Type>EF.lib.google.api.RESTclient</Type>
</Property>

<Method name="%OnNew">
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ..apiRESTClient=##class(EF.lib.google.api.RESTclient).%New()
	
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="checkAndThrowError">
<ClassMethod>1</ClassMethod>
<FormalSpec>results</FormalSpec>
<Implementation><![CDATA[
	Do results.Rewind()
	
	Set proxyObject=..getResultsAsJSONProxyObject(results)
	
	If ($DATA(proxyObject.%data("error"))) {
		Throw ##class(shared.exceptions.generalException).%New("Error: "_$GET(proxyObject.%data("error_description")))
	}
	
	Do results.Rewind()
]]></Implementation>
</Method>

<Method name="getResultsAsJSONProxyObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>results</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	Set sta=##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(results,,.ret)
	
	If ($$$ISERR(sta)) {
		Throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sta)
	}
	
	Return ret
]]></Implementation>
</Method>

<Method name="getReturnData">
<FormalSpec>results,className:%String</FormalSpec>
<Implementation><![CDATA[
	Do ..checkAndThrowError(results)
	
	Set ret=$CLASSMETHOD(className,"createFromJSON",results.Read(,.sta),1)
	
	If $$$ISERR(sta) {
		Throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sta)
	}
	
	Return ret
]]></Implementation>
</Method>

<Method name="getTokenInfo">
<FormalSpec>idToken:%String</FormalSpec>
<ReturnType>EF.lib.google.api.data.tokenInfo</ReturnType>
<Implementation><![CDATA[
	Set params("id_token")=idToken
	Set results=..apiRESTClient.getResourceResults("oauth2/v1/tokeninfo",.params)
	
	Set ret=..getReturnData(results,"EF.lib.google.api.data.tokenInfo")
	
	Return ret
]]></Implementation>
</Method>

<Method name="getPerson">
<FormalSpec>accessToken:%String,userId:%String</FormalSpec>
<Implementation><![CDATA[
	Set params("access_token")=accessToken
	Set results=..apiRESTClient.getResourceResults("plus/v1/people/"_userId,.params)

	Set ret=..getReturnData(results,"EF.lib.google.api.data.person")

	Return ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.google.api.credentials">
<Super>%RegisteredObject</Super>
<TimeChanged>63596,58037.328604</TimeChanged>
<TimeCreated>63596,58037.328604</TimeCreated>

<Property name="clientID">
<Type>%String</Type>
</Property>

<Method name="getEFCredentials">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set ret=..%New()
	
	Set ret.clientID="738027725331-63mjs31oc573e5ffdaosghv3k5hid0ps.apps.googleusercontent.com"
	
	Return ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.google.api.data.authResult">
<Super>base</Super>
<TimeChanged>63596,49812.293295</TimeChanged>
<TimeCreated>63596,39715.813121</TimeCreated>

<Property name="accessToken">
<Type>%String</Type>
<Parameter name="JSONNAME" value="access_token"/>
</Property>

<Property name="authuser">
<Type>%String</Type>
</Property>

<Property name="clientId">
<Type>%String</Type>
<Parameter name="JSONNAME" value="client_id"/>
</Property>

<Property name="code">
<Type>%String</Type>
</Property>

<Property name="expiresAt">
<Type>%String</Type>
<Parameter name="JSONNAME" value="expires_at"/>
</Property>

<Property name="expiresIn">
<Type>%String</Type>
<Parameter name="JSONNAME" value="expires_in"/>
</Property>

<Property name="gUserCookiePolicy">
<Type>%String</Type>
<Parameter name="JSONNAME" value="g_user_cookie_policy"/>
</Property>

<Property name="idToken">
<Type>%String</Type>
<Parameter name="JSONNAME" value="id_token"/>
</Property>

<Property name="issuedAt">
<Type>%String</Type>
<Parameter name="JSONNAME" value="issued_at"/>
</Property>

<Property name="numSessions">
<Type>%String</Type>
<Parameter name="JSONNAME" value="num_sessions"/>
</Property>

<Property name="prompt">
<Type>%String</Type>
</Property>

<Property name="responseType">
<Type>%String</Type>
<Parameter name="JSONNAME" value="response_type"/>
</Property>

<Property name="scope">
<Type>%String</Type>
</Property>

<Property name="sessionState">
<Type>%String</Type>
<Parameter name="JSONNAME" value="session_state"/>
</Property>

<Property name="state">
<Type>%String</Type>
</Property>

<Property name="status">
<Type>authResultStatus</Type>
</Property>

<Property name="tokenType">
<Type>%String</Type>
<Parameter name="JSONNAME" value="token_type"/>
</Property>
</Class>


<Class name="EF.lib.google.api.data.authResultStatus">
<Super>base</Super>
<TimeChanged>63596,49840.69266</TimeChanged>
<TimeCreated>63596,39759.137792</TimeCreated>

<Property name="googleLoggedIn">
<Type>%String</Type>
<Parameter name="JSONNAME" value="google_logged_in"/>
</Property>

<Property name="method">
<Type>%String</Type>
</Property>

<Property name="signedIn">
<Type>%String</Type>
<Parameter name="JSONNAME" value="signed_in"/>
</Property>
</Class>


<Class name="EF.lib.google.api.data.base">
<Super>%RegisteredObject,EF.lib.JSON.adaptor</Super>
<TimeChanged>63599,42609.358986</TimeChanged>
<TimeCreated>63596,40147.736637</TimeCreated>
</Class>


<Class name="EF.lib.google.api.data.email">
<Super>EF.lib.google.api.data.base</Super>
<TimeChanged>63596,53832.977629</TimeChanged>
<TimeCreated>63596,53832.977629</TimeCreated>

<Property name="value">
<Type>%String</Type>
</Property>

<Property name="type">
<Type>%String</Type>
</Property>
</Class>


<Class name="EF.lib.google.api.data.name">
<Super>EF.lib.google.api.data.base</Super>
<TimeChanged>63596,53727.468522</TimeChanged>
<TimeCreated>63596,53727.468522</TimeCreated>

<Property name="formatted">
<Type>%String</Type>
</Property>

<Property name="familyName">
<Type>%String</Type>
</Property>

<Property name="givenName">
<Type>%String</Type>
</Property>

<Property name="middleName">
<Type>%String</Type>
</Property>

<Property name="honorificPrefix">
<Type>%String</Type>
</Property>

<Property name="honorificSuffix">
<Type>%String</Type>
</Property>
</Class>


<Class name="EF.lib.google.api.data.person">
<Super>EF.lib.google.api.data.base</Super>
<TimeChanged>63596,54677.76986</TimeChanged>
<TimeCreated>63596,53871.122338</TimeCreated>

<Property name="name">
<Type>name</Type>
</Property>

<Property name="emails">
<Type>email</Type>
<Collection>list</Collection>
</Property>

<Method name="getEmail">
<FormalSpec>type:%String="account"</FormalSpec>
<Implementation><![CDATA[
	Set ret=""
	
	Set key=""
	For {
		Set email=..emails.GetNext(.key)
		If (key="") Quit
		If (email.type=type) {
			Set ret=email.value
		}
		If (ret'="") Quit
	}
	
	Return ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.google.api.data.tokenInfo">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.lib.google.api.data.tokenInfo.CLS/EV.0
;vc; Component: CLS.EF.lib.google.api.data.tokenInfo
;vc;  Location: SmallDev
;vc; Date/Time: 17-Feb-15 17:10
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.google.api.data.tokenInfo.CLS/EV.0</td><td>CLS.EF.lib.google.api.data.tokenInfo</td><td>SmallDev</td><td style='white-space: nowrap;'>17-Feb-15 17:10</td><td>RajibQ</td></tr></table>
]]></Description>
<Super>base</Super>
<TimeChanged>63600,62199.762947</TimeChanged>
<TimeCreated>63596,43509.770454</TimeCreated>

<Property name="issuer">
<Type>%String</Type>
</Property>

<Property name="issuedTo">
<Type>%String</Type>
<Parameter name="JSONNAME" value="issued_to"/>
</Property>

<Property name="audience">
<Type>%String</Type>
</Property>

<Property name="userId">
<Type>%String</Type>
<Parameter name="JSONNAME" value="user_id"/>
</Property>

<Property name="expiresIn">
<Type>%String</Type>
<Parameter name="JSONNAME" value="expires_in"/>
</Property>

<Property name="issuedAt">
<Type>%String</Type>
<Parameter name="JSONNAME" value="issued_at"/>
</Property>

<Property name="email">
<Type>%String</Type>
</Property>

<Property name="verifiedEmail">
<Type>%String</Type>
<Parameter name="JSONNAME" value="verified_email"/>
</Property>

<Method name="isTokenValid">
<FormalSpec><![CDATA[clientID:%String,&error:%String=""]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set ret=0
	Set error=""
	
	If (..audience'=clientID) {
		Set error="Token audience is invalid"
	}
	
	If (..issuer'="accounts.google.com") {
		Set error="Token issuer is invalid"
	}
	
	If ($LENGTH(error)<1) {
		Set ret=1
	}
	
	Return ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.google.components.analytics">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.lib.google.components.analytics.CLS/EV.0
;vc; Component: CLS.EF.lib.google.components.analytics
;vc;  Location: SmallDev
;vc; Date/Time: 02-Mar-16 14:02
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.google.components.analytics.CLS/EV.0</td><td>CLS.EF.lib.google.components.analytics</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Mar-16 14:02</td><td>FredG</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63713,40784</TimeChanged>
<TimeCreated>63708,53817.765875</TimeCreated>

<Method name="useAnalyticsForEvent">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set useGoogleAnalytics=0
	set urchinCode=..getAnalyticsAccountForEvent(eventID)
	if (($l(urchinCode))&&(##class(setup.objSystemTypes).isModuleAllowed("Google Analytics"))) {
		set useGoogleAnalytics=1
	}
	return useGoogleAnalytics
]]></Implementation>
</Method>

<Method name="getAnalyticsAccountForEvent">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set urchinCode=##class(setup.objEventSetting).getParameter("website","Google analytics account Id",eventID)
	if $L(urchinCode)=0 set urchinCode=##class(setup.objEventSetting).getParameter("system","page hit tracking code",eventID)   // *** Remove when conversion code is removed (convertOldSettingToNewSetting) ***
	return urchinCode
]]></Implementation>
</Method>

<Method name="getPageNameForAnalytics">
<Description>
create the friendly page name for analytics - mainly for pageID's to become useful</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pagename,pageID</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// logic is the same as when it was inpage
	set curPageName=""
	if pageID {
		&SQL(SELECT description INTO :tmp FROM sc_xModules.objPage WHERE ID = :pageID)
		if +SQLCODE=0 {
			set curPageName=tmp
		}
	}
	// If we cannot get the page name from objPage (not a proweb page)
	if '$l(curPageName) {
		// Always use $ZCVT(%request.PageName,"L") so they are shown consistently in Google
		set curPageName=$p($ZCVT(pagename,"L"),".csp",1)
	}
	set curPageName="/"_curPageName
	return curPageName
]]></Implementation>
</Method>

<Method name="convertOldSettingToNewSetting">
<Description>
old setting is not named well. Renaming so that it's clearer and also so the event audit trail shows the correct name</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	do ##class(setup.objEventSetting).replaceSettingWithNewSetting("system","page hit tracking code","website","Google analytics account Id")
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.google.components.plusSignInButton">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.lib.google.components.plusSignInButton.CLS/EV.1
;vc; Component: CLS.EF.lib.google.components.plusSignInButton
;vc;  Location: SmallDev
;vc; Date/Time: 18-Jun-15 15:56
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.google.components.plusSignInButton.CLS/EV.1</td><td>CLS.EF.lib.google.components.plusSignInButton</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Jun-15 15:56</td><td>RajibQ</td></tr></table>
]]></Description>
<Super>%RegisteredObject,EF.htmlGenerator</Super>
<TimeChanged>63739,44425.761474</TimeChanged>
<TimeCreated>63596,56573.779765</TimeCreated>

<Property name="htmlID">
<Type>%String</Type>
<InitialExpression>"efGooglePlusSigninButton"</InitialExpression>
</Property>

<Property name="clientID">
<Type>%String</Type>
</Property>

<Property name="callbackFunctionName">
<Type>%String</Type>
<InitialExpression>"ef_google_plus_signin_callback"</InitialExpression>
</Property>

<Property name="scope">
<Type>%String</Type>
<InitialExpression>"profile email"</InitialExpression>
</Property>

<Property name="authResultInputID">
<Type>%String</Type>
<InitialExpression>"efGooglePlusSSOAuthResult"</InitialExpression>
</Property>

<Property name="signInActionJS">
<Type>%String</Type>
</Property>

<Property name="allowAutomaticSignIn">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Method name="renderHTML">
<Implementation><![CDATA[
	&html<
		<span id="#(..encodeHTMLAttribute(..htmlID))#">
		  <span
		    class="g-signin"
		    data-callback="#(..encodeHTMLAttribute(..callbackFunctionName))#"
		    data-clientid="#(..encodeHTMLAttribute(..clientID))#"
		    data-cookiepolicy="single_host_origin"
		    data-scope="#(..encodeHTMLAttribute(..scope))#"
		    >
		  </span>
		</span>
		<input type="hidden" id="#(..encodeHTMLAttribute(..authResultInputID))#" name="#(..encodeHTMLAttribute(..authResultInputID))#" />
	>
]]></Implementation>
</Method>

<Method name="renderJS">
<Implementation><![CDATA[
	&js<
		function #(..encodeJS(..callbackFunctionName))#(authResult) {
			if (authResult['status']['signed_in']) {
				var okToSignIn=1;
				if (#('..allowAutomaticSignIn)#) {
					if (authResult['status']['method'] == 'AUTO') {
						okToSignIn=0;
					}
				}
				if (okToSignIn) {
					document.getElementById('#(..encodeJS(..htmlID))#').setAttribute('style', 'display: none');
					document.getElementById('#(..encodeJS(..authResultInputID))#').value=JSON.stringify(authResult, 
						[	'access_token'
							,'authuser'
							,'client_id'
							,'code'
							,'expires_at'
							,'expires_in'
							,'g_user_cookie_policy'
							,'hd'
							,'id_token'
							,'issued_at'
							,'num_sessions'
							,'prompt'
							,'response_type'
							,'scope'
							,'session_state'
							,'state'
							,'status'
							,'google_logged_in'
							,'method'
							,'signed_in'
							,'token_type'
						]
					);
					#(..encodeJS(..signInActionJS))#
				}
			} else {
				// Possible error values:
				//   "user_signed_out" - User is signed-out
				//   "access_denied" - User denied access to your app
				//   "immediate_failed" - Could not automatically log in the user
				// try { console.log('Sign-in state: ' + authResult['error']) } catch (err) {};
			}
		}
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.jsxss">
<Description><![CDATA[
Cross Site Scripting HTML Sanitiser: jsxss.com
<!-- ;vc;
;vc;    Object: EF.lib.jsxss.CLS/EV.2
;vc; Component: CLS.EF.lib.jsxss
;vc;  Location: SmallDev
;vc; Date/Time: 08-Jul-16 11:17
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.jsxss.CLS/EV.2</td><td>CLS.EF.lib.jsxss</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Jul-16 11:17</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>64107,40946.749291</TimeChanged>
<TimeCreated>64104,37982.690337</TimeCreated>

<Method name="getConfig">
<Description>
return the config data as a stream - this is javascript code - should be moved to different files in version control at some point</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>type</FormalSpec>
<ReturnType>%Stream.GlobalCharacter</ReturnType>
<Implementation><![CDATA[
	set configStream=##class(%Stream.GlobalCharacter).%New()

	set type=$ZCVT(type,"L")
	if (type="frontendabstract")	{
		do configStream.WriteLine("exports.whiteList = {")
		do configStream.WriteLine("    address: ['align'],")
		do configStream.WriteLine("    b:      [],")
		do configStream.WriteLine("    blockquote: [],")
		do configStream.WriteLine("    br:     ['data-mce-bogus'],")
		do configStream.WriteLine("    caption: ['lang','dir'],")
		do configStream.WriteLine("    dd:     ['title','dir','lang'],")
		do configStream.WriteLine("    div:    ['style','data-mce-style','dir','align'],")
		do configStream.WriteLine("    dl:     ['title','dir','lang'],")
		do configStream.WriteLine("    dt:     ['title','dir','lang'],")
		do configStream.WriteLine("    em:     ['data-mce-bogus'],")
		do configStream.WriteLine("    h1:     ['style','data-mce-style'],")
		do configStream.WriteLine("    h2:     ['style','data-mce-style'],")
		do configStream.WriteLine("    h3:     ['style','data-mce-style'],")
		do configStream.WriteLine("    h4:     ['style','data-mce-style'],")
		do configStream.WriteLine("    h5:     ['style','data-mce-style'],")
		do configStream.WriteLine("    h6:     ['style','data-mce-style'],")
		do configStream.WriteLine("    hr:     ['style','data-mce-style'],")
		do configStream.WriteLine("    i:      [],")
		do configStream.WriteLine("    li:     [],")
		do configStream.WriteLine("    ol:     [],")
		do configStream.WriteLine("    p:      ['style','data-mce-style','align'],")
		do configStream.WriteLine("    pre:    ['align'],")
		do configStream.WriteLine("    span:   ['data-mce-bogus','style','data-mce-style','align','id'],")
		do configStream.WriteLine("    strong: [],")
		do configStream.WriteLine("    sub:    [],")
		do configStream.WriteLine("    sup:    [],")
		do configStream.WriteLine("    table:  ['data-mce-selected','border','cellspacing','cellpadding','width','height','class','align','summary','style','data-mce-style','dir','id','lang','bgcolor','background','bordercolor'],")
		do configStream.WriteLine("    tbody:  ['id', 'class'],")
		do configStream.WriteLine("    td:     ['id','lang','dir','class','colspan','rowspan','width','height','align','valign','style','bgcolor','background','bordercolor','scope'],")
		do configStream.WriteLine("    tfoot:  ['id','class'],")
		do configStream.WriteLine("    th:     ['id','lang','dir','class','colspan','rowspan','width','height','align','valign','style','scope'],")
		do configStream.WriteLine("    thead:  ['id','class'],")
		do configStream.WriteLine("    tr:     ['id','lang','dir','class','rowspan','width','height','align','valign','style','bgcolor','background','bordercolor'],")
		do configStream.WriteLine("    u:      [],")
		do configStream.WriteLine("    ul:     [],")
		do configStream.WriteLine("};")
	} else {
		// use the default for the jsxss app
	}

	do configStream.WriteLine("exports.stripIgnoreTag = true;")   // remove the elements that are not allowed (otherwise they are left encoded)
	do configStream.WriteLine("exports.stripIgnoreTagBody = ['style','data-mce-style', 'script'];")  // remove the contents of the elements listed, e.g. we want to remove the javascript code inside a script tag

	return configStream
]]></Implementation>
</Method>

<Method name="sanitise">
<ClassMethod>1</ClassMethod>
<FormalSpec>inDataStream,type</FormalSpec>
<ReturnType>%Stream.GlobalCharacter</ReturnType>
<Implementation><![CDATA[
	set tempDirectoryName=##class(EF.config.server).getJSXSSTempPath()
	set uniqueFilenamePrefix=$ZNSPACE_"-"_$SYSTEM.Util.CreateGUID()_"-"
	set inputFilename=uniqueFilenamePrefix_"input.htm"
	set outputFilename=uniqueFilenamePrefix_"output.htm"
	set configFilename=uniqueFilenamePrefix_"config.js"

	do ##class(shared.fileMethods).createUTF8FileFromStream(inDataStream,tempDirectoryName,inputFilename)
	set configStream=..getConfig(type)
	do ##class(shared.fileMethods).createFileFromStream(configStream,tempDirectoryName,configFilename)

	set inputPathFilename=tempDirectoryName_inputFilename
	set outputPathFilename=tempDirectoryName_outputFilename
	set configPathFilename=tempDirectoryName_configFilename

	set cmd=##class(EF.config.server).getJSXSSProgramCommand()_" -i "_inputPathFilename_" -o "_outputPathFilename_" -c "_configPathFilename
    set ok=$ZF(-1,cmd)

	if (ok'=0)	{
		throw ##class(shared.exceptions.generalException).%New("Failure running sanitisation ZF cmd")
	}
    
    set stream=##class(%Stream.FileCharacter).%New()
    set sc=stream.LinkToFile(outputPathFilename)
    set stream.TranslateTable="UTF8"   // need this for some reason otherwise the stream loses the UTF8 chars.

	set outputStream=##class(%Stream.GlobalCharacter).%New()
	do outputStream.CopyFrom(stream)
	if $G(^%ZDEBUGJSXSS)=1 {
		set ^%ZDEBUGJSXSS($ZNSPACE,"cmd")=cmd
		// leave the files so we can check them
	} else {
		do ##class(%Library.File).Delete(inputPathFilename)
		do ##class(%Library.File).Delete(outputPathFilename)
		do ##class(%Library.File).Delete(configPathFilename)
	}
	return outputStream
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.openID">
<Description>
Code copied from PHP version: https://code.google.com/p/lightopenid/</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63250,53033.226008</TimeChanged>
<TimeCreated>63245,39194.555668</TimeCreated>

<Property name="returnUrl">
<Description>
public:</Description>
<Type>%String</Type>
</Property>

<Property name="required">
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="optional">
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="data">
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="identity">
<Description>
private:</Description>
<Type>%String</Type>
</Property>

<Property name="claimedId">
<Type>%String</Type>
</Property>

<Property name="server">
<Description>
protected:</Description>
<Type>%String</Type>
</Property>

<Property name="version">
<Type>%String</Type>
</Property>

<Property name="trustRoot">
<Type>%String</Type>
</Property>

<Property name="aliases">
<Type>%String</Type>
</Property>

<Property name="identifierSelect">
<Type>%Boolean</Type>
<InitialExpression>"0"</InitialExpression>
</Property>

<Property name="ax">
<Type>%Boolean</Type>
<InitialExpression>"0"</InitialExpression>
</Property>

<Property name="sreg">
<Type>%Boolean</Type>
<InitialExpression>"0"</InitialExpression>
</Property>

<Property name="setupUrl">
<Type>%String</Type>
</Property>

<Property name="firstname">
<Type>%String</Type>
</Property>

<Property name="lastname">
<Type>%String</Type>
</Property>

<Property name="email">
<Type>%String</Type>
</Property>

<Method name="%OnNew">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%New</METHOD> method to 
provide notification that a new instance of an object is being created.

<P>If this method returns an error then the object will not be created.
<p>It is passed the arguments provided in the %New call.
When customizing this method, override the arguments with whatever variables and types you expect to receive from %New().
For example, if you're going to call %New, passing 2 arguments, %OnNew's signature could be:
<p>Method %OnNew(dob as %Date = "", name as %Name = "") as %Status
If instead of returning a %Status code this returns an oref and this oref is a subclass of the current
class then this oref will be the one returned to the caller of %New method.]]></Description>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set ..version=2  // only supporting v2 
	if $D(%request) {
		do ..copyRequestDataToArray(.tmpArray)
		merge ..data=tmpArray
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="authUrl">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//??if ($this->setup_url && !$immediate) return $this->setup_url;
	if '$L(..server) do ..discover(..identity)
	
	if '$L(..server) { 
		quit ""
	}
	if ..version'=2 { 
		quit ""
	}
	quit ..authUrlV2()
]]></Implementation>
</Method>

<Method name="authUrlV2">
<FormalSpec>immediate:%Boolean="0"</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set params("openid.ns")="http://specs.openid.net/auth/2.0"
	set params("openid.mode")=$S(immediate:"checkid_immediate",1:"checkid_setup")
	set params("openid.return_to")=..returnUrl
	set params("openid.realm")=..trustRoot
	
	if (..ax)	{
		do ..axParams(.tmpParams)
		merge params=tmpParams
	}
	if (..sreg) {
		//? add sregParams to params array
	}
	if ('..ax)&&('..sreg)	{
		//# If OP doesn't advertise either SREG, nor AX, let's send them both
		//# in worst case we don't get anything in return.
		do ..axParams(.tmpParams)
		merge params=tmpParams
		// add sregParams to params array - *** should add method for this if allowing other openID implementations
	}
	if ..identifierSelect	{
		set params("openid.identity")="http://specs.openid.net/auth/2.0/identifier_select"
		set params("openid.claimed_id")=params("openid.identity")
	} else {
		set params("openid.identity")=..identity
		set params("openid.claimed_id")=..claimedId
	}
	set urlToRedirectTo=..deConstructAndRebuildUrl(..server,.params)
	quit urlToRedirectTo
]]></Implementation>
</Method>

<Method name="deConstructAndRebuildUrl">
<Description>
takes a full Url, takes it apart and merges the params onto the query string
returns a full Url</Description>
<FormalSpec><![CDATA[url,&params]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	do ..parseUrl(url,.urlComps)
	set extraQueryStr=""
	if $D(params) set extraQueryStr=..httpBuildQuery(.params)
	quit ..buildUrl(.urlComps,extraQueryStr)
]]></Implementation>
</Method>

<Method name="parseUrl">
<FormalSpec><![CDATA[url,&urlComps]]></FormalSpec>
<Implementation><![CDATA[
	kill urlComps
	do ##class(%Net.URLParser).Parse(url,.urlComps)
]]></Implementation>
</Method>

<Method name="httpBuildQuery">
<FormalSpec><![CDATA[&params]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set query=""
	set name=""
	for  {
		set name=$O(params(name))
		if name="" quit
		set query=query_$S($L(query):"&",1:"")_name_"="_$$$URLENCODE(params(name))
	}
	quit query
]]></Implementation>
</Method>

<Method name="buildUrl">
<FormalSpec><![CDATA[&u,extraQueryStr]]></FormalSpec>
<Implementation><![CDATA[
	if $L(extraQueryStr) {
		if $L(u("query"))	{
			set u("query")=u("query")_"&"_extraQueryStr
		} else {
			set u("query")=extraQueryStr
		}
	}
	set usernamebit=""
	if $L($G(u("username")))	{
		if $L($G(u("password")))	{
			set usernamebit=u("username")_":"_u("password")_"@"
		} else {
			set usernamebit=u("username")_"@"
		}
	}
	set url=u("scheme")_"://"_usernamebit_u("host")
	set url=url_$S($L($G(u("port"))):":"_u("port"),1:"")
	set url=url_$S($L(u("path")):u("path"),1:"")
	set url=url_$S($L(u("query")):"?"_u("query"),1:"")
	set url=url_$S($L(u("fragment")):"#"_u("fragment"),1:"")
	
	quit url
]]></Implementation>
</Method>

<Method name="validate">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if $D(..data("openid.user_setup_url")) {
		set ..setupUrl=..data("openid.user_setup_url")
		return 0
	}
	if ..data("openid.mode")'="id_res" {
		return 0
	}
	
	set ..claimedId=$G(..data("openid.claimed_id"),..data("openid.identity"))
	
	set params("openid.assoc_handle")=..data("openid.assoc_handle")
	set params("openid.signed")=..data("openid.signed")
	set params("openid.sig")=..data("openid.sig")
	if $D(..data("openid_ns"))	{
		set params("openid.ns")="http://specs.openid.net/auth/2.0"
	}
	
	if (..data("openid.return_to")'=..returnUrl)	{
		//# The return_to url must match the url of current request.
		return 0
	}
	
	set url=..discover(..claimedId)
	do ..parseUrl(url,.urlBits)
	set server=urlBits("host")
	set path=urlBits("path")_"?"_urlBits("query")
	
	set listOfSignedFields=..data("openid.signed")
	for i=1:1:$L(listOfSignedFields,",") {
		set item=$P(listOfSignedFields,",",i)
		if $L(item) {
			set params("openid."_item)=..data("openid."_item)
		}
	}
	set params("openid.mode")="check_authentication"

	set validationReq=##class(EF.utils.httpRequest).createHttpRequestSSLcache("openid")
	set validationReq.Server=server
	set validationReq.ContentType="application/x-www-form-urlencoded" 	
	
	set queryStr=..httpBuildQuery(.params)

	Do validationReq.EntityBody.Write(queryStr)
	
	Do validationReq.Post(path)
	
	set validated=0
	Do {
		Set readLength=32000
		Set line=validationReq.HttpResponse.Data.ReadLine(.readLength)
		If (readLength>0) {
			If ($ZCONVERT(line,"L")["is_valid:true") {
				Set validated=1
			}
		}
	} While ((readLength>0) && (validated=0))
	
	return validated
]]></Implementation>
</Method>

<Method name="discover">
<Description>
note this is currently a hardcoded discovery function so needs to have each endpoint defined</Description>
<FormalSpec>url</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// this is called twice:
	// 1. for IdP discovery
	// 2. for User discovery
	
	// for google apps, you need to try both of these:
	//  - https://www.google.com/accounts/o8/.well-known/host-meta?hd=example.com
	//  - http://example.com/.well-known/host-meta
	// for eventsforce.com, it returns a "host-meta" file that contains:
	// Link: <https://www.google.com/accounts/o8/site-xrds?ns=2&hd=eventsforce.com>; rel="describedby http://reltype.google.com/openid/xrd-op"; type="application/xrds+xml"
	
	if url["http://eventsforce.com/openid?id" {  // second time around
		set googleAppsDomain="eventsforce.com"
		set ..server="https://www.google.com/a/"_googleAppsDomain_"/o8/ud?be=o8"
		quit ..server
	} elseif url["eventsforce.com"	{  // first time around
		set googleAppsDomain="eventsforce.com"
		set ..server="https://www.google.com/a/"_googleAppsDomain_"/o8/ud?be=o8"
		set ..identifierSelect=1
		set ..ax=1
		set ..required("namePerson/first")=..ax2sreg("namePerson/first")
		set ..required("namePerson/last")=..ax2sreg("namePerson/last")
		set ..required("contact/email")=..ax2sreg("contact/email")
		quit ..server
	} else {
		// should do real external discovery
	}
]]></Implementation>
</Method>

<Method name="axParams">
<FormalSpec><![CDATA[&params]]></FormalSpec>
<Implementation><![CDATA[
	kill params
	if $D(..required)!$D(..optional)	{
		set params("openid.ns.ax")="http://openid.net/srv/ax/1.0"
		set params("openid.ax.mode")="fetch_request"
		set required=""
		set optional=""
		for i="required","optional"	{
			kill tmpArr
			if i="required" merge tmpArr=..required
			if i="optional" merge tmpArr=..optional
			set tmpListOfFields=""
			set alias=""
			for  {
				set alias=$O(tmpArr(alias))
				if alias="" quit
				set field=tmpArr(alias)
				set aliases(field)="http://axschema.org/"_alias
				set counts(field)=$G(counts(field))+1
				set tmpListOfFields=tmpListOfFields_$S($L(tmpListOfFields):",",1:"")_field
			}
			if i="required" set required=tmpListOfFields
			if i="optional" set optional=tmpListOfFields
		}
		set alias=""
		for  {
			set alias=$O(aliases(alias))
			if alias="" quit
			set ns=aliases(alias)
			set params("openid.ax.type."_alias)=ns
		}
		set alias=""
		for  {
			set alias=$O(counts(alias))
			if alias="" quit
			set count=counts(alias)
			if count=1 continue
			set params("openid.ax.count."_alias)=count
		}
		if $L(required) set params("openid.ax.required")=required
		if $L(optional) set params("openid.ax.optional")=optional
	}
]]></Implementation>
</Method>

<Method name="copyRequestDataToArray">
<FormalSpec><![CDATA[&array]]></FormalSpec>
<Implementation><![CDATA[
	kill array
	set name=""
	for {
		set name=$O(%request.Data(name))
		if name="" quit
		
		set index=""
		for {
			set index=$ORDER(%request.Data(name,index))
			if index="" Quit
			
			set value=%request.Data(name,index)
			set order=%request.Data(name,index,"O")
			
			set array(name)=value
		}
	}	
	quit
]]></Implementation>
</Method>

<Method name="ax2sreg">
<FormalSpec>inAx</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set axData("namePerson/friendly")="nickname"
	set axData("contact/email")="email"
	set axData("namePerson")="fullname"
	set axData("namePerson/first")="firstname"
	set axData("namePerson/last")="lastname"
	set axData("birthDate")="dob"
	set axData("person/gender")="gender"
	set axData("contact/postalCode/home")="postcode"
	set axData("contact/country/home")="country"
	set axData("pref/language")="language"
	set axData("pref/timezone")="timezone"

	if $L(inAx)&&($D(axData(inAx))) quit axData(inAx)
	quit ""
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.queueMethods">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.lib.queueMethods.CLS/EV.7
;vc; Component: CLS.EF.lib.queueMethods
;vc;  Location: SmallDev
;vc; Date/Time: 30-Dec-15 11:40
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.queueMethods.CLS/EV.7</td><td>CLS.EF.lib.queueMethods</td><td>SmallDev</td><td style='white-space: nowrap;'>30-Dec-15 11:40</td><td>FredG</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63916,41412</TimeChanged>
<TimeCreated>63265,41434.000835</TimeCreated>

<Method name="putOnQueue">
<Description>
put anything except emails on the queue 
 - should not be used for emails yet as there is quite a lot extra for emails in mail.objMail:putOnQueue</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>queueType,programToRun,parameters,startTimeH="",mailBCC="",mailCC="",createInvoice="",purchaseID="",overrideEmailContentMethod=""</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set A="*"
	set server=..getServerForQueue()
	set instanceName=..getInstanceForQueue()
	set commonNameSpace=..getNamespaceForQueue()
	set namespaceToRunCode=$ZNSPACE
	set job=$I(^[commonNameSpace]queue(server,instanceName,queueType)) // get new job number
	set data=""
	set $P(data,A,1)="QUEUED"
	set $P(data,A,3)=programToRun_"|"_namespaceToRunCode
	set $P(data,A,4)=queueType
	set $P(data,A,5)=startTimeH
	set $P(data,A,7)=parameters
	set $P(data,A,8)="1"
	set $P(data,A,11)=$ZTS
	set $P(data,A,12)=mailBCC
	set $P(data,A,13)=mailCC
	set $P(data,A,14)=createInvoice
	set $P(data,A,15)=purchaseID
	set $P(data,A,16)=overrideEmailContentMethod
	set $P(data,A,17)=0  // retries
	set ^[commonNameSpace]queue(server,instanceName,queueType,job)=data
	;set ^[commonNameSpace]queue(server,instanceName,queueType,job)="QUEUED**"_programToRun_"|"_namespaceToRunCode_"*"_queueType_"*"_startTimeH_"**"_parameters_"*1***"_$H_"*"_mailBCC_"*"_mailCC_"*"_createInvoice_"*"_purchaseID_"*"_overrideEmailContentMethod
	quit job
]]></Implementation>
</Method>

<Method name="createQXref">
<ClassMethod>1</ClassMethod>
<FormalSpec>job,queueType,delayDetails,startTimeH</FormalSpec>
<Implementation><![CDATA[
	set server=..getServerForQueue()
	set instanceName=..getInstanceForQueue()
	set commonNameSpace=..getNamespaceForQueue()
	set namespaceToRunCode=$ZNSPACE
	set ^[commonNameSpace]queueXRef($p(delayDetails,"|",1),namespaceToRunCode,startTimeH,$p(delayDetails,"|",2))=queueType_"|"_job
	quit
]]></Implementation>
</Method>

<Method name="getServerForQueue">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// GetNodeName(0) or blank can sometimes return the FQDN eg: JEREMY7.EVENTSFORCE.LAN; 1 returns just JEREMY7
	set server=$ZCVT(##class(%SYS.System).GetNodeName(1),"U")
	if (server="BEIGE")!(server="BROWN") {
		// use the server names - we'll never mirror EVCOMMON on the old servers
	} else {
		if $SYSTEM.Mirror.IsMember()	{
			set server=$ZCVT($SYSTEM.Mirror.MirrorName(),"U")
		}
	}
	return server
]]></Implementation>
</Method>

<Method name="getInstanceForQueue">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set instanceName=$ZCVT(##class(%SYS.System).GetInstanceName(),"U")
	return instanceName
]]></Implementation>
</Method>

<Method name="getNamespaceForQueue">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set commonNameSpace=$ZCVT(##class(setup.objSetting).getParameter("system","emailNamespace"),"U")
	return commonNameSpace
]]></Implementation>
</Method>

<Method name="completeQ">
<ClassMethod>1</ClassMethod>
<FormalSpec>server,instanceName,queueType,job</FormalSpec>
<Implementation><![CDATA[
	set commonNameSpace=..getNamespaceForQueue()
	set $Piece(^[commonNameSpace]queue(server,instanceName,queueType,job),"*",1,2)="COMPLETED*"
	set $Piece(^[commonNameSpace]queue(server,instanceName,queueType,job),"*",6)=$ZTS
	quit
]]></Implementation>
</Method>

<Method name="addEmailAddressToNode">
<ClassMethod>1</ClassMethod>
<FormalSpec>queueType,job,emailAddress</FormalSpec>
<Implementation><![CDATA[
	set server=..getServerForQueue()
	set instanceName=..getInstanceForQueue()
	set commonNameSpace=..getNamespaceForQueue()
	set ^[commonNameSpace]queue(server,instanceName,queueType,job,emailAddress)=""
]]></Implementation>
</Method>

<Method name="killNode">
<ClassMethod>1</ClassMethod>
<FormalSpec>queueType,job</FormalSpec>
<Implementation><![CDATA[
	set server=..getServerForQueue()
	set instanceName=..getInstanceForQueue()
	set commonNameSpace=..getNamespaceForQueue()
	kill ^[commonNameSpace]queue(server,instanceName,queueType,job)
]]></Implementation>
</Method>

<Method name="outputCreationCodeForCurrentEmails">
<Description>
write out to the terminal the code needed to be run on the new server</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace</FormalSpec>
<Implementation><![CDATA[
	set namespace=$ZCVT(namespace,"U")
	set A="*"
	set server=##class(EF.lib.queueMethods).getServerForQueue()
	set instanceName=##class(EF.lib.queueMethods).getInstanceForQueue()
	set commonNameSpace="EVCOMMON"
	ZN commonNameSpace
	
	// stop the queue
	set ^xStopQueue=1
	hang 5 // wait for current jobs to finish
	
	ZN namespace
	
	set queueType=""
	for  {
		set queueType=$O(^[commonNameSpace]queue(server,instanceName,queueType))
		if queueType="" quit
		set job=""
		for  {
			set job=$O(^[commonNameSpace]queue(server,instanceName,queueType,job))
			if job="" quit
			
			set jobStatus=$P(^[commonNameSpace]queue(server,instanceName,queueType,job),A,1)
			if (jobStatus="QUEUED") {
				set programToRun=$P(^[commonNameSpace]queue(server,instanceName,queueType,job),A,3)
				set programNS=$ZCVT($P(programToRun,"|",2),"U")
				if programNS'=namespace continue
				set $P(^[commonNameSpace]queue(server,instanceName,queueType,job),A,1)="MIGRATED"   // this will make it ignored by all queue manager jobs
				set parameters=$P(^[commonNameSpace]queue(server,instanceName,queueType,job),A,7)
				set startTimeH=$P(^[commonNameSpace]queue(server,instanceName,queueType,job),A,5)
				set mailBCC=$P(^[commonNameSpace]queue(server,instanceName,queueType,job),A,12)
				set mailCC=$P(^[commonNameSpace]queue(server,instanceName,queueType,job),A,13)
				set createInvoice=$P(^[commonNameSpace]queue(server,instanceName,queueType,job),A,14)
				set purchaseID=$P(^[commonNameSpace]queue(server,instanceName,queueType,job),A,15)
				set overrideEmailContentMethod=$P(^[commonNameSpace]queue(server,instanceName,queueType,job),A,16)
				w !,"set newJobID=##class(EF.lib.queueMethods).putOnQueue("""_queueType_""","""_programToRun_""","""_parameters_""","""_startTimeH_""","""_mailBCC_""","""_mailCC_""","""_createInvoice_""","""_purchaseID_""","""_overrideEmailContentMethod_""")"  
				// add emails 
				set email=""
				for  {
					set email=$O(^[commonNameSpace]queue(server,instanceName,queueType,job,email))
					if email="" quit
					w !,"do ##class(EF.lib.queueMethods).addEmailAddressToNode("""_queueType_""",newJobID,"""_email_""")"
				}
			
				// find queueXrefs for current jobID
				set xrefKey=""
				for  {
					set xrefKey=$O(^[commonNameSpace]queueXRef(xrefKey))
					if xrefKey="" quit
					set xrefNS=""
					for  {
						set xrefNS=$O(^[commonNameSpace]queueXRef(xrefKey,xrefNS))
						if xrefNS="" quit
						if xrefNS'=namespace continue
						set xrefStartTimeH=""
						for  {
							set xrefStartTimeH=$O(^[commonNameSpace]queueXRef(xrefKey,xrefNS,xrefStartTimeH))
							if xrefStartTimeH="" quit
							set xrefKey2=""
							for  {
								set xrefKey2=$O(^[commonNameSpace]queueXRef(xrefKey,xrefNS,xrefStartTimeH,xrefKey2))
								if xrefKey2="" quit
								
								set xrefData=^[commonNameSpace]queueXRef(xrefKey,xrefNS,xrefStartTimeH,xrefKey2)
								if ($P(xrefData,"|",2)=job) {
									set queueType=$P(xrefData,"|",1)
									w !,"set ^[""EVCOMMON""]queueXRef("""_xrefKey_""","""_xrefNS_""","""_xrefStartTimeH_""","""_xrefKey2_""")="""_queueType_"|""_newJobID"
								}
							}
						}
					}
				}
			}
		}
	}
	
	// start the queue
	ZN commonNameSpace
	set ^xStopQueue=0
	ZN "%SYS"
	J ^queueChildManager:"EVCOMMON":5
	ZN namespace
]]></Implementation>
</Method>

<Method name="deleteMigratedQueueJobs">
<Description>
can be run at any time to clear the queue of old migrated jobs</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set A="*"
	set server=##class(EF.lib.queueMethods).getServerForQueue()
	set instanceName=##class(EF.lib.queueMethods).getInstanceForQueue()
	set commonNameSpace=##class(EF.lib.queueMethods).getNamespaceForQueue()
	ZN commonNameSpace
	
	set queueType=""
	for  {
		set queueType=$O(^[commonNameSpace]queue(server,instanceName,queueType))
		if queueType="" quit
		set job=""
		for  {
			set job=$O(^[commonNameSpace]queue(server,instanceName,queueType,job))
			if job="" quit
			
			set jobStatus=$P(^[commonNameSpace]queue(server,instanceName,queueType,job),A,1)
			if (jobStatus="MIGRATED") {
				kill ^[commonNameSpace]queue(server,instanceName,queueType,job)
			}
		}
	}
	quit
]]></Implementation>
</Method>

<Method name="getRetryCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>server,instanceName,queueType,job</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set A="*"
	set commonNameSpace=##class(EF.lib.queueMethods).getNamespaceForQueue()
	set count=+$P(^[commonNameSpace]queue(server,instanceName,queueType,job),A,17)
	return count
]]></Implementation>
</Method>

<Method name="increaseRetryCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>server,instanceName,queueType,job</FormalSpec>
<Implementation><![CDATA[
	set A="*"
	set commonNameSpace=..getNamespaceForQueue()
	set $P(^[commonNameSpace]queue(server,instanceName,queueType,job),A,17)=$P(^[commonNameSpace]queue(server,instanceName,queueType,job),A,17)+1
	quit
]]></Implementation>
</Method>

<Method name="reQueueAtLaterTime">
<ClassMethod>1</ClassMethod>
<FormalSpec>server,instanceName,queueType,job,newStartTimeH</FormalSpec>
<Implementation><![CDATA[
	if (..isJobAnEmail(server,instanceName,queueType,job)) {
		do ..updateOriginalEmailStatus(server, instanceName, queueType, job, "Scheduled",newStartTimeH)
	}
	do ..increaseRetryCount(server,instanceName,queueType,job)
	do ..setStartTime(server,instanceName,queueType,job,newStartTimeH)
	do ..setStatus(server,instanceName,queueType,job,"QUEUED")  // do this last so it does not get picked up straight away
	quit
]]></Implementation>
</Method>

<Method name="isJobAnEmail">
<ClassMethod>1</ClassMethod>
<FormalSpec>server,instanceName,queueType,job</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set programToRun=$P(..getProgramAndNamespace(server,instanceName,queueType,job),"|",1)
	if (((queueType="process")!(queueType="adhoc"))&&(programToRun["queueChildMail")) {
		return 1
	} else {
		return 0
	}
]]></Implementation>
</Method>

<Method name="getProgramAndNamespace">
<ClassMethod>1</ClassMethod>
<FormalSpec>server,instanceName,queueType,job</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set A="*"
	set commonNameSpace=##class(EF.lib.queueMethods).getNamespaceForQueue()
	set programAndNamespace=$P(^[commonNameSpace]queue(server,instanceName,queueType,job),A,3)
	return programAndNamespace
]]></Implementation>
</Method>

<Method name="updateOriginalEmailStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec>server,instanceName,queueType,job,newStatus,newStartTimeH</FormalSpec>
<Implementation><![CDATA[
	set origNS=$ZNSPACE
	set A="*"
	set commonNameSpace=..getNamespaceForQueue()
	set namespace=$P($P(^[commonNameSpace]queue(server,instanceName,queueType,job),A,3),"|",2)
	set mailID=$P(^[commonNameSpace]queue(server,instanceName,queueType,job),A,7)
	zn namespace
	if mailID {
		do ##class(mail.objMail).setStatusForEmail(mailID,newStatus)
		do ##class(mail.objMail).setScheduledDateTimeForEmail(mailID,newStartTimeH)
	}
	zn origNS
	quit
]]></Implementation>
</Method>

<Method name="setStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec>server,instanceName,queueType,job,newStatus</FormalSpec>
<Implementation><![CDATA[
	set A="*"
	set commonNameSpace=..getNamespaceForQueue()
	set $P(^[commonNameSpace]queue(server,instanceName,queueType,job),A,1)=newStatus
	quit
]]></Implementation>
</Method>

<Method name="setStartTime">
<ClassMethod>1</ClassMethod>
<FormalSpec>server,instanceName,queueType,job,newStartTimeH</FormalSpec>
<Implementation><![CDATA[
	set A="*"
	set commonNameSpace=..getNamespaceForQueue()
	set $P(^[commonNameSpace]queue(server,instanceName,queueType,job),A,5)=newStartTimeH
	quit
]]></Implementation>
</Method>

<Method name="getNewRetryStartTimeH">
<ClassMethod>1</ClassMethod>
<FormalSpec>server,instanceName,queueType,job</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set retryCount=..getRetryCount(server,instanceName,queueType,job)
	// make the retries get longer and longer to allow for downtime.
	set delayMinutes=$S(retryCount=0:1,retryCount=1:1,retryCount=2:5,retryCount=3:30,1:60)  // == 1 min, 5 mins, 30 mins, 60 mins for every retry after this
	set newStartTimeH=##class(shared.timeFunctions).addSecondsToCurrentTimeH(delayMinutes*60)
	return newStartTimeH
]]></Implementation>
</Method>

<Method name="canJobBeRetried">
<ClassMethod>1</ClassMethod>
<FormalSpec>server,instanceName,queueType,job</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set retry=0
	if (..isJobAnEmail(server,instanceName,queueType,job)) { // only for emails for now
		set retryCount=..getRetryCount(server,instanceName,queueType,job)
		if retryCount<26 {
			set retry=1
		}
	}
	return retry
]]></Implementation>
</Method>

<Method name="monitor">
<Description>
call from commandline to see the jobs in the queue per namespace</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set A="*"
	set monServer=""
	for  {
		set monServer=$O(^queue(monServer))
		if monServer="" quit

		set monInstanceName=""
		for  {
			set monInstanceName=$O(^queue(monServer,monInstanceName))
			if monInstanceName="" quit

			set monQueueType=""
			for  {
				set monQueueType=$O(^queue(monServer,monInstanceName,monQueueType))
				if monQueueType="" quit
				
				set monJob=""
				for  {
					set monJob=$Order(^queue(monServer,monInstanceName,monQueueType,monJob)) 
					if monJob="" quit
				
					set monQData=^queue(monServer,monInstanceName,monQueueType,monJob)
					
					if ($P(monQData,A,1)'="QUEUED") continue
					
					set monNS=$ZCVT($P($P(monQData,A,3),"|",2),"U")
					
					set monFuture=0
					set monStart=$P(monQData,A,5)
					If +monStart>+$ZTS set monFuture=1  // Don't if start date is in future
					If +monStart=+$ZTS,$P(monStart,",",2)>$p($ZTS,",",2) set monFuture=1  // Don't if startdate is today and start time is future
	
					if monFuture {
						set mon(monNS,monQueueType,"future")=$G(mon(monNS,monQueueType,"future"))+1
					} else {
						set mon(monNS,monQueueType,"now")=$G(mon(monNS,monQueueType,"now"))+1
					}
				}
			}
		}
	}
	kill (mon)
	
	ZW
	quit
]]></Implementation>
</Method>

<Method name="getNumberOfQueuedEmails">
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set monServer="",count=0
	for  {
		set monServer=$O(^queue(monServer))
		if monServer="" quit

		set monInstanceName=""
		for  {
			set monInstanceName=$O(^queue(monServer,monInstanceName))
			if monInstanceName="" quit

			set monQueueType=""
			for  {
				set monQueueType=$O(^queue(monServer,monInstanceName,monQueueType))
				if monQueueType="" quit
				if (monQueueType="adhoc") ! (monQueueType="process") {
					set monJob=""
					for  {
						set monJob=$Order(^queue(monServer,monInstanceName,monQueueType,monJob)) 
						if monJob="" quit
					
						set monQData=^queue(monServer,monInstanceName,monQueueType,monJob)
						
						if ($P(monQData,"*",1)'="QUEUED") continue
						set monNS=$ZCVT($P($P(monQData,"*",3),"|",2),"U")
						
						set monFuture=0
						set monStart=$P(monQData,"*",5)
						If +monStart>+$ZTS set monFuture=1  // Don't if start date is in future
						If +monStart=+$ZTS,$P(monStart,",",2)>$p($ZTS,",",2) set monFuture=1  // Don't if startdate is today and start time is future					
						if monFuture=0 {
							set count=count+1	
						}
					}
				}
			}
		}
	}
	return count
]]></Implementation>
</Method>

<Method name="isQueueRunning">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set rsQ = ##class(%ResultSet).%New()
	do rsQ.Prepare("SELECT * FROM %SYS.ProcessQuery Where Routine='queueChildManager'")
	do rsQ.Execute()
	if rsQ.Next() {
		return 1
	} else {
		return 0	
	}
]]></Implementation>
</Method>

<Method name="canRunQueue">
<Description>
determine if we are allowed to process the queue on this server</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	return (##class(EF.config.database).canWriteToNamespace("EVCOMMON"))
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.salesforce.RESTclient">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.lib.salesforce.RESTclient.CLS/EV.1
;vc; Component: CLS.EF.lib.salesforce.RESTclient
;vc;  Location: SmallDev
;vc; Date/Time: 22-Aug-14 17:40
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.salesforce.RESTclient.CLS/EV.1</td><td>CLS.EF.lib.salesforce.RESTclient</td><td>SmallDev</td><td style='white-space: nowrap;'>22-Aug-14 17:40</td><td>RajibQ</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63421,60762</TimeChanged>
<TimeCreated>63209,41422.928253</TimeCreated>

<Property name="sfSessionID">
<Type>%String</Type>
</Property>

<Property name="serverURL">
<Type>%String</Type>
</Property>

<Parameter name="defaultAPIVersion">
<Type>%String</Type>
<Default>v28.0</Default>
</Parameter>

<Method name="setAuth">
<FormalSpec>sfAuth:EF.lib.salesforce.authentication</FormalSpec>
<Implementation><![CDATA[
	Set ..sfSessionID=sfAuth.sfSessionID
	Set ..serverURL=sfAuth.serverURL
]]></Implementation>
</Method>

<Method name="createHttpRequestREST">
<ReturnType>%Net.HttpRequest</ReturnType>
<Implementation><![CDATA[
	set httpRequest=##class(EF.utils.httpRequest).createHttpRequestSSLcache("salesForce")
	set httpRequest.Server=$P(..serverURL,"/",3)
	set httpRequest.ContentType="application/xml"

	do httpRequest.SetHeader("Authorization","OAuth "_..sfSessionID)
	set httpRequest.ContentCharset="UTF-8"
	do httpRequest.SetHeader("Accept","application/xml")
	
	// this is to prevent Caché from converting it to UTF-16 ( https://www.pivotaltracker.com/story/show/77126176 )
	set httpRequest.ReadRawMode=1
	
	quit httpRequest
]]></Implementation>
</Method>

<Method name="getQueryResults">
<FormalSpec><![CDATA[query:%String,getAllResultsTogether:%Boolean=1,&nextRecordsUrl:%String=""]]></FormalSpec>
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[
	set sfDataSet=""
	
	set pathRegex=##class(%Regex.Matcher).%New("^\/QueryResult\/((records$)|(records\/.*)|(totalSize$))")
	set pathRegex2=##class(%Regex.Matcher).%New("^\/QueryResult\/((records$)|(records\/.*))")
	Set tempPathRegEx=##class(%Regex.Matcher).%New("^\/QueryResult\/((nextRecordsUrl$)|(done$))")
		
	If ($LENGTH(nextRecordsUrl)>0) {
		Set fullpath=nextRecordsUrl
		Set nextRecordsUrl=""
	} else {
		set fullpath="/services/data/"_..#defaultAPIVersion_"/query/.xml?q="_$$$URLENCODE(query)
	}
	
	For {
		set httpRequest=..createHttpRequestREST()
		
		set httpStatus=httpRequest.Get(fullpath)
		
		If ('$IsObject(sfDataSet)) {
			set sfDataSet=##class(EF.dataCollections.dataSetTempGlobal).createFromXMLStream(httpRequest.HttpResponse.Data,pathRegex)
		} else {
			Do sfDataSet.addFromXMLStream(httpRequest.HttpResponse.Data,pathRegex)
		}
		
		Set tempDataSet=##class(EF.dataCollections.dataSetTempGlobal).createFromXMLStream(httpRequest.HttpResponse.Data,tempPathRegEx)
		
		If (tempDataSet.getRootNode().getValueForFirstChildByName("done") = "true") {
			Quit
		}
		
		Set fullpath=tempDataSet.getRootNode().getValueForFirstChildByName("nextRecordsUrl")
		Set nextRecordsUrl=fullpath
		
		Set pathRegex=pathRegex2
		
		If ('getAllResultsTogether) {
			Quit
		}
	}
	quit sfDataSet
]]></Implementation>
</Method>

<Method name="createObject">
<Description>
returns the created object ID if OK or blank if failed</Description>
<FormalSpec>sfObject:%String,dataSet:EF.dataCollections.dataSet</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set objectID=""
	set httpRequest=..createHttpRequestREST()
	do httpRequest.EntityBody.CopyFrom(dataSet.getXMLStream())
	do httpRequest.Post("/services/data/"_..#defaultAPIVersion_"/sobjects/"_sfObject)
	do ..logCallAndResponse("createObject",sfObject,dataSet,httpRequest)
	
	if ..isSuccessfulHttpCall(httpRequest.HttpResponse.StatusCode) {
		set sfDataSet=##class(EF.dataCollections.dataSetTempGlobal).createFromXMLStream(httpRequest.HttpResponse.Data,##class(%Regex.Matcher).%New("^\/Result\/id$"))
		set objectID=sfDataSet.getRootNode().getValueForFirstChildByName("id")
	} else {
		set sfDataSet=##class(EF.dataCollections.dataSetTempGlobal).createFromXMLStream(httpRequest.HttpResponse.Data)
		try {
			set message=sfDataSet.getRootNode().getNextChildByName("Errors").getNextChildByName("Error").getValueForFirstChildByName("message")
		} catch err {
			set message="unknown error"
		}
		Throw ##class(shared.exceptions.generalException).%New("Create object failed:"_message)
	}
	if $L(objectID)=0 Throw ##class(shared.exceptions.generalException).%New("Create object failed: no objectID returned")
	
	return objectID
]]></Implementation>
</Method>

<Method name="updateObject">
<FormalSpec>sfObject:%String,dataSet:EF.dataCollections.dataSet,sfID</FormalSpec>
<Implementation><![CDATA[
	set httpRequest=..createHttpRequestREST()
	do httpRequest.EntityBody.CopyFrom(dataSet.getXMLStream())
	
	set httpStatus=httpRequest.Post("/services/data/"_..#defaultAPIVersion_"/sobjects/"_sfObject_"/"_sfID_"?_HttpMethod=PATCH")
	do ..logCallAndResponse("updateObject",sfObject,dataSet,httpRequest)
	if ..isSuccessfulHttpCall(httpRequest.HttpResponse.StatusCode) {
		set message="SUCCESS"
	} else {
		set sfDataSet=##class(EF.dataCollections.dataSetTempGlobal).createFromXMLStream(httpRequest.HttpResponse.Data)
		try {
			set message=sfDataSet.getRootNode().getNextChildByName("Errors").getNextChildByName("Error").getValueForFirstChildByName("message")
		} catch err {
			set message="unknown error"
		}
		Throw ##class(shared.exceptions.generalException).%New("Update object failed:"_message)
	}
	return
]]></Implementation>
</Method>

<Method name="getMetaData">
<FormalSpec>sfObjectName</FormalSpec>
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[
	set httpRequest=..createHttpRequestREST()
	set fullpath="/services/data/"_..#defaultAPIVersion_"/sobjects/"_sfObjectName_"/describe/"
	set httpStatus=httpRequest.Get(fullpath)
	//do ..logCallAndResponse("getMetaData",sfObjectName,dataSet,httpRequest)
	
	set sfDataSet=##class(EF.dataCollections.dataSetTempGlobal).createFromXMLStream(httpRequest.HttpResponse.Data)
	if ..isSuccessfulHttpCall(httpRequest.HttpResponse.StatusCode) {
		set message="SUCCESS"
	} else {
		try {
			set message=sfDataSet.getRootNode().getNextChildByName("Errors").getNextChildByName("Error").getValueForFirstChildByName("message")
		} catch err {
			set message="unknown error"
		}
		Throw ##class(shared.exceptions.generalException).%New("Describe object failed:"_message)
	}
	quit sfDataSet
]]></Implementation>
</Method>

<Method name="isSuccessfulHttpCall">
<ClassMethod>1</ClassMethod>
<FormalSpec>httpResponseCode:%Integer</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if (httpResponseCode=200) ! (httpResponseCode=201) ! (httpResponseCode=204)  {
		return 1
	} else {
		return 0
	}
]]></Implementation>
</Method>

<Method name="logCallAndResponse">
<ClassMethod>1</ClassMethod>
<FormalSpec>callName,resource,dataSet:EF.dataCollections.dataSet,httpRequest</FormalSpec>
<Implementation><![CDATA[
	if $G(^xDEBUG) {
		set ^xSFCRMlog($ZTS,callName,"call")=dataSet.getXMLStream(resource).Read(9999)
		set ^xSFCRMlog($ZTS,callName,"reply")=httpRequest.HttpResponse.Data.Read(9999)
		set ^xSFCRMlog($ZTS,callName,"reply status")=httpRequest.HttpResponse.StatusCode
	}
	do httpRequest.HttpResponse.Data.Rewind()
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.salesforce.SOAPclient">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.lib.salesforce.SOAPclient.CLS/EV.1
;vc; Component: CLS.EF.lib.salesforce.SOAPclient
;vc;  Location: SmallDev
;vc; Date/Time: 04-Sep-14 16:13
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.salesforce.SOAPclient.CLS/EV.1</td><td>CLS.EF.lib.salesforce.SOAPclient</td><td>SmallDev</td><td style='white-space: nowrap;'>04-Sep-14 16:13</td><td>AdrianM</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63434,58386</TimeChanged>
<TimeCreated>63209,41158.637314</TimeCreated>

<Property name="sfSessionID">
<Type>%String</Type>
</Property>

<Property name="serverURL">
<Type>%String</Type>
</Property>

<Method name="authenticate">
<FormalSpec><![CDATA[userName:%String,password:%String,securityToken:%String,&sfSessionID:%String,&serverURL:%String,environment:%String]]></FormalSpec>
<Implementation><![CDATA[
	Set sfSessionID=""
	Set serverURL=""
	
	if ('$L(userName) || '$L(password)) {
		Throw ##class(shared.exceptions.generalException).%New("Insufficient credentials supplied")
	} 
	
	if $L(securityToken) {
		//According to http://www.salesforce.com/us/developer/docs/api/Content/sforce_api_concepts_security.htm 
		//SecurityToken needs to be appended at the end of password before trying login. The doc says :
		//For example, if a user’s password is mypassword, and the security token is XXXXXXXXXX, then the user must enter mypasswordXXXXXXXXXX to log in.
		
		set passwordSecToken=password_securityToken
	} else {
		set passwordSecToken=password
	}
	
	if (environment="sandbox") {
		set isSandbox=1	
	} else {
		set isSandbox=0	
	}
	
	if (##class(sfEF.methods).login(userName,passwordSecToken,isSandbox)){
		set sfSessionID=%SFsessionID
		set serverURL=%SFserverURL
	} else {
		Throw ##class(shared.exceptions.generalException).%New("Login failed")
	}
]]></Implementation>
</Method>

<Method name="setAuth">
<FormalSpec>sfAuth:EF.lib.salesforce.authentication</FormalSpec>
<Implementation><![CDATA[
	Set ..sfSessionID=sfAuth.sfSessionID
	Set ..serverURL=sfAuth.serverURL
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.salesforce.authentication">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.lib.salesforce.authentication.CLS/EV.1
;vc; Component: CLS.EF.lib.salesforce.authentication
;vc;  Location: SmallDev
;vc; Date/Time: 04-Sep-14 15:48
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.salesforce.authentication.CLS/EV.1</td><td>CLS.EF.lib.salesforce.authentication</td><td>SmallDev</td><td style='white-space: nowrap;'>04-Sep-14 15:48</td><td>AdrianM</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63434,57254.733394</TimeChanged>
<TimeCreated>63209,41375.433971</TimeCreated>

<Property name="userName">
<Description><![CDATA[
User / Account Name<br />]]></Description>
<Type>%String</Type>
</Property>

<Property name="password">
<Type>%String</Type>
</Property>

<Property name="securityToken">
<Description>
Security Token is an extra piece of information (if available) that Salesforces uses for login.</Description>
<Type>%String</Type>
</Property>

<Property name="environment">
<Type>%String</Type>
<InitialExpression>"production"</InitialExpression>
<Parameter name="VALUELIST" value=",production,sandbox"/>
</Property>

<Property name="sfSessionID">
<Type>%String</Type>
</Property>

<Property name="serverURL">
<Type>%String</Type>
</Property>

<Property name="sfSOAPClient">
<Type>EF.lib.salesforce.SOAPclient</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>userName:%String="",password:%String="",securityToken:%String="",environment:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
 	Set ..userName=$GET(userName)
 	Set ..password=$GET(password)
 	Set ..securityToken=$GET(securityToken)
 	Set ..environment=$GET(environment)
 	
 	Set ..sfSessionID=""
 	Set ..serverURL=""
 	
 	Set ..sfSOAPClient=##class(EF.lib.salesforce.SOAPclient).%New()
 	
 	Quit $$$OK
]]></Implementation>
</Method>

<Method name="authenticate">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set sfSessionID=""
	Set serverURL=""
	Do ..sfSOAPClient.authenticate(..userName,..password,..securityToken,.sfSessionID,.serverURL,..environment)
	Set ..sfSessionID=sfSessionID
	Set ..serverURL=serverURL
]]></Implementation>
</Method>

<Method name="isValid">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set ret=0
	
	If (	(..sfSessionID'="")
		&&	(..serverURL'="")
		) {
		Set ret=1
	}
	
	Quit ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.salesforce.connection">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.lib.salesforce.connection.CLS/EV.0
;vc; Component: CLS.EF.lib.salesforce.connection
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.salesforce.connection.CLS/EV.0</td><td>CLS.EF.lib.salesforce.connection</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Import>EF.lib.salesforce.soql</Import>
<Super>%RegisteredObject</Super>
<TimeChanged>63224,44440</TimeChanged>
<TimeCreated>63209,41572.11895</TimeCreated>

<Property name="sfAuth">
<Type>EF.lib.salesforce.authentication</Type>
</Property>

<Property name="sfSOAPClient">
<Type>EF.lib.salesforce.SOAPclient</Type>
</Property>

<Property name="sfRESTClient">
<Type>EF.lib.salesforce.RESTclient</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>sfAuth:EF.lib.salesforce.authentication</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ..sfSOAPClient=##class(EF.lib.salesforce.SOAPclient).%New()
	Set ..sfRESTClient=##class(EF.lib.salesforce.RESTclient).%New()
	Set ..sfAuth=sfAuth
	
	If '(..sfAuth.isValid()) {
		Throw ##class(shared.exceptions.generalException).%New("Invalid authentication")
	}
	
    Do ..sfSOAPClient.setAuth(..sfAuth)
    Do ..sfRESTClient.setAuth(..sfAuth)
    
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="getCampaignsList">
<FormalSpec>soql:SoqlBuilder</FormalSpec>
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[
	If ('$DATA(soql)) {
		Set soql=##class(SoqlBuilder).%New()
	}
	Set soql=soql.fromx("Campaign")
	
	Quit ..getSOQLResults(soql)
]]></Implementation>
</Method>

<Method name="getCampaignMembers">
<FormalSpec>campaignID:%String,soql:SoqlBuilder</FormalSpec>
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[
	If ('$DATA(soql)) {
		Set soql=##class(SoqlBuilder).%New()
	}
	Set soql=soql.fromx("CampaignMember").wherex(
			##class(FieldCondition).%New("CampaignID",campaignID)
		)
	
	Quit ..getSOQLResults(soql)
]]></Implementation>
</Method>

<Method name="getLeadsByCampaignID">
<FormalSpec>campaignID:%String</FormalSpec>
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[	Quit ..sfSOAPClient.getLeadsByCampaignID(campaignID)
]]></Implementation>
</Method>

<Method name="getContactsByCampaignID">
<FormalSpec>campaignID:%String</FormalSpec>
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[	Quit ..sfSOAPClient.getContactsByCampaignID(campaignID)
]]></Implementation>
</Method>

<Method name="getSOQLResults">
<FormalSpec><![CDATA[soql,getAllResultsTogether:%Boolean=1,&cursor=""]]></FormalSpec>
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[
	Set qry=""
	If ($IsObject(soql)) {
		If (soql.%IsA("EF.lib.salesforce.soql.SoqlBuilder")) {
			Set qry=soql.toSoql()
		}
	} else {
		Set qry=soql
	}
	Quit ..sfRESTClient.getQueryResults(qry, getAllResultsTogether, .cursor)
]]></Implementation>
</Method>

<Method name="getMetaData">
<FormalSpec>sfObject:%String</FormalSpec>
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[	Quit ..sfRESTClient.getMetaData(sfObject)
]]></Implementation>
</Method>

<Method name="createObject">
<FormalSpec>sfObject:%String,dataSet:EF.dataCollections.dataSet</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..sfRESTClient.createObject(sfObject,dataSet)
]]></Implementation>
</Method>

<Method name="updateObject">
<FormalSpec>sfObject:%String,dataSet:EF.dataCollections.dataSet,sfID:%String</FormalSpec>
<Implementation><![CDATA[
	do ..sfRESTClient.updateObject(sfObject,dataSet,sfID)
	quit
]]></Implementation>
</Method>

<Method name="createLead">
<FormalSpec><![CDATA[&leadID,dataSet:EF.dataCollections.dataSet]]></FormalSpec>
<Implementation><![CDATA[	set leadID=..sfRESTClient.createObject("Lead", dataSet)
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.salesforce.soql.AndCondition">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.lib.salesforce.soql.AndCondition.CLS/EV.0
;vc; Component: CLS.EF.lib.salesforce.soql.AndCondition
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.salesforce.soql.AndCondition.CLS/EV.0</td><td>CLS.EF.lib.salesforce.soql.AndCondition</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>ConditionGroup</Super>
<TimeChanged>63215,57223</TimeChanged>
<TimeCreated>63215,57223.055479</TimeCreated>

<Method name="%OnNew">
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[    Quit ##super("AND")
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.salesforce.soql.Condition">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.lib.salesforce.soql.Condition.CLS/EV.0
;vc; Component: CLS.EF.lib.salesforce.soql.Condition
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.salesforce.soql.Condition.CLS/EV.0</td><td>CLS.EF.lib.salesforce.soql.Condition</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63215,47406</TimeChanged>
<TimeCreated>63215,47406.064068</TimeCreated>
</Class>


<Class name="EF.lib.salesforce.soql.ConditionGroup">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.lib.salesforce.soql.ConditionGroup.CLS/EV.0
;vc; Component: CLS.EF.lib.salesforce.soql.ConditionGroup
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.salesforce.soql.ConditionGroup.CLS/EV.0</td><td>CLS.EF.lib.salesforce.soql.ConditionGroup</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>NestableCondition</Super>
<TimeChanged>63215,57559</TimeChanged>
<TimeCreated>63215,56431.828293</TimeCreated>

<Property name="conditions">
<Type>Condition</Type>
<Collection>list</Collection>
</Property>

<Method name="conditionsSet">
<FormalSpec>Arg</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set i%conditions=Arg
	
	Quit $$$OK
]]></Implementation>
</Method>

<Property name="separator">
<Type>%String</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>separator:%String=""</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ..separator=separator
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="add">
<FormalSpec>c:Condition</FormalSpec>
<ReturnType>NestableCondition</ReturnType>
<Implementation><![CDATA[
	If ($IsObject(c)) {
		Do ..conditions.Insert(c)
	}
	
	Return $this
]]></Implementation>
</Method>

<Method name="toSoql">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set soql = ""
	
	If (..conditions.Size = 1) {
		Return ..conditions.GetAt(1)
	} elseif (..conditions.Size > 1) {
		Set hasOpenParenBeenAdded = 0
		Set additionalSoql=""
		
		For idx=1:1:(..conditions.Size) {
			Set condition=..conditions.GetAt(idx)
			Set additionalSoql = condition.toSoql()
			If ($LENGTH(additionalSoql)>0) {
				
			}
			If (hasOpenParenBeenAdded) {
		        Set soql=soql_" "_..separator_" "
			} else {
		        Set soql = "("
		        Set hasOpenParenBeenAdded = 1
			}
		    Set soql =soql_additionalSoql
		}
		If (hasOpenParenBeenAdded) {
		    Set soql = soql_")"
		}
	}
	Return soql
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.salesforce.soql.Field">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.lib.salesforce.soql.Field.CLS/EV.0
;vc; Component: CLS.EF.lib.salesforce.soql.Field
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.salesforce.soql.Field.CLS/EV.0</td><td>CLS.EF.lib.salesforce.soql.Field</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>Soqlable</Super>
<TimeChanged>63215,45389</TimeChanged>
<TimeCreated>63214,82115.365626</TimeCreated>

<Property name="name">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="toLabelx">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Private>1</Private>
</Property>

<Method name="%OnNew">
<FormalSpec>name:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ..name=name
	Set ..toLabelx=0
	
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="toLabelx">
<FormalSpec>toLabelx:%Boolean</FormalSpec>
<ReturnType>Field</ReturnType>
<Implementation><![CDATA[
	Set ..toLabelx=toLabelx
	Return $this
]]></Implementation>
</Method>

<Method name="toSoql">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return $SELECT(..toLabelx=1:"toLabel(",1:"")_..name_$SELECT(..toLabelx=1:")",1:"")
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.salesforce.soql.FieldCondition">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.lib.salesforce.soql.FieldCondition.CLS/EV.0
;vc; Component: CLS.EF.lib.salesforce.soql.FieldCondition
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.salesforce.soql.FieldCondition.CLS/EV.0</td><td>CLS.EF.lib.salesforce.soql.FieldCondition</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>Condition</Super>
<TimeChanged>63215,53339</TimeChanged>
<TimeCreated>63215,41330.405804</TimeCreated>

<Property name="field">
<Type>%String</Type>
</Property>

<Method name="fieldSet">
<FormalSpec>Arg:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set i%field=Arg
	
	Quit $$$OK
]]></Implementation>
</Method>

<Property name="operator">
<Type>%String</Type>
</Property>

<Method name="operatorSet">
<FormalSpec>Arg:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set i%operator=Arg
	
	Quit $$$OK
]]></Implementation>
</Method>

<Property name="value">
</Property>

<Method name="valueSet">
<FormalSpec>Arg</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set i%value=Arg
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>field:%String,operatorOrValue,value</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Do ..field(field)
	
	if ($DATA(operatorOrValue) && $DATA(value)) {
		Do ..setOperation(operatorOrValue,value)
	} elseif ($DATA(operatorOrValue)) {
		Set value=operatorOrValue
		Do ..setOperation("equals",value)
	}
	
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="field">
<FormalSpec>field:%String</FormalSpec>
<ReturnType>FieldCondition</ReturnType>
<Implementation><![CDATA[
	Set ..field=$ZSTRIP(field,"<>W")
	
	Return $this
]]></Implementation>
</Method>

<Method name="equals">
<FormalSpec>value</FormalSpec>
<Implementation><![CDATA[	Return ..setOperation("equals",value)
]]></Implementation>
</Method>

<Method name="notEquals">
<FormalSpec>value</FormalSpec>
<Implementation><![CDATA[	Return ..setOperation("not equals",value)
]]></Implementation>
</Method>

<Method name="lessThan">
<FormalSpec>value</FormalSpec>
<Implementation><![CDATA[	Return ..setOperation("less than",value)
]]></Implementation>
</Method>

<Method name="lessThanOrEqualTo">
<FormalSpec>value</FormalSpec>
<Implementation><![CDATA[	Return ..setOperation("less than or equal to",value)
]]></Implementation>
</Method>

<Method name="greaterThan">
<FormalSpec>value</FormalSpec>
<Implementation><![CDATA[	Return ..setOperation("greater than or equal to",value)
]]></Implementation>
</Method>

<Method name="likex">
<FormalSpec>value</FormalSpec>
<Implementation><![CDATA[	Return ..setOperation("like",value)
]]></Implementation>
</Method>

<Method name="setOperation">
<FormalSpec>operator,value</FormalSpec>
<ReturnType>FieldCondition</ReturnType>
<Implementation><![CDATA[
	If (..operatorToString(operator)="") {
		Throw ##class(shared.exceptions.generalException).%New("illegal operator: " + operator)
	}
	Set ..operator=operator
	Set ..value=value
	
	Return $this
]]></Implementation>
</Method>

<Method name="toSoql">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set manipulated=..value
	If ('$IsObject(manipulated)) {
		If (..operator = "like") {
			Set manipulated=##class(StringUtils).ensureStringStartsEndsWithChar(manipulated,"%")
			// escape "%" and "_" in data somehow?
		}
	}
	Return ..field_" "_..operatorToString(..operator)_" "_##class(SoqlUtils).toLiteral(manipulated)
]]></Implementation>
</Method>

<Method name="operatorToString">
<ClassMethod>1</ClassMethod>
<FormalSpec>op</FormalSpec>
<Implementation><![CDATA[
	Set returnValue=""
	
	Set opl=$ZCONVERT(op,"L")
	
	If ((opl="=") ! (opl="equals")) {
		Set returnValue="="
	} elseif ((opl="!=") ! (opl="not equals")) {
		Set returnValue="!="
	} elseif ((opl="<") ! (opl="less than")) {
		Set returnValue="<"
	} elseif ((opl="<=") ! (opl="less than or equal to")) {
		Set returnValue="<="
	} elseif ((opl=">") ! (opl="greater than")) {
		Set returnValue=">"
	} elseif ((opl=">=") ! (opl="greater than or equal to")) {
		Set returnValue=">="
	} elseif (opl="like") {
		Set returnValue="like"
	}
	
	Quit returnValue
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.salesforce.soql.FieldConditionValue">
<Description><![CDATA[
Custom addition for EF to make data types work in Caché!
<!-- ;vc;
;vc;    Object: EF.lib.salesforce.soql.FieldConditionValue.CLS/EV.0
;vc; Component: CLS.EF.lib.salesforce.soql.FieldConditionValue
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.salesforce.soql.FieldConditionValue.CLS/EV.0</td><td>CLS.EF.lib.salesforce.soql.FieldConditionValue</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63215,66618</TimeChanged>
<TimeCreated>63215,45599.717509</TimeCreated>

<Property name="rawValue">
</Property>

<Property name="type">
<Type>%String</Type>
<InitialExpression>"string"</InitialExpression>
<Parameter name="VALUELIST" value=",null,string,int,boolean,currency,date,datetime,double,email,id,phone,picklist,reference,textarea,url"/>
</Property>

<Method name="%OnNew">
<FormalSpec>rawValue,type:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ..rawValue=rawValue
	If ($DATA(type)) {
		If ..typeIsValid(type) {
			Set ..type=type
		} else {
			Throw ##class(shared.exceptions.generalException).%New("Invalid type")
		}
	}
    Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.salesforce.soql.NestableCondition">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.lib.salesforce.soql.NestableCondition.CLS/EV.0
;vc; Component: CLS.EF.lib.salesforce.soql.NestableCondition
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.salesforce.soql.NestableCondition.CLS/EV.0</td><td>CLS.EF.lib.salesforce.soql.NestableCondition</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>Condition</Super>
<TimeChanged>63215,56400</TimeChanged>
<TimeCreated>63215,56400.010024</TimeCreated>
</Class>


<Class name="EF.lib.salesforce.soql.OrCondition">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.lib.salesforce.soql.OrCondition.CLS/EV.0
;vc; Component: CLS.EF.lib.salesforce.soql.OrCondition
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.salesforce.soql.OrCondition.CLS/EV.0</td><td>CLS.EF.lib.salesforce.soql.OrCondition</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>ConditionGroup</Super>
<TimeChanged>63215,57292</TimeChanged>
<TimeCreated>63215,57292.39168</TimeCreated>

<Method name="%OnNew">
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[    Quit ##super("OR")
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.salesforce.soql.OrderBy">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.lib.salesforce.soql.OrderBy.CLS/EV.0
;vc; Component: CLS.EF.lib.salesforce.soql.OrderBy
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.salesforce.soql.OrderBy.CLS/EV.0</td><td>CLS.EF.lib.salesforce.soql.OrderBy</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>Soqlable</Super>
<TimeChanged>63215,45380</TimeChanged>
<TimeCreated>63214,83610.701308</TimeCreated>

<Property name="field">
<Type>%String</Type>
</Property>

<Property name="ascending">
<Type>%Boolean</Type>
</Property>

<Property name="descending">
<Type>%String</Type>
</Property>

<Method name="descendingGet">
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	Quit '(..ascending)
]]></Implementation>
</Method>

<Property name="nullsFirst">
<Type>%Boolean</Type>
</Property>

<Property name="nullsLast">
<Type>%Boolean</Type>
</Property>

<Method name="nullsLastGet">
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	Quit '(..nullsFirst)
]]></Implementation>
</Method>

<Property name="sortSet">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Private>1</Private>
</Property>

<Property name="nullsSet">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Private>1</Private>
</Property>

<Method name="%OnNew">
<FormalSpec>field:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ..field = field
	Do ..ascending()
	Set ..sortSet = 0
	
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="ascending">
<ReturnType>OrderBy</ReturnType>
<Implementation><![CDATA[	Return ..setAscending(1)
]]></Implementation>
</Method>

<Method name="descending">
<ReturnType>OrderBy</ReturnType>
<Implementation><![CDATA[	Return ..setAscending(0)
]]></Implementation>
</Method>

<Method name="nullsFirst">
<ReturnType>OrderBy</ReturnType>
<Implementation><![CDATA[	Return ..setNullsFirst(1)
]]></Implementation>
</Method>

<Method name="nullsLast">
<ReturnType>OrderBy</ReturnType>
<Implementation><![CDATA[	Return ..setNullsFirst(0)
]]></Implementation>
</Method>

<Method name="setAscending">
<FormalSpec>ascending:%Boolean</FormalSpec>
<Implementation><![CDATA[
	Set ..ascending = ascending
	Set ..sortSet = 1
	If ('(..nullsSet)) {
		Set ..nullsFirst = ..descending
	}
	Return $this
]]></Implementation>
</Method>

<Method name="setNullsFirst">
<FormalSpec>nullsFirst:%Boolean</FormalSpec>
<Implementation><![CDATA[
	Set ..nullsFirst = nullsFirst
	Set ..nullsSet = 1
	Return $this
]]></Implementation>
</Method>

<Method name="toSoql">
<Implementation><![CDATA[
	Set returnValue = ..field
	
	If (..sortSet) {
		if (..ascending) {
			Set returnValue=returnValue_" ASC"
		} else {
			Set returnValue=returnValue_" DESC"
		}
	}
	
	If (..nullsSet) {
		If (..nullsFirst) {
			Set returnValue=returnValue_" NULLS FIRST"
		} else {
			Set returnValue=returnValue_" NULLS LAST"
		}
	}
	
	Return returnValue
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.salesforce.soql.SoqlBuilder">
<Description><![CDATA[
<br /> http://richardvanhook.com/2010/04/11/soql-builder/
<br />
<br /> ============================================================
<br /> This code is part of the "apex-lang" open source project avaiable at:
<br /> 
<br />      http://code.google.com/p/apex-lang/
<br />
<br /> This code is licensed under the Apache License, Version 2.0.  You may obtain a 
<br /> copy of the License at:
<br />
<br />      http://www.apache.org/licenses/LICENSE-2.0
<br /> ============================================================
<br />
<!-- ;vc;
;vc;    Object: EF.lib.salesforce.soql.SoqlBuilder.CLS/EV.0
;vc; Component: CLS.EF.lib.salesforce.soql.SoqlBuilder
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.salesforce.soql.SoqlBuilder.CLS/EV.0</td><td>CLS.EF.lib.salesforce.soql.SoqlBuilder</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>Soqlable</Super>
<TimeChanged>63215,59937</TimeChanged>
<TimeCreated>63214,81905.932971</TimeCreated>

<Property name="selectx">
<Type>%RegisteredObject</Type>
<Collection>list</Collection>
<Private>1</Private>
</Property>

<Property name="selectCount">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Private>1</Private>
</Property>

<Property name="fromx">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="wherex">
<Type>Condition</Type>
<Private>1</Private>
</Property>

<Property name="orderByx">
<Type>OrderBy</Type>
<Collection>list</Collection>
<Private>1</Private>
</Property>

<Method name="selectx">
<FormalSpec>field</FormalSpec>
<ReturnType>SoqlBuilder</ReturnType>
<Implementation><![CDATA[
	If ($IsObject(field)) {
		Return ..addToSelect(field)
	} else {
		if ($LISTVALID(field)) {
			For idx=1:1:$LISTLENGTH(field) {
				Do ..addToSelect($LISTGET(field,idx))
			}
			Return $this
		} else {
			For idx=1:1:$LENGTH(field,",") {
				Set piece=$PIECE(field,",",idx)
				Do ..addToSelect(piece)
			}
			Return $this
		}
	}
]]></Implementation>
</Method>

<Method name="addToSelect">
<FormalSpec>field</FormalSpec>
<ReturnType>SoqlBuilder</ReturnType>
<Implementation><![CDATA[
	If ('$DATA(field)){
	    Throw ##class(shared.exceptions.generalException).%New("Null field")
	}
	
	If ($IsObject(field)) {
		If (
				(field.%IsA("EF.lib.salesforce.soql.Field"))
			!	(field.%IsA("EF.lib.salesforce.soql.SoqlBuilder"))
			) {
			Do ..selectx.Insert(field)
		}
	} elseif ($LENGTH(field)>0){
	    Do ..selectx.Insert(##class(Field).%New(field))
	}
	
	Set ..selectCount=0
	
	Return $this
]]></Implementation>
</Method>

<Method name="fromx">
<FormalSpec>fromx:%String</FormalSpec>
<ReturnType>SoqlBuilder</ReturnType>
<Implementation><![CDATA[
	Set ..fromx=fromx
	Return $this
]]></Implementation>
</Method>

<Method name="wherex">
<FormalSpec>wherex:Condition</FormalSpec>
<ReturnType>SoqlBuilder</ReturnType>
<Implementation><![CDATA[
	Set ..wherex=wherex
	Return $this
]]></Implementation>
</Method>

<Method name="orderByx">
<FormalSpec>orderByx</FormalSpec>
<ReturnType>SoqlBuilder</ReturnType>
<Implementation><![CDATA[
	If ($IsObject(orderByx)) {
		If (orderByx.%IsA("EF.lib.salesforce.soql.OrderBy")) {
			Do ..orderByx.Insert(orderByx)
		}
	} elseif ($LENGTH(orderByx)>0) {
		Do ..orderByx.Insert(##class(OrderBy).%New(orderByx))
	}
	Return $this
]]></Implementation>
</Method>

<Method name="toSoql">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set separator=" "
	Set isFirst=1
	
	Set soql = "SELECT "
	
	If (..selectx.Size<1) {
		Do ..addToSelect("id")
	}
	
	Set delim=""
	For idx=1:1:(..selectx.Size) {
		Set field=..selectx.GetAt(idx)
		If ($IsObject(field)) {
			If (field.%IsA("EF.lib.salesforce.soql.Field")) {
				Set soql=soql_separator_delim_$ZCONVERT(field.toSoql(),"L")
				Set delim=","
			} elseif (field.%IsA("EF.lib.salesforce.soql.SoqlBuilder")) {
				Set soql=soql_separator_delim_"("_field.toSoql()_")"
				Set delim=","
			}
		} else {
			Set soql=soql_separator_delim_$ZCONVERT(field,"L")
			Set delim=","
		}
	}
	
	Set soql=soql_separator_"FROM "_..fromx
	
	If ($IsObject(..wherex)) {
		Set wherexs=..wherex.toSoql()
		If ($LENGTH($ZSTRIP(wherexs,"<>W"))>0) {
			Set soql=soql_separator_"WHERE "_wherexs
		}
	}
	
	If (..orderByx.Size>0) {
		Set isFirst=1
		
		For idx=1:1:(..orderByx.Size) {
			Set orderBy=..orderByx.GetAt(idx)
			If (isFirst) {
				Set isFirst=0
				Set soql=soql_separator_"ORDER BY "
			} else {
				Set soql=soql_", "
			}
			Set soql=soql_orderBy.toSoql()
		}
		
	}
	
	Return soql
]]></Implementation>
</Method>

<Method name="test">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set x=..%New()
	
	Do x.selectx("Id").fromx("Campaign")
	
	Write !,"[1] "_x.toSoql()
	
	Set x=..%New()
	
	Do x.selectx("Id,Name").fromx("Campaign").orderByx(##class(OrderBy).%New("Name").ascending())
	Do x.wherex(##class(FieldCondition).%New("Name","=","Rajib's ""Super"" Campaign"))
	
	Write !,"[2] "_x.toSoql()
	
	Set x=..%New()
	
	Do x.selectx("Id,Name").fromx("Campaign").orderByx("Name")
	Do x.wherex(##class(FieldCondition).%New("Count").greaterThan(10))
	
	Write !,"[3] "_x.toSoql()
	
	Set x=..%New()
	
	Do x.selectx("Id,Name").fromx("Campaign").orderByx("Name")
	Do x.wherex(##class(FieldCondition).%New("Count",">",##class(FieldConditionValue).%New(10,"int")))
	
	Write !,"[4] "_x.toSoql()
	
	Set x=..%New()
	
	Do x.selectx("Id,Name").fromx("Campaign").orderByx("Name")
	Do x.wherex(##class(FieldCondition).%New("Name").likex("Rajib"))
	
	Write !,"[5] "_x.toSoql()
	
	Set x=..%New()
	
	Do x.selectx("Id,Name").fromx("Campaign").orderByx("Name")
	Do x.selectx(..%New().selectx("Id,Firstname,Lastname").fromx("Contact"))
	
	Write !,"[6] "_x.toSoql()
	
	Set x=..%New()
	
	Do x.selectx("Id,Name").fromx("Campaign").orderByx("Name")
	Set andConds=##class(AndCondition).%New()
		Set andConds=andConds.add(##class(FieldCondition).%New("Name","like","Rajib"))
			Set orConds=##class(OrCondition).%New()
				Set orConds=orConds.add(##class(FieldCondition).%New("Name","Cow"))
				Set orConds=orConds.add(##class(FieldCondition).%New("Name","Blah"))
		Set andConds=andConds.add(orConds)
	
	Do x.wherex(andConds)
	
	Write !,"[7] "_x.toSoql()
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.salesforce.soql.SoqlUtils">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.lib.salesforce.soql.SoqlUtils.CLS/EV.0
;vc; Component: CLS.EF.lib.salesforce.soql.SoqlUtils
;vc;  Location: SmallDev
;vc; Date/Time: 05-Jun-15 10:43
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.salesforce.soql.SoqlUtils.CLS/EV.0</td><td>CLS.EF.lib.salesforce.soql.SoqlUtils</td><td>SmallDev</td><td style='white-space: nowrap;'>05-Jun-15 10:43</td><td>RajibQ</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63217,54840</TimeChanged>
<TimeCreated>63215,46040.304808</TimeCreated>

<Method name="toLiteral">
<ClassMethod>1</ClassMethod>
<FormalSpec>value</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set literal = ""
	If ('$DATA(value)){
	    Set literal=literal_"null"
	}
	
	if ('$IsObject(value)) {
		Set value=##class(FieldConditionValue).%New(value,"string")
	}
	
	If (value.%IsA("EF.lib.salesforce.soql.FieldConditionValue")) {
		/* sf types
		
					“boolean")=""
                  "currency")=""
                      "date")=""
                  "datetime")=""
                    "double")=""
                     "email")=""
                        "id")=""
                       "int")=""
                     "phone")=""
                  "picklist")=""
                 "reference")=""
                    "string")=""
                  "textarea")=""
                       "url")=""
		
		*/
		
		If (value.type = "null") {
			Set literal=literal_"null"
		} elseif (		(value.type = "string")
					!	(value.type = "textarea")
					!	(value.type = "email")
					!	(value.type = "url")
				) {
			Set manipulated=value.rawValue
			Set manipulated=$REPLACE(manipulated,"\","\\")
			Set manipulated=$REPLACE(manipulated,$CHAR(10),"\n")
			Set manipulated=$REPLACE(manipulated,$CHAR(13),"\r")
			Set manipulated=$REPLACE(manipulated,$CHAR(9),"\t")
			Set manipulated=$REPLACE(manipulated,$CHAR(7),"\b")
			Set manipulated=$REPLACE(manipulated,$CHAR(12),"\f")
			Set manipulated=$REPLACE(manipulated,"""","\""")
			Set manipulated=$REPLACE(manipulated,"'","\'")
			
			Set literal=literal_"'"_manipulated_"'"
		} elseif (
					(value.type = "int")
					! (value.type = "double")
				) {
				
				Set literal=literal_value.rawValue
		} elseif (value.type = "boolean") {
				If (		((value.rawValue?1.N) && (value.rawValue>0))
						!	($ZCONVERT(value.rawValue,"L")="true")
					) {
						
					Set literal="true"
				} elseif (		(value.rawValue="")
							!	((value.rawValue?1.N) && (value.rawValue=0))
							!	($ZCONVERT(value.rawValue,"L")="false")
						) {
							
					Set literal="false"
				} else {
					Throw ##class(shared.exceptions.generalException).%New("Bad boolean value")
				}
		} elseif (value.type = "date") {
			Set date=value.rawValue
			If (date?1.5N) {
				Set literal=literal_##class(shared.dateFunctions).multiDate(date,25,,1)
			} elseif (date?4N1"-"2N1"-"2N) {
				Set literal=literal_date
			} else {
				Throw ##class(shared.exceptions.generalException).%New("Bad date format")
			}
		} elseif (value.type = "datetime") {
			Set datetime=value.rawValue
			If (datetime?1.5N1","1.5N) {
				// Set literal=literal_##class(shared.dateFunctions).multiDate(date,25,,1)
				// TODO
				Throw ##class(shared.exceptions.generalException).%New("Bad datetime format")
			} elseif (date?4N1"-"2N1"-"2N1"T"2N1":"2N1":"2N1"Z") {
				Set literal=literal_datetime
			} else {
				Throw ##class(shared.exceptions.generalException).%New("Bad datetime format")
			}
		/* TODO
		} else if(  value instanceOf Datetime){
		    literal += ((Datetime) value).format('yyyy-MM-dd') + 'T' + ((Datetime) value).format('hh:mm:ss') + 'Z';
		*/					
		} else {
			Throw ##class(shared.exceptions.generalException).%New("invalid value; value must be null, a primitive type (String|ID|Boolean|Integer|Long|Double|Decimal|Date|Datetime), or implement Soqlable interface")
		}
	} elseif (value.%IsA("EF.lib.salesforce.soql.Soqlable")) {
		Return value.toSoql()
	} else {
		Throw ##class(shared.exceptions.generalException).%New("invalid value; value must be null, a primitive type (String|ID|Boolean|Integer|Long|Double|Decimal|Date|Datetime), or implement Soqlable interface")
	}
	
	Return literal
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.salesforce.soql.Soqlable">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.lib.salesforce.soql.Soqlable.CLS/EV.0
;vc; Component: CLS.EF.lib.salesforce.soql.Soqlable
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.salesforce.soql.Soqlable.CLS/EV.0</td><td>CLS.EF.lib.salesforce.soql.Soqlable</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63215,45325</TimeChanged>
<TimeCreated>63215,45325.640258</TimeCreated>
</Class>


<Class name="EF.lib.salesforce.soql.StringUtils">
<Description><![CDATA[
<br/> ============================================================
<br/> This code is part of the "apex-lang" open source project avaiable at:
<br/> 
<br/>      http://code.google.com/p/apex-lang/
<br/>
<br/> This code is licensed under the Apache License, Version 2.0.  You may obtain a 
<br/> copy of the License at:
<br/> 
<br/>      http://www.apache.org/licenses/LICENSE-2.0
<br/> ============================================================
<br/>
<br/>
<br/> Port of the StringUtils class from Java to Apex.  This
<br/> class is part of the Apache Commons Lang project available
<br/> at http://commons.apache.org/lang/.
<br/>
<!-- ;vc;
;vc;    Object: EF.lib.salesforce.soql.StringUtils.CLS/EV.0
;vc; Component: CLS.EF.lib.salesforce.soql.StringUtils
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.lib.salesforce.soql.StringUtils.CLS/EV.0</td><td>CLS.EF.lib.salesforce.soql.StringUtils</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63215,53012</TimeChanged>
<TimeCreated>63215,40690.030698</TimeCreated>

<Method name="equals">
<ClassMethod>1</ClassMethod>
<FormalSpec>str1:%String,str2:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Return $SELECT(('$DATA(str1)):('$DATA(str2)),1:(str1=str2))
]]></Implementation>
</Method>

<Method name="equalsIgnoreCase">
<ClassMethod>1</ClassMethod>
<FormalSpec>str1:%String,str2:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Return $SELECT(('$DATA(str1)):('$DATA(str2)),1:($ZCONVERT(str1,"L")=$ZCONVERT(str2,"L")))
]]></Implementation>
</Method>

<Method name="regionMatches">
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String,ignoreCase:%Boolean=0,toffset:%Integer=1,other:%String,ooffset:%Integer=1,len:%Integer=0</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set str = $EXTRACT(str,toffset,toffset+len)
	Set other = $EXTRACT(other,ooffset,ooffset+len)
	If (ignoreCase) {
		Return ..equalsIgnoreCase(str, other)
	}
	Return ..equals(str, other)
]]></Implementation>
</Method>

<Method name="startsWith">
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String,prefix:%String,ignoreCase:%Boolean=0</FormalSpec>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If (('$DATA(str)) ! ('$DATA(prefix))) {
		Return (('$DATA(str)) && ('$DATA(prefix)))
	}
	If ($LENGTH(prefix) > $LENGTH(str)) {
		Return 0
	}
    Return ..regionMatches(str, ignoreCase, 0, prefix, 0, $LENGTH(prefix))
]]></Implementation>
</Method>

<Method name="endsWith">
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String,suffix:%String,ignoreCase:%Boolean=0</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If (('$DATA(str)) ! ('$DATA(suffix))) {
		Return (('$DATA(str)) && ('$DATA(suffix)))
	}
	If ($LENGTH(suffix) > $LENGTH(str)) {
	    Return 0
	}
	
	Set strOffset = $LENGTH(str) - $LENGTH(suffix)
	Set ending = $EXTRACT(str,strOffset, $LENGTH(str))
	If (ignoreCase) {
	    Return ($ZCONVERT(suffix,"L")=$ZCONVERT(ending,"L"))
	}
	Return (suffix=ending)
]]></Implementation>
</Method>

<Method name="ensureStringStartsEndsWithChar">
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String,charc:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set returnStr = str
	If ($DATA(returnStr) && $DATA(charc)){
            Set returnStr = $SELECT(..startsWith(str,charc)=1:returnStr,1:charc_returnStr)
            Set returnStr = $SELECT(..endsWith(str,charc)=1:returnStr,1:returnStr_charc)
	}
	Return returnStr
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.silverbearSSO.RESTclient">
<Super>%RegisteredObject</Super>
<TimeChanged>63573,66292.362903</TimeChanged>
<TimeCreated>63565,53138.445459</TimeCreated>

<Property name="headerUsername">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="headerPassword">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="headerPortalID">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="apiURL">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Method name="getBaseRelativeURL">
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return $PIECE(..apiURL,"/",4,999)
]]></Implementation>
</Method>

<Method name="setAuth">
<FormalSpec>sbAuth:EF.lib.silverbearSSO.authentication</FormalSpec>
<Implementation><![CDATA[
	Set ..headerUsername=sbAuth.headerUsername
	Set ..headerPassword=sbAuth.headerPassword
	Set ..headerPortalID=sbAuth.headerPortalID
	Set ..apiURL=sbAuth.apiURL
]]></Implementation>
</Method>

<Method name="createHttpRequestREST">
<Private>1</Private>
<ReturnType>%Net.HttpRequest</ReturnType>
<Implementation><![CDATA[
	set httpRequest=##class(EF.utils.httpRequest).createHttpRequestSSLcache()
	set httpRequest.Server=$PIECE(..apiURL,"/",3)
	set httpRequest.ContentType="application/xml"

	set httpRequest.ContentCharset="UTF-8"
	do httpRequest.SetHeader("Accept","application/xml")
	
	// this is to prevent Caché from converting it to UTF-16 ( https://www.pivotaltracker.com/story/show/77126176 )
	set httpRequest.ReadRawMode=1
	
	Do httpRequest.InsertParam("HeaderUsername",..headerUsername)
	Do httpRequest.InsertParam("HeaderPassword",..headerPassword)
	Do httpRequest.InsertParam("headerPortalId",..headerPortalID)
	
	quit httpRequest
]]></Implementation>
</Method>

<Method name="getMethodResults">
<FormalSpec>methodName:%String,params:%String=""</FormalSpec>
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[
	set sbDataSet=""
	
	set httpRequest=..createHttpRequestREST()
	
	Set paramName=""
	For {
		Set paramName=$ORDER(params(paramName))
		If (paramName="") Quit
		Do httpRequest.InsertParam(paramName,params(paramName))
	}
	
	set httpStatus=httpRequest.Get(..getBaseRelativeURL()_methodName)
	
	set sbDataSet=##class(EF.dataCollections.dataSetTempGlobal).createFromXMLStream(httpRequest.HttpResponse.Data)
	
	quit sbDataSet
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.silverbearSSO.authentication">
<Super>%RegisteredObject</Super>
<TimeChanged>63573,66237.978494</TimeChanged>
<TimeCreated>63565,54728.34911</TimeCreated>

<Property name="apiURL">
<Type>%String</Type>
</Property>

<Property name="headerUsername">
<Type>%String</Type>
</Property>

<Property name="headerPassword">
<Type>%String</Type>
</Property>

<Property name="headerPortalID">
<Type>%String</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>apiURL:%String="",headerUsername:%String="",headerPassword:%String="",headerPortalID:%String=""</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
 	Set ..headerUsername=$GET(headerUsername)
 	Set ..headerPassword=$GET(headerPassword)
 	Set ..headerPortalID=$GET(headerPortalID)
 	Set ..apiURL=$GET(apiURL)
 	
 	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="EF.lib.silverbearSSO.connection">
<Super>%RegisteredObject</Super>
<TimeChanged>63565,60416.188092</TimeChanged>
<TimeCreated>63565,56493.43918</TimeCreated>

<Property name="sbAuth">
<Type>EF.lib.silverbearSSO.authentication</Type>
</Property>

<Property name="sbRESTClient">
<Type>EF.lib.silverbearSSO.RESTclient</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>sbAuth:EF.lib.silverbearSSO.authentication</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ..sbRESTClient=##class(EF.lib.silverbearSSO.RESTclient).%New()
	Set ..sbAuth=sbAuth
	Do ..sbRESTClient.setAuth(..sbAuth)
    
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="validateRedirectToken">
<FormalSpec>redirectToken:%String</FormalSpec>
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[
	Set params("RedirectToken")=redirectToken
	Quit ..sbRESTClient.getMethodResults("ValidateRedirectToken",.params)
]]></Implementation>
</Method>

<Method name="getUserDetails">
<FormalSpec>authenticationToken:%String</FormalSpec>
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[
	Set params("AuthenticationToken")=authenticationToken
	Quit ..sbRESTClient.getMethodResults("GetUserDetails",.params)
]]></Implementation>
</Method>
</Class>


<Class name="EF.licensing.module">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.licensing.module.CLS/EV.60
;vc; Component: CLS.EF.licensing.module
;vc;  Location: SmallDev
;vc; Date/Time: 05-Jul-16 14:32
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.licensing.module.CLS/EV.60</td><td>CLS.EF.licensing.module</td><td>SmallDev</td><td style='white-space: nowrap;'>05-Jul-16 14:32</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>64104,52405.09565</TimeChanged>
<TimeCreated>63385,58158.119429</TimeCreated>

<Property name="identifier">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Index name="identifierIndex">
<Properties>identifier</Properties>
<Unique>1</Unique>
</Index>

<Property name="description">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Index name="descriptionIndex">
<Properties>description</Properties>
<Unique>1</Unique>
</Index>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>identifier,description</FormalSpec>
<ReturnType>module</ReturnType>
<Implementation><![CDATA[
	Set ret=..%New()
	
	Set ret.identifier=identifier
	Set ret.description=description
	
	Return ret
]]></Implementation>
</Method>

<Method name="getAllModules">
<ClassMethod>1</ClassMethod>
<ReturnType>%ArrayOfObjects</ReturnType>
<Implementation><![CDATA[
	Set ret=##class(%ArrayOfObjects).%New()
	
	#define AddModule(%identifier,%description) If (ret.IsDefined($ZCONVERT(%identifier,"U"))) { Throw ##class(shared.exceptions.generalException).%New("Module '"_%identifier_"' already exists!") } else { Set tempModule=..createNew(%identifier,%description) Do ret.SetAt(tempModule,$ZCONVERT(%identifier,"U")) }

	// ************************************
	// Paste this into EF.licensing.module
	// ************************************
	$$$AddModule("Abstract Management","Abstract Management")
	$$$AddModule("Abstract Submission Review Report - IOM only","Abstract Submission Review Report - IOM only")
	$$$AddModule("Accommodation","Accommodation")
	$$$AddModule("Accommodation - Restrict Rooms by Attendee Category","Accommodation - Restrict Rooms by Attendee Category")
	$$$AddModule("Action List","Action List")
	$$$AddModule("Activate the external Event List Page","Activate the external Event List Page")
	$$$AddModule("Add Buttons","Add Buttons")
	$$$AddModule("Add Flash Animations","Add Flash Animations")
	$$$AddModule("Add Menu Blocks","Add Menu Blocks")
	$$$AddModule("Add Scrolling Images","Add Scrolling Images")
	$$$AddModule("Add Text Blocks","Add Text Blocks")
	$$$AddModule("Add YouTube Video","Add YouTube Video")
	$$$AddModule("Additional Booking Items","Additional Booking Items")
	$$$AddModule("Additional Booking Status","Additional Booking Status")
	$$$AddModule("Additional Bookings Items Overview","Additional Bookings Items Overview")
	$$$AddModule("Additional Item Full Notification","Additional Item Full Notification")
	$$$AddModule("Additional VAT Codes","Additional VAT Codes")
	$$$AddModule("Admin - Amend Registration Email","Admin - Amend Registration Email")
	$$$AddModule("Admin - Cancel Registration Email","Admin - Cancel Registration Email")
	$$$AddModule("Admin - New Registration Email","Admin - New Registration Email")
	$$$AddModule("AllianceTech Integration","AllianceTech Integration")
	$$$AddModule("Allow Access to Translation","Allow Access to Translation")
	$$$AddModule("Allow backend users to change attendee category from basket page","Allow backend users to change attendee category from basket page")
	$$$AddModule("Allow registration amendment","Allow registration amendment")
	$$$AddModule("Allow registration cancellation","Allow registration cancellation")
	$$$AddModule("Allow Session Booking Amendment","Allow Session Booking Amendment")
	$$$AddModule("Alternative Codes","Alternative Codes")
	$$$AddModule("Alternative Question Name in reports","Alternative Question Name in reports")
	$$$AddModule("Always show person details in EDIT view","Always show person details in EDIT view")
	$$$AddModule("Always show the 'send password' link","Always show the 'send password' link")
	$$$AddModule("Anonymous mode","Anonymous mode")
	$$$AddModule("Attendance - Record No Shows","Attendance - Record No Shows")
	$$$AddModule("Attendance - Show Picture When Scanned","Attendance - Show Picture When Scanned")
	$$$AddModule("Attendance - Use Tethered Scanners","Attendance - Use Tethered Scanners")
	$$$AddModule("Attendance recording","Attendance recording")
	$$$AddModule("Attendee Categories","Attendee Categories")
	$$$AddModule("Attendee Categories - Invitation Only","Attendee Categories - Invitation Only")
	$$$AddModule("Attendee/Delegate Description","Attendee/Delegate Description")
	$$$AddModule("Authorize.Net (SIM)","Authorize.Net (SIM)")
	$$$AddModule("Awards","Awards")
	$$$AddModule("Awards Category Interest","Awards Category Interest")
	$$$AddModule("Awards last submission date","Awards last submission date")
	$$$AddModule("Awards Prepay","Awards Prepay")
	$$$AddModule("Awards Submission After Payment","Awards Submission After Payment")
	$$$AddModule("Backend Only Questions","Backend Only Questions")
	$$$AddModule("Backend Only Reg Pages","Backend Only Reg Pages")
	$$$AddModule("Badges & Labels & Letters","Badges & Labels & Letters")
	$$$AddModule("Barcodes","Barcodes")
	$$$AddModule("Basket Page","Basket Page")
	$$$AddModule("Behaviour of Dependent Registration Questions","Behaviour of Dependent Registration Questions")
	$$$AddModule("Bespoke Discount Routine","Bespoke Discount Routine")
	$$$AddModule("British Council - GOPI Payments","British Council - GOPI Payments")
	$$$AddModule("Booker - Payment Update Email","Booker - Payment Update Email")
	$$$AddModule("Booking reference prefix","Booking reference prefix")
	$$$AddModule("Booking Summary Page","Booking Summary Page")
	$$$AddModule("Browser Titlebar Text","Browser Titlebar Text")
	$$$AddModule("Bulk Cancellations","Bulk Cancellations")
	$$$AddModule("Bulk Edit","Bulk Edit")
	$$$AddModule("Button to amend sessions from basket page","Button to amend sessions from basket page")
	$$$AddModule("Cheque","Cheque")
	$$$AddModule("CMPi Payment Portal","CMPi Payment Portal")
	$$$AddModule("Concealed Data Items - TFI","Concealed Data Items - TFI")
	$$$AddModule("Copy Event","Copy Event")
	$$$AddModule("CSV Exports","CSV Exports")
	$$$AddModule("Custom event fields","Custom event fields")
	$$$AddModule("Customisable forms","Customisable forms")
	$$$AddModule("Daily Agenda Gridview Page","Daily Agenda Gridview Page")
	$$$AddModule("Daily Agenda Listview Page","Daily Agenda Listview Page")
	$$$AddModule("Data Items","Data Items")
	$$$AddModule("Database Mode","Database Mode")
	$$$AddModule("DataCash HPS","DataCash HPS")
	$$$AddModule("Datatrans","Datatrans")
	$$$AddModule("Date Format","Date Format")
	$$$AddModule("Day Capacity Settings - Day Name","Day Capacity Settings - Day Name")
	$$$AddModule("Day Capacity Settings - Delegate Categories","Day Capacity Settings - Delegate Categories")
	$$$AddModule("Day Capacity Settings - Notification & Level","Day Capacity Settings - Notification & Level")
	$$$AddModule("Day Capacity Settings - Stop Booking Now","Day Capacity Settings - Stop Booking Now")
	$$$AddModule("Day Full Notification","Day Full Notification")
	$$$AddModule("Days to Attend Page","Days to Attend Page")
	$$$AddModule("Decline Page","Decline Page")
	$$$AddModule("Default Date Format","Default Date Format")
	$$$AddModule("Default reports to use before-VAT values","Default reports to use before-VAT values")
	$$$AddModule("Default Search Mode","Default Search Mode")
	$$$AddModule("Delegate User ID Page","Delegate User ID Page")
	$$$AddModule("Dependent Registration Pages","Dependent Registration Pages")
	$$$AddModule("Dependent Registration Prompts","Dependent Registration Prompts")
	$$$AddModule("Discount Applies - ABI Prices","Discount Applies - ABI Prices")
	$$$AddModule("Discount Applies - Basket Prices","Discount Applies - Basket Prices")
	$$$AddModule("Discount Applies - Day Package","Discount Applies - Day Package")
	$$$AddModule("Discount Applies - Entire Event","Discount Applies - Entire Event")
	$$$AddModule("Discount Applies - Session Prices","Discount Applies - Session Prices")
	$$$AddModule("Discount Capacity","Discount Capacity")
	$$$AddModule("Discount Type - Code","Discount Type - Code")
	$$$AddModule("Discount Type - Code Sequence","Discount Type - Code Sequence")
	$$$AddModule("Discount Type - Compulsory","Discount Type - Compulsory")
	$$$AddModule("Discount Type - Delegate Quantity","Discount Type - Delegate Quantity")
	$$$AddModule("Discount Type - Early Bird","Discount Type - Early Bird")
	$$$AddModule("Discount Type - Payment Method","Discount Type - Payment Method")
	$$$AddModule("Discount Type - Quantity","Discount Type - Quantity")
	$$$AddModule("Discount Type - Registration Prompt","Discount Type - Registration Prompt")
	$$$AddModule("Discount Type - Value","Discount Type - Value")
	$$$AddModule("Discounts","Discounts")
	$$$AddModule("Do not move Cursor to the first field in registration pages","Do not move Cursor to the first field in registration pages")
	$$$AddModule("Dynamic Reporting Create&Edit","Dynamic Reporting Create&Edit")
	$$$AddModule("Dynamic Reporting Runtime","Dynamic Reporting Runtime")
	$$$AddModule("Email","Email")
	$$$AddModule("Email a Friend","Email a Friend")
	$$$AddModule("Email Campaigns","Email Campaigns")
	$$$AddModule("Email Log","Email Log")
	$$$AddModule("Email Opt Out Page","Email Opt Out Page")
	$$$AddModule("Email PDFs","Email PDFs")
	$$$AddModule("Email Reports","Email Reports")
	$$$AddModule("emailReminders","emailReminders")
	$$$AddModule("EPDQ","EPDQ")
	$$$AddModule("Event Management - Enterprise Ireland","Event Management - Enterprise Ireland")
	$$$AddModule("Event VAT Rate","Event VAT Rate")
	$$$AddModule("Event Wizard","Event Wizard")
	$$$AddModule("eWAY","eWAY")
	$$$AddModule("Excel/PDF Exports - ABI Report PDF/XL 2","Excel/PDF Exports - ABI Report PDF/XL 2")
	$$$AddModule("Excel/PDF Exports - Attendee Registration Data","Excel/PDF Exports - Attendee Registration Data")
	$$$AddModule("Excel/PDF Exports - Attendee Registration Data + Totals","Excel/PDF Exports - Attendee Registration Data + Totals")
	$$$AddModule("Excel/PDF Exports - Award Submission Details","Excel/PDF Exports - Award Submission Details")
	$$$AddModule("Excel/PDF Exports - Award Submission Review Export","Excel/PDF Exports - Award Submission Review Export")
	$$$AddModule("Excel/PDF Exports - Changes Report 1","Excel/PDF Exports - Changes Report 1")
	$$$AddModule("Excel/PDF Exports - Delegate Registration Data","Excel/PDF Exports - Delegate Registration Data")
	$$$AddModule("Excel/PDF Exports - Delegate Registration Data + Totals","Excel/PDF Exports - Delegate Registration Data + Totals")
	$$$AddModule("Excel/PDF Exports - Dietary Requirements","Excel/PDF Exports - Dietary Requirements")
	$$$AddModule("Excel/PDF Exports - Hotels Report 2 Excel","Excel/PDF Exports - Hotels Report 2 Excel")
	$$$AddModule("Excel/PDF Exports - Hotels Report 2 PDF","Excel/PDF Exports - Hotels Report 2 PDF")
	$$$AddModule("Excel/PDF Exports - Hotels Report 3 Excel","Excel/PDF Exports - Hotels Report 3 Excel")
	$$$AddModule("Excel/PDF Exports - Hotels Report 3 PDF","Excel/PDF Exports - Hotels Report 3 PDF")
	$$$AddModule("Excel/PDF Exports - Hotels Report Excel","Excel/PDF Exports - Hotels Report Excel")
	$$$AddModule("Excel/PDF Exports - Hotels Report PDF","Excel/PDF Exports - Hotels Report PDF")
	$$$AddModule("Excel/PDF Exports - Question Prompt Attendee Registration Data + Totals","Excel/PDF Exports - Question Prompt Attendee Registration Data + Totals")
	$$$AddModule("Excel/PDF Exports - Question Prompt Delegate Registration Data + Totals","Excel/PDF Exports - Question Prompt Delegate Registration Data + Totals")
	$$$AddModule("Excel/PDF Exports - Removed Attendees","Excel/PDF Exports - Removed Attendees")
	$$$AddModule("Excel/PDF Exports - Removed Delegates","Excel/PDF Exports - Removed Delegates")
	$$$AddModule("Excel/PDF Exports - Sessions Report Excel","Excel/PDF Exports - Sessions Report Excel")
	$$$AddModule("Excel/PDF Exports - Sessions Report PDF","Excel/PDF Exports - Sessions Report PDF")
	$$$AddModule("Excel/PDF Exports - Sessions Report PDF 2","Excel/PDF Exports - Sessions Report PDF 2")
	$$$AddModule("Excel/PDF Exports - Table Assignment","Excel/PDF Exports - Table Assignment")
	$$$AddModule("Excel/PDF Exports - Table Bookers","Excel/PDF Exports - Table Bookers")
	$$$AddModule("Excel/PDF Exports - Table Guests","Excel/PDF Exports - Table Guests")
	$$$AddModule("Exclude VAT if","Exclude VAT if")
	$$$AddModule("Exclusive Discounts","Exclusive Discounts")
	$$$AddModule("Export Reports Data to Excel","Export Reports Data to Excel")
	$$$AddModule("External Item Codes","External Item Codes")
	$$$AddModule("External Webpages","External Webpages")
	$$$AddModule("Fonts & Colours of the site","Fonts & Colours of the site")
	$$$AddModule("Force Case Conversion","Force Case Conversion")
	$$$AddModule("Force email confirmation","Force email confirmation")
	$$$AddModule("Force event selection after login","Force event selection after login")
	$$$AddModule("Frame Sizes","Frame Sizes")
	$$$AddModule("Friendly URL","Friendly URL")
	$$$AddModule("Frontend File Upload","Frontend File Upload")
	$$$AddModule("frontEndWebPages","frontEndWebPages")
	$$$AddModule("General Info Box","General Info Box")
	$$$AddModule("Glasgow University XPay","Glasgow University XPay")
	$$$AddModule("Global Payments - GP Webpay","Global Payments - GP Webpay")
	$$$AddModule("Google Analytics","Google Analytics")
	$$$AddModule("Group Bookings","Group Bookings")
	$$$AddModule("Home Page","Home Page")
	$$$AddModule("Homepage search","Homepage search")
	$$$AddModule("Invitations","Invitations")
	$$$AddModule("Invoice","Invoice")
	$$$AddModule("Invoice by Email","Invoice by Email")
	$$$AddModule("Invoice Export","Invoice Export")
	$$$AddModule("Items to show in the basket","Items to show in the basket")
	$$$AddModule("Lists of People","Lists of People")
	$$$AddModule("Mail Opening Stats","Mail Opening Stats")
	$$$AddModule("Mandatory Questions","Mandatory Questions")
	$$$AddModule("Max Length of Answer","Max Length of Answer")
	$$$AddModule("Meeting Manager","Meeting Manager")
	$$$AddModule("Meeting Manager Lunches","Meeting Manager Lunches")
	$$$AddModule("Meeting Manager Optional Email Sending for Backend Users","Meeting Manager Optional Email Sending for Backend Users")
	$$$AddModule("Meeting Manager Restrict Locations","Meeting Manager Restrict Locations")
	$$$AddModule("Min and Max alts on multi checkboxes","Min and Max alts on multi checkboxes")
	$$$AddModule("Multi Currency","Multi Currency")
	$$$AddModule("Multi Lingual Alternatives","Multi Lingual Alternatives")
	$$$AddModule("Multi Lingual Frontend","Multi Lingual Frontend")
	$$$AddModule("Multi Reg Pages Per Category","Multi Reg Pages Per Category")
	$$$AddModule("Multiple Reminder Emails","Multiple Reminder Emails")
	$$$AddModule("Netbanx","Netbanx")
	$$$AddModule("New Backend Booking","New Backend Booking")
	$$$AddModule("New Registration Email Page","New Registration Email Page")
	$$$AddModule("Ogone","Ogone")
	$$$AddModule("onlinePayment","onlinePayment")
	$$$AddModule("Optional Additional Pages","Optional Additional Pages")
	$$$AddModule("Optional Email Sending for Backend Users","Optional Email Sending for Backend Users")
	$$$AddModule("Optional Frontend SSL","Optional Frontend SSL")
	$$$AddModule("Organisational Units - Aviva Only","Organisational Units - Aviva Only")
	$$$AddModule("Page footer for pages outside events","Page footer for pages outside events")
	$$$AddModule("Partial Cancellation Price","Partial Cancellation Price")
	$$$AddModule("PayDollar PayGate","PayDollar PayGate")
	$$$AddModule("Payment method Bank Transfer","Payment method Bank Transfer")
	$$$AddModule("Payment method Cheque","Payment method Cheque")
	$$$AddModule("Payment method Freebie","Payment method Freebie")
	$$$AddModule("Payment method Invoice","Payment method Invoice")
	$$$AddModule("PayPal","PayPal")
	$$$AddModule("PayPal Payflow","PayPal Payflow")
	$$$AddModule("Person De-Duplication","Person De-Duplication")
	$$$AddModule("Presenter Description","Presenter Description")
	$$$AddModule("Preset Search profiles","Preset Search profiles")
	$$$AddModule("Price applies to Day Package","Price applies to Day Package")
	$$$AddModule("Price applies to Entire Event","Price applies to Entire Event")
	$$$AddModule("Price applies to General Price","Price applies to General Price")
	$$$AddModule("Price applies to Total Cancellation","Price applies to Total Cancellation")
	$$$AddModule("Price by Attendee Category","Price by Attendee Category")
	$$$AddModule("Price descriptors","Price descriptors")
	$$$AddModule("Price Start Date","Price Start Date")
	$$$AddModule("Pricing","Pricing")
	$$$AddModule("Private Event","Private Event")
	$$$AddModule("Profit & Loss","Profit & Loss")
	$$$AddModule("Prompt Width","Prompt Width")
	$$$AddModule("Quick Search","Quick Search")
	$$$AddModule("Quick Search Across Events","Quick Search Across Events")
	$$$AddModule("Read Only Questions","Read Only Questions")
	$$$AddModule("Receipt/Thank You Page","Receipt/Thank You Page")
	$$$AddModule("Registration Amendment Email Page","Registration Amendment Email Page")
	$$$AddModule("Registration Amendment Text","Registration Amendment Text")
	$$$AddModule("Registration prompt collections","Registration prompt collections")
	$$$AddModule("Removal of Eventsforce Logo","Removal of Eventsforce Logo")
	$$$AddModule("Reports - Abandoned Bookings","Reports - Abandoned Bookings")
	$$$AddModule("Reports - Abandoned Registrations","Reports - Abandoned Registrations")
	$$$AddModule("Reports - Attendees removed from Group Registrations","Reports - Attendees removed from Group Registrations")
	$$$AddModule("Reports - Attendees with a blank data item","Reports - Attendees with a blank data item")
	$$$AddModule("Reports - Backend Event Audit Report","Reports - Backend Event Audit Report")
	$$$AddModule("Reports - Booking count per session","Reports - Booking count per session")
	$$$AddModule("Reports - Delegates removed from Group Bookings","Reports - Delegates removed from Group Bookings")
	$$$AddModule("Reports - Delegates with a blank data item","Reports - Delegates with a blank data item")
	$$$AddModule("Reports - Duplicate People","Reports - Duplicate People")
	$$$AddModule("Reports - Event Attendee Report","Reports - Event Attendee Report")
	$$$AddModule("Reports - Event Bookers report","Reports - Event Bookers report")
	$$$AddModule("Reports - Event Delegate Report","Reports - Event Delegate Report")
	$$$AddModule("Reports - Event Registration Contacts Report","Reports - Event Registration Contacts Report")
	$$$AddModule("Reports - Hotel Room Bookings","Reports - Hotel Room Bookings")
	$$$AddModule("Reports - Name Search","Reports - Name Search")
	$$$AddModule("Reports - Page Impressions","Reports - Page Impressions")
	$$$AddModule("Reports - Pre-Registration Report","Reports - Pre-Registration Report")
	$$$AddModule("Reports - Recent Attendees","Reports - Recent Attendees")
	$$$AddModule("Reports - Recent Delegates","Reports - Recent Delegates")
	$$$AddModule("Reports - Session Bookings Report","Reports - Session Bookings Report")
	$$$AddModule("Reports - Total Event Revenue","Reports - Total Event Revenue")
	$$$AddModule("Role Management","Role Management")
	$$$AddModule("Sage Pay","Sage Pay")
	$$$AddModule("Salesforce","Salesforce")
	$$$AddModule("Salesforce Schroders","Salesforce Schroders")
	$$$AddModule("Search - Did Attend Days","Search - Did Attend Days")
	$$$AddModule("Search - Direct Links to PDFs/Comms Log","Search - Direct Links to PDFs/Comms Log")
	$$$AddModule("Search - have Attended  Sessions","Search - have Attended  Sessions")
	$$$AddModule("Search - Have Booked Sessions","Search - Have Booked Sessions")
	$$$AddModule("Search - Load Saved Report","Search - Load Saved Report")
	$$$AddModule("Search - People from","Search - People from")
	$$$AddModule("Search - People from lists","Search - People from lists")
	$$$AddModule("Search - Show coloumns","Search - Show coloumns")
	$$$AddModule("Search - Type of people","Search - Type of people")
	$$$AddModule("Search - Where data has changed between","Search - Where data has changed between")
	$$$AddModule("Search - Who have the following registration options","Search - Who have the following registration options")
	$$$AddModule("Search - Will Attend Days","Search - Will Attend Days")
	$$$AddModule("Search - With Data Matching","Search - With Data Matching")
	$$$AddModule("Search existing items","Search existing items")
	$$$AddModule("SecureTrading","SecureTrading")
	$$$AddModule("Select Attendee Category Page","Select Attendee Category Page")
	$$$AddModule("Select Booking Mode Page","Select Booking Mode Page")
	$$$AddModule("Select Event Default Currency","Select Event Default Currency")
	$$$AddModule("Select Layout","Select Layout")
	$$$AddModule("SEO","SEO")
	$$$AddModule("SEO One-To-Many","SEO One-To-Many")
	$$$AddModule("SEO One-To-One","SEO One-To-One")
	$$$AddModule("Session Full Notification","Session Full Notification")
	$$$AddModule("Sessions","Sessions")
	$$$AddModule("Sessions - Allow disabling of Session Information hyperlink","Sessions - Allow disabling of Session Information hyperlink")
	$$$AddModule("Sessions - Pre-populate sessions","Sessions - Pre-populate sessions")
	$$$AddModule("Sessions to Attend Page","Sessions to Attend Page")
	$$$AddModule("Shortcuts","Shortcuts")
	$$$AddModule("Show Audit Trail to Bookers","Show Audit Trail to Bookers")
	$$$AddModule("Show Booking Summary Page","Show Booking Summary Page")
	$$$AddModule("Show day selection page","Show day selection page")
	$$$AddModule("Show items for each delegate","Show items for each delegate")
	$$$AddModule("Show override reason","Show override reason")
	$$$AddModule("Show reason for price override in the basket","Show reason for price override in the basket")
	$$$AddModule("Show zero value in the basket","Show zero value in the basket")
	$$$AddModule("Show zero value items","Show zero value items")
	$$$AddModule("Show zero value items on receipt","Show zero value items on receipt")
	$$$AddModule("Specific Days Packages","Specific Days Packages")
	$$$AddModule("SSO - SAML2","SSO - SAML2")
	$$$AddModule("SSO - Silverbear","SSO - Silverbear")
	$$$AddModule("Standard Cancellation Page","Standard Cancellation Page")
	$$$AddModule("Standard Search","Standard Search")
	$$$AddModule("Stop Amendments for Questions","Stop Amendments for Questions")
	$$$AddModule("Stop redirection to amendment","Stop redirection to amendment")
	$$$AddModule("Stop the 'no price' text appearing in frontend","Stop the 'no price' text appearing in frontend")
	$$$AddModule("Stripe payments","Stripe payments")
	$$$AddModule("Suppress prices in registration pages","Suppress prices in registration pages")
	$$$AddModule("Suppress the automatic email from address in ad-hoc emails","Suppress the automatic email from address in ad-hoc emails")
	$$$AddModule("Surveys","Surveys")
	$$$AddModule("System Management Menu","System Management Menu")
	$$$AddModule("table booking","table booking")
	$$$AddModule("Table Groups","Table Groups")
	$$$AddModule("Templates - Layout Selection","Templates - Layout Selection")
	$$$AddModule("Temporary Save","Temporary Save")
	$$$AddModule("Terms and Conditions Page","Terms and Conditions Page")
	$$$AddModule("Text seen in basket for new bookings/amendments","Text seen in basket for new bookings/amendments")
	$$$AddModule("Ticketing","Ticketing")
	$$$AddModule("Ticketing Item Full Notification","Ticketing Item Full Notification")
	$$$AddModule("Time Format","Time Format")
	$$$AddModule("Upload style sheets","Upload style sheets")
	$$$AddModule("Upload Template","Upload Template")
	$$$AddModule("Use Departments for Data Separation","Use Departments for Data Separation")
	$$$AddModule("Use old style guests on delegate page","Use old style guests on delegate page")
	$$$AddModule("Use Textual Hyperlinks","Use Textual Hyperlinks")
	$$$AddModule("User Management","User Management")
	$$$AddModule("User Password Request","User Password Request")
	$$$AddModule("Username as Identifier","Username as Identifier")
	$$$AddModule("VAT Codes","VAT Codes")
	$$$AddModule("Venue Information Page","Venue Information Page")
	$$$AddModule("View & edit bookings","View & edit bookings")
	$$$AddModule("Window Title","Window Title")
	$$$AddModule("Worldpay","Worldpay")
	// 366 modules found
	
	Return ret
]]></Implementation>
</Method>

<Method name="updateModuleName">
<ClassMethod>1</ClassMethod>
<FormalSpec>oldName,newName</FormalSpec>
<Implementation><![CDATA[
	set newNameUpper=$ZCVT(newName,"U")
	&SQL(UPDATE EF_licensing.objCustomPackageModules
		SET moduleIdentifier=:newNameUpper WHERE %SQLUPPER(moduleIdentifier)=%SQLUPPER(:oldName)
	)
	&SQL(UPDATE reports.objHardCodedExport
		SET requiredModule=:newName
		WHERE %SQLUPPER(requiredModule)=%SQLUPPER(:oldName)
	)
]]></Implementation>
</Method>
</Class>


<Class name="EF.licensing.moduleGroup">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.licensing.moduleGroup.CLS/EV.43
;vc; Component: CLS.EF.licensing.moduleGroup
;vc;  Location: SmallDev
;vc; Date/Time: 04-Jul-16 10:09
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.licensing.moduleGroup.CLS/EV.43</td><td>CLS.EF.licensing.moduleGroup</td><td>SmallDev</td><td style='white-space: nowrap;'>04-Jul-16 10:09</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>64103,56563.656872</TimeChanged>
<TimeCreated>63385,58141.829147</TimeCreated>

<Property name="identifier">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Index name="identifierIndex">
<Properties>identifier</Properties>
<Unique>1</Unique>
</Index>

<Property name="description">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Index name="descriptionIndex">
<Properties>description</Properties>
<Unique>1</Unique>
</Index>

<Property name="modules">
<Type>module</Type>
<Collection>array</Collection>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>identifier,description</FormalSpec>
<ReturnType>moduleGroup</ReturnType>
<Implementation><![CDATA[
	Set ret=..%New()
	
	Set ret.identifier=identifier
	Set ret.description=description
	
	Return ret
]]></Implementation>
</Method>

<Method name="addModule">
<FormalSpec>inModule:module</FormalSpec>
<Implementation><![CDATA[
	 If ..modules.IsDefined($ZCONVERT(inModule.identifier,"U")) {
		 Throw ##class(shared.exceptions.generalException).%New("Module already exists in module group!")
	 }
	 
	 Do ..modules.SetAt(inModule,$ZCONVERT(inModule.identifier,"U"))
]]></Implementation>
</Method>

<Method name="getAllModuleGroups">
<ClassMethod>1</ClassMethod>
<FormalSpec>includeModules:%Boolean=1</FormalSpec>
<ReturnType>%ArrayOfObjects</ReturnType>
<Implementation><![CDATA[
	Set ret=##class(%ArrayOfObjects).%New()

	If (includeModules) {
		Set allModules=##class(module).getAllModules()
	}
	
	#define AddModuleGroup(%identifier,%description) If (ret.IsDefined($ZCONVERT(%identifier,"U"))) { Throw ##class(shared.exceptions.generalException).%New("Module group '"_%identifier_"' already exists!") } else {  Set tempModuleGroup=..createNew(%identifier,%description) Do ret.SetAt(tempModuleGroup,$ZCONVERT(%identifier,"U")) }
	#define AddModuleToLastModuleGroup(%moduleIdentifier) If (includeModules) { Set tempModule=allModules.GetAt($ZCONVERT(%moduleIdentifier,"U")) If ($IsObject(tempModule)) { Do tempModuleGroup.addModule(tempModule) } }
	
	Set qryCustomPackage="SELECT ID, description FROM EF_licensing.objCustomPackage"
	Set rsCustomPackage=##class(%ResultSet).%New()
	Set sc=rsCustomPackage.Prepare(qryCustomPackage)
	If ($$$ISERR(sc)) {
		Throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
	}
	Set sc=rsCustomPackage.Execute()
	If ($$$ISERR(sc)) {
		Throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
	}
	
	While (rsCustomPackage.Next()) {
		Set cpIdentifier=rsCustomPackage.Get("ID")
		Set cpDescription=rsCustomPackage.Get("description")
		$$$AddModuleGroup(cpIdentifier,cpDescription)
		
		If (includeModules) {
			Set qryCustomPackageModules="SELECT moduleIdentifier FROM EF_licensing.objCustomPackageModules WHERE objCustomPackage=?"
			Set rsCustomPackageModules=##class(%ResultSet).%New()
			Set sc=rsCustomPackageModules.Prepare(qryCustomPackageModules)
			If ($$$ISERR(sc)) {
				Throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
			}
			Set sc=rsCustomPackageModules.Execute(cpIdentifier)
			If ($$$ISERR(sc)) {
				Throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
			}
			
			While (rsCustomPackageModules.Next()) {
				$$$AddModuleToLastModuleGroup(rsCustomPackageModules.Get("moduleIdentifier"))
			}
			
			Do rsCustomPackageModules.Close()
		}
	}
	
	Do rsCustomPackage.Close()
	
	// ************************************
	// Paste this into EF.licensing.moduleGroup
	// ************************************
	$$$AddModuleGroup("abstracts","abstracts")
	$$$AddModuleToLastModuleGroup("Abstract Management")
	$$$AddModuleToLastModuleGroup("Backend Only Questions")
	$$$AddModuleToLastModuleGroup("Backend Only Reg Pages")
	$$$AddModuleToLastModuleGroup("Behaviour of Dependent Registration Questions")
	$$$AddModuleToLastModuleGroup("Customisable forms")
	$$$AddModuleToLastModuleGroup("Dependent Registration Prompts")
	$$$AddModuleToLastModuleGroup("Do not move Cursor to the first field in registration pages")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Changes Report 1")
	$$$AddModuleToLastModuleGroup("Force Case Conversion")
	$$$AddModuleToLastModuleGroup("Mandatory Questions")
	$$$AddModuleToLastModuleGroup("Max Length of Answer")
	$$$AddModuleToLastModuleGroup("Min and Max alts on multi checkboxes")
	$$$AddModuleToLastModuleGroup("Prompt Width")
	$$$AddModuleToLastModuleGroup("Read Only Questions")
	$$$AddModuleToLastModuleGroup("Registration prompt collections")
	$$$AddModuleToLastModuleGroup("Use Textual Hyperlinks")
	$$$AddModuleToLastModuleGroup("User Password Request")
	$$$AddModuleGroup("accommodation","accommodation")
	$$$AddModuleToLastModuleGroup("Accommodation")
	$$$AddModuleToLastModuleGroup("Accommodation - Restrict Rooms by Attendee Category")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Hotels Report 2 Excel")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Hotels Report 2 PDF")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Hotels Report 3 Excel")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Hotels Report 3 PDF")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Hotels Report Excel")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Hotels Report PDF")
	$$$AddModuleToLastModuleGroup("Reports - Hotel Room Bookings")
	$$$AddModuleGroup("awards","awards")
	$$$AddModuleToLastModuleGroup("Admin - Amend Registration Email")
	$$$AddModuleToLastModuleGroup("Admin - Cancel Registration Email")
	$$$AddModuleToLastModuleGroup("Admin - New Registration Email")
	$$$AddModuleToLastModuleGroup("Allow registration amendment")
	$$$AddModuleToLastModuleGroup("Allow registration cancellation")
	$$$AddModuleToLastModuleGroup("Always show the 'send password' link")
	$$$AddModuleToLastModuleGroup("Anonymous mode")
	$$$AddModuleToLastModuleGroup("Attendee/Delegate Description")
	$$$AddModuleToLastModuleGroup("Awards")
	$$$AddModuleToLastModuleGroup("Awards Category Interest")
	$$$AddModuleToLastModuleGroup("Awards last submission date")
	$$$AddModuleToLastModuleGroup("Awards Prepay")
	$$$AddModuleToLastModuleGroup("Awards Submission After Payment")
	$$$AddModuleToLastModuleGroup("Backend Only Questions")
	$$$AddModuleToLastModuleGroup("Backend Only Reg Pages")
	$$$AddModuleToLastModuleGroup("Basket Page")
	$$$AddModuleToLastModuleGroup("Behaviour of Dependent Registration Questions")
	$$$AddModuleToLastModuleGroup("Booking reference prefix")
	$$$AddModuleToLastModuleGroup("Customisable forms")
	$$$AddModuleToLastModuleGroup("Dependent Registration Prompts")
	$$$AddModuleToLastModuleGroup("Do not move Cursor to the first field in registration pages")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Award Submission Details")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Award Submission Review Export")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Changes Report 1")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Table Assignment")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Table Bookers")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Table Guests")
	$$$AddModuleToLastModuleGroup("Force Case Conversion")
	$$$AddModuleToLastModuleGroup("Force email confirmation")
	$$$AddModuleToLastModuleGroup("Items to show in the basket")
	$$$AddModuleToLastModuleGroup("Mandatory Questions")
	$$$AddModuleToLastModuleGroup("Max Length of Answer")
	$$$AddModuleToLastModuleGroup("Min and Max alts on multi checkboxes")
	$$$AddModuleToLastModuleGroup("New Registration Email Page")
	$$$AddModuleToLastModuleGroup("Prompt Width")
	$$$AddModuleToLastModuleGroup("Read Only Questions")
	$$$AddModuleToLastModuleGroup("Receipt/Thank You Page")
	$$$AddModuleToLastModuleGroup("Registration Amendment Email Page")
	$$$AddModuleToLastModuleGroup("Registration Amendment Text")
	$$$AddModuleToLastModuleGroup("Registration prompt collections")
	$$$AddModuleToLastModuleGroup("Search - Who have the following registration options")
	$$$AddModuleToLastModuleGroup("Standard Cancellation Page")
	$$$AddModuleToLastModuleGroup("Stop Amendments for Questions")
	$$$AddModuleToLastModuleGroup("Stop redirection to amendment")
	$$$AddModuleToLastModuleGroup("table booking")
	$$$AddModuleToLastModuleGroup("Table Groups")
	$$$AddModuleToLastModuleGroup("Text seen in basket for new bookings/amendments")
	$$$AddModuleToLastModuleGroup("Use Textual Hyperlinks")
	$$$AddModuleToLastModuleGroup("User Password Request")
	$$$AddModuleGroup("badges","badges")
	$$$AddModuleToLastModuleGroup("Badges & Labels & Letters")
	$$$AddModuleToLastModuleGroup("Barcodes")
	$$$AddModuleGroup("communications","communications")
	$$$AddModuleToLastModuleGroup("Attendee Categories - Invitation Only")
	$$$AddModuleToLastModuleGroup("Decline Page")
	$$$AddModuleToLastModuleGroup("Email")
	$$$AddModuleToLastModuleGroup("Email Campaigns")
	$$$AddModuleToLastModuleGroup("Email Log")
	$$$AddModuleToLastModuleGroup("Email Opt Out Page")
	$$$AddModuleToLastModuleGroup("Email PDFs")
	$$$AddModuleToLastModuleGroup("emailReminders")
	$$$AddModuleToLastModuleGroup("Invitations")
	$$$AddModuleToLastModuleGroup("Mail Opening Stats")
	$$$AddModuleToLastModuleGroup("Multiple Reminder Emails")
	$$$AddModuleToLastModuleGroup("Optional Email Sending for Backend Users")
	$$$AddModuleToLastModuleGroup("Reports - Pre-Registration Report")
	$$$AddModuleToLastModuleGroup("Suppress the automatic email from address in ad-hoc emails")
	$$$AddModuleGroup("core","core")
	$$$AddModuleToLastModuleGroup("Action List")
	$$$AddModuleToLastModuleGroup("Alternative Codes")
	$$$AddModuleToLastModuleGroup("Always show person details in EDIT view")
	$$$AddModuleToLastModuleGroup("Copy Event")
	$$$AddModuleToLastModuleGroup("CSV Exports")
	$$$AddModuleToLastModuleGroup("Custom event fields")
	$$$AddModuleToLastModuleGroup("Data Items")
	$$$AddModuleToLastModuleGroup("Database Mode")
	$$$AddModuleToLastModuleGroup("Date Format")
	$$$AddModuleToLastModuleGroup("Default Date Format")
	$$$AddModuleToLastModuleGroup("Default Search Mode")
	$$$AddModuleToLastModuleGroup("External Item Codes")
	$$$AddModuleToLastModuleGroup("Force event selection after login")
	$$$AddModuleToLastModuleGroup("General Info Box")
	$$$AddModuleToLastModuleGroup("Homepage search")
	$$$AddModuleToLastModuleGroup("Lists of People")
	$$$AddModuleToLastModuleGroup("Person De-Duplication")
	$$$AddModuleToLastModuleGroup("Preset Search profiles")
	$$$AddModuleToLastModuleGroup("Quick Search")
	$$$AddModuleToLastModuleGroup("Quick Search Across Events")
	$$$AddModuleToLastModuleGroup("Role Management")
	$$$AddModuleToLastModuleGroup("Search - Load Saved Report")
	$$$AddModuleToLastModuleGroup("Search - People from")
	$$$AddModuleToLastModuleGroup("Search - People from lists")
	$$$AddModuleToLastModuleGroup("Search - Show coloumns")
	$$$AddModuleToLastModuleGroup("Search - Type of people")
	$$$AddModuleToLastModuleGroup("Search - Where data has changed between")
	$$$AddModuleToLastModuleGroup("Search - With Data Matching")
	$$$AddModuleToLastModuleGroup("Search existing items")
	$$$AddModuleToLastModuleGroup("Shortcuts")
	$$$AddModuleToLastModuleGroup("Standard Search")
	$$$AddModuleToLastModuleGroup("System Management Menu")
	$$$AddModuleToLastModuleGroup("Time Format")
	$$$AddModuleToLastModuleGroup("Use Departments for Data Separation")
	$$$AddModuleToLastModuleGroup("User Management")
	$$$AddModuleToLastModuleGroup("View & edit bookings")
	$$$AddModuleGroup("financial","financial")
	$$$AddModuleToLastModuleGroup("Additional VAT Codes")
	$$$AddModuleToLastModuleGroup("Bespoke Discount Routine")
	$$$AddModuleToLastModuleGroup("Booker - Payment Update Email")
	$$$AddModuleToLastModuleGroup("Cheque")
	$$$AddModuleToLastModuleGroup("Default reports to use before-VAT values")
	$$$AddModuleToLastModuleGroup("Discount Applies - Basket Prices")
	$$$AddModuleToLastModuleGroup("Discount Applies - Entire Event")
	$$$AddModuleToLastModuleGroup("Discount Capacity")
	$$$AddModuleToLastModuleGroup("Discount Type - Code")
	$$$AddModuleToLastModuleGroup("Discount Type - Code Sequence")
	$$$AddModuleToLastModuleGroup("Discount Type - Compulsory")
	$$$AddModuleToLastModuleGroup("Discount Type - Delegate Quantity")
	$$$AddModuleToLastModuleGroup("Discount Type - Early Bird")
	$$$AddModuleToLastModuleGroup("Discount Type - Payment Method")
	$$$AddModuleToLastModuleGroup("Discount Type - Quantity")
	$$$AddModuleToLastModuleGroup("Discount Type - Registration Prompt")
	$$$AddModuleToLastModuleGroup("Discount Type - Value")
	$$$AddModuleToLastModuleGroup("Discounts")
	$$$AddModuleToLastModuleGroup("Event VAT Rate")
	$$$AddModuleToLastModuleGroup("Exclude VAT if")
	$$$AddModuleToLastModuleGroup("Exclusive Discounts")
	$$$AddModuleToLastModuleGroup("Invoice")
	$$$AddModuleToLastModuleGroup("Invoice by Email")
	$$$AddModuleToLastModuleGroup("Multi Currency")
	$$$AddModuleToLastModuleGroup("onlinePayment")
	$$$AddModuleToLastModuleGroup("Partial Cancellation Price")
	$$$AddModuleToLastModuleGroup("Payment method Bank Transfer")
	$$$AddModuleToLastModuleGroup("Payment method Cheque")
	$$$AddModuleToLastModuleGroup("Payment method Invoice")
	$$$AddModuleToLastModuleGroup("Price applies to Entire Event")
	$$$AddModuleToLastModuleGroup("Price applies to General Price")
	$$$AddModuleToLastModuleGroup("Price applies to Total Cancellation")
	$$$AddModuleToLastModuleGroup("Price descriptors")
	$$$AddModuleToLastModuleGroup("Price Start Date")
	$$$AddModuleToLastModuleGroup("Pricing")
	$$$AddModuleToLastModuleGroup("Reports - Total Event Revenue")
	$$$AddModuleToLastModuleGroup("Select Event Default Currency")
	$$$AddModuleToLastModuleGroup("Show override reason")
	$$$AddModuleToLastModuleGroup("Show reason for price override in the basket")
	$$$AddModuleToLastModuleGroup("Show zero value in the basket")
	$$$AddModuleToLastModuleGroup("Show zero value items")
	$$$AddModuleToLastModuleGroup("Show zero value items on receipt")
	$$$AddModuleToLastModuleGroup("VAT Codes")
	$$$AddModuleGroup("group registrations","group registrations")
	$$$AddModuleToLastModuleGroup("Group Bookings")
	$$$AddModuleToLastModuleGroup("Reports - Delegates removed from Group Bookings")
	$$$AddModuleToLastModuleGroup("Reports - Event Bookers report")
	$$$AddModuleGroup("meeting manager","meeting manager")
	$$$AddModuleToLastModuleGroup("Dependent Registration Prompts")
	$$$AddModuleToLastModuleGroup("Do not move Cursor to the first field in registration pages")
	$$$AddModuleToLastModuleGroup("Meeting Manager")
	$$$AddModuleToLastModuleGroup("Meeting Manager Lunches")
	$$$AddModuleToLastModuleGroup("Meeting Manager Optional Email Sending for Backend Users")
	$$$AddModuleToLastModuleGroup("Meeting Manager Restrict Locations")
	$$$AddModuleGroup("multilingual","multilingual")
	$$$AddModuleToLastModuleGroup("Multi Lingual Alternatives")
	$$$AddModuleToLastModuleGroup("Multi Lingual Frontend")
	$$$AddModuleGroup("Payment Gateway (PayDollar PayGate)","Payment Gateway (PayDollar PayGate)")
	$$$AddModuleToLastModuleGroup("PayDollar PayGate")
	$$$AddModuleGroup("payment gateway (authorize.net sim)","payment gateway (authorize.net sim)")
	$$$AddModuleToLastModuleGroup("Authorize.Net (SIM)")
	$$$AddModuleGroup("payment gateway (datacash hosted pages solution)","payment gateway (datacash hosted pages solution)")
	$$$AddModuleToLastModuleGroup("DataCash HPS")
	$$$AddModuleGroup("payment gateway (datatrans)","payment gateway (datatrans)")
	$$$AddModuleToLastModuleGroup("Datatrans")
	$$$AddModuleGroup("payment gateway (epdq)","payment gateway (epdq)")
	$$$AddModuleToLastModuleGroup("EPDQ")
	$$$AddModuleGroup("payment gateway (eWAY)","payment gateway (eWAY)")
	$$$AddModuleToLastModuleGroup("eWAY")
	$$$AddModuleGroup("payment gateway (netbanx)","payment gateway (netbanx)")
	$$$AddModuleToLastModuleGroup("Netbanx")
	$$$AddModuleGroup("payment gateway (ogone)","payment gateway (ogone)")
	$$$AddModuleToLastModuleGroup("Ogone")
	$$$AddModuleGroup("payment gateway (paypal payflow)","payment gateway (paypal payflow)")
	$$$AddModuleToLastModuleGroup("PayPal Payflow")
	$$$AddModuleGroup("payment gateway (paypal uk)","payment gateway (paypal uk)")
	$$$AddModuleToLastModuleGroup("PayPal")
	$$$AddModuleGroup("payment gateway (sage pay)","payment gateway (sage pay)")
	$$$AddModuleToLastModuleGroup("Sage Pay")
	$$$AddModuleGroup("payment gateway (secure trading)","payment gateway (secure trading)")
	$$$AddModuleToLastModuleGroup("SecureTrading")
	$$$AddModuleGroup("payment gateway (worldpay)","payment gateway (worldpay)")
	$$$AddModuleToLastModuleGroup("Worldpay")
	$$$AddModuleGroup("payment gateway (global payments - gp webpay)","payment gateway (global payments - gp webpay)")
	$$$AddModuleToLastModuleGroup("Global Payments - GP Webpay")
	$$$AddModuleGroup("payment gateway (Stripe)","payment gateway (Stripe)")
	$$$AddModuleToLastModuleGroup("Stripe payments")
	$$$AddModuleGroup("registrations","registrations")
	$$$AddModuleToLastModuleGroup("Add Text Blocks")
	$$$AddModuleToLastModuleGroup("Additional Booking Items")
	$$$AddModuleToLastModuleGroup("Additional Bookings Items Overview")
	$$$AddModuleToLastModuleGroup("Additional Item Full Notification")
	$$$AddModuleToLastModuleGroup("Admin - Amend Registration Email")
	$$$AddModuleToLastModuleGroup("Admin - Cancel Registration Email")
	$$$AddModuleToLastModuleGroup("Admin - New Registration Email")
	$$$AddModuleToLastModuleGroup("Allow backend users to change attendee category from basket page")
	$$$AddModuleToLastModuleGroup("Allow registration amendment")
	$$$AddModuleToLastModuleGroup("Allow registration cancellation")
	$$$AddModuleToLastModuleGroup("Always show the 'send password' link")
	$$$AddModuleToLastModuleGroup("Anonymous mode")
	$$$AddModuleToLastModuleGroup("Attendance - Use Tethered Scanners")
	$$$AddModuleToLastModuleGroup("Attendance recording")
	$$$AddModuleToLastModuleGroup("Attendee Categories")
	$$$AddModuleToLastModuleGroup("Attendee/Delegate Description")
	$$$AddModuleToLastModuleGroup("Backend Only Questions")
	$$$AddModuleToLastModuleGroup("Backend Only Reg Pages")
	$$$AddModuleToLastModuleGroup("Basket Page")
	$$$AddModuleToLastModuleGroup("Behaviour of Dependent Registration Questions")
	$$$AddModuleToLastModuleGroup("Booking reference prefix")
	$$$AddModuleToLastModuleGroup("Booking Summary Page")
	$$$AddModuleToLastModuleGroup("Customisable forms")
	$$$AddModuleToLastModuleGroup("Day Capacity Settings - Day Name")
	$$$AddModuleToLastModuleGroup("Day Capacity Settings - Delegate Categories")
	$$$AddModuleToLastModuleGroup("Day Capacity Settings - Notification & Level")
	$$$AddModuleToLastModuleGroup("Day Capacity Settings - Stop Booking Now")
	$$$AddModuleToLastModuleGroup("Day Full Notification")
	$$$AddModuleToLastModuleGroup("Days to Attend Page")
	$$$AddModuleToLastModuleGroup("Delegate User ID Page")
	$$$AddModuleToLastModuleGroup("Dependent Registration Pages")
	$$$AddModuleToLastModuleGroup("Dependent Registration Prompts")
	$$$AddModuleToLastModuleGroup("Discount Applies - ABI Prices")
	$$$AddModuleToLastModuleGroup("Discount Applies - Day Package")
	$$$AddModuleToLastModuleGroup("Do not move Cursor to the first field in registration pages")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - ABI Report PDF/XL 2")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Attendee Registration Data")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Attendee Registration Data + Totals")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Changes Report 1")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Delegate Registration Data")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Delegate Registration Data + Totals")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Dietary Requirements")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Question Prompt Attendee Registration Data + Totals")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Question Prompt Delegate Registration Data + Totals")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Removed Attendees")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Removed Delegates")
	$$$AddModuleToLastModuleGroup("Force Case Conversion")
	$$$AddModuleToLastModuleGroup("Force email confirmation")
	$$$AddModuleToLastModuleGroup("Frontend File Upload")
	$$$AddModuleToLastModuleGroup("Items to show in the basket")
	$$$AddModuleToLastModuleGroup("Mandatory Questions")
	$$$AddModuleToLastModuleGroup("Max Length of Answer")
	$$$AddModuleToLastModuleGroup("Min and Max alts on multi checkboxes")
	$$$AddModuleToLastModuleGroup("Multi Reg Pages Per Category")
	$$$AddModuleToLastModuleGroup("New Backend Booking")
	$$$AddModuleToLastModuleGroup("New Registration Email Page")
	$$$AddModuleToLastModuleGroup("Price applies to Day Package")
	$$$AddModuleToLastModuleGroup("Price by Attendee Category")
	$$$AddModuleToLastModuleGroup("Private Event")
	$$$AddModuleToLastModuleGroup("Prompt Width")
	$$$AddModuleToLastModuleGroup("Read Only Questions")
	$$$AddModuleToLastModuleGroup("Receipt/Thank You Page")
	$$$AddModuleToLastModuleGroup("Registration Amendment Email Page")
	$$$AddModuleToLastModuleGroup("Registration Amendment Text")
	$$$AddModuleToLastModuleGroup("Registration prompt collections")
	$$$AddModuleToLastModuleGroup("Reports - Abandoned Registrations")
	$$$AddModuleToLastModuleGroup("Reports - Event Delegate Report")
	$$$AddModuleToLastModuleGroup("Reports - Recent Delegates")
	$$$AddModuleToLastModuleGroup("Search - Did Attend Days")
	$$$AddModuleToLastModuleGroup("Search - Who have the following registration options")
	$$$AddModuleToLastModuleGroup("Search - Will Attend Days")
	$$$AddModuleToLastModuleGroup("Select Attendee Category Page")
	$$$AddModuleToLastModuleGroup("Select Booking Mode Page")
	$$$AddModuleToLastModuleGroup("Show Booking Summary Page")
	$$$AddModuleToLastModuleGroup("Show day selection page")
	$$$AddModuleToLastModuleGroup("Show items for each delegate")
	$$$AddModuleToLastModuleGroup("Specific Days Packages")
	$$$AddModuleToLastModuleGroup("Standard Cancellation Page")
	$$$AddModuleToLastModuleGroup("Stop Amendments for Questions")
	$$$AddModuleToLastModuleGroup("Stop redirection to amendment")
	$$$AddModuleToLastModuleGroup("Stop the 'no price' text appearing in frontend")
	$$$AddModuleToLastModuleGroup("Suppress prices in registration pages")
	$$$AddModuleToLastModuleGroup("Text seen in basket for new bookings/amendments")
	$$$AddModuleToLastModuleGroup("Ticketing")
	$$$AddModuleToLastModuleGroup("Ticketing Item Full Notification")
	$$$AddModuleToLastModuleGroup("Use old style guests on delegate page")
	$$$AddModuleToLastModuleGroup("Use Textual Hyperlinks")
	$$$AddModuleToLastModuleGroup("User Password Request")
	$$$AddModuleToLastModuleGroup("Username as Identifier")
	$$$AddModuleGroup("Removal of Eventsforce Logo","Removal of Eventsforce Logo")
	$$$AddModuleToLastModuleGroup("Removal of Eventsforce Logo")
	$$$AddModuleGroup("reporting","reporting")
	$$$AddModuleToLastModuleGroup("Alternative Question Name in reports")
	$$$AddModuleToLastModuleGroup("Dynamic Reporting Create&Edit")
	$$$AddModuleToLastModuleGroup("Dynamic Reporting Runtime")
	$$$AddModuleToLastModuleGroup("Email Reports")
	$$$AddModuleToLastModuleGroup("Export Reports Data to Excel")
	$$$AddModuleToLastModuleGroup("Reports - Attendees with a blank data item")
	$$$AddModuleToLastModuleGroup("Reports - Backend Event Audit Report")
	$$$AddModuleToLastModuleGroup("Reports - Duplicate People")
	$$$AddModuleToLastModuleGroup("Reports - Name Search")
	$$$AddModuleToLastModuleGroup("Reports - Page Impressions")
	$$$AddModuleGroup("salesforce","salesforce")
	$$$AddModuleToLastModuleGroup("Salesforce")
	$$$AddModuleGroup("sessions","sessions")
	$$$AddModuleToLastModuleGroup("Allow Session Booking Amendment")
	$$$AddModuleToLastModuleGroup("Button to amend sessions from basket page")
	$$$AddModuleToLastModuleGroup("Daily Agenda Gridview Page")
	$$$AddModuleToLastModuleGroup("Daily Agenda Listview Page")
	$$$AddModuleToLastModuleGroup("Discount Applies - Session Prices")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Sessions Report Excel")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Sessions Report PDF")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Sessions Report PDF 2")
	$$$AddModuleToLastModuleGroup("Presenter Description")
	$$$AddModuleToLastModuleGroup("Reports - Booking count per session")
	$$$AddModuleToLastModuleGroup("Reports - Session Bookings Report")
	$$$AddModuleToLastModuleGroup("Search - have Attended  Sessions")
	$$$AddModuleToLastModuleGroup("Search - Have Booked Sessions")
	$$$AddModuleToLastModuleGroup("Session Full Notification")
	$$$AddModuleToLastModuleGroup("Sessions")
	$$$AddModuleToLastModuleGroup("Sessions - Allow disabling of Session Information hyperlink")
	$$$AddModuleToLastModuleGroup("Sessions - Pre-populate sessions")
	$$$AddModuleToLastModuleGroup("Sessions to Attend Page")
	$$$AddModuleGroup("SSO - SAML2","SSO - SAML2")
	$$$AddModuleToLastModuleGroup("SSO - SAML2")
	$$$AddModuleGroup("SSO - Silverbear","SSO - Silverbear")
	$$$AddModuleToLastModuleGroup("SSO - Silverbear")
	$$$AddModuleGroup("table booking","table booking")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Table Assignment")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Table Bookers")
	$$$AddModuleToLastModuleGroup("Excel/PDF Exports - Table Guests")
	$$$AddModuleToLastModuleGroup("table booking")
	$$$AddModuleToLastModuleGroup("Table Groups")
	$$$AddModuleGroup("websites","websites")
	$$$AddModuleToLastModuleGroup("Activate the external Event List Page")
	$$$AddModuleToLastModuleGroup("Add Buttons")
	$$$AddModuleToLastModuleGroup("Add Flash Animations")
	$$$AddModuleToLastModuleGroup("Add Menu Blocks")
	$$$AddModuleToLastModuleGroup("Add Scrolling Images")
	$$$AddModuleToLastModuleGroup("Add YouTube Video")
	$$$AddModuleToLastModuleGroup("Browser Titlebar Text")
	$$$AddModuleToLastModuleGroup("External Webpages")
	$$$AddModuleToLastModuleGroup("Fonts & Colours of the site")
	$$$AddModuleToLastModuleGroup("Frame Sizes")
	$$$AddModuleToLastModuleGroup("Friendly URL")
	$$$AddModuleToLastModuleGroup("frontEndWebPages")
	$$$AddModuleToLastModuleGroup("Google Analytics")
	$$$AddModuleToLastModuleGroup("Home Page")
	$$$AddModuleToLastModuleGroup("Optional Additional Pages")
	$$$AddModuleToLastModuleGroup("Optional Frontend SSL")
	$$$AddModuleToLastModuleGroup("Page footer for pages outside events")
	$$$AddModuleToLastModuleGroup("Select Layout")
	$$$AddModuleToLastModuleGroup("SEO")
	$$$AddModuleToLastModuleGroup("SEO One-To-One")
	$$$AddModuleToLastModuleGroup("Templates - Layout Selection")
	$$$AddModuleToLastModuleGroup("Terms and Conditions Page")
	$$$AddModuleToLastModuleGroup("Upload style sheets")
	$$$AddModuleToLastModuleGroup("Use Textual Hyperlinks")
	$$$AddModuleToLastModuleGroup("Venue Information Page")
	$$$AddModuleToLastModuleGroup("Window Title")
	// 27 modulegroups found

	Return ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.licensing.objCustomPackage">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.licensing.objCustomPackage.CLS/EV.0
;vc; Component: CLS.EF.licensing.objCustomPackage
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:34
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.licensing.objCustomPackage.CLS/EV.0</td><td>CLS.EF.licensing.objCustomPackage</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:34</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>%Persistent,shared.timeStamp</Super>
<TimeChanged>63390,58615</TimeChanged>
<TimeCreated>63389,52940.766551</TimeCreated>

<Property name="description">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="objLicensedPackagesCustom">
<Type>EF.licensing.objLicensedPackageCustom</Type>
<Cardinality>many</Cardinality>
<Inverse>objCustomPackage</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="objCustomPackageModules">
<Type>EF.licensing.objCustomPackageModules</Type>
<Cardinality>many</Cardinality>
<Inverse>objCustomPackage</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="descriptionIndex">
<Properties>description</Properties>
<Unique>1</Unique>
</Index>

<Method name="add">
<ClassMethod>1</ClassMethod>
<FormalSpec>description:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	&SQL(INSERT INTO EF_licensing.objCustomPackage
		(description) VALUES (:description)
	)
	quit %ROWID
]]></Implementation>
</Method>

<Method name="delete">
<ClassMethod>1</ClassMethod>
<FormalSpec>customPackageID:%String</FormalSpec>
<Implementation><![CDATA[
	do ##class(EF.licensing.objCustomPackageModules).deleteAllModulesFromCustomPackage(customPackageID)
	&SQL(DELETE FROM EF_licensing.objCustomPackage
		WHERE ID = :customPackageID	
	)
]]></Implementation>
</Method>

<Method name="getIDFromDescription">
<ClassMethod>1</ClassMethod>
<FormalSpec>description:%String</FormalSpec>
<Implementation><![CDATA[
	set customPackageID=""
	&SQL(SELECT ID INTO :tmp
		FROM EF_licensing.objCustomPackage
		WHERE %SQLUPPER(description) = %SQLUPPER(:description)
	)
	if +SQLCODE=0 {
		set customPackageID=tmp	
	}	
	quit customPackageID
]]></Implementation>
</Method>

<Query name="qAllCustomPackages">
<Type>%SQLQuery</Type>
<SqlQuery>SELECT ID,description FROM objCustomPackage
 ORDER BY description</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^EF.licensing.objCustomPackageD</DataLocation>
<DefaultData>objCustomPackageDefaultData</DefaultData>
<IdLocation>^EF.licensing.objCustomPackageD</IdLocation>
<IndexLocation>^EF.licensing.objCustomPackageI</IndexLocation>
<StreamLocation>^EF.licensing.objCustomPackageS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="objCustomPackageDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>description</Value>
</Value>
<Value name="3">
<Value>xCRstamp</Value>
</Value>
<Value name="4">
<Value>xMOstamp</Value>
</Value>
<Value name="5">
<Value>xCRuserID</Value>
</Value>
<Value name="6">
<Value>xMOuserID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.licensing.objCustomPackageModules">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.licensing.objCustomPackageModules.CLS/EV.1
;vc; Component: CLS.EF.licensing.objCustomPackageModules
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:37
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.licensing.objCustomPackageModules.CLS/EV.1</td><td>CLS.EF.licensing.objCustomPackageModules</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:37</td><td>FredG</td></tr></table>
]]></Description>
<Super>%Persistent,shared.timeStamp</Super>
<TimeChanged>63426,52185</TimeChanged>
<TimeCreated>63389,53732.594403</TimeCreated>

<Property name="objCustomPackage">
<Type>objCustomPackage</Type>
<Cardinality>one</Cardinality>
<Inverse>objCustomPackageModules</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="moduleIdentifier">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Index name="moduleIdentifierIndex">
<Properties>moduleIdentifier</Properties>
</Index>

<Method name="addModuleToCustomPackage">
<ClassMethod>1</ClassMethod>
<FormalSpec>customPackageID:%String,moduleIdentifier:%String</FormalSpec>
<Implementation><![CDATA[
	if '..doesPackageHaveModule(customPackageID, moduleIdentifier) {
		&SQL(INSERT INTO EF_licensing.objCustomPackageModules
			(objCustomPackage,moduleIdentifier) VALUES (:customPackageID,:moduleIdentifier)
		)
	}
]]></Implementation>
</Method>

<Method name="deleteAllModulesFromCustomPackage">
<ClassMethod>1</ClassMethod>
<FormalSpec>customPackageID:%String</FormalSpec>
<Implementation><![CDATA[
	&SQL(DELETE FROM EF_licensing.objCustomPackageModules
		WHERE objCustomPackage = :customPackageID
	)
]]></Implementation>
</Method>

<Method name="doesPackageHaveModule">
<ClassMethod>1</ClassMethod>
<FormalSpec>customPackageID:%String,moduleIdentifier:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set hasPackage=0
	&SQL(SELECT ID
		FROM EF_licensing.objCustomPackageModules
		WHERE (objCustomPackage = :customPackageID)
		AND (moduleIdentifier = :moduleIdentifier)
	)
	if +SQLCODE=0 {
		set hasPackage=1	
	}
	quit hasPackage
]]></Implementation>
</Method>

<Method name="deleteCustomModules">
<ClassMethod>1</ClassMethod>
<FormalSpec>moduleName</FormalSpec>
<Implementation><![CDATA[	&SQL(DELETE from EF_licensing.objCustomPackageModules where moduleIdentifier=:moduleName)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^EF.licensing.objCustomPa57FBD</DataLocation>
<DefaultData>objCustomPackageModulesDefaultData</DefaultData>
<IdLocation>^EF.licensing.objCustomPa57FBD</IdLocation>
<IndexLocation>^EF.licensing.objCustomPa57FBI</IndexLocation>
<StreamLocation>^EF.licensing.objCustomPa57FBS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="objCustomPackageModulesDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>objCustomPackage</Value>
</Value>
<Value name="3">
<Value>moduleIdentifier</Value>
</Value>
<Value name="4">
<Value>xCRstamp</Value>
</Value>
<Value name="5">
<Value>xMOstamp</Value>
</Value>
<Value name="6">
<Value>xCRuserID</Value>
</Value>
<Value name="7">
<Value>xMOuserID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.licensing.objLicense">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.licensing.objLicense.CLS/EV.6
;vc; Component: CLS.EF.licensing.objLicense
;vc;  Location: SmallDev
;vc; Date/Time: 09-Feb-16 12:41
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.licensing.objLicense.CLS/EV.6</td><td>CLS.EF.licensing.objLicense</td><td>SmallDev</td><td style='white-space: nowrap;'>09-Feb-16 12:41</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>%Persistent,shared.timeStamp</Super>
<TimeChanged>63953,62965</TimeChanged>
<TimeCreated>63389,55498.671288</TimeCreated>

<Property name="orderNo">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Index name="orderNoIndex">
<Properties>orderNo</Properties>
</Index>

<Property name="startTimeStampUTC">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="endTimeStampUTC">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="notificationEmailRegistrationPercentageUsed">
<Type>%Integer</Type>
</Property>

<Index name="startTimeStampUTCIndex">
<Properties>startTimeStampUTC</Properties>
</Index>

<Index name="endTimeStampUTCIndex">
<Properties>endTimeStampUTC</Properties>
</Index>

<Property name="objLicensedPackages">
<Type>objLicensedPackage</Type>
<Cardinality>many</Cardinality>
<Inverse>objLicense</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="allPackagesCache">
<Type>package</Type>
<Collection>array</Collection>
<Private>1</Private>
<Transient>1</Transient>
</Property>

<Property name="allPackagesCacheCreated">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Private>1</Private>
<Transient>1</Transient>
</Property>

<Property name="allPackagesCacheCreatedWithModules">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Private>1</Private>
<Transient>1</Transient>
</Property>

<Method name="add">
<ClassMethod>1</ClassMethod>
<FormalSpec>orderNo,startTimeStampUTC,endTimeStampUTC</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if ..doesLicenseExistForPeriod(startTimeStampUTC, endTimeStampUTC) {
		throw ##class(shared.exceptions.generalException).%New("There is already a license for this period")	
	}
	&SQL(INSERT INTO EF_licensing.objLicense
		(orderNo,startTimeStampUTC,endTimeStampUTC) VALUES (:orderNo,:startTimeStampUTC,:endTimeStampUTC)
	)
	do ..clearModuleCache()
	quit %ROWID
]]></Implementation>
</Method>

<Method name="delete">
<ClassMethod>1</ClassMethod>
<FormalSpec>licenseID</FormalSpec>
<Implementation><![CDATA[
	&SQL(DELETE 
		FROM EF_licensing.objLicensedPackage
		WHERE objLicense = :licenseID
	)
	&SQL(DELETE FROM EF_licensing.objLicense
		WHERE ID = :licenseID
	)
	do ..clearModuleCache()
]]></Implementation>
</Method>

<Method name="resetNotificationEmailData">
<ClassMethod>1</ClassMethod>
<FormalSpec>licenseID</FormalSpec>
<Implementation><![CDATA[
	&SQL(UPDATE EF_licensing.objLicense
		SET notificationEmailRegistrationPercentageUsed = NULL
		WHERE ID = :licenseID
	)
]]></Implementation>
</Method>

<Method name="processRegistrationLimitNotificationEmail">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	#dim currentLicense as EF.licensing.objLicense
	#dim currentLevel as %Integer
	#dim subject as %String
	#dim contentHTML as %String
	
	set currentLicense=##class(EF.licensing.objLicense).getCurrentLicense()
	if $IsObject(currentLicense) {
		set previousLevel=currentLicense.notificationEmailRegistrationPercentageUsed
		
		do currentLicense.updateNotificationEmailRegistrationPercentageUsed()
		if currentLicense.notificationEmailRegistrationPercentageUsed>previousLevel {
			
			set subject= ^%ZCSPAPPS($ZNSPACE)_": Registration limit warning"
			
			set contentHTML="Namespace: "_$ZNSPACE
			set contentHTML=contentHTML_"<br/>Number of registrations used: "_currentLicense.getRegistrationQuantityUsed()
			set contentHTML=contentHTML_"<br/>Number of registrations licensed: "_currentLicense.getRegistrationQuantity()
			
			do currentLicense.sendNotificationEmail(subject,contentHTML)
			do currentLicense.%Save()
		}
	}
]]></Implementation>
</Method>

<Method name="updateNotificationEmailRegistrationPercentageUsed">
<Implementation><![CDATA[
	#dim totalRegistrations as %Integer
	#dim usedRegistrations as %Integer
	#dim percentageUsed as %Integer
	#dim checkLevel as %Integer
	
	set totalRegistrations=..getRegistrationQuantity()
	set usedRegistrations=..getRegistrationQuantityUsed()
	if totalRegistrations {
		set percentageUsed=(usedRegistrations/totalRegistrations)*100\1
		if percentageUsed>=75 {
			set ..notificationEmailRegistrationPercentageUsed=75
		}
		for checkLevel=90:10 {
			if percentageUsed<checkLevel quit
			set ..notificationEmailRegistrationPercentageUsed=checkLevel
		}
	}
]]></Implementation>
</Method>

<Method name="sendNotificationEmail">
<ClassMethod>1</ClassMethod>
<FormalSpec>subject:%String,contentHTML:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim mailMessage As %Net.MailMessage
	#dim toAddress As %String
	#dim useLiveEmailAddress As %Boolean = +$G(^%xSendWarningEmailUseLiveEmail)
	
	set mailMessage=##class(%Net.MailMessage).%New()
	set mailMessage.From="support@eventsforce.com"
	if (##class(EF.config.server).isThisLive())!(useLiveEmailAddress) {
		do mailMessage.To.Insert("saleslicense@eventsforce.com")
	} else {
		set toAddress=""
		for {
			set toAddress=$o(^%xSendWarningEmailsTest(toAddress))
			if toAddress="" quit
			do mailMessage.To.Insert(toAddress)
		}
	}
	
	set mailMessage.Subject=subject
	
	set mailMessage.IsHTML=1
	do mailMessage.TextData.Write(contentHTML)

	return ##class(mail.smtpMethods).sendEmail(mailMessage)
]]></Implementation>
</Method>

<Method name="doesLicenseExistForPeriod">
<ClassMethod>1</ClassMethod>
<FormalSpec>startTimeStampUTC,endTimeStampUTC</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set out=0
	&SQL(SELECT ID
		FROM EF_licensing.objLicense
		WHERE (
			(startTimeStampUTC<=:startTimeStampUTC)
			AND (endTimeStampUTC>=:startTimeStampUTC)
		) OR (
			(startTimeStampUTC<=:endTimeStampUTC)
			AND (endTimeStampUTC>=:endTimeStampUTC)
		) OR (
			(startTimeStampUTC<=:startTimeStampUTC)
			AND (endTimeStampUTC>=:endTimeStampUTC)
		) OR (
			(startTimeStampUTC>=:startTimeStampUTC)
			AND (endTimeStampUTC<=:endTimeStampUTC)
		)
		
	)
	if +SQLCODE=0 {
		set out=1	
	}
	quit out
]]></Implementation>
</Method>

<Method name="getCurrentLicenseID">
<ClassMethod>1</ClassMethod>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	set licenseID=""
	&SQL(SELECT ID INTO :tmp FROM EF_licensing.objLicense WHERE startTimeStampUTC<=GETUTCDATE() AND GETUTCDATE()<=endTimeStampUTC)
	if +SQLCODE=0 {
		set licenseID=tmp
	}
	quit licenseID
]]></Implementation>
</Method>

<Method name="getCurrentLicense">
<ClassMethod>1</ClassMethod>
<ReturnType>objLicense</ReturnType>
<Implementation><![CDATA[
	Set ret=""
	
	Set currentLicenseID=..getCurrentLicenseID()
	
	If (currentLicenseID) {
		Set ret=..%OpenId(currentLicenseID)
	}
	
	Return ret
]]></Implementation>
</Method>

<Method name="getPreviousLicenseID">
<ClassMethod>1</ClassMethod>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	set currentLicense=..getCurrentLicense()
	set licenseID=""
	if $IsObject(currentLicense) {
		set comparisonTimeStampUTC=currentLicense.endTimeStampUTC
	} else {
		set comparisonTimeStampUTC=##class(shared.timeFunctions).getCurrentTimestampUTC()	
	}
	&SQL(SELECT ID INTO :tmp 
		FROM EF_licensing.objLicense 
		WHERE endTimeStampUTC<:comparisonTimeStampUTC
		ORDER BY endTimeStampUTC DESC
	)
	if +SQLCODE=0 {
		set licenseID=tmp
	}
	quit licenseID
]]></Implementation>
</Method>

<Method name="getLastLicensedTimeStampUTC">
<ClassMethod>1</ClassMethod>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	set endTimeStampUTC=""
	&SQL(SELECT endTimeStampUTC INTO :tmp FROM EF_licensing.objLicense ORDER BY endTimeStampUTC DESC)
	if +SQLCODE=0 {
		set endTimeStampUTC=tmp
	}
	quit endTimeStampUTC
]]></Implementation>
</Method>

<Method name="createInternalAllPackagesCacheIfNeeded">
<Private>1</Private>
<Implementation><![CDATA[
	If ('..allPackagesCacheCreated) {
		Set ..allPackagesCache=##class(package).getAllPackages(0)
		Set ..allPackagesCacheCreated=1
	}
]]></Implementation>
</Method>

<Method name="createInternalAllPackagesWithModulesCacheIfNeeded">
<Private>1</Private>
<Implementation><![CDATA[
	If ('..allPackagesCacheCreatedWithModules) {
		Set ..allPackagesCache=##class(package).getAllPackages(1)
		Set ..allPackagesCacheCreated=1
		Set ..allPackagesCacheCreatedWithModules=1
	}
]]></Implementation>
</Method>

<Method name="doesLicenseSupportCoreProduct">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set ret=0
	
	Do ..createInternalAllPackagesCacheIfNeeded()
	
	Set key=""
	For {
		Set key=..objLicensedPackages.Next(key)
		If (key="") Quit
		
		Set objLicensedPackage=..objLicensedPackages.GetAt(key)
		
		Set packageIdentifier=objLicensedPackage.getPackageIdentifier()
		If (..allPackagesCache.IsDefined(packageIdentifier)) {
			Set package=..allPackagesCache.GetAt(packageIdentifier)
			
			If (package.moduleGroups.IsDefined("CORE")) {
				Set ret=1
			}
		}
	}
	
	Return ret
]]></Implementation>
</Method>

<Method name="isCurrentLicenseValid">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set ret=0
	
	If (..getCurrentLicenseID()) {
		Set ret=1
	}
	
	Return ret
]]></Implementation>
</Method>

<Method name="doAnyLicensesExist">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set ret=0
	
	&SQL(SELECT COUNT(ID) INTO :tmp FROM EF_licensing.objLicense)
	If (+SQLCODE=0) {
		If (tmp>0) {
			Set ret=1
		}
	}
	
	Return ret
]]></Implementation>
</Method>

<Method name="getPropertyQuantity">
<FormalSpec>propertyName</FormalSpec>
<Private>1</Private>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set ret=0
	
	Do ..createInternalAllPackagesCacheIfNeeded()
	
	Set key=""
	For {
		Set key=..objLicensedPackages.Next(key)
		If (key="") Quit
		
		Set objLicensedPackage=..objLicensedPackages.GetAt(key)
		
		Set packageIdentifier=objLicensedPackage.getPackageIdentifier()
		If (..allPackagesCache.IsDefined(packageIdentifier)) {
			Set package=..allPackagesCache.GetAt(packageIdentifier)
			Set ret=ret+($PROPERTY(package,propertyName) * objLicensedPackage.quantity)
		}
	}
	
	Quit ret
]]></Implementation>
</Method>

<Method name="getUserQuantity">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	Return ..getPropertyQuantity("userQuantity")
]]></Implementation>
</Method>

<Method name="getRegistrationQuantity">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	Return ..getPropertyQuantity("registrationQuantity")
]]></Implementation>
</Method>

<Method name="getAwardEventQuantity">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	Return ..getPropertyQuantity("awardEventQuantity")
]]></Implementation>
</Method>

<Method name="getAwardEntriesQuantity">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	Return ..getPropertyQuantity("awardEntriesQuantity")
]]></Implementation>
</Method>

<Method name="getAbstractEventQuantity">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	Return ..getPropertyQuantity("abstractEventQuantity")
]]></Implementation>
</Method>

<Method name="getAbstractSubmissionsQuantity">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	Return ..getPropertyQuantity("abstractSubmissionsQuantity")
]]></Implementation>
</Method>

<Method name="getMeetingManagerEventQuantity">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	Return ..getPropertyQuantity("meetingManagerEventQuantity")
]]></Implementation>
</Method>

<Method name="getUserQuantityUsed">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	
	Return ##class(EF.stats.users).getChargeableUserCount()
]]></Implementation>
</Method>

<Method name="getRegistrationQuantityUsed">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	Return ##class(EF.stats.bookings).getAttendeeCountForPeriod(..startTimeStampUTC,..endTimeStampUTC)
]]></Implementation>
</Method>

<Method name="getAwardEventQuantityUsed">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	Return ##class(EF.stats.events).getAwardEventCountForPeriod(..startTimeStampUTC,..endTimeStampUTC)
]]></Implementation>
</Method>

<Method name="getAwardEntriesQuantityUsed">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	Return ##class(EF.stats.awardEntries).getAwardEntriesCountForPeriodIncludingArchived(..startTimeStampUTC,..endTimeStampUTC)
]]></Implementation>
</Method>

<Method name="getAbstractEventQuantityUsed">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	Return ##class(EF.stats.events).getAbstractEventCountForPeriod(..startTimeStampUTC,..endTimeStampUTC)
]]></Implementation>
</Method>

<Method name="getAbstractSubmissionsQuantityUsed">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	Return ##class(EF.stats.abstractSubmissions).getAbstractSubmissionsCountForPeriodIncludingArchived(..startTimeStampUTC,..endTimeStampUTC)
]]></Implementation>
</Method>

<Method name="getMeetingManagerEventQuantityUsed">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	Return ##class(EF.stats.events).getMeetingManagerEventCountForPeriod(..startTimeStampUTC,..endTimeStampUTC)
]]></Implementation>
</Method>

<Method name="getDisplayDescription">
<ClassMethod>1</ClassMethod>
<FormalSpec>licenseID</FormalSpec>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	Set ret=""
	
	&SQL(SELECT 		orderNo, startTimeStampUTC, endTimeStampUTC
				INTO	:tmp,:tmp2,:tmp3
			FROM	EF_licensing.objLicense
			WHERE	ID=:licenseID
		)
		
	If (+SQLCODE=0) {
		Set ret=tmp_" ("_##class(shared.dateFunctions).getBackendFriendlyOutputDate(tmp2)_" - "_##class(shared.dateFunctions).getBackendFriendlyOutputDate(tmp3)_")"
	}
	
	Quit ret
]]></Implementation>
</Method>

<Method name="getModules">
<ReturnType>%ArrayOfObjects</ReturnType>
<Implementation><![CDATA[
	Set ret=##class(%ArrayOfObjects).%New()
	
	Do ..createInternalAllPackagesWithModulesCacheIfNeeded()
	
	Set moduleGroupsProcessed=##class(%ArrayOfObjects).%New()
	
	Set key=""
	For {
		Set key=..objLicensedPackages.Next(key)
		If (key="") Quit
		
		Set objLicensedPackage=..objLicensedPackages.GetAt(key)
		
		Set packageIdentifier=objLicensedPackage.getPackageIdentifier()
		If (..allPackagesCache.IsDefined(packageIdentifier)) {
			Set package=..allPackagesCache.GetAt(packageIdentifier)
			
			Set moduleGroups=package.moduleGroups
			
			Set moduleGroupIdentifier=""
			For {
				Set moduleGroupIdentifier=moduleGroups.Next(moduleGroupIdentifier)
				If (moduleGroupIdentifier="") Quit
				
				If ('moduleGroupsProcessed.IsDefined(moduleGroupIdentifier)) {
					Set moduleGroup=moduleGroups.GetAt(moduleGroupIdentifier)
					Do moduleGroupsProcessed.SetAt(moduleGroup,moduleGroupIdentifier)
					
					Set modules=moduleGroup.modules
					
					Set moduleIdentifier=""
					For {
						Set moduleIdentifier=modules.Next(moduleIdentifier)
						If (moduleIdentifier="") Quit
						
						If ('(ret.IsDefined(moduleIdentifier))) {
							Set module=modules.GetAt(moduleIdentifier)
							Do ret.SetAt(module,moduleIdentifier)
						}
					}
				}
			}
		}
	}
	
	Return ret
]]></Implementation>
</Method>

<Method name="buildCurrentLicenseModuleCacheIfNeeded">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<Implementation><![CDATA[
	Set buildCache=0
	
	If ('($DATA(^CacheTempModuleCache($ZNSPACE)))) {
		Set buildCache=1
	} else {
		Set timeOut=10
		While ('($GET(^CacheTempModuleCache($ZNSPACE,"isBuilt")))) {
			Hang 1
			Set timeOut=timeOut-1
			If (timeOut < 1) {
				Throw ##class(shared.exceptions.generalException).%New("Timed out building licensed modules cache")
			}
		}
	}
	
	If ((+$GET(^CacheTempModuleCache($ZNSPACE,"buildDate"))) < (+$ZTS)) {
		Set buildCache=1
	}
	
	If (buildCache) {
		Set currentLicense=..getCurrentLicense()
		If ($IsObject(currentLicense)) {
			Do currentLicense.buildModuleCache()
		}
	}
]]></Implementation>
</Method>

<Method name="isModuleAllowedInCurrentLicense">
<ClassMethod>1</ClassMethod>
<FormalSpec>moduleIdentifier:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set ret=0
	Set tempModuleIdentifier=$ZCONVERT(moduleIdentifier,"U")
	Do ..buildCurrentLicenseModuleCacheIfNeeded()
	Set ret=+$GET(^CacheTempModuleCache($ZNSPACE,"modules",tempModuleIdentifier))
	Return ret
]]></Implementation>
</Method>

<Method name="buildModuleCache">
<Implementation><![CDATA[
	do ..clearModuleCache()
	Set modules=..getModules()
	
	Set moduleIdentifier=""
	For {
		Set moduleIdentifier=modules.Next(moduleIdentifier)
		If (moduleIdentifier="") Quit
		
		Set ^CacheTempModuleCache($ZNSPACE,"modules",moduleIdentifier)=1	
	}
	
	Set ^CacheTempModuleCache($ZNSPACE,"buildDate")=+$ZTS
	Set ^CacheTempModuleCache($ZNSPACE,"isBuilt")=1
]]></Implementation>
</Method>

<Method name="clearModuleCache">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Kill ^CacheTempModuleCache($ZNSPACE)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^EF.licensing.objLicenseD</DataLocation>
<DefaultData>objLicenseDefaultData</DefaultData>
<IdLocation>^EF.licensing.objLicenseD</IdLocation>
<IndexLocation>^EF.licensing.objLicenseI</IndexLocation>
<StreamLocation>^EF.licensing.objLicenseS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="objLicenseDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>orderNo</Value>
</Value>
<Value name="3">
<Value>startTimeStampUTC</Value>
</Value>
<Value name="4">
<Value>endTimeStampUTC</Value>
</Value>
<Value name="5">
<Value>displayDescription</Value>
</Value>
<Value name="6">
<Value>xCRstamp</Value>
</Value>
<Value name="7">
<Value>xMOstamp</Value>
</Value>
<Value name="8">
<Value>xCRuserID</Value>
</Value>
<Value name="9">
<Value>xMOuserID</Value>
</Value>
<Value name="10">
<Value>registrationLimitEmailPercentageReached</Value>
</Value>
<Value name="11">
<Value>notificationEmailRegistrationPercentageUsed</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.licensing.objLicensedPackage">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.licensing.objLicensedPackage.CLS/EV.1
;vc; Component: CLS.EF.licensing.objLicensedPackage
;vc;  Location: SmallDev
;vc; Date/Time: 15-Jan-15 13:23
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.licensing.objLicensedPackage.CLS/EV.1</td><td>CLS.EF.licensing.objLicensedPackage</td><td>SmallDev</td><td style='white-space: nowrap;'>15-Jan-15 13:23</td><td>AdrianM</td></tr></table>
]]></Description>
<Super>%Library.Persistent,shared.timeStamp</Super>
<TimeChanged>63567,48197</TimeChanged>
<TimeCreated>63386,56032.004435</TimeCreated>

<Property name="quantity">
<Type>%Integer</Type>
</Property>

<Property name="objLicense">
<Type>objLicense</Type>
<Cardinality>one</Cardinality>
<Inverse>objLicensedPackages</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="objLicenseIndex">
<Properties>objLicense</Properties>
</Index>

<Method name="add">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[packageIdentifier,licenseID,quantity,&packages]]></FormalSpec>
<Implementation><![CDATA[
	if '$D(packages) {
		set packages=##class(EF.licensing.package).getAllPackages(0,0)
	}
	set packageIdentifier=$ZCVT(packageIdentifier,"U")
	set package=packages.GetAt(packageIdentifier)
	if '$IsObject(package) {
		throw ##class(shared.exceptions.generalException).%New("The package does not exist")	
	}
	if package.isCustomPackage {
		do ##class(EF.licensing.objLicensedPackageCustom).add(packageIdentifier, licenseID)
	} else {
		do ##class(EF.licensing.objLicensedPackageStandard).add(packageIdentifier, licenseID, quantity)
	}
	
	do ##class(EF.licensing.objLicense).resetNotificationEmailData(licenseID)
]]></Implementation>
</Method>

<Method name="delete">
<ClassMethod>1</ClassMethod>
<FormalSpec>licensedPackageID</FormalSpec>
<Implementation><![CDATA[
	#dim licenseID as %String
	
	set licenseID=..getLicenseID(licensedPackageID)
	&SQL(DELETE FROM EF_licensing.objLicensedPackage
		WHERE ID = :licensedPackageID
	)
	do ##class(EF.licensing.objLicense).resetNotificationEmailData(licenseID)
	do ##class(EF.licensing.objLicense).clearModuleCache()
]]></Implementation>
</Method>

<Method name="getLicenseID">
<ClassMethod>1</ClassMethod>
<FormalSpec>licensedPackageID</FormalSpec>
<Implementation><![CDATA[
	#dim licenseID as %String
	
	set licenseID=""
	&SQL(SELECT objLicense INTO :tmp
		FROM EF_licensing.objLicensedPackage
		WHERE ID = :licensedPackageID
	)
	if +SQLCODE=0 {
		set licenseID=tmp	
	}
	return licenseID
]]></Implementation>
</Method>

<Method name="getPackageIdentifier">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	throw ##class(shared.exceptions.generalException).%New("Not Implemented")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^EF.licensing.objLicensed92B4D</DataLocation>
<DefaultData>objLicensedPackageDefaultData</DefaultData>
<IdLocation>^EF.licensing.objLicensed92B4D</IdLocation>
<IndexLocation>^EF.licensing.objLicensed92B4I</IndexLocation>
<StreamLocation>^EF.licensing.objLicensed92B4S</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="objLicensedPackageDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>orderNo</Value>
</Value>
<Value name="3">
<Value>quantity</Value>
</Value>
<Value name="4">
<Value>packageIdentifier</Value>
</Value>
<Value name="5">
<Value>startTimeStampUTC</Value>
</Value>
<Value name="6">
<Value>endTimeStampUTC</Value>
</Value>
<Value name="7">
<Value>xCRstamp</Value>
</Value>
<Value name="8">
<Value>xCRuserID</Value>
</Value>
<Value name="9">
<Value>xMOstamp</Value>
</Value>
<Value name="10">
<Value>xMOuserID</Value>
</Value>
<Value name="11">
<Value>objLicense</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.licensing.objLicensedPackageCustom">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.licensing.objLicensedPackageCustom.CLS/EV.0
;vc; Component: CLS.EF.licensing.objLicensedPackageCustom
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:34
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.licensing.objLicensedPackageCustom.CLS/EV.0</td><td>CLS.EF.licensing.objLicensedPackageCustom</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:34</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.licensing.objLicensedPackage</Super>
<TimeChanged>63397,55993</TimeChanged>
<TimeCreated>63389,57054.133668</TimeCreated>

<Property name="objCustomPackage">
<Type>EF.licensing.objCustomPackage</Type>
<Cardinality>one</Cardinality>
<Inverse>objLicensedPackagesCustom</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="objCustomPackageIndex">
<Properties>objCustomPackage</Properties>
</Index>

<Method name="add">
<ClassMethod>1</ClassMethod>
<FormalSpec>customPackageID,licenseID</FormalSpec>
<Implementation><![CDATA[
	if '..doesLicensePackageCustomHaveCustomPackage(licenseID,customPackageID) {
		&SQL(INSERT INTO EF_licensing.objLicensedPackageCustom
			(objCustomPackage,quantity,objLicense) VALUES (:customPackageID,1,:licenseID)
		)
	}
	do ##class(EF.licensing.objLicense).clearModuleCache()
]]></Implementation>
</Method>

<Method name="doesLicensePackageCustomHaveCustomPackage">
<ClassMethod>1</ClassMethod>
<FormalSpec>licenseID:%String,customPackageID:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set hasCustomPackage=0
	&SQL(SELECT ID
		FROM EF_licensing.objLicensedPackageCustom
		WHERE (objCustomPackage = :customPackageID)
		AND (objLicense = :licenseID)
	)
	if +SQLCODE=0 {
		set hasCustomPackage=1	
	}
	quit hasCustomPackage
]]></Implementation>
</Method>

<Method name="getPackageIdentifier">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..objCustomPackage.%Id()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>objLicensedPackageCustomDefaultData</DefaultData>
<Data name="objLicensedPackageCustomDefaultData">
<Subscript>"objLicensedPackageCustom"</Subscript>
<Value name="1">
<Value>objCustomPackage</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.licensing.objLicensedPackageStandard">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.licensing.objLicensedPackageStandard.CLS/EV.0
;vc; Component: CLS.EF.licensing.objLicensedPackageStandard
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:35
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.licensing.objLicensedPackageStandard.CLS/EV.0</td><td>CLS.EF.licensing.objLicensedPackageStandard</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:35</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.licensing.objLicensedPackage</Super>
<TimeChanged>63397,56008</TimeChanged>
<TimeCreated>63389,57281.665824</TimeCreated>

<Property name="packageIdentifier">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Index name="packageIdentifierIndex">
<Properties>packageIdentifier</Properties>
</Index>

<Method name="add">
<ClassMethod>1</ClassMethod>
<FormalSpec>packageIdentifier,licenseID,quantity</FormalSpec>
<Implementation><![CDATA[
	set existingQuantity=..getQuantityOfPackagesForLicense(licenseID,packageIdentifier)
	
	if existingQuantity {
		set quantity=quantity+existingQuantity
		do ..updateQuantity(packageIdentifier, licenseID, quantity)
	} else {
	
		&SQL(INSERT INTO EF_licensing.objLicensedPackageStandard
			(packageIdentifier,quantity,objLicense) VALUES (:packageIdentifier,:quantity,:licenseID)
		)
	}
	do ##class(EF.licensing.objLicense).clearModuleCache()
]]></Implementation>
</Method>

<Method name="updateQuantity">
<ClassMethod>1</ClassMethod>
<FormalSpec>packageIdentifier,licenseID,quantity</FormalSpec>
<Implementation><![CDATA[
	&SQL(UPDATE EF_licensing.objLicensedPackageStandard
		SET quantity = :quantity
		WHERE packageIdentifier = :packageIdentifier
		AND objLicense = :licenseID
	)
]]></Implementation>
</Method>

<Method name="getQuantityOfPackagesForLicense">
<ClassMethod>1</ClassMethod>
<FormalSpec>licenseID,packageIdentifier</FormalSpec>
<Implementation><![CDATA[
	set quantity=0
	&SQL(SELECT quantity INTO :tmp
		FROM EF_licensing.objLicensedPackageStandard
		WHERE objLicense = :licenseID
		AND packageIdentifier = :packageIdentifier
	)
	if +SQLCODE=0 {
		set quantity=tmp	
	}
	quit quantity
]]></Implementation>
</Method>

<Method name="getPackageIdentifier">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..packageIdentifier
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.licensing.package">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.licensing.package.CLS/EV.14
;vc; Component: CLS.EF.licensing.package
;vc;  Location: SmallDev
;vc; Date/Time: 04-Jul-16 10:12
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.licensing.package.CLS/EV.14</td><td>CLS.EF.licensing.package</td><td>SmallDev</td><td style='white-space: nowrap;'>04-Jul-16 10:12</td><td>AdrianM2</td></tr></table>
]]></Description>
<IncludeCode>EF.common.macros</IncludeCode>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>64103,56676.930342</TimeChanged>
<TimeCreated>63385,58113.136026</TimeCreated>

<Property name="identifier">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Index name="identifierIndex">
<Properties>identifier</Properties>
<Unique>1</Unique>
</Index>

<Property name="description">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Index name="descriptionIndex">
<Properties>description</Properties>
<Unique>1</Unique>
</Index>

<Property name="moduleGroups">
<Type>moduleGroup</Type>
<Collection>array</Collection>
</Property>

<Property name="userQuantity">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="registrationQuantity">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="awardEventQuantity">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="abstractEventQuantity">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="meetingManagerEventQuantity">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="isCustomPackage">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="abstractSubmissionsQuantity">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="awardEntriesQuantity">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="canAddToLicense">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>identifier,description</FormalSpec>
<ReturnType>moduleGroup</ReturnType>
<Implementation><![CDATA[
	Set ret=..%New()
	
	Set ret.identifier=identifier
	Set ret.description=description
	
	Return ret
]]></Implementation>
</Method>

<Method name="addModuleGroup">
<FormalSpec>inModuleGroup:moduleGroup</FormalSpec>
<Implementation><![CDATA[
	 If ..moduleGroups.IsDefined($ZCONVERT(inModuleGroup.identifier,"U")) {
		 Throw ##class(shared.exceptions.generalException).%New("Module group already exists in package!")
	 }
	 
	 Do ..moduleGroups.SetAt(inModuleGroup,$ZCONVERT(inModuleGroup.identifier,"U"))
]]></Implementation>
</Method>

<Method name="getOutputDescription">
<Implementation><![CDATA[
	Set ret=""
	If (..isCustomPackage) {
		Set ret="Custom - "_..description
	} else {
		Set ret=..identifier_" - "_..description
	}
	Return ret
]]></Implementation>
</Method>

<Method name="getUnlimitedQuantityValue">
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	Return $$$efInfinity
]]></Implementation>
</Method>

<Method name="getAllPackages">
<ClassMethod>1</ClassMethod>
<FormalSpec>includeModuleGroups:%Boolean=1,includeModules:%Boolean=1</FormalSpec>
<ReturnType>%ArrayOfObjects</ReturnType>
<Implementation><![CDATA[
	Set ret=##class(%ArrayOfObjects).%New()
	
	If (includeModuleGroups) {
		Set allModuleGroups=##class(moduleGroup).getAllModuleGroups(includeModules)
	}
	
	#define UnlimitedQuantity ..getUnlimitedQuantityValue()
	
	#define AddPackage(%identifier,%description) If (ret.IsDefined($ZCONVERT(%identifier,"U"))) { Throw ##class(shared.exceptions.generalException).%New("Package '"_%identifier_"' already exists!") } else {  Set tempPackage=..createNew(%identifier,%description) Do ret.SetAt(tempPackage,%identifier) }
	#define MarkLastPackageAsCanNotAdd Set tempPackage.canAddToLicense=0
	#define MarkLastPackageAsCustom Set tempPackage.isCustomPackage=1
	#define AddModuleGroupToLastPackage(%moduleGroupIdentifier) If (includeModuleGroups) { Set tempModuleGroup=allModuleGroups.GetAt($ZCONVERT(%moduleGroupIdentifier,"U")) If ($IsObject(tempModuleGroup)) { Do tempPackage.addModuleGroup(tempModuleGroup) } else { Throw ##class(shared.exceptions.generalException).%New("Module group '"_%moduleGroupIdentifier_"' does not exist!") } }
	
	#define AddUserQuantityToLastPackage(%quantity) Set tempPackage.userQuantity=%quantity
	#define AddRegistrationQuantityToLastPackage(%quantity) Set tempPackage.registrationQuantity=%quantity
	#define AddAwardEventQuantityToLastPackage(%quantity) Set tempPackage.awardEventQuantity=%quantity
	#define AddAbstractEventQuantityToLastPackage(%quantity) Set tempPackage.abstractEventQuantity=%quantity
	#define AddMeetingManagerEventQuantityToLastPackage(%quantity) Set tempPackage.meetingManagerEventQuantity=%quantity
	
	#define AddAbstractSubmissionsQuantityToLastPackage(%quantity) Set tempPackage.abstractSubmissionsQuantity=%quantity
	
	#define AddAwardEntriesQuantityToLastPackage(%quantity) Set tempPackage.awardEntriesQuantity=%quantity
	
	Set qryCustomPackage="SELECT ID, description FROM EF_licensing.objCustomPackage"
	Set rsCustomPackage=##class(%ResultSet).%New()
	Set sc=rsCustomPackage.Prepare(qryCustomPackage)
	If ($$$ISERR(sc)) {
		Throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
	}
	Set sc=rsCustomPackage.Execute()
	If ($$$ISERR(sc)) {
		Throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
	}
	
	While (rsCustomPackage.Next()) {
		Set cpIdentifier=rsCustomPackage.Get("ID")
		Set cpDescription=rsCustomPackage.Get("description")
		$$$AddPackage(cpIdentifier,cpDescription)
		$$$MarkLastPackageAsCustom
		If (includeModuleGroups) {
			$$$AddModuleGroupToLastPackage(cpIdentifier)
		}
	}
	Do rsCustomPackage.Close()
	
	$$$AddPackage("P0010","Professional (4 users, 2500 registrations)")
	$$$AddUserQuantityToLastPackage("4")
	$$$AddRegistrationQuantityToLastPackage("2500")
	$$$AddModuleGroupToLastPackage("communications")
	$$$AddModuleGroupToLastPackage("core")
	$$$AddModuleGroupToLastPackage("registrations")
	$$$AddModuleGroupToLastPackage("reporting")
	$$$AddModuleGroupToLastPackage("websites")
	$$$AddPackage("P0011","Professional (per user, 5-10 users)")
	$$$AddUserQuantityToLastPackage("1")
	$$$AddRegistrationQuantityToLastPackage("750")
	$$$AddPackage("P0012","Professional (per user, 11-20 users)")
	$$$AddUserQuantityToLastPackage("1")
	$$$AddRegistrationQuantityToLastPackage("750")
	$$$AddPackage("P0013","Professional (per user, 21+ users)")
	$$$AddUserQuantityToLastPackage("1")
	$$$AddRegistrationQuantityToLastPackage("750")
	$$$AddPackage("P0014","Professional (per registration, 2501-5000 registrations)")
	$$$AddRegistrationQuantityToLastPackage("1")
	$$$AddPackage("P0015","Professional (per registration, 5001+ registrations)")
	$$$AddRegistrationQuantityToLastPackage("1")
	$$$AddPackage("P0020","Enterprise (3 users, 2000 registrations)")
	$$$AddUserQuantityToLastPackage("3")
	$$$AddRegistrationQuantityToLastPackage("2000")
	$$$AddModuleGroupToLastPackage("accommodation")
	$$$AddModuleGroupToLastPackage("badges")
	$$$AddModuleGroupToLastPackage("communications")
	$$$AddModuleGroupToLastPackage("core")
	$$$AddModuleGroupToLastPackage("financial")
	$$$AddModuleGroupToLastPackage("group registrations")
	$$$AddModuleGroupToLastPackage("registrations")
	$$$AddModuleGroupToLastPackage("reporting")
	$$$AddModuleGroupToLastPackage("sessions")
	$$$AddModuleGroupToLastPackage("websites")
	$$$AddPackage("P0021","Enterprise (per user, 4-10 users)")
	$$$AddUserQuantityToLastPackage("1")
	$$$AddRegistrationQuantityToLastPackage("750")
	$$$AddPackage("P0022","Enterprise (per user, 11-20 users)")
	$$$AddUserQuantityToLastPackage("1")
	$$$AddRegistrationQuantityToLastPackage("750")
	$$$AddPackage("P0023","Enterprise (per user, 21+ users)")
	$$$AddUserQuantityToLastPackage("1")
	$$$AddRegistrationQuantityToLastPackage("750")
	$$$AddPackage("P0024","Enterprise (per registration, 2001-5000 registrations)")
	$$$AddRegistrationQuantityToLastPackage("1")
	$$$AddPackage("P0025","Enterprise (per registration, 5001+ registrations)")
	$$$AddRegistrationQuantityToLastPackage("1")
	$$$AddPackage("P0030","Awards (3 users)")
	$$$AddUserQuantityToLastPackage("3")
	$$$AddModuleGroupToLastPackage("awards")
	$$$AddModuleGroupToLastPackage("badges")
	$$$AddModuleGroupToLastPackage("communications")
	$$$AddModuleGroupToLastPackage("core")
	$$$AddModuleGroupToLastPackage("financial")
	$$$AddModuleGroupToLastPackage("registrations")
	$$$AddModuleGroupToLastPackage("reporting")
	$$$AddModuleGroupToLastPackage("websites")
	$$$AddPackage("P0031","Awards (per user, 4-10 users)")
	$$$AddUserQuantityToLastPackage("1")
	$$$AddPackage("P0032","Awards (per user, 11+ users)")
	$$$AddUserQuantityToLastPackage("1")
	$$$AddPackage("P0035","Awards Event")
	$$$AddAwardEventQuantityToLastPackage("1")
	$$$AddAwardEntriesQuantityToLastPackage(..getUnlimitedQuantityValue())
	$$$AddModuleGroupToLastPackage("awards")
	$$$AddModuleGroupToLastPackage("badges")
	$$$AddPackage("P0036","Awards (per entry, min 500-1500)")
	$$$AddAwardEventQuantityToLastPackage(..getUnlimitedQuantityValue())
	$$$AddModuleGroupToLastPackage("awards")
	$$$AddModuleGroupToLastPackage("badges")
	$$$AddPackage("P0037","Awards Unlimited")
	$$$AddAwardEventQuantityToLastPackage(..getUnlimitedQuantityValue())
	$$$AddAwardEntriesQuantityToLastPackage(..getUnlimitedQuantityValue())
	$$$AddModuleGroupToLastPackage("awards")
	$$$AddModuleGroupToLastPackage("badges")
	$$$AddPackage("P0038","Awards (per entry, 1501-5000)")
	$$$AddAwardEventQuantityToLastPackage(..getUnlimitedQuantityValue())
	$$$AddModuleGroupToLastPackage("awards")
	$$$AddModuleGroupToLastPackage("badges")
	$$$AddPackage("P0040","Abstracts Event")
	$$$AddAbstractEventQuantityToLastPackage("1")
	$$$AddAbstractSubmissionsQuantityToLastPackage(..getUnlimitedQuantityValue())
	$$$AddModuleGroupToLastPackage("abstracts")
	$$$AddModuleGroupToLastPackage("badges")
	$$$AddPackage("P0045","Abstracts Unlimited")
	$$$AddAbstractEventQuantityToLastPackage(..getUnlimitedQuantityValue())
	$$$AddAbstractSubmissionsQuantityToLastPackage(..getUnlimitedQuantityValue())
	$$$AddModuleGroupToLastPackage("abstracts")
	$$$AddModuleGroupToLastPackage("badges")
	$$$AddPackage("P0140","Abstracts (2 events, 3 users, 3000 submissions, 200 registrations)")
	$$$AddUserQuantityToLastPackage("3")
	$$$AddRegistrationQuantityToLastPackage("200")
	$$$AddAbstractEventQuantityToLastPackage("2")
	$$$AddAbstractSubmissionsQuantityToLastPackage("3000")
	$$$AddModuleGroupToLastPackage("core")
	$$$AddModuleGroupToLastPackage("registrations")
	$$$AddModuleGroupToLastPackage("communications")
	$$$AddModuleGroupToLastPackage("websites")
	$$$AddModuleGroupToLastPackage("reporting")
	$$$AddModuleGroupToLastPackage("financial")
	$$$AddModuleGroupToLastPackage("badges")
	$$$AddModuleGroupToLastPackage("sessions")
	$$$AddModuleGroupToLastPackage("abstracts")
	$$$AddPackage("P0141","Abstracts (unlimited events, 3 users, 1500 submissions, 200 registrations)")
	$$$AddUserQuantityToLastPackage("3")
	$$$AddRegistrationQuantityToLastPackage("200")
	$$$AddAbstractEventQuantityToLastPackage(..getUnlimitedQuantityValue())
	$$$AddAbstractSubmissionsQuantityToLastPackage("1500")
	$$$AddModuleGroupToLastPackage("core")
	$$$AddModuleGroupToLastPackage("registrations")
	$$$AddModuleGroupToLastPackage("communications")
	$$$AddModuleGroupToLastPackage("websites")
	$$$AddModuleGroupToLastPackage("reporting")
	$$$AddModuleGroupToLastPackage("financial")
	$$$AddModuleGroupToLastPackage("badges")
	$$$AddModuleGroupToLastPackage("sessions")
	$$$AddModuleGroupToLastPackage("abstracts")
	$$$AddPackage("P0142","Abstracts Event (1 event, 2 users, 500 submissions)")
	$$$AddUserQuantityToLastPackage("2")
	$$$AddAbstractEventQuantityToLastPackage("1")
	$$$AddAbstractSubmissionsQuantityToLastPackage("500")
	$$$AddModuleGroupToLastPackage("core")
	$$$AddModuleGroupToLastPackage("registrations")
	$$$AddModuleGroupToLastPackage("communications")
	$$$AddModuleGroupToLastPackage("websites")
	$$$AddModuleGroupToLastPackage("reporting")
	$$$AddModuleGroupToLastPackage("financial")
	$$$AddModuleGroupToLastPackage("badges")
	$$$AddModuleGroupToLastPackage("sessions")
	$$$AddModuleGroupToLastPackage("abstracts")
	$$$AddPackage("P0143","Abstracts (per submission)")
	$$$AddAbstractSubmissionsQuantityToLastPackage("1")
	$$$AddPackage("P0144","Abstract (per registration, 201-2000 registrations)")
	$$$AddRegistrationQuantityToLastPackage("1")
	$$$AddPackage("P0145","Abstract (per registration, 2001+ registrations)")
	$$$AddRegistrationQuantityToLastPackage("1")
	$$$AddPackage("P0146","Abstracts (per user)")
	$$$AddUserQuantityToLastPackage("1")
	$$$AddPackage("P0050","Multilingual")
	$$$AddModuleGroupToLastPackage("multilingual")
	$$$AddPackage("P0060","Meeting Manager Event")
	$$$AddMeetingManagerEventQuantityToLastPackage("1")
	$$$AddModuleGroupToLastPackage("meeting manager")
	$$$AddPackage("P0065","Meeting Manager Unlimited")
	$$$AddMeetingManagerEventQuantityToLastPackage(..getUnlimitedQuantityValue())
	$$$AddModuleGroupToLastPackage("meeting manager")
	$$$AddPackage("P0070","API")
	$$$AddPackage("P0080","Single Sign-On (SAML2)")
	$$$AddModuleGroupToLastPackage("SSO - SAML2")
	$$$AddPackage("P0081","Single Sign-On (Silverbear)")
	$$$AddModuleGroupToLastPackage("SSO - Silverbear")
	$$$AddPackage("P0090","CRM Integration Module (Salesforce.com)")
	$$$AddModuleGroupToLastPackage("salesforce")
	$$$AddPackage("P0095","Table Booking")
	$$$AddModuleGroupToLastPackage("table booking")
	$$$AddPackage("P0200","Professional Licence")
	$$$AddModuleGroupToLastPackage("communications")
	$$$AddModuleGroupToLastPackage("core")
	$$$AddModuleGroupToLastPackage("registrations")
	$$$AddModuleGroupToLastPackage("reporting")
	$$$AddModuleGroupToLastPackage("websites")
	$$$AddPackage("P0210","Enterprise Licence")
	$$$AddModuleGroupToLastPackage("accommodation")
	$$$AddModuleGroupToLastPackage("badges")
	$$$AddModuleGroupToLastPackage("communications")
	$$$AddModuleGroupToLastPackage("core")
	$$$AddModuleGroupToLastPackage("financial")
	$$$AddModuleGroupToLastPackage("group registrations")
	$$$AddModuleGroupToLastPackage("registrations")
	$$$AddModuleGroupToLastPackage("reporting")
	$$$AddModuleGroupToLastPackage("sessions")
	$$$AddModuleGroupToLastPackage("websites")
	$$$AddPackage("P0220","Awards Licence")
	$$$AddModuleGroupToLastPackage("awards")
	$$$AddModuleGroupToLastPackage("badges")
	$$$AddModuleGroupToLastPackage("communications")
	$$$AddModuleGroupToLastPackage("core")
	$$$AddModuleGroupToLastPackage("financial")
	$$$AddModuleGroupToLastPackage("registrations")
	$$$AddModuleGroupToLastPackage("reporting")
	$$$AddModuleGroupToLastPackage("websites")
	$$$AddPackage("P0230","Abstracts Licence")
	$$$AddModuleGroupToLastPackage("core")
	$$$AddModuleGroupToLastPackage("registrations")
	$$$AddModuleGroupToLastPackage("communications")
	$$$AddModuleGroupToLastPackage("websites")
	$$$AddModuleGroupToLastPackage("reporting")
	$$$AddModuleGroupToLastPackage("financial")
	$$$AddModuleGroupToLastPackage("badges")
	$$$AddModuleGroupToLastPackage("sessions")
	$$$AddModuleGroupToLastPackage("abstracts")
	$$$AddPackage("P0310","User licence (per user, 1-10 users)")
	$$$AddUserQuantityToLastPackage("1")
	$$$AddPackage("P0311","User licence (per user, 11+ users)")
	$$$AddUserQuantityToLastPackage("1")
	$$$AddPackage("P0312","User licence, unlimited registrations")
	$$$AddUserQuantityToLastPackage("1")
	$$$AddRegistrationQuantityToLastPackage($$$UnlimitedQuantity)
	$$$AddPackage("P0320","Registrations (professional, per registration, 1-2000 registrations)")
	$$$AddRegistrationQuantityToLastPackage("1")
	$$$AddPackage("P0321","Registrations (professional, per registration, 2001-5000 registrations)")
	$$$AddRegistrationQuantityToLastPackage("1")
	$$$AddPackage("P0322","Registrations (professional, per registration, 5001+ registrations)")
	$$$AddRegistrationQuantityToLastPackage("1")
	$$$AddPackage("P0330","Registrations (per registration, 1-2000 registrations)")
	$$$AddRegistrationQuantityToLastPackage("1")
	$$$AddPackage("P0331","Registrations (per registration, 2001-5000 registrations)")
	$$$AddRegistrationQuantityToLastPackage("1")
	$$$AddPackage("P0332","Registrations (per registration, 5001+ registrations)")
	$$$AddRegistrationQuantityToLastPackage("1")
	$$$AddPackage("P0340","Abstracts (per submission, 1-1500)")
	$$$AddAbstractEventQuantityToLastPackage($$$UnlimitedQuantity)
	$$$AddAbstractSubmissionsQuantityToLastPackage("1")
	$$$AddPackage("P0341","Abstracts (per submission, 1,501+)")
	$$$AddAbstractEventQuantityToLastPackage($$$UnlimitedQuantity)
	$$$AddAbstractSubmissionsQuantityToLastPackage("1")
	$$$AddPackage("P0350","Awards (per entry, 1-1500)")
	$$$AddAwardEventQuantityToLastPackage($$$UnlimitedQuantity)
	$$$AddAwardEntriesQuantityToLastPackage("1")
	$$$AddPackage("P0351","Awards (per entry, 1501+)")
	$$$AddAwardEventQuantityToLastPackage($$$UnlimitedQuantity)
	$$$AddAwardEntriesQuantityToLastPackage("1")
	$$$AddPackage("P1000","Payment Gateway (Sage Pay)")
	$$$AddModuleGroupToLastPackage("payment gateway (sage pay)")
	$$$AddPackage("P1010","Payment Gateway (Worldpay)")
	$$$AddModuleGroupToLastPackage("payment gateway (worldpay)")
	$$$AddPackage("P1020","Payment Gateway (Authorize.net SIM)")
	$$$AddModuleGroupToLastPackage("payment gateway (authorize.net sim)")
	$$$AddPackage("P1030","Payment Gateway (EPDQ)")
	$$$AddModuleGroupToLastPackage("payment gateway (epdq)")
	$$$AddPackage("P1040","Payment Gateway (DataCash - Hosted Pages Solution)")
	$$$AddModuleGroupToLastPackage("payment gateway (datacash hosted pages solution)")
	$$$AddPackage("P1050","Payment Gateway (PayPal UK)")
	$$$AddModuleGroupToLastPackage("payment gateway (paypal uk)")
	$$$AddPackage("P1060","Payment Gateway (Commidea)")
	$$$MarkLastPackageAsCanNotAdd
	$$$AddPackage("P1070","Payment Gateway (Netbanx)")
	$$$AddModuleGroupToLastPackage("payment gateway (netbanx)")
	$$$AddPackage("P1080","Payment Gateway (Ogone)")
	$$$AddModuleGroupToLastPackage("payment gateway (ogone)")
	$$$AddPackage("P1090","Payment Gateway (Secure Trading)")
	$$$AddModuleGroupToLastPackage("payment gateway (secure trading)")
	$$$AddPackage("P1100","Payment Gateway (Datatrans)")
	$$$AddModuleGroupToLastPackage("payment gateway (datatrans)")
	$$$AddPackage("P1110","Payment Gateway (PayPal Payflow)")
	$$$AddModuleGroupToLastPackage("payment gateway (paypal payflow)")
	$$$AddPackage("P1120","Payment Gateway (Global Payments - GP Webpay)")
	$$$AddModuleGroupToLastPackage("payment gateway (global payments - gp webpay)")
	$$$AddPackage("P1130","Payment Gateway (eWAY)")
	$$$AddModuleGroupToLastPackage("payment gateway (eWAY)")
	$$$AddPackage("P1140","Payment Gateway (Stripe)")
	$$$AddModuleGroupToLastPackage("payment gateway (stripe)")
	$$$AddPackage("P1150","Payment Gateway (PayDollar PayGate)")
	$$$AddModuleGroupToLastPackage("Payment Gateway (PayDollar PayGate)")
	$$$AddPackage("P2000","Wyndham Jade - EF License (registrations)")
	$$$AddRegistrationQuantityToLastPackage("1")
	$$$AddModuleGroupToLastPackage("accommodation")
	$$$AddModuleGroupToLastPackage("badges")
	$$$AddModuleGroupToLastPackage("communications")
	$$$AddModuleGroupToLastPackage("core")
	$$$AddModuleGroupToLastPackage("financial")
	$$$AddModuleGroupToLastPackage("group registrations")
	$$$AddModuleGroupToLastPackage("payment gateway (paypal payflow)")
	$$$AddModuleGroupToLastPackage("registrations")
	$$$AddModuleGroupToLastPackage("reporting")
	$$$AddModuleGroupToLastPackage("sessions")
	$$$AddModuleGroupToLastPackage("websites")
	$$$AddPackage("P2001","Wyndham Jade - EF License (users)")
	$$$AddUserQuantityToLastPackage("1")
	$$$AddModuleGroupToLastPackage("accommodation")
	$$$AddModuleGroupToLastPackage("badges")
	$$$AddModuleGroupToLastPackage("communications")
	$$$AddModuleGroupToLastPackage("core")
	$$$AddModuleGroupToLastPackage("financial")
	$$$AddModuleGroupToLastPackage("group registrations")
	$$$AddModuleGroupToLastPackage("payment gateway (paypal payflow)")
	$$$AddModuleGroupToLastPackage("registrations")
	$$$AddModuleGroupToLastPackage("reporting")
	$$$AddModuleGroupToLastPackage("sessions")
	$$$AddModuleGroupToLastPackage("websites")
	$$$AddPackage("P2010","Alliance Tech - EF Professional license")
	$$$AddRegistrationQuantityToLastPackage("1")
	$$$AddModuleGroupToLastPackage("communications")
	$$$AddModuleGroupToLastPackage("core")
	$$$AddModuleGroupToLastPackage("registrations")
	$$$AddModuleGroupToLastPackage("reporting")
	$$$AddModuleGroupToLastPackage("websites")
	$$$AddPackage("P2011","Alliance Tech - EF Enterprise license")
	$$$AddRegistrationQuantityToLastPackage("1")
	$$$AddModuleGroupToLastPackage("accommodation")
	$$$AddModuleGroupToLastPackage("badges")
	$$$AddModuleGroupToLastPackage("communications")
	$$$AddModuleGroupToLastPackage("core")
	$$$AddModuleGroupToLastPackage("financial")
	$$$AddModuleGroupToLastPackage("group registrations")
	$$$AddModuleGroupToLastPackage("registrations")
	$$$AddModuleGroupToLastPackage("reporting")
	$$$AddModuleGroupToLastPackage("sessions")
	$$$AddModuleGroupToLastPackage("websites")
	$$$AddPackage("P2020","Zerista - EF Professional license")
	$$$AddRegistrationQuantityToLastPackage("1")
	$$$AddModuleGroupToLastPackage("communications")
	$$$AddModuleGroupToLastPackage("core")
	$$$AddModuleGroupToLastPackage("registrations")
	$$$AddModuleGroupToLastPackage("reporting")
	$$$AddModuleGroupToLastPackage("websites")
	$$$AddPackage("P2021","Zerista - EF Enterprise license")
	$$$AddRegistrationQuantityToLastPackage("1")
	$$$AddModuleGroupToLastPackage("accommodation")
	$$$AddModuleGroupToLastPackage("badges")
	$$$AddModuleGroupToLastPackage("communications")
	$$$AddModuleGroupToLastPackage("core")
	$$$AddModuleGroupToLastPackage("financial")
	$$$AddModuleGroupToLastPackage("group registrations")
	$$$AddModuleGroupToLastPackage("registrations")
	$$$AddModuleGroupToLastPackage("reporting")
	$$$AddModuleGroupToLastPackage("sessions")
	$$$AddModuleGroupToLastPackage("websites")
	$$$AddPackage("P3000","Removal of Eventsforce Logo")
	$$$AddModuleGroupToLastPackage("Removal of Eventsforce Logo")

	Return ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.buttonElement">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.buttonElement.CLS/EV.0
;vc; Component: CLS.EF.pageController.buttonElement
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:35
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.buttonElement.CLS/EV.0</td><td>CLS.EF.pageController.buttonElement</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:35</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.pageController.element</Super>
<TimeChanged>63383,58856</TimeChanged>
<TimeCreated>63383,52777.549646</TimeCreated>

<Property name="uiComponent">
<Type>EF.ui.components.buttonBase</Type>
<Transient>1</Transient>
</Property>

<Method name="initialiseUIComponent">
<FormalSpec>uiComponent:EF.ui.components.inputBase</FormalSpec>
<Implementation><![CDATA[
	do ##super(uiComponent)
	set ..uiComponent.label=..description
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.buttons.button">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.buttons.button.CLS/EV.1
;vc; Component: CLS.EF.pageController.buttons.button
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.buttons.button.CLS/EV.1</td><td>CLS.EF.pageController.buttons.button</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.buttonElement</Super>
<TimeChanged>63953,55691</TimeChanged>
<TimeCreated>63404,34415.706614</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.backend.button</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.button).%New(..identifier)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.buttons.closeModal">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.buttons.closeModal.CLS/EV.0
;vc; Component: CLS.EF.pageController.buttons.closeModal
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:35
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.buttons.closeModal.CLS/EV.0</td><td>CLS.EF.pageController.buttons.closeModal</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:35</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.pageController.buttonElement</Super>
<TimeChanged>63383,59949</TimeChanged>
<TimeCreated>63383,59949.327094</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.backend.checkbox</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.buttonCloseModal).%New(..identifier)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.buttons.delete">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.buttons.delete.CLS/EV.0
;vc; Component: CLS.EF.pageController.buttons.delete
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:35
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.buttons.delete.CLS/EV.0</td><td>CLS.EF.pageController.buttons.delete</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:35</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.pageController.buttonElement</Super>
<TimeChanged>63386,36191</TimeChanged>
<TimeCreated>63385,63631.605762</TimeCreated>

<Property name="objectId">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="deleteMethod">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.backend.checkbox</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.buttonDelete).%New(..identifier)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>deleteDefaultData</DefaultData>
<Data name="deleteDefaultData">
<Subscript>"delete"</Subscript>
<Value name="1">
<Value>htmlName</Value>
</Value>
<Value name="2">
<Value>objectId</Value>
</Value>
<Value name="3">
<Value>deleteMethod</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.pageController.buttons.link">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.buttons.link.CLS/EV.0
;vc; Component: CLS.EF.pageController.buttons.link
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:37
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.buttons.link.CLS/EV.0</td><td>CLS.EF.pageController.buttons.link</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:37</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.pageController.buttonElement</Super>
<TimeChanged>63405,53435</TimeChanged>
<TimeCreated>63405,53102.009079</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.backend.linkButton</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.linkButton).%New(..identifier)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.buttons.openInFormModal">
<Description><![CDATA[

This is a Modal that is saved with the main form using saveInFormModals()
<!-- ;vc;
;vc;    Object: EF.pageController.buttons.openInFormModal.CLS/EV.2
;vc; Component: CLS.EF.pageController.buttons.openInFormModal
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.buttons.openInFormModal.CLS/EV.2</td><td>CLS.EF.pageController.buttons.openInFormModal</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.buttons.button</Super>
<TimeChanged>64135,62596</TimeChanged>
<TimeCreated>63953,48134.714051</TimeCreated>

<Property name="modalContents">
<Type>EF.pageController.page</Type>
</Property>

<Property name="baseUrl">
<Type>%String</Type>
</Property>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.backend.buttonOpenModalAjax</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.buttonOpenModalAjax).%New(..identifier)
]]></Implementation>
</Method>

<Method name="setModalContentDefinition">
<FormalSpec><![CDATA[className,baseUrl,&modalRequestData]]></FormalSpec>
<Implementation><![CDATA[
	if ..page.isReload {
		do ..page.open(..modalContents.%Id(),..page.contextData)
	} else {
		set ..modalContents=$ClassMethod(className,"createNew",..page.contextData,.modalRequestData,0,..page.eventConfiguration)
		set ..modalContents.isSettingsPageModal=1
	}
	set ..uiComponent.targetURL=baseUrl_"?pageControllerID="_..modalContents.%Id()
]]></Implementation>
</Method>

<Method name="delete">
<FormalSpec>removeFromParent=1</FormalSpec>
<Implementation><![CDATA[
	if $IsObject(..modalContents) { 	
		do ..modalContents.delete()
	}
	do ##super(removeFromParent)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>openInFormModalDefaultData</DefaultData>
<Data name="openInFormModalDefaultData">
<Subscript>"openInFormModal"</Subscript>
<Value name="1">
<Value>modalContents</Value>
</Value>
<Value name="2">
<Value>baseUrl</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.pageController.buttons.openModal">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.buttons.openModal.CLS/EV.1
;vc; Component: CLS.EF.pageController.buttons.openModal
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.buttons.openModal.CLS/EV.1</td><td>CLS.EF.pageController.buttons.openModal</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.buttonElement</Super>
<TimeChanged>63889,37720</TimeChanged>
<TimeCreated>63383,57633.995232</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.backend.buttonOpenModal</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.buttonOpenModal).%New(..identifier)
]]></Implementation>
</Method>

<Method name="setTargetElement">
<FormalSpec>targetElement:EF.pageController.element</FormalSpec>
<Implementation><![CDATA[	set ..uiComponent.targetUIComponent=targetElement.uiComponent
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.buttons.submit">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.buttons.submit.CLS/EV.0
;vc; Component: CLS.EF.pageController.buttons.submit
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:35
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.buttons.submit.CLS/EV.0</td><td>CLS.EF.pageController.buttons.submit</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:35</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.pageController.buttonElement</Super>
<TimeChanged>63383,59994</TimeChanged>
<TimeCreated>63383,59993.547107</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.backend.checkbox</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.buttonSubmit).%New(..identifier)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.containerElement">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.containerElement.CLS/EV.17
;vc; Component: CLS.EF.pageController.containerElement
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.containerElement.CLS/EV.17</td><td>CLS.EF.pageController.containerElement</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.element</Super>
<TimeChanged>64142,56781</TimeChanged>
<TimeCreated>63372,47273.826383</TimeCreated>

<Property name="getContentsMethod">
<Type>%String</Type>
<Transient>1</Transient>
</Property>

<Method name="setAJAXMethod">
<FormalSpec>method</FormalSpec>
<Implementation><![CDATA[
	set ..getContentsMethod=method
	do ..page.allAJAXPageElements.SetAt($this,$this.identifier)
]]></Implementation>
</Method>

<Method name="processGetElement">
<Implementation><![CDATA[	do $method($this.page,..getContentsMethod)
]]></Implementation>
</Method>

<Method name="updateErrorMessage">
<FormalSpec>errorMessage</FormalSpec>
</Method>

<Method name="geGetProcessedElements">
<Description>
This is a list of all the elements that are updated by the processGetContents method </Description>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set processedElements=##class(%ListOfObjects).%New()
	do processedElements.Insert($this)
	quit processedElements
]]></Implementation>
</Method>

<Method name="addCheckbox">
<FormalSpec>identifier:%String,description:%String,value:%String,isReadOnly=0</FormalSpec>
<ReturnType>EF.pageController.inputElements.checkbox</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElements.checkbox).addElementToParent($this,identifier,description,value,isReadOnly)

	quit element
]]></Implementation>
</Method>

<Method name="addRadioButtons">
<FormalSpec>identifier:%String,description:%String,value:%String,isReadOnly=0</FormalSpec>
<ReturnType>EF.pageController.inputElements.radioButtons</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElements.radioButtons).addElementToParent($this,identifier,description,value,isReadOnly)
	
	quit element
]]></Implementation>
</Method>

<Method name="addRadioGroup">
<FormalSpec>identifier:%String,description:%String,value:%String,isReadOnly=0</FormalSpec>
<ReturnType>EF.pageController.containerElements.radioGroup</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.containerElements.radioGroup).addElementToParent($this,identifier,description)
	quit element
]]></Implementation>
</Method>

<Method name="addRadio">
<FormalSpec>identifier:%String,description:%String,value:%String,isReadOnly=0,htmlName="",isSelected=0</FormalSpec>
<ReturnType>EF.pageController.inputElements.radio</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElements.radio).addElementToParent($this,identifier,description,value,isReadOnly)
	if $L(htmlName) set element.uiComponent.htmlName=htmlName
	set element.uiComponent.isSelected=+value
	quit element
]]></Implementation>
</Method>

<Method name="addNumericInput">
<FormalSpec>identifier:%String,description:%String,value:%String,isReadOnly=0</FormalSpec>
<ReturnType>EF.pageController.inputElements.integerInput</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElements.numericInput).addElementToParent($this,identifier,description,value,isReadOnly)
	
	quit element
]]></Implementation>
</Method>

<Method name="addIntegerInput">
<FormalSpec>identifier:%String,description:%String,value:%String,isReadOnly=0</FormalSpec>
<ReturnType>EF.pageController.inputElements.integerInput</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElements.integerInput).addElementToParent($this,identifier,description,value,isReadOnly)
	
	quit element
]]></Implementation>
</Method>

<Method name="addTextInput">
<FormalSpec>identifier:%String,description:%String,value:%String,isReadOnly=0</FormalSpec>
<ReturnType>EF.pageController.inputElements.textInput</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElements.textInput).addElementToParent($this,identifier,description,value,isReadOnly)
	
	quit element
]]></Implementation>
</Method>

<Method name="addEmailInput">
<FormalSpec>identifier:%String,description:%String,value:%String,isReadOnly=0</FormalSpec>
<ReturnType>EF.pageController.inputElements.textInput</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElements.email).addElementToParent($this,identifier,description,value,isReadOnly)
	
	quit element
]]></Implementation>
</Method>

<Method name="addPasswordInput">
<FormalSpec>identifier:%String,description:%String,value:%String,isReadOnly=0</FormalSpec>
<ReturnType>EF.pageController.inputElements.textInput</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElements.password).addElementToParent($this,identifier,description,value,isReadOnly)
	
	quit element
]]></Implementation>
</Method>

<Method name="addTextArea">
<FormalSpec>identifier:%String,description:%String,value:%String,isReadOnly=0</FormalSpec>
<ReturnType>EF.pageController.inputElements.textInput</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElements.textArea).addElementToParent($this,identifier,description,value,isReadOnly)
	
	quit element
]]></Implementation>
</Method>

<Method name="addTextInputWithDisabler">
<FormalSpec>identifier:%String,description:%String,value:%String,isReadOnly=0</FormalSpec>
<ReturnType>EF.pageController.inputElements.textInputWithDisabler</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElements.textInputWithDisabler).addElementToParent($this,identifier,description,value,isReadOnly)
	
	quit element
]]></Implementation>
</Method>

<Method name="addHiddenInput">
<FormalSpec>identifier:%String,description:%String,value:%String,isReadOnly=0</FormalSpec>
<ReturnType>EF.pageController.inputElements.textInput</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElement).addElementToParent($this,identifier,description,value,isReadOnly)
	set element.uiComponent=##class(EF.ui.components.hiddenInput).%New(identifier)	
	return element
]]></Implementation>
</Method>

<Method name="addDropdown">
<FormalSpec>identifier:%String,description:%String,value:%String,isReadOnly=0</FormalSpec>
<ReturnType>EF.pageController.inputElements.dropdown</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElements.dropdown).addElementToParent($this,identifier,description,value,isReadOnly)
	
	quit element
]]></Implementation>
</Method>

<Method name="addSearchableDropdown">
<FormalSpec>identifier:%String,description:%String,value:%String,isReadOnly=0</FormalSpec>
<ReturnType>EF.pageController.inputElement</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElements.searchableDropdown).addElementToParent($this,identifier,description,value,isReadOnly)
	set element.uiComponent=##class(EF.ui.components.backend.searchableDropdown).%New(identifier)
	
	return element
]]></Implementation>
</Method>

<Method name="addToggle">
<FormalSpec>identifier:%String,description:%String,value:%String,isReadOnly=0</FormalSpec>
<ReturnType>EF.pageController.inputElements.radioButtons</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElements.radioButtons).addElementToParent($this,identifier,description,value,isReadOnly)
	do element.addAlternative(0,"Off")
	do element.addAlternative(1,"On")
	quit element
]]></Implementation>
</Method>

<Method name="addDatePicker">
<FormalSpec>identifier:%String,description:%String,value:%String,isReadOnly=0</FormalSpec>
<ReturnType>EF.pageController.inputElements.textInput</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElements.datePicker).addElementToParent($this,identifier,description,value,isReadOnly)

	quit element
]]></Implementation>
</Method>

<Method name="addDateTimePicker">
<FormalSpec>identifier:%String,description:%String,value:%String,isReadOnly=0</FormalSpec>
<ReturnType>EF.pageController.inputElements.textInput</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElements.dateTimePicker).addElementToParent($this,identifier,description,value,isReadOnly)

	quit element
]]></Implementation>
</Method>

<Method name="addTimePicker">
<FormalSpec>identifier:%String,description:%String,value:%String,isReadOnly=0</FormalSpec>
<ReturnType>EF.pageController.inputElements.textInput</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElements.timePicker).addElementToParent($this,identifier,description,value,isReadOnly)

	quit element
]]></Implementation>
</Method>

<Method name="addCheckboxGroup">
<FormalSpec>identifier:%String,description:%String</FormalSpec>
<ReturnType>EF.pageController.containerElements.checkboxGroup</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.containerElements.checkboxGroup).addElementToParent($this,identifier,description)
	
	quit element
]]></Implementation>
</Method>

<Method name="addResponsiveTable">
<FormalSpec>identifier:%String,description:%String=""</FormalSpec>
<ReturnType>EF.pageController.containerElements.panel</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.containerElements.responsiveTable).addElementToParent($this,identifier,description)

	quit element
]]></Implementation>
</Method>

<Method name="addPanel">
<FormalSpec>identifier:%String,description:%String</FormalSpec>
<ReturnType>EF.pageController.containerElements.panel</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.containerElements.panel).addElementToParent($this,identifier,description)

	quit element
]]></Implementation>
</Method>

<Method name="addPanelChart">
<FormalSpec>identifier:%String</FormalSpec>
<ReturnType>EF.pageController.containerElements.panelChart</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.containerElements.panelChart).addElementToParent($this,identifier,"")
	set element.uiComponent=##class(EF.ui.components.backend.chart.panelChart).%New(identifier)
				

	quit element
]]></Implementation>
</Method>

<Method name="addList">
<FormalSpec>identifier:%String,description:%String</FormalSpec>
<ReturnType>EF.pageController.containerElements.list</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.containerElements.list).addElementToParent($this,identifier,description)

	quit element
]]></Implementation>
</Method>

<Method name="addOpenModalAjaxButton">
<FormalSpec>identifier:%String,description:%String,targetURL:%String</FormalSpec>
<ReturnType>EF.pageController.buttons.button</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.buttons.button).addElementToParent($this,identifier,description)
	set element.uiComponent=##class(EF.ui.components.backend.buttonOpenModalAjax).%New(identifier)
	set element.uiComponent.targetURL=targetURL
	set element.uiComponent.label=description
	
	return element
]]></Implementation>
</Method>

<Method name="addModal">
<FormalSpec>identifier:%String,description:%String</FormalSpec>
<ReturnType>EF.pageController.containerElements.modal</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.containerElements.modal).addElementToParent($this,identifier,description)
	
	quit element
]]></Implementation>
</Method>

<Method name="addOpenModalButton">
<FormalSpec>identifier:%String,description:%String</FormalSpec>
<ReturnType>EF.pageController.buttons.openModal</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.buttons.openModal).addElementToParent($this,identifier,description)

	quit element
]]></Implementation>
</Method>

<Method name="addCloseModalButton">
<FormalSpec>identifier:%String,description:%String</FormalSpec>
<ReturnType>EF.pageController.buttons.closeModal</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.buttons.closeModal).addElementToParent($this,identifier,description)

	quit element
]]></Implementation>
</Method>

<Method name="addOpenInFormModalButton">
<Description>
Creates a button that opens a modal defined by baseUrl and contentClass.
When submitted, the page controller will be validated and updated, but it will not run the save method.</Description>
<FormalSpec><![CDATA[identifier:%String,description:%String,baseUrl:%String,contentClass,&modalRequestData]]></FormalSpec>
<ReturnType>EF.pageController.buttons.openInFormModal</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.buttons.openInFormModal).addElementToParent($this,identifier,description)
	do element.setModalContentDefinition(contentClass,baseUrl,.modalRequestData)

	return element
]]></Implementation>
</Method>

<Method name="addTranslateButton">
<Description>
Adds a translation button with warning icon which opens an in-form modal</Description>
<FormalSpec><![CDATA[identifier:%String,description:%String,baseUrl:%String,contentClass:%String,showWarning:%Boolean,title:%String,&modalRequestData]]></FormalSpec>
<ReturnType>EF.pageController.buttons.openInFormModal</ReturnType>
<Implementation><![CDATA[
	set element=..addOpenInFormModalButton(identifier,description,baseUrl,contentClass,.modalRequestData)
	set element.uiComponent.title=title
	do element.uiComponent.addClass("ef-translate-button")
	set warningIcon=##class(EF.ui.components.backend.warningIcon).%New(identifier_"-warning-icon")
	do element.uiComponent.addChild(warningIcon)
	if showWarning {
		do element.uiComponent.addClass("ef-translate-button-show-warning")
	}
	return element
]]></Implementation>
</Method>

<Method name="addModalHeader">
<FormalSpec>identifier:%String,description:%String</FormalSpec>
<ReturnType>EF.pageController.text</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.textElements.modalHeader).addElementToParent($this,identifier,description)

	quit element
]]></Implementation>
</Method>

<Method name="addButton">
<FormalSpec>identifier:%String,description:%String,contentType:%String="text",buttonType:%String="secondary"</FormalSpec>
<ReturnType>EF.pageController.buttons.button</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.buttons.button).addElementToParent($this,identifier,description)
	set element.uiComponent.contentType=contentType
	set element.uiComponent.buttonType=buttonType

	quit element
]]></Implementation>
</Method>

<Method name="addSubmitButton">
<FormalSpec>identifier:%String,description:%String</FormalSpec>
<ReturnType>EF.pageController.buttons.submit</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.buttons.submit).addElementToParent($this,identifier,description)

	quit element
]]></Implementation>
</Method>

<Method name="addSubmitModalButton">
<FormalSpec>identifier:%String,description:%String</FormalSpec>
<ReturnType>EF.pageController.buttons.submit</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.buttons.submit).addElementToParent($this,identifier,description)
	set element.uiComponent=##class(EF.ui.components.backend.buttonSubmitModal).%New(identifier)
	set element.uiComponent.label=description

	quit element
]]></Implementation>
</Method>

<Method name="addDeleteButton">
<FormalSpec>identifier:%String,description:%String,deleteMethod,objectID,confirmationMessage</FormalSpec>
<ReturnType>EF.pageController.buttons.submit</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.buttons.delete).addElementToParent($this,identifier,description)
	set element.deleteMethod=deleteMethod
	set element.objectId=objectID
	set element.uiComponent.confirmationMessage=confirmationMessage

	quit element
]]></Implementation>
</Method>

<Method name="addLinkButton">
<FormalSpec>identifier:%String,description:%String,href:%String</FormalSpec>
<ReturnType>EF.pageController.buttons.button</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.buttons.link).addElementToParent($this,identifier,description)
	set element.uiComponent.href=href

	quit element
]]></Implementation>
</Method>

<Method name="addText">
<FormalSpec>identifier:%String,description:%String</FormalSpec>
<ReturnType>EF.pageController.text</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.text).addElementToParent($this,identifier,description)

	quit element
]]></Implementation>
</Method>

<Method name="addTextAlertInfo">
<FormalSpec>identifier:%String,description:%String</FormalSpec>
<ReturnType>EF.pageController.text</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.textElements.textAlertInfo).addElementToParent($this,identifier,description)

	quit element
]]></Implementation>
</Method>

<Method name="addInputGroup">
<FormalSpec>identifier:%String,description:%String</FormalSpec>
<ReturnType>EF.pageController.containerElements.inputGroup</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.containerElements.inputGroup).addElementToParent($this,identifier,description)
	
	quit element
]]></Implementation>
</Method>

<Method name="addInputGroupNumber">
<FormalSpec>identifier:%String,description:%String</FormalSpec>
<ReturnType>EF.pageController.containerElements.inputGroupNumber</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.containerElements.inputGroupNumber).addElementToParent($this,identifier,description)
	
	quit element
]]></Implementation>
</Method>

<Method name="addGridRemote">
<FormalSpec>identifier:%String,description=""</FormalSpec>
<ReturnType>EF.pageController.containerElements.gridRemote</ReturnType>
<Implementation><![CDATA[	return ##class(EF.pageController.containerElements.gridRemote).addElementToParent($this,identifier,description)
]]></Implementation>
</Method>

<Method name="addDiv">
<FormalSpec>identifier:%String,description=""</FormalSpec>
<ReturnType>EF.pageController.containerElements.div</ReturnType>
<Implementation><![CDATA[	return ##class(EF.pageController.containerElements.div).addElementToParent($this,identifier,description)
]]></Implementation>
</Method>

<Method name="addSpan">
<FormalSpec>identifier:%String,description=""</FormalSpec>
<ReturnType>EF.pageController.containerElements.span</ReturnType>
<Implementation><![CDATA[	return ##class(EF.pageController.containerElements.span).addElementToParent($this,identifier,description)
]]></Implementation>
</Method>

<Method name="addTranslatableTextInput">
<FormalSpec><![CDATA[identifier:%String,label:%String,translatablePhrase:translations.translatablePhrase,translationPageName,translationPageClass,&translationPageRequestData]]></FormalSpec>
<Implementation><![CDATA[
	#dim translation As translations.translation
	if translatablePhrase.hasTranslation() {
		set inputGroup=..addInputGroup(identifier_"-group",label)
		set translations=translatablePhrase.getTranslationsOrderedByLanguageName()
		set title=""
		set key=""
		set hasMissingTranslation=0
		for {
			set translation=translations.GetNext(.key)
			if key="" quit
			if title'="" {
				set title=title_$$$CRLF
			}
			set title=title_translation.languageName_": "_translation.translation
			if '$l(translation.translation) set hasMissingTranslation=1
		}
		set eventNameButton=inputGroup.addTextInput(identifier,"",translatablePhrase.getPhrase())
		set span=inputGroup.addSpan(identifier_"-translate-span")
		do span.uiComponent.addClass("input-group-btn")
		set translateButton=span.addTranslateButton(identifier_"-translate-button","Translate...",translationPageName,translationPageClass,hasMissingTranslation,title,.translationPageRequestData)	
		
	} else {
		set eventNameButton=..addTextInput(identifier,label,translatablePhrase.getPhrase())
	}
	return eventNameButton
]]></Implementation>
</Method>

<Method name="updateUIComponent">
<Implementation><![CDATA[
	
	set key=""
	for {
		set child=..elementChildren.GetNext(.key)
		if key="" quit
		do ..uiComponent.addChild(child.uiComponent)
		
 	}
 	do ##super()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>containerElementDefaultData</DefaultData>
<Data name="containerElementDefaultData">
<Subscript>"containerElement"</Subscript>
<Value name="1">
<Value>dynamicGetContentMethod</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.pageController.containerElementTestCase">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.containerElementTestCase.CLS/EV.3
;vc; Component: CLS.EF.pageController.containerElementTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.containerElementTestCase.CLS/EV.3</td><td>CLS.EF.pageController.containerElementTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63928,62811</TimeChanged>
<TimeCreated>63375,58004.774713</TimeCreated>

<Method name="TestAddChild">
<Implementation><![CDATA[
	set page=##class(EF.pageController.page).%New()
	set page.page=page
	do page.allPageElements.SetAt(page,page.identifier)
	set page.sessionID="testSession"
	set page.isPageReadOnly=1
	set element=##class(EF.pageController.element).%New("test_one","test_desc_one")
	set element.isReadOnly=0
	do page.addChild(element)
	do $$$AssertEquals(element.page.sessionID,page.sessionID)
	do $$$AssertEquals(element.elementParent.sessionID,page.sessionID)
	do $$$AssertTrue(element.isReadOnly)
	set page.isPageReadOnly=0
	set element=##class(EF.pageController.element).%New("test_two","test_desc_two")
	set element.isReadOnly=0
	do page.addChild(element)
	do $$$AssertNotTrue(element.isReadOnly)
	set element=##class(EF.pageController.element).%New("test_three","test_desc_threee")
	set element.isReadOnly=1
	do page.addChild(element)
	do $$$AssertTrue(element.isReadOnly)
	do $$$AssertEquals(page.allPageElements.GetAt("test_one").description,"test_desc_one")
	// Check the child elements are in orger
	set key=""
	do $$$AssertEquals(page.elementChildren.GetNext(.key).description,"test_desc_one")
	do $$$AssertEquals(page.elementChildren.GetNext(.key).description,"test_desc_two")
	do $$$AssertEquals(page.elementChildren.GetNext(.key).description,"test_desc_threee")
	
	// try and add test_two again but directly to the page
	set element2=##class(element).%New("test_two","desc2")
	// check that you can't add an element with the same identifier twice
	try {
		do page.addChild(element)
	} catch {
		set element2=""	
	}
	do $$$AssertNotTrue($IsObject(element2))
]]></Implementation>
</Method>

<Method name="TestaddCheckbox">
<Implementation><![CDATA[
	set page=##class(EF.pageController.page).%New()
	set page.page=page
	do page.allPageElements.SetAt(page,page.identifier)
	set page.isPageReadOnly=0
	set element=page.addCheckbox("test_id","test_desc",1,1)
	do $$$AssertTrue($IsObject(element.uiComponent))
	do $$$AssertTrue(element.%IsA("EF.pageController.inputElements.checkbox"))
	do $$$AssertEquals(element.identifier,"test_id")
	do $$$AssertEquals(element.description,"test_desc")
	do $$$AssertEquals(element.isReadOnly,1)
]]></Implementation>
</Method>

<Method name="TestaddRadioButtons">
<Implementation><![CDATA[
	set page=##class(EF.pageController.page).%New()
	set page.page=page
	do page.allPageElements.SetAt(page,page.identifier)
	set page.isPageReadOnly=0
	set element=page.addRadioButtons("test_id","test_desc",1,1)
	do $$$AssertTrue($IsObject(element.uiComponent))
	do $$$AssertTrue(element.%IsA("EF.pageController.inputElements.radioButtons"))
	do $$$AssertEquals(element.identifier,"test_id")
	do $$$AssertEquals(element.description,"test_desc")
	do $$$AssertEquals(element.isReadOnly,1)
]]></Implementation>
</Method>

<Method name="TestaddIntegerInput">
<Implementation><![CDATA[

	set page=##class(EF.pageController.page).%New()
	set page.page=page
	do page.allPageElements.SetAt(page,page.identifier)
	set page.isPageReadOnly=0
	set element=page.addIntegerInput("test_id","test_desc",1,1)
	do $$$AssertTrue($IsObject(element.uiComponent))
	do $$$AssertTrue(element.%IsA("EF.pageController.inputElements.textInput"))
	do $$$AssertTrue(element.uiComponent.%IsA("EF.ui.components.backend.integerInput"))
	do $$$AssertEquals(element.identifier,"test_id")
	do $$$AssertEquals(element.description,"test_desc")
	do $$$AssertEquals(element.isReadOnly,1)
]]></Implementation>
</Method>

<Method name="TestaddTextInput">
<Implementation><![CDATA[
	set page=##class(EF.pageController.page).%New()
	set page.page=page
	do page.allPageElements.SetAt(page,page.identifier)
	set page.isPageReadOnly=0
	set element=page.addTextInput("test_id","test_desc",1,1)
	do $$$AssertTrue($IsObject(element.uiComponent))
	do $$$AssertTrue(element.%IsA("EF.pageController.inputElements.textInput"))
	do $$$AssertEquals(element.identifier,"test_id")
	do $$$AssertEquals(element.description,"test_desc")
	do $$$AssertEquals(element.isReadOnly,1)
]]></Implementation>
</Method>

<Method name="TestaddTextInputWithDisabler">
<Implementation><![CDATA[
	set page=##class(EF.pageController.page).%New()
	set page.page=page
	do page.allPageElements.SetAt(page,page.identifier)
	set page.isPageReadOnly=0
	set element=page.addTextInputWithDisabler("test_id","test_desc",1,1)
	do $$$AssertTrue($IsObject(element.uiComponent))
	do $$$AssertTrue(element.%IsA("EF.pageController.inputElements.textInputWithDisabler"))
	do $$$AssertEquals(element.identifier,"test_id")
	do $$$AssertEquals(element.description,"test_desc")
	do $$$AssertEquals(element.isReadOnly,1)
]]></Implementation>
</Method>

<Method name="TestaddDropdown">
<Implementation><![CDATA[
	set page=##class(EF.pageController.page).%New()
	set page.page=page
	do page.allPageElements.SetAt(page,page.identifier)
	set page.isPageReadOnly=0
	set element=page.addDropdown("test_id","test_desc",1,1)
	do $$$AssertTrue($IsObject(element.uiComponent))
	do $$$AssertTrue(element.%IsA("EF.pageController.inputElements.dropdown"))
	do $$$AssertEquals(element.identifier,"test_id")
	do $$$AssertEquals(element.description,"test_desc")
	do $$$AssertEquals(element.isReadOnly,1)
]]></Implementation>
</Method>

<Method name="TestaddToggle">
<Implementation><![CDATA[
	set page=##class(EF.pageController.page).%New()
	set page.page=page
	do page.allPageElements.SetAt(page,page.identifier)
	set page.isPageReadOnly=0
	set element=page.addToggle("test_id","test_desc",1,1)
	do $$$AssertTrue($IsObject(element.uiComponent))
	do $$$AssertTrue(element.%IsA("EF.pageController.inputElements.radioButtons"))
	do $$$AssertEquals(element.identifier,"test_id")
	do $$$AssertEquals(element.description,"test_desc")
	do $$$AssertEquals(element.isReadOnly,1)
]]></Implementation>
</Method>

<Method name="TestaddCheckboxGroup">
<Implementation><![CDATA[
	set page=##class(EF.pageController.page).%New()
	set page.page=page
	do page.allPageElements.SetAt(page,page.identifier)
	set page.isPageReadOnly=0
	do page.addCheckboxGroup("checkboxGroup_1_id","checkboxGroup_1_desc")
	
	set checkboxGroup1=page.getElementByIdentifier("checkboxGroup_1_id")
	do $$$AssertEquals(checkboxGroup1.identifier,"checkboxGroup_1_id")
	do $$$AssertEquals(checkboxGroup1.description,"checkboxGroup_1_desc")
	do $$$AssertTrue($IsObject(checkboxGroup1.uiComponent))
	do $$$AssertTrue(checkboxGroup1.%IsA("EF.pageController.containerElements.checkboxGroup"))
]]></Implementation>
</Method>

<Method name="TestaddPanel">
<Implementation><![CDATA[
	set page=##class(EF.pageController.page).%New()
	set page.page=page
	do page.allPageElements.SetAt(page,page.identifier)
	set page.isPageReadOnly=0
	do page.addPanel("panel_1_id","panel_1_desc")
	
	set panel1=page.getElementByIdentifier("panel_1_id")
	do $$$AssertEquals(panel1.identifier,"panel_1_id")
	do $$$AssertEquals(panel1.description,"panel_1_desc")
	do $$$AssertTrue($IsObject(panel1.uiComponent))
	do $$$AssertTrue(panel1.%IsA("EF.pageController.containerElements.panel"))
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.containerElements.cell">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.containerElements.cell.CLS/EV.2
;vc; Component: CLS.EF.pageController.containerElements.cell
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.containerElements.cell.CLS/EV.2</td><td>CLS.EF.pageController.containerElements.cell</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.containerElement</Super>
<TimeChanged>64138,61261</TimeChanged>
<TimeCreated>63384,62874.270447</TimeCreated>

<Property name="alignment">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",left,right,center"/>
</Property>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.container</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.tableCell).%New(..identifier)
]]></Implementation>
</Method>

<Method name="getCellIdentifierFromColumnAndRowIdentifiers">
<ClassMethod>1</ClassMethod>
<FormalSpec>columnIdentifier,rowIdentifier</FormalSpec>
<Implementation><![CDATA[
	set identifier="cell-"_columnIdentifier_"-"_rowIdentifier
	quit identifier
]]></Implementation>
</Method>

<Method name="updateUIComponent">
<Implementation><![CDATA[
	set ..uiComponent.alignment=..alignment
	do ..uiComponent.addText(..description)
	set key=""
	do {
		set element=..elementChildren.GetNext(.key)
		if $IsObject(element) {
		    do ..uiComponent.addChild(element.uiComponent)
		}
 	} While (key '= "")
]]></Implementation>
</Method>

<Method name="addWarning">
<Implementation><![CDATA[
	set warningIcon=##class(EF.ui.components.backend.warningIcon).%New(..identifier_"-warning-icon")
	do ..uiComponent.addChild(warningIcon)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>cellDefaultData</DefaultData>
<Data name="cellDefaultData">
<Subscript>"cell"</Subscript>
<Value name="1">
<Value>alignment</Value>
</Value>
<Value name="2">
<Value>getContentsMethod</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.pageController.containerElements.checkboxGroup">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.containerElements.checkboxGroup.CLS/EV.0
;vc; Component: CLS.EF.pageController.containerElements.checkboxGroup
;vc;  Location: SmallDev
;vc; Date/Time: 15-Jul-14 15:25
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.containerElements.checkboxGroup.CLS/EV.0</td><td>CLS.EF.pageController.containerElements.checkboxGroup</td><td>SmallDev</td><td style='white-space: nowrap;'>15-Jul-14 15:25</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.containerElement</Super>
<TimeChanged>63376,55498</TimeChanged>
<TimeCreated>63372,46990.455151</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.container</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.checkboxGroup).%New(..identifier)
]]></Implementation>
</Method>

<Method name="initialiseUIComponent">
<FormalSpec>uiComponent:EF.ui.components.base</FormalSpec>
<Implementation><![CDATA[
	do ##super(uiComponent)
	set ..uiComponent.label=..description
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[

	set key=""
	do {
		set checkbox=..elementChildren.GetNext(.key)
		if ('$IsObject(checkbox)) continue
	    do ..uiComponent.checkboxes.Insert(checkbox.uiComponent)
 	} While (key '= "")
 	
	do ..uiComponent.render()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.containerElements.column">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.containerElements.column.CLS/EV.0
;vc; Component: CLS.EF.pageController.containerElements.column
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:35
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.containerElements.column.CLS/EV.0</td><td>CLS.EF.pageController.containerElements.column</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:35</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.pageController.containerElement</Super>
<TimeChanged>63392,47491</TimeChanged>
<TimeCreated>63384,58253.825591</TimeCreated>

<Property name="alignment">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",left,right,center"/>
</Property>

<Property name="cells">
<Type>EF.pageController.containerElements.cell</Type>
<Collection>list</Collection>
<Transient>1</Transient>
</Property>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.container</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.tableHeader).%New(..identifier)
]]></Implementation>
</Method>

<Method name="updateUIComponent">
<Implementation><![CDATA[
	set ..uiComponent.alignment=..alignment
	do ..uiComponent.addText(..description)
]]></Implementation>
</Method>

<Method name="geGetProcessedElements">
<Description>
This is a list of all the elements that are returned by the processGetContents method </Description>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[	quit ..cells
]]></Implementation>
</Method>

<Method name="getCellFromRowIdentifier">
<FormalSpec>rowIdentifier</FormalSpec>
<ReturnType>EF.pageController.containerElements.cell</ReturnType>
<Implementation><![CDATA[
	set cellIdentifier=##class(EF.pageController.containerElements.cell).getCellIdentifierFromColumnAndRowIdentifiers(..identifier,rowIdentifier)
	set cell=..page.getElementByIdentifier(cellIdentifier)
	quit cell
]]></Implementation>
</Method>

<Method name="updateCellByRowIdentifier">
<FormalSpec>rowIdentifier,value:%String</FormalSpec>
<ReturnType>EF.pageController.containerElements.cell</ReturnType>
<Implementation><![CDATA[
	set cell=..getCellFromRowIdentifier(rowIdentifier)
	set cell.description=value
	quit cell
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>columnDefaultData</DefaultData>
<Data name="columnDefaultData">
<Subscript>"column"</Subscript>
<Value name="1">
<Value>alignment</Value>
</Value>
<Value name="2">
<Value>cells</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.pageController.containerElements.div">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.containerElements.div.CLS/EV.0
;vc; Component: CLS.EF.pageController.containerElements.div
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.containerElements.div.CLS/EV.0</td><td>CLS.EF.pageController.containerElements.div</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.containerElement</Super>
<TimeChanged>63769,36847</TimeChanged>
<TimeCreated>63769,36846.57598</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.div</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.div).%New(..identifier)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.containerElements.gridRemote">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.containerElements.gridRemote.CLS/EV.0
;vc; Component: CLS.EF.pageController.containerElements.gridRemote
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.containerElements.gridRemote.CLS/EV.0</td><td>CLS.EF.pageController.containerElements.gridRemote</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.containerElement</Super>
<TimeChanged>63757,35753</TimeChanged>
<TimeCreated>63750,38783.919434</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.container</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.grid.gridRemote).%New(..identifier)
]]></Implementation>
</Method>

<Method name="makeDraggable">
<FormalSpec>saveElementIdentifier</FormalSpec>
<Implementation><![CDATA[
	do ..addHiddenInput(saveElementIdentifier,"","",) 
	do ..uiComponent.makeDraggable(saveElementIdentifier)
]]></Implementation>
</Method>

<Method name="updateUIComponent">
<Implementation><![CDATA[
	set ..uiComponent.columnDefinitionURL="pageControllerGridColumnsJSON.csp?pageControllerID="_..page.%Id()
	set ..uiComponent.dataURL="pageControllerGridDataJSON.csp?pageControllerID="_..page.%Id()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.containerElements.inputGroup">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.containerElements.inputGroup.CLS/EV.1
;vc; Component: CLS.EF.pageController.containerElements.inputGroup
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 15:24
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.containerElements.inputGroup.CLS/EV.1</td><td>CLS.EF.pageController.containerElements.inputGroup</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 15:24</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.pageController.containerElement</Super>
<TimeChanged>63971,55461.805096</TimeChanged>
<TimeCreated>63407,65951.360399</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.backend.inputGroup</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.inputGroup).%New(..identifier)
]]></Implementation>
</Method>

<Method name="initialiseUIComponent">
<FormalSpec>uiComponent:EF.ui.components.base</FormalSpec>
<Implementation><![CDATA[
	do ##super(uiComponent)
	set ..uiComponent.label=..description
]]></Implementation>
</Method>

<Method name="addCaption">
<FormalSpec>identifier:%String,description:%String</FormalSpec>
<ReturnType>EF.pageController.text</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.textElements.caption).addElementToParent($this,identifier,description)

	quit element
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.containerElements.inputGroupNumber">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.containerElements.inputGroupNumber.CLS/EV.0
;vc; Component: CLS.EF.pageController.containerElements.inputGroupNumber
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:37
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.containerElements.inputGroupNumber.CLS/EV.0</td><td>CLS.EF.pageController.containerElements.inputGroupNumber</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:37</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.pageController.containerElements.inputGroup</Super>
<TimeChanged>63407,66049</TimeChanged>
<TimeCreated>63407,66003.113702</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.backend.inputGroupNumber</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.inputGroupNumber).%New(..identifier)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.containerElements.list">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.containerElements.list.CLS/EV.0
;vc; Component: CLS.EF.pageController.containerElements.list
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:37
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.containerElements.list.CLS/EV.0</td><td>CLS.EF.pageController.containerElements.list</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:37</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.pageController.containerElement</Super>
<TimeChanged>63410,38714</TimeChanged>
<TimeCreated>63405,37938.676216</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.container</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.list).%New(..identifier)
]]></Implementation>
</Method>

<Method name="initialiseUIComponent">
<FormalSpec>uiComponent:EF.ui.components.base</FormalSpec>
<Implementation><![CDATA[
	do ##super(uiComponent)
	set ..uiComponent.label=..description
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.containerElements.modal">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.containerElements.modal.CLS/EV.1
;vc; Component: CLS.EF.pageController.containerElements.modal
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:37
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.containerElements.modal.CLS/EV.1</td><td>CLS.EF.pageController.containerElements.modal</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:37</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.pageController.containerElements.panel</Super>
<TimeChanged>63411,37088</TimeChanged>
<TimeCreated>63383,45432.731519</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.container</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.modal).%New(..identifier)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>modalDefaultData</DefaultData>
<Data name="modalDefaultData">
<Subscript>"modal"</Subscript>
<Value name="1">
<Value>footer</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.pageController.containerElements.modalFooter">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.containerElements.modalFooter.CLS/EV.0
;vc; Component: CLS.EF.pageController.containerElements.modalFooter
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:35
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.containerElements.modalFooter.CLS/EV.0</td><td>CLS.EF.pageController.containerElements.modalFooter</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:35</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.pageController.containerElement</Super>
<TimeChanged>63383,65434</TimeChanged>
<TimeCreated>63383,65434.247732</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.container</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.modalFooter).%New(..identifier)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.containerElements.modalRemote">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.containerElements.modalRemote.CLS/EV.0
;vc; Component: CLS.EF.pageController.containerElements.modalRemote
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:37
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.containerElements.modalRemote.CLS/EV.0</td><td>CLS.EF.pageController.containerElements.modalRemote</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:37</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.pageController.containerElement</Super>
<TimeChanged>63406,60767</TimeChanged>
<TimeCreated>63406,60754.154655</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.container</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.modalRemote).%New(..identifier)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.containerElements.panel">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.containerElements.panel.CLS/EV.1
;vc; Component: CLS.EF.pageController.containerElements.panel
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:37
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.containerElements.panel.CLS/EV.1</td><td>CLS.EF.pageController.containerElements.panel</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:37</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.pageController.containerElement</Super>
<TimeChanged>63411,39003</TimeChanged>
<TimeCreated>63372,47064.603748</TimeCreated>

<Method name="getErrorDisplayElement">
<Implementation><![CDATA[	quit $this
]]></Implementation>
</Method>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.container</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.panel).%New(..identifier)
]]></Implementation>
</Method>

<Method name="updateErrorMessage">
<FormalSpec>errorMessage</FormalSpec>
<Implementation><![CDATA[	set ..uiComponent.errorMessage=errorMessage
]]></Implementation>
</Method>

<Method name="initialiseUIComponent">
<FormalSpec>uiComponent:EF.ui.components.base</FormalSpec>
<Implementation><![CDATA[
	do ##super(uiComponent)
	set ..uiComponent.heading=..description
]]></Implementation>
</Method>

<Method name="updateUIComponent">
<Implementation><![CDATA[
	do ##super()
	set key=""
	for  {
		set errorMessage=..errorMessages.GetNext(.key)
		if key="" quit
		do ..uiComponent.addErrorMessage(errorMessage)
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.containerElements.panelChart">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.containerElements.panelChart.CLS/EV.0
;vc; Component: CLS.EF.pageController.containerElements.panelChart
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.containerElements.panelChart.CLS/EV.0</td><td>CLS.EF.pageController.containerElements.panelChart</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.pageController.containerElements.panel</Super>
<TimeChanged>63846,43203</TimeChanged>
<TimeCreated>63834,31827.407118</TimeCreated>

<Method name="addChart">
<FormalSpec>identifier:%String,chartType:%String</FormalSpec>
<ReturnType>EF.ui.components.backend.chart.chart</ReturnType>
<Implementation><![CDATA[
	set chart=..uiComponent.addChart(chartType,identifier)
	return chart
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.containerElements.radioGroup">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.containerElements.radioGroup.CLS/EV.0
;vc; Component: CLS.EF.pageController.containerElements.radioGroup
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.containerElements.radioGroup.CLS/EV.0</td><td>CLS.EF.pageController.containerElements.radioGroup</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.containerElement</Super>
<TimeChanged>63944,53753</TimeChanged>
<TimeCreated>63930,58690.742001</TimeCreated>

<Property name="description">
<Type>%String</Type>
</Property>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.container</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.radioGroup).%New(..identifier)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.containerElements.responsiveTable">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.containerElements.responsiveTable.CLS/EV.2
;vc; Component: CLS.EF.pageController.containerElements.responsiveTable
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.containerElements.responsiveTable.CLS/EV.2</td><td>CLS.EF.pageController.containerElements.responsiveTable</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.containerElement</Super>
<TimeChanged>64112,31469</TimeChanged>
<TimeCreated>63384,58201.263214</TimeCreated>

<Property name="columns">
<Type>EF.pageController.containerElements.column</Type>
<Collection>list</Collection>
<Transient>1</Transient>
</Property>

<Property name="rows">
<Type>EF.pageController.containerElements.row</Type>
<Collection>list</Collection>
<Transient>1</Transient>
</Property>

<Property name="hasRowHeaders">
<Type>%Boolean</Type>
<Transient>1</Transient>
</Property>

<Property name="addNewRowMethod">
<Type>%String</Type>
<Transient>1</Transient>
</Property>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.container</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.responsiveTable).%New(..identifier)
]]></Implementation>
</Method>

<Method name="getNewRow">
<Implementation><![CDATA[	quit $method($this.page,..addNewRowMethod)
]]></Implementation>
</Method>

<Method name="addColumn">
<FormalSpec>identifier:%String,header:%String="",alignment=""</FormalSpec>
<ReturnType>EF.pageController.containerElements.column</ReturnType>
<Implementation><![CDATA[
	set column=##class(EF.pageController.containerElements.column).addElementToParent($this,identifier,header)
	set column.alignment=alignment
	do ..columns.Insert(column)
	quit column
]]></Implementation>
</Method>

<Method name="addRow">
<FormalSpec>identifier:%String,header:%String=""</FormalSpec>
<ReturnType>EF.pageController.containerElements.row</ReturnType>
<Implementation><![CDATA[
	set row=##class(EF.pageController.containerElements.row).addElementToParent($this,identifier,header)
	if $l(header) {
		set ..hasRowHeaders=1	
	}
	do ..rows.Insert(row)
	quit row
]]></Implementation>
</Method>

<Method name="makeReorderable">
<FormalSpec>targetElementIdentifier:%String=""</FormalSpec>
<Implementation><![CDATA[
	do ..uiComponent.addClass("ef-admin-reorderable-table")
	do ..uiComponent.addAttribute("data-reorderable-hidden-element",targetElementIdentifier)
	do ..addHiddenInput("ef-category-display-order","","")
]]></Implementation>
</Method>

<Method name="createCells">
<Implementation><![CDATA[
	set rowKey=""
	for {
		set row=..rows.GetNext(.rowKey)
		if rowKey="" quit
		if $IsObject(row) {
			set columnKey=""
			for {
				set column=..columns.GetNext(.columnKey)
				if columnKey="" quit
				if $IsObject(row) {
				    do row.addCell(column,"")
				}
			}
		}
 	}
]]></Implementation>
</Method>

<Method name="addCellByIdentifiers">
<FormalSpec>rowIdentifier:%String,columnIdentifier:%String,value:%String</FormalSpec>
<ReturnType>EF.pageController.containerElements.cell</ReturnType>
<Implementation><![CDATA[
	set row=..page.getElementByIdentifier(rowIdentifier)
	set column=..page.getElementByIdentifier(columnIdentifier)
	set cell=row.addCell(column, value)
	quit cell
]]></Implementation>
</Method>

<Method name="updateUIComponent">
<Implementation><![CDATA[
	if ..hasRowHeaders {
		set emptyCell=##class(EF.ui.components.backend.tableHeader).%New()
		do ..uiComponent.headerRow.cells.Insert(emptyCell)
	}
	set key=""
	for {
		set column=..columns.GetNext(.key)
		if key="" quit
		if $IsObject(column) {
		    do ..uiComponent.headerRow.cells.Insert(column.uiComponent)
		}
 	}
 	
 	set key=""
	for {
		set childElement=..elementChildren.GetNext(.key)
		if key="" quit
		if $IsObject(childElement) {
			if childElement.%IsA("EF.pageController.containerElements.row") {
		    	do ..uiComponent.rows.Insert(childElement.uiComponent)
			}
		}
 	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.containerElements.row">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.containerElements.row.CLS/EV.1
;vc; Component: CLS.EF.pageController.containerElements.row
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:37
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.containerElements.row.CLS/EV.1</td><td>CLS.EF.pageController.containerElements.row</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:37</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.pageController.containerElement</Super>
<TimeChanged>63406,48079</TimeChanged>
<TimeCreated>63384,58550.363121</TimeCreated>

<Property name="cells">
<Type>EF.pageController.containerElements.cell</Type>
<Collection>list</Collection>
<Transient>1</Transient>
</Property>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.container</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.tableRow).%New(..identifier)
]]></Implementation>
</Method>

<Method name="addCell">
<FormalSpec>column:EF.pageController.containerElements.column,description:%String</FormalSpec>
<Implementation><![CDATA[
	set identifier=##class(EF.pageController.containerElements.cell).getCellIdentifierFromColumnAndRowIdentifiers(column.identifier,..identifier)
	set cell=##class(EF.pageController.containerElements.cell).addElementToParent($this,identifier,description)
	set cell.alignment=column.alignment
	do column.cells.Insert(cell)
	do ..cells.Insert(cell)
	quit cell
]]></Implementation>
</Method>

<Method name="addCellByColumnIdentifier">
<FormalSpec>columnIdentifier:%String,description:%String</FormalSpec>
<Implementation><![CDATA[
	set column=..page.getElementByIdentifier(columnIdentifier)
	quit ..addCell(column,description)
]]></Implementation>
</Method>

<Method name="updateUIComponent">
<Implementation><![CDATA[
 	do ##super()
 	
	if ..elementParent.hasRowHeaders {
		set rowHeader=##class(EF.ui.components.backend.tableHeader).%New()
		do rowHeader.addText(..description)
		set rowHeader.alignment="right"
		do ..uiComponent.cells.Insert(rowHeader)
	}
	set key=""
	for {
		set childElement=..elementChildren.GetNext(.key)
		if key="" quit
		if $IsObject(childElement) {
			if childElement.%IsA("EF.pageController.containerElements.cell") {
			    do ..uiComponent.cells.Insert(childElement.uiComponent)
			}
		}
 	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.containerElements.span">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.containerElements.span.CLS/EV.0
;vc; Component: CLS.EF.pageController.containerElements.span
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.containerElements.span.CLS/EV.0</td><td>CLS.EF.pageController.containerElements.span</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.containerElement</Super>
<TimeChanged>64118,56893</TimeChanged>
<TimeCreated>63769,36846.57598</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.span</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.span).%New(..identifier)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.element">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.element.CLS/EV.8
;vc; Component: CLS.EF.pageController.element
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.element.CLS/EV.8</td><td>CLS.EF.pageController.element</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<IncludeCode>EF.common.macros</IncludeCode>
<Super>%Library.Persistent,shared.timeStamp</Super>
<TimeChanged>64119,55972</TimeChanged>
<TimeCreated>63350,63749.535929</TimeCreated>

<Property name="elementParent">
<Type>EF.pageController.element</Type>
</Property>

<Property name="elementChildren">
<Type>EF.pageController.element</Type>
<Collection>list</Collection>
</Property>

<Property name="page">
<Type>EF.pageController.page</Type>
</Property>

<Property name="identifier">
<Description>
The description of the property. Should be unique for each pageInstance</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="250"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="description">
<Type>%String</Type>
<Parameter name="MAXLEN" value="32767"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="isReadOnly">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="uiComponent">
<Type>EF.ui.components.base</Type>
<Transient>1</Transient>
</Property>

<Property name="errorMessages">
<Type>%Library.String</Type>
<Collection>list</Collection>
<Parameter name="MAXLEN" value="32767"/>
</Property>

<Property name="objectId">
<Type>%String</Type>
</Property>

<Property name="enableDisableDependencyList">
<Type>EF.ui.components.dependencyList</Type>
<Transient>1</Transient>
</Property>

<Property name="showHideDependencyList">
<Type>EF.ui.components.dependencyList</Type>
<Transient>1</Transient>
</Property>

<Property name="isModalTempData">
<Description>
Anything marked with isModalTempData set will be cleared down when a modal is re-opened</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Index name="identifierIndex">
<Properties>identifier</Properties>
</Index>

<Method name="%OnNew">
<FormalSpec>identifier:%String,description:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	If ($DATA(identifier)) {
		Set ..identifier=identifier
	}
	if $DATA(description) {
		set ..description=description
	}
	do ..createUIComponent()
	do ..initialiseUIComponent(..getDefaultUIComponent())
	
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="delete">
<FormalSpec>removeFromParent=1</FormalSpec>
<Implementation><![CDATA[
	
	set key=""
	do {
    	set childElement=..elementChildren.GetNext(.key)
    	if ($IsObject(childElement)) {
        	do childElement.delete(0)
    	}
 	} While (key '= "")
 	set elementID=..%Id()
 	if (removeFromParent)&&($IsObject(..elementParent)) {
	 	do ..elementParent.%Reload()
		set childKey=..elementParent.elementChildren.FindObjectId(elementID,"")
		if childKey {
			do ..elementParent.elementChildren.RemoveAt(childKey)
			do ..elementParent.%Save()
		}	
 	}
    do ..%DeleteId(elementID)
    
 	quit
]]></Implementation>
</Method>

<Method name="addChild">
<FormalSpec>element:EF.pageController.element</FormalSpec>
<Implementation><![CDATA[
	if ..page.getElementByIdentifier(element.identifier) {
		throw ##class(shared.exceptions.generalException).%New("Element identifier must be unique for page")
	}
	set element.page=..page
	if ..page.isPageReadOnly {
		set element.isReadOnly=1	
	}
	do ..elementChildren.Insert(element)
	set element.elementParent=$this
	do ..page.allPageElements.SetAt(element,element.identifier)
]]></Implementation>
</Method>

<Method name="updateAllPageElements">
<Implementation><![CDATA[
	do ..page.allPageElements.SetAt($this,..identifier)
	set key=""
	for {
		set child=..elementChildren.GetNext(.key)
		if key="" quit
		do child.updateAllPageElements()	
	}
]]></Implementation>
</Method>

<Method name="reloadUIComponent">
<Implementation><![CDATA[	do ..initialiseUIComponent(..getDefaultUIComponent())
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[	do ..uiComponent.render()
]]></Implementation>
</Method>

<Method name="renderStart">
<Implementation><![CDATA[	do ..uiComponent.renderStart()
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[	do ..uiComponent.renderEnd()
]]></Implementation>
</Method>

<Method name="initialiseUIComponent">
<FormalSpec>uiComponent:EF.ui.components.base</FormalSpec>
<Implementation><![CDATA[	set ..uiComponent=uiComponent
]]></Implementation>
</Method>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.base</ReturnType>
<Implementation><![CDATA[
	set htmlIdentifier="ef_control_"_..identifier
	quit ##class(EF.ui.components.base).%New(htmlIdentifier)
]]></Implementation>
</Method>

<Method name="addElementToParent">
<ClassMethod>1</ClassMethod>
<FormalSpec>parent:EF.pageController.element,identifier:%String,description:%String</FormalSpec>
<ReturnType>EF.pageController.element</ReturnType>
<Implementation><![CDATA[
	if parent.page.isReload {
		set element=parent.page.getElementByIdentifier(identifier)
	} else {
		set element=..%New(identifier,description)
		do parent.addChild(element)
	}
	
	if $IsObject(parent.enableDisableDependencyList) {
		set element.enableDisableDependencyList=parent.enableDisableDependencyList	
	}	
	
	quit element
]]></Implementation>
</Method>

<Method name="getAuditDescription">
<Implementation><![CDATA[
	set auditDescription=..description
	if $IsObject(..elementParent) {
		set parentDescription=..elementParent.getAuditDescription()
		if $l(parentDescription) set auditDescription=parentDescription_" - "_auditDescription
	}
	quit auditDescription
]]></Implementation>
</Method>

<Method name="createUIComponent">
</Method>

<Method name="updateUIComponent">
<Implementation><![CDATA[
	if $IsObject(..enableDisableDependencyList) {
		set ..uiComponent.enableDisableDependencyList=..enableDisableDependencyList	
	}
	if $IsObject(..showHideDependencyList) {
		set ..uiComponent.showHideDependencyList=..showHideDependencyList	
	}
	if ..errorMessages.Count() {
		set ..uiComponent.hasError=1
	}
]]></Implementation>
</Method>

<Method name="validateElement">
<Implementation><![CDATA[
	do ..errorMessages.Clear()
	set key=""
	for {
		set elementChild=..elementChildren.GetNext(.key)
		if key="" quit
		do elementChild.validateElement()
 	}
 	if ..isUpdated() {
	 	do ..validateValue()
 	}
]]></Implementation>
</Method>

<Method name="updateErrorMessages">
<Implementation><![CDATA[
	set key=""
	for {
		set elementChild=..elementChildren.GetNext(.key)
		if key="" quit
		do elementChild.updateErrorMessages()
 	}
 	if $IsObject(..elementParent) {
	 	if ..errorMessages.Count() {
		 	set key=""
		 	for {
			 	set errorMessage=..errorMessages.GetNext(.key)
			 	if key="" quit
			 	do ..elementParent.errorMessages.Insert(errorMessage)
		 	}
		}
 	}
]]></Implementation>
</Method>

<Method name="validateValue">
<Implementation><![CDATA[	quit
]]></Implementation>
</Method>

<Method name="isUpdated">
<Implementation><![CDATA[	quit 0
]]></Implementation>
</Method>

<Method name="updateValueFromRequest">
</Method>

<Method name="getEventID">
<Implementation><![CDATA[	quit ..page.objEvent.%Id()
]]></Implementation>
</Method>

<Method name="setErrorMessage">
<FormalSpec>errorMessage:%String</FormalSpec>
<Implementation><![CDATA[
	
	do ..errorMessages.Insert(..getDescriptionForError(errorMessage))
	set ..page.hasError=1
]]></Implementation>
</Method>

<Method name="getDescriptionForError">
<FormalSpec>errorMessage:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ..getBaseErrorMessage()_errorMessage_"."
]]></Implementation>
</Method>

<Method name="createContextData">
<ReturnType>EF.contextData</ReturnType>
<Implementation><![CDATA[
	set contextData = ##class(EF.contextData).%New()	
	set contextData.eventID=..getEventID()
	
	Do contextData.setControllerID()
	
	set contextData.languageID=$$$efEnglishLangID
	set contextData.auditPersonID=..xCRuserID
	
	set contextData.sessionID=..page.sessionID
	return contextData
]]></Implementation>
</Method>

<Method name="getRequestData">
<FormalSpec>name:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ..page.requestData.GetAt(name)
]]></Implementation>
</Method>

<Method name="clearAllPageControllerData">
<Description>
Should be run if any of the sub-classes are deleted</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	kill ^EF.pageController.elementD,^EF.pageController.elementI
]]></Implementation>
</Method>

<Method name="getBaseErrorMessage">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return "The changes can't be saved because "
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^EF.pageController.elementD</DataLocation>
<DefaultData>elementDefaultData</DefaultData>
<IdLocation>^EF.pageController.elementD</IdLocation>
<IndexLocation>^EF.pageController.elementI</IndexLocation>
<StreamLocation>^EF.pageController.elementS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="elementDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>elementParent</Value>
</Value>
<Value name="3">
<Value>elementChildren</Value>
</Value>
<Value name="4">
<Value>page</Value>
</Value>
<Value name="5">
<Value>identifier</Value>
</Value>
<Value name="6">
<Value>value</Value>
</Value>
<Value name="7">
<Value>description</Value>
</Value>
<Value name="8">
<Value>isReadOnly</Value>
</Value>
<Value name="9">
<Value>errorMessage</Value>
</Value>
<Value name="10">
<Value>errorDisplayElement</Value>
</Value>
<Value name="11">
<Value>xCRstamp</Value>
</Value>
<Value name="12">
<Value>xCRuserID</Value>
</Value>
<Value name="13">
<Value>xMOstamp</Value>
</Value>
<Value name="14">
<Value>xMOuserID</Value>
</Value>
<Value name="15">
<Value>objectID</Value>
</Value>
<Value name="16">
<Value>objectId</Value>
</Value>
<Value name="17">
<Value>dependsOnElement</Value>
</Value>
<Value name="18">
<Value>dependsOnValue</Value>
</Value>
<Value name="19">
<Value>showDependsOnElement</Value>
</Value>
<Value name="20">
<Value>showDependsOnValue</Value>
</Value>
<Value name="21">
<Value>errorMessages</Value>
</Value>
<Value name="22">
<Value>isModalTempData</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.pageController.elementTestCase">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.elementTestCase.CLS/EV.1
;vc; Component: CLS.EF.pageController.elementTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.elementTestCase.CLS/EV.1</td><td>CLS.EF.pageController.elementTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63410,34620</TimeChanged>
<TimeCreated>63375,57389.037511</TimeCreated>

<Method name="TestOnNew">
<Implementation><![CDATA[
	set identifier="TestId"
	set description="TestDesc"
	set element=##class(element).%New(identifier,description)
	do $$$AssertEquals(element.identifier,identifier)
	do $$$AssertEquals(element.description,description)
	do $$$AssertTrue(element.isReadOnly)
]]></Implementation>
</Method>

<Method name="Testreload">
<Implementation><![CDATA[
	set element=##class(element).%New("TestId","TestDesc")
	set element.uiComponent=##class(EF.ui.components.container).%New()
	do element.reloadUIComponent()
	/// Check that the uiComponent has reverted back to the default
	do $$$AssertTrue($IsObject(element.uiComponent))
	do $$$AssertTrue(element.uiComponent.%IsA("EF.ui.components.base"))
	do $$$AssertNotTrue(element.uiComponent.%IsA("EF.ui.components.container"))
]]></Implementation>
</Method>

<Method name="TestinitialiseUIComponent">
<Implementation><![CDATA[
	set element=##class(element).%New("TestId","TestDesc")
	set continer=##class(EF.ui.components.container).%New()
	do element.initialiseUIComponent(continer)
	do $$$AssertTrue($IsObject(element.uiComponent))
	do $$$AssertTrue(element.uiComponent.%IsA("EF.ui.components.container"))
]]></Implementation>
</Method>

<Method name="TestgetDefaultUIComponent">
<Implementation><![CDATA[
	set element=##class(element).%New("TestId","TestDesc")
	set uiComponent=element.getDefaultUIComponent()
	do $$$AssertTrue($IsObject(uiComponent))
	do $$$AssertTrue(uiComponent.%IsA("EF.ui.components.base"))
]]></Implementation>
</Method>

<Method name="TestgetAuditDescription">
<Implementation><![CDATA[
	set element1=##class(EF.pageController.element).%New("element1","desc1")
	set element2=##class(EF.pageController.element).%New("element2","desc2")
	set element3=##class(EF.pageController.element).%New("element3","desc3")
	set element3.elementParent=element2
	set element2.elementParent=element1
	do $$$AssertEquals(element1.getAuditDescription(),"desc1")
	do $$$AssertEquals(element2.getAuditDescription(),"desc1 - desc2")
	do $$$AssertEquals(element3.getAuditDescription(),"desc1 - desc2 - desc3")
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.inputElement">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.inputElement.CLS/EV.6
;vc; Component: CLS.EF.pageController.inputElement
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 15:24
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.inputElement.CLS/EV.6</td><td>CLS.EF.pageController.inputElement</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 15:24</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.pageController.element</Super>
<TimeChanged>63972,62174.827199</TimeChanged>
<TimeCreated>63355,54431.887717</TimeCreated>

<Property name="originalValue">
<Description>
This is the current value from the database</Description>
<Type>%String</Type>
<Transient>1</Transient>
<Parameter name="MAXLEN" value="32000"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="value">
<Type>%String</Type>
<Parameter name="MAXLEN" value="32000"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="isReadOnly">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="uiComponent">
<Type>EF.ui.components.inputBase</Type>
<Transient>1</Transient>
</Property>

<Method name="%OnNew">
<FormalSpec>identifier:%String,description:%String,value:%String,isReadOnly=0</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	If ($DATA(identifier)) {
		Set ..identifier=identifier
	}
	if $DATA(description) {
		set ..description=description
	}
	if $DATA(value) {
		set ..value=value
		set ..originalValue=value
	}
	set ..isReadOnly=isReadOnly
	do ..initialiseUIComponent(..getDefaultUIComponent())
	
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="reload">
<FormalSpec>originalValue,isReadOnly=0</FormalSpec>
<Implementation><![CDATA[
	set ..originalValue=originalValue
	if isReadOnly {
		set ..isReadOnly=isReadOnly
	}	
	do ..initialiseUIComponent(..getDefaultUIComponent())
	quit
]]></Implementation>
</Method>

<Method name="addElementToParent">
<ClassMethod>1</ClassMethod>
<FormalSpec>parent:EF.pageController.element,identifier:%String,description:%String,value:%String,isReadOnly=0</FormalSpec>
<ReturnType>EF.pageController.inputElement</ReturnType>
<Implementation><![CDATA[
	if parent.page.isReload {
		set element=parent.page.getElementByIdentifier(identifier)
		do element.reload(value,isReadOnly)
	} else {
		set element=..%New(identifier,description,value,isReadOnly)
		do parent.addChild(element)
	}
	// Copy dependencies to child
	if $IsObject(parent.enableDisableDependencyList) {
		set element.enableDisableDependencyList=parent.enableDisableDependencyList	
	}
	
	quit element
]]></Implementation>
</Method>

<Method name="initialiseUIComponent">
<FormalSpec>uiComponent:EF.ui.components.inputBase</FormalSpec>
<Implementation><![CDATA[
	do ##super(uiComponent)
	set ..uiComponent.label=..description
	if (..isReadOnly) {
		set ..uiComponent.isDisabled=1	
	}
	if $l(..description) {
		do ..setNameForValidationError(""""_$p(..description,":",1)_"""")
	} elseif $l(..elementParent.description) {
		do ..setNameForValidationError(""""_$p(..elementParent.description,":",1)_"""")
	}
]]></Implementation>
</Method>

<Method name="setNameForValidationError">
<FormalSpec>name</FormalSpec>
<Implementation><![CDATA[	set ..uiComponent.validator.fieldName=name
]]></Implementation>
</Method>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.inputBase</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.inputBase).%New(..identifier)
]]></Implementation>
</Method>

<Method name="isUpdated">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set out=0
	if ..isReadOnly {
		set out=0
	} elseif ..value'=..originalValue {
		set out=1
	}
	
	quit out
]]></Implementation>
</Method>

<Method name="updateValue">
<FormalSpec>value</FormalSpec>
<Implementation><![CDATA[	set ..value=value
]]></Implementation>
</Method>

<Method name="getValueFromRequest">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit %request.Get(..uiComponent.htmlName)
]]></Implementation>
</Method>

<Method name="updateValueFromRequest">
<Implementation><![CDATA[
	if ..isReadOnly return
	
	if $IsObject(..enableDisableDependencyList) {
		if '..enableDisableDependencyList.isActiveFromRequest() {
			return	
		}
	}
	
	do ..updateValue(..getValueFromRequest())
]]></Implementation>
</Method>

<Method name="updateUIComponent">
<Implementation><![CDATA[
	set ..uiComponent.value=..value
	set key=""
	for {
		set child=..elementChildren.GetNext(.key)
		if key="" quit
		do ..uiComponent.addChild(child.uiComponent)
		
 	}
 	do ##super()
]]></Implementation>
</Method>

<Method name="resetValue">
<Implementation><![CDATA[	set ..value=..originalValue
]]></Implementation>
</Method>

<Method name="validateValue">
<Implementation><![CDATA[
	set isValid=..uiComponent.validator.isInputValid(..value)	
	
	if 'isValid {
		do ..setErrorMessage(..uiComponent.validator.getErrorMessage())
	}
]]></Implementation>
</Method>

<Method name="auditLine">
<Implementation><![CDATA[
	set auditLine="'"_..getAuditDescription()_"' updated from: '"_..originalValue_"', to: '"_..value_"'"
	if ..page.isSystemPage() {
		do ##class(setup.objEventAudit).add(..xCRuserID,,auditLine)
	} else {
		do ##class(setup.objEventAudit).add(..xCRuserID,..getEventID(),auditLine)
	}
]]></Implementation>
</Method>

<Method name="setIsMandatory">
<FormalSpec>isMandatory:%Boolean</FormalSpec>
<Implementation><![CDATA[	set ..uiComponent.validator.isMandatory=isMandatory
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>inputElementDefaultData</DefaultData>
<Data name="inputElementDefaultData">
<Subscript>"inputElement"</Subscript>
<Value name="1">
<Value>uiComponent</Value>
</Value>
<Value name="2">
<Value>originalValue</Value>
</Value>
<Value name="3">
<Value>dependsOnElement</Value>
</Value>
<Value name="4">
<Value>dependsOnValue</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.pageController.inputElementTestCase">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.inputElementTestCase.CLS/EV.4
;vc; Component: CLS.EF.pageController.inputElementTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 25-Feb-16 17:42
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.inputElementTestCase.CLS/EV.4</td><td>CLS.EF.pageController.inputElementTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Feb-16 17:42</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63973,63783.071086</TimeChanged>
<TimeCreated>63375,57345.883827</TimeCreated>

<Method name="TestReload">
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElement).%New("test_id","test_desc","initialValue")
	do $$$AssertEquals(element.originalValue,"initialValue")
	do $$$AssertEquals(element.value,"initialValue")
	do element.reload("newValue")
	do $$$AssertEquals(element.originalValue,"newValue")
	do $$$AssertEquals(element.value,"initialValue")
	set element.isReadOnly=0
	// A reload can change from not read-only to read-only
	do element.reload("newValue",1)
	do $$$AssertTrue(element.isReadOnly)
	// A reload cannot change from read-only to not read-only
	do element.reload("newValue",0)
	do $$$AssertTrue(element.isReadOnly)
]]></Implementation>
</Method>

<Method name="TesIsUpdated">
<Implementation><![CDATA[
	set element=##class(inputElement).%New("TestId","TestDesc")
	set element.isReadOnly=0
	do $$$AssertNotTrue(element.isUpdated())
	set element.originalValue="a"
	set element.value="a"
	do $$$AssertNotTrue(element.isUpdated())
	set element.value="b"
	do $$$AssertTrue(element.isUpdated())
	set element.isReadOnly=1
	do $$$AssertNotTrue(element.isUpdated())
	
	quit
]]></Implementation>
</Method>

<Method name="TestupdateValue">
<FormalSpec>value</FormalSpec>
<Implementation><![CDATA[
	set element=##class(inputElement).%New("TestId","TestDesc")
	do element.updateValue("a")
	do $$$AssertEquals(element.value,"a")
	do element.updateValue(77)
	do $$$AssertEquals(element.value,77)
]]></Implementation>
</Method>

<Method name="TestaddElementToParent">
<Implementation><![CDATA[
	set page=##class(EF.pageController.page).%New()
	set page.page=page
	do page.allPageElements.SetAt(page,page.identifier)
	set page.isPageReadOnly=0
	do ##class(EF.pageController.inputElement).addElementToParent(page,"textInput_1_id","textInput_1_desc",1)
	
	set textInput1=page.getElementByIdentifier("textInput_1_id")
	do $$$AssertEquals(textInput1.identifier,"textInput_1_id")
	do $$$AssertEquals(textInput1.description,"textInput_1_desc")
	do $$$AssertEquals(textInput1.value,1)
	do $$$AssertEquals(textInput1.originalValue,1)
	do $$$AssertNotTrue(textInput1.isReadOnly)
	do $$$AssertTrue($IsObject(textInput1.uiComponent))
	do $$$AssertTrue(textInput1.%IsA("EF.pageController.inputElement"))
	set textInput2=##class(EF.pageController.inputElement).addElementToParent(page,"textInput_2_id","textInput_2_desc",1,0)
	do $$$AssertNotTrue(textInput2.isReadOnly)
	set textInput3=##class(EF.pageController.inputElement).addElementToParent(page,"textInput_3_id","textInput_3_desc",1,1)
	do $$$AssertTrue(textInput3.isReadOnly)
	
	
	set page.isReload=1
	do page.addTextInput("textInput_1_id","textInput_1_desc","")
	set textInput1=page.getElementByIdentifier("textInput_1_id")
	do $$$AssertEquals(textInput1.originalValue,"")
	do $$$AssertEquals(textInput1.value,1)
	
	// You should be able to update a non read-only textInput to read-only
	do page.addTextInput("textInput_2_id","textInput_2_desc","",1)
	set textInput2=page.getElementByIdentifier("textInput_2_id")
	do $$$AssertTrue(textInput2.isReadOnly)
	
	// You should NOT be able to update a readonly textInput to not read-only
	do page.addTextInput("textInput_3_id","textInput_3_desc","",0)
	set textInput3=page.getElementByIdentifier("textInput_3_id")
	do $$$AssertTrue(textInput3.isReadOnly)
]]></Implementation>
</Method>

<Method name="TestinitialiseUIComponent">
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElement).%New("test_id","test_desc","initialValue")
	set element.isReadOnly=0
	set uiComponent=##class(EF.ui.components.inputBase).%New("test")
	do element.initialiseUIComponent(uiComponent)
	do $$$AssertTrue(element.uiComponent.%IsA("EF.ui.components.inputBase"))
	do $$$AssertEquals(element.uiComponent.label,"test_desc")
	do $$$AssertNotTrue(element.uiComponent.isDisabled)
	set element.isReadOnly=1
	set uiComponent=##class(EF.ui.components.inputBase).%New("test")
	do element.initialiseUIComponent(uiComponent)
	do $$$AssertTrue(element.uiComponent.isDisabled)
]]></Implementation>
</Method>

<Method name="TestgetDefaultUIComponent">
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElement).%New("test_id","test_desc","initialValue")
	do $$$AssertTrue(element.getDefaultUIComponent().%IsA("EF.ui.components.inputBase"))
]]></Implementation>
</Method>

<Method name="TestupdateUIComponent">
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElement).%New("test_id","test_desc","initialValue")
	set element.uiComponent=##class(EF.ui.components.inputBase).%New("test")
	do $$$AssertEquals(element.uiComponent.value,"")
	set element.value=12
	do element.updateUIComponent()
	do $$$AssertEquals(element.uiComponent.value,12)
]]></Implementation>
</Method>

<Method name="TestresetValue">
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElement).%New("test_id","test_desc","initialValue")
	do element.resetValue()
	do $$$AssertEquals(element.originalValue,"initialValue")
	do $$$AssertEquals(element.value,"initialValue")
	set element.value="newValue"
	do $$$AssertEquals(element.originalValue,"initialValue")
	do $$$AssertEquals(element.value,"newValue")
	do element.resetValue()
	do $$$AssertEquals(element.originalValue,"initialValue")
	do $$$AssertEquals(element.value,"initialValue")
]]></Implementation>
</Method>

<Method name="TestsetErrorMessage">
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElement).%New("test_id","test_desc","initialValue")
	set page=##class(EF.pageController.page).%New("test_id","test_desc")
	set element.page=page
	do $$$AssertEquals(element.errorMessages.Count(),0)
	do $$$AssertNotTrue(element.page.hasError)
	do element.setErrorMessage("TestError")
	do $$$AssertNotEquals(element.errorMessages.GetNext(""),"")
	do $$$AssertTrue(element.page.hasError)
]]></Implementation>
</Method>

<Method name="TestvalidateValue">
<Implementation><![CDATA[
	set element=##class(EF.pageController.inputElement).%New("test_id","test_desc","initialValue")
	set page=##class(EF.pageController.page).%New("test_id","test_desc")
	set element.page=page
	set uiComponent=##class(EF.ui.components.checkbox).%New("test")
	set element.uiComponent=uiComponent
	set element.value=1
	do element.validateValue()
	do $$$AssertEquals(element.errorMessages.Count(),0)
	set element.value="badinput"
	do element.validateValue()
	do $$$AssertNotEquals(element.errorMessages.Count(),0)
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.inputElements.checkbox">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.inputElements.checkbox.CLS/EV.2
;vc; Component: CLS.EF.pageController.inputElements.checkbox
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.inputElements.checkbox.CLS/EV.2</td><td>CLS.EF.pageController.inputElements.checkbox</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.inputElement</Super>
<TimeChanged>63950,33893</TimeChanged>
<TimeCreated>63372,44893.197087</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.backend.checkbox</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.checkbox).%New(..identifier)
]]></Implementation>
</Method>

<Method name="addDependentList">
<FormalSpec>identifier:%String</FormalSpec>
<ReturnType>EF.pageController.containerElements.list</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.containerElements.list).addElementToParent($this,identifier,"")
	set element.enableDisableDependencyList=##class(EF.ui.components.dependencyList).createNew(..identifier,1)
	quit element
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.inputElements.datePicker">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.inputElements.datePicker.CLS/EV.0
;vc; Component: CLS.EF.pageController.inputElements.datePicker
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:35
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.inputElements.datePicker.CLS/EV.0</td><td>CLS.EF.pageController.inputElements.datePicker</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:35</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.pageController.inputElements.textInput</Super>
<TimeChanged>63386,48300</TimeChanged>
<TimeCreated>63384,38321.657735</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.inputBase</ReturnType>
<Implementation><![CDATA[
	set uiElement=##class(EF.ui.components.backend.datePicker).%New(..identifier)
	set uiElement.validator.dateFormat=##class(shared.dateFunctions).getBackendInputDateFormat()
	quit uiElement
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.inputElements.dateTimePicker">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.inputElements.dateTimePicker.CLS/EV.0
;vc; Component: CLS.EF.pageController.inputElements.dateTimePicker
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.inputElements.dateTimePicker.CLS/EV.0</td><td>CLS.EF.pageController.inputElements.dateTimePicker</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.inputElements.textInput</Super>
<TimeChanged>63893,62445</TimeChanged>
<TimeCreated>63384,38321.657735</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.inputBase</ReturnType>
<Implementation><![CDATA[
	set uiElement=##class(EF.ui.components.backend.dateTimePicker).%New(..identifier)
	set uiElement.validator.dateFormat=##class(shared.dateFunctions).getBackendInputDateFormat()
	set uiElement.validator.timeFormat=##class(shared.timeFunctions).getBackendInputTimeFormat()
	quit uiElement
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.inputElements.dropdown">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.inputElements.dropdown.CLS/EV.1
;vc; Component: CLS.EF.pageController.inputElements.dropdown
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.inputElements.dropdown.CLS/EV.1</td><td>CLS.EF.pageController.inputElements.dropdown</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.pageController.inputElement</Super>
<TimeChanged>63833,64639</TimeChanged>
<TimeCreated>63372,45515.842308</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.backend.checkbox</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.dropdown).%New(..identifier)
]]></Implementation>
</Method>

<Method name="addAlternative">
<FormalSpec>value,description,isDefault=0</FormalSpec>
<ReturnType>EF.ui.components.alternative</ReturnType>
<Implementation><![CDATA[	return ..uiComponent.addAlternative(value,description,isDefault)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.inputElements.email">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.inputElements.email.CLS/EV.0
;vc; Component: CLS.EF.pageController.inputElements.email
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.inputElements.email.CLS/EV.0</td><td>CLS.EF.pageController.inputElements.email</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.inputElement</Super>
<TimeChanged>63889,44675</TimeChanged>
<TimeCreated>63883,61012.042899</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.inputBase</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.emailInput).%New(..identifier)
]]></Implementation>
</Method>

<Method name="updateValue">
<FormalSpec>value</FormalSpec>
<Implementation><![CDATA[	set ..value=$ZSTRIP(value,"<>W")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.inputElements.integerInput">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.inputElements.integerInput.CLS/EV.1
;vc; Component: CLS.EF.pageController.inputElements.integerInput
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.inputElements.integerInput.CLS/EV.1</td><td>CLS.EF.pageController.inputElements.integerInput</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.inputElements.textInput</Super>
<TimeChanged>63946,60598</TimeChanged>
<TimeCreated>63372,46750.527582</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.inputBase</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.integerInput).%New(..identifier)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.inputElements.numericInput">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.inputElements.numericInput.CLS/EV.0
;vc; Component: CLS.EF.pageController.inputElements.numericInput
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.inputElements.numericInput.CLS/EV.0</td><td>CLS.EF.pageController.inputElements.numericInput</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.inputElements.textInput</Super>
<TimeChanged>63939,36894</TimeChanged>
<TimeCreated>63939,36505.690987</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.inputBase</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.numericInput).%New(..identifier)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.inputElements.password">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.inputElements.password.CLS/EV.0
;vc; Component: CLS.EF.pageController.inputElements.password
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.inputElements.password.CLS/EV.0</td><td>CLS.EF.pageController.inputElements.password</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.inputElement</Super>
<TimeChanged>63889,45218</TimeChanged>
<TimeCreated>63372,45621.828558</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.inputBase</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.passwordInput).%New(..identifier)
]]></Implementation>
</Method>

<Method name="updateValue">
<FormalSpec>value</FormalSpec>
<Implementation><![CDATA[
	do ##super(value)
	set ..value=$ZSTRIP(..value,"<>W")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.inputElements.radio">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.inputElements.radio.CLS/EV.0
;vc; Component: CLS.EF.pageController.inputElements.radio
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.inputElements.radio.CLS/EV.0</td><td>CLS.EF.pageController.inputElements.radio</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.inputElement</Super>
<TimeChanged>63950,41133</TimeChanged>
<TimeCreated>63930,58950.501087</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.radio</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.radio).%New(..identifier)
]]></Implementation>
</Method>

<Method name="addDependentList">
<FormalSpec>identifier:%String</FormalSpec>
<ReturnType>EF.pageController.containerElements.list</ReturnType>
<Implementation><![CDATA[
	set element=##class(EF.pageController.containerElements.list).addElementToParent($this,identifier,"")
	set element.enableDisableDependencyList=##class(EF.ui.components.dependencyList).createNew(..uiComponent.htmlName,..identifier)
	quit element
]]></Implementation>
</Method>

<Method name="getValueFromRequest">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if (%request.Get(..uiComponent.htmlName)=..identifier) return 1
	return 0
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>

<Method name="updateUIComponent">
<Implementation><![CDATA[
 	do ##super()
	set ..uiComponent.value=..identifier
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.inputElements.radioButtons">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.inputElements.radioButtons.CLS/EV.1
;vc; Component: CLS.EF.pageController.inputElements.radioButtons
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.inputElements.radioButtons.CLS/EV.1</td><td>CLS.EF.pageController.inputElements.radioButtons</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.inputElement</Super>
<TimeChanged>63901,40453</TimeChanged>
<TimeCreated>63372,45558.523978</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.inputBase</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.radioButtons).%New(..identifier)
]]></Implementation>
</Method>

<Method name="addAlternative">
<FormalSpec>value,description,isDefault=0</FormalSpec>
<ReturnType>EF.ui.components.alternative</ReturnType>
<Implementation><![CDATA[	return ..uiComponent.addAlternative(value,description,isDefault)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.inputElements.searchableDropdown">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.inputElements.searchableDropdown.CLS/EV.0
;vc; Component: CLS.EF.pageController.inputElements.searchableDropdown
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.inputElements.searchableDropdown.CLS/EV.0</td><td>CLS.EF.pageController.inputElements.searchableDropdown</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.pageController.inputElement</Super>
<TimeChanged>63846,34736</TimeChanged>
<TimeCreated>63834,32075.80672</TimeCreated>

<Property name="dataSource">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>searchableDropdownDefaultData</DefaultData>
<Data name="searchableDropdownDefaultData">
<Subscript>"searchableDropdown"</Subscript>
<Value name="1">
<Value>dataSource</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.pageController.inputElements.textArea">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.inputElements.textArea.CLS/EV.0
;vc; Component: CLS.EF.pageController.inputElements.textArea
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.inputElements.textArea.CLS/EV.0</td><td>CLS.EF.pageController.inputElements.textArea</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.pageController.inputElement</Super>
<TimeChanged>63403,59818</TimeChanged>
<TimeCreated>63403,57168.063256</TimeCreated>

<Property name="class">
<Type>%String</Type>
<InitialExpression>"form-control"</InitialExpression>
</Property>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.inputBase</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.textArea).%New(..identifier)
]]></Implementation>
</Method>

<Method name="updateValue">
<FormalSpec>value</FormalSpec>
<Implementation><![CDATA[	set ..value=$ZSTRIP(value,"<>W")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>textAreaDefaultData</DefaultData>
<Data name="textAreaDefaultData">
<Structure>listnode</Structure>
<Subscript>"textArea"</Subscript>
<Value name="1">
<Value>class</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.pageController.inputElements.textInput">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.inputElements.textInput.CLS/EV.1
;vc; Component: CLS.EF.pageController.inputElements.textInput
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.inputElements.textInput.CLS/EV.1</td><td>CLS.EF.pageController.inputElements.textInput</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.pageController.inputElement</Super>
<TimeChanged>63404,67501</TimeChanged>
<TimeCreated>63372,45621.828558</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.inputBase</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.textInput).%New(..identifier)
]]></Implementation>
</Method>

<Method name="updateValue">
<FormalSpec>value</FormalSpec>
<Implementation><![CDATA[	set ..value=$ZSTRIP(value,"<>W")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.inputElements.textInputWithDisabler">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.inputElements.textInputWithDisabler.CLS/EV.0
;vc; Component: CLS.EF.pageController.inputElements.textInputWithDisabler
;vc;  Location: SmallDev
;vc; Date/Time: 15-Jul-14 15:25
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.inputElements.textInputWithDisabler.CLS/EV.0</td><td>CLS.EF.pageController.inputElements.textInputWithDisabler</td><td>SmallDev</td><td style='white-space: nowrap;'>15-Jul-14 15:25</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.inputElements.textInput</Super>
<TimeChanged>63372,46611</TimeChanged>
<TimeCreated>63372,46528.993031</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.inputBase</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.textInputCheckboxDisables).%New(..identifier)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.inputElements.timePicker">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.inputElements.timePicker.CLS/EV.0
;vc; Component: CLS.EF.pageController.inputElements.timePicker
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.inputElements.timePicker.CLS/EV.0</td><td>CLS.EF.pageController.inputElements.timePicker</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.inputElements.textInput</Super>
<TimeChanged>63896,63812</TimeChanged>
<TimeCreated>63384,38321.657735</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.inputBase</ReturnType>
<Implementation><![CDATA[
	set uiElement=##class(EF.ui.components.backend.timePicker).%New(..identifier)
	set uiElement.validator.timeFormat=##class(shared.timeFunctions).getBackendInputTimeFormat()
	quit uiElement
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.javascriptMethods">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.javascriptMethods.CLS/EV.4
;vc; Component: CLS.EF.pageController.javascriptMethods
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.javascriptMethods.CLS/EV.4</td><td>CLS.EF.pageController.javascriptMethods</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63936,60017</TimeChanged>
<TimeCreated>63392,46074.885123</TimeCreated>

<Method name="outputMainJS">
<ClassMethod>1</ClassMethod>
<FormalSpec>pageController:EF.pageController.page</FormalSpec>
<Implementation><![CDATA[
	set formID=##class(EF.pages.backendGen4.standard).#efFormID
	&html<<script language="javascript">
		function efDeleteButtonClicked(buttonId,confirmationMessage) {
			if (confirm(confirmationMessage) == true) {
				$("#efDeleteButtonIdentifier").val(buttonId);
				$("##(formID)#").submit();
			}
		}
		function efSubmitButtonClicked(buttonId) {
			$("#efSubmitButtonIdentifier").val(buttonId);
			$("##(formID)#").submit();
		}
		function efGetElement(elementIdentifier) {
			$.ajax({
		        url: '#(##class(shared.pCSP).Link("pageControllerGetElement.csp"))#',
		        type: "POST",
		        data: {pageControllerID: "#(pageController.%Id())#", elementIdentifier: elementIdentifier},
		        dataType: 'json',
		        success: function (data) {
		            data.updatedElements.forEach(function(element) {
			           $('#'+element.htmlID).replaceWith(element.contents);
		            });
		        }
		    });
		}
		#[do ..renderJSForElements(pageController)]#
		$(function() {
			if ($(".ef-modal-with-error").length > 0) {
				var errorPanel = $(".ef-modal-with-error").first();
				errorPanel.modal('show');
			} else if ($(".ef-panel-with-error").length > 0) {
				var errorPanel = $(".ef-panel-with-error").first();
				ef.admin.scrollElementIntoView(errorPanel);
			}
			#[do ..renderInitialiseSaveButtonJS(pageController)]#
			#[do ..outputGetElement(pageController)]#
		});
	</script>
	>
]]></Implementation>
</Method>

<Method name="renderInitialiseSaveButtonJS">
<ClassMethod>1</ClassMethod>
<FormalSpec>pageController:EF.pageController.page</FormalSpec>
<Implementation><![CDATA[
	if pageController.isAnyElementUpdated() {
		&js<
			activateSaveButton();
		>
	}
]]></Implementation>
</Method>

<Method name="renderJSForElements">
<ClassMethod>1</ClassMethod>
<FormalSpec>pageController:EF.pageController.page</FormalSpec>
<Implementation><![CDATA[
	set key=""
	for {
		set element=pageController.allPageElements.GetNext(.key)
		if key="" quit
		if $IsObject(element.uiComponent) {
			do element.uiComponent.renderJS()
		}
	}
]]></Implementation>
</Method>

<Method name="outputGetElement">
<ClassMethod>1</ClassMethod>
<FormalSpec>pageController:EF.pageController.page</FormalSpec>
<Implementation><![CDATA[
	set key=""
	for {
		set element=pageController.allAJAXPageElements.GetNext(.key)
		if key="" quit
		if $IsObject(element) {
			set elementIdentifier=element.identifier
			&js<
				efGetElement('#(elementIdentifier)#');
			>
		}
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.page">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.page.CLS/EV.14
;vc; Component: CLS.EF.pageController.page
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.page.CLS/EV.14</td><td>CLS.EF.pageController.page</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.containerElement</Super>
<TimeChanged>64177,28337.607697</TimeChanged>
<TimeCreated>63350,62788.509584</TimeCreated>

<Property name="sessionID">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="250"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="objEvent">
<Type>setup.objEvent</Type>
</Property>

<Property name="identifier">
<Type>%String</Type>
<InitialExpression>"page_controller"</InitialExpression>
<Required>1</Required>
</Property>

<Parameter name="returnPage">
</Parameter>

<Property name="allPageElements">
<Type>EF.pageController.element</Type>
<Collection>array</Collection>
<Transient>1</Transient>
</Property>

<Property name="hasError">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="isPageReadOnly">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="isReload">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Transient>1</Transient>
</Property>

<Property name="submitButtonClickedIdentifier">
<Type>%String</Type>
<Transient>1</Transient>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="allAJAXPageElements">
<Type>EF.pageController.element</Type>
<Collection>array</Collection>
<Transient>1</Transient>
</Property>

<Property name="contextData">
<Type>EF.contextData</Type>
<Transient>1</Transient>
</Property>

<Property name="warningMessages">
<Type>%String</Type>
<Transient>1</Transient>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Property name="isSettingsPageModal">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="requestData">
<Type>%ArrayOfDataTypes</Type>
</Property>

<Property name="eventConfiguration">
<Type>setup.eventConfiguration</Type>
<Transient>1</Transient>
</Property>

<Parameter name="isSystemPage">
<Default>0</Default>
</Parameter>

<Parameter name="useAutomaticAudit">
<Default>1</Default>
</Parameter>

<Index name="sessionIDIndex">
<Properties>sessionID</Properties>
</Index>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[contextData:EF.contextData,&arrayOfRequestData:%String,clearDown=1,eventConfiguration:setup.eventConfiguration]]></FormalSpec>
<ReturnType>EF.pageController.page</ReturnType>
<Implementation><![CDATA[
	set pageController=..%New()
	set pageController.sessionID=contextData.sessionID
	if (pageController.isSystemPage() = 0)&&(contextData.eventID) {
		do pageController.objEventSetObjectId(contextData.eventID)
	}
	do pageController.createRequestData(.arrayOfRequestData)
	set pageController.contextData = contextData
	set pageController.page=pageController
	do pageController.allPageElements.SetAt(pageController,pageController.identifier)
	if clearDown {
		do pageController.clearDownOld()
		do pageController.deleteForCurrentSession()
	}
	do pageController.%Save()
	if $D(eventConfiguration) {
		set pageController.eventConfiguration=eventConfiguration	
	}
	do pageController.load()
	return pageController
]]></Implementation>
</Method>

<Method name="getEventConfiguration">
<Implementation><![CDATA[
	if '$IsObject(..eventConfiguration) {
		do ..loadEventConfiguration()
	} 
	return ..eventConfiguration
]]></Implementation>
</Method>

<Method name="loadEventConfiguration">
<Implementation><![CDATA[	set ..eventConfiguration=##class(setup.eventConfiguration).createForEventID(..getEventID())
]]></Implementation>
</Method>

<Method name="open">
<ClassMethod>1</ClassMethod>
<FormalSpec>pageControllerID,contextData:EF.contextData</FormalSpec>
<ReturnType>EF.pageController.page</ReturnType>
<Implementation><![CDATA[
	set pageController=##class(EF.pageController.page).%OpenId(pageControllerID)
	do pageController.%Reload()
	if (pageController.sessionID'=contextData.sessionID) {
		throw ##class(shared.exceptions.generalException).%New("Invalid session for page")	
	}
	if (pageController.isSystemPage() = 0) {
		if (pageController.objEvent.%Id() '= contextData.eventID) {
			throw ##class(shared.exceptions.generalException).%New("Invalid event for page")	
		}
	}
	set pageController.contextData = contextData
	do pageController.updateAllPageElements()
	do pageController.reloadUIComponents()
	set pageController.isReload=1
	do pageController.load()
	quit pageController
]]></Implementation>
</Method>

<Method name="createRequestData">
<FormalSpec><![CDATA[&arrayOfRequestData:%String]]></FormalSpec>
<Implementation><![CDATA[
	set name=""
	for {
		set name=$O(arrayOfRequestData(name))
		if name="" quit
		set value=$G(arrayOfRequestData(name))
		do ..requestData.SetAt(value,name)	
	}
]]></Implementation>
</Method>

<Method name="load">
<Implementation><![CDATA[
	do ..loadData()
	do ..updateUIComponents()
]]></Implementation>
</Method>

<Method name="save">
<Implementation><![CDATA[
	if '(..isPageReadOnly) {
		do ..saveData()
		do ..saveInFormModals()
		if ..#useAutomaticAudit {
			do ..auditChanges()
		}
	}
]]></Implementation>
</Method>

<Method name="saveInFormModals">
<Implementation><![CDATA[
	set key=""
	for {
		set element=..allPageElements.GetNext(.key)
		if key="" quit
		if ($IsObject(element))&&(element.%IsA("EF.pageController.buttons.openInFormModal")) {
			do element.modalContents.save()
		}
 	}
]]></Implementation>
</Method>

<Method name="isSystemPage">
<Implementation><![CDATA[	return ..#isSystemPage
]]></Implementation>
</Method>

<Method name="saveData">
<Implementation><![CDATA[	throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>

<Method name="processDelete">
<FormalSpec>deleteButtonIdentifier</FormalSpec>
<Implementation><![CDATA[
	set deleteButton=..getElementByIdentifier(deleteButtonIdentifier)
	set deleteMethod=deleteButton.deleteMethod
	do $Method($this,deleteMethod,deleteButton)
]]></Implementation>
</Method>

<Method name="auditChanges">
<Implementation><![CDATA[
	set key=""
	do {
		set element=..allPageElements.GetNext(.key)
		if ('$IsObject(element)) continue
	    if element.isUpdated() {
		 	do element.auditLine()   
	    }
 	} While (key '= "")
]]></Implementation>
</Method>

<Method name="clearDownOld">
<Description>
Clear down all data from more than 2 days old</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>daysToKeep=2</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	set query="SELECT ID FROM EF_pageController.page WHERE xCRstamp < DATEADD(dd,?,CURRENT_TIMESTAMP)"
	do rs.Prepare(query)
	do rs.Execute(-daysToKeep)
	while rs.Next()	{
		set pageController=##class(EF.pageController.page).%OpenId(rs.Get("ID"),,.sc)
		if 'sc {
			throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)	
		}
		do pageController.delete()
	}
]]></Implementation>
</Method>

<Method name="deleteForCurrentSession">
<Description>
Deletes old data with the same sessionID and loadingClass</Description>
<Implementation><![CDATA[
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	Set tableName=##class(EF.utils.classes).getFullTableRefFromFullClassName(..%ClassName(1))
	set query="SELECT ID FROM "_##class(EF.encoders.sql).encodeTableName(tableName)_" WHERE (sessionID = ?)"
	do rs.Prepare(query)
	do rs.Execute(..sessionID)
	while rs.Next()	{
		set pageController=##class(EF.pageController.page).%OpenId(rs.Get("ID"))
		do pageController.delete()
	}
]]></Implementation>
</Method>

<Method name="clearDownModalTempData">
<Description>
Clears down elements with isModalTempData = 1 before loading the page</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pageControllerID</FormalSpec>
<Implementation><![CDATA[
	set query="SELECT ID FROM EF_pageController.element WHERE page = ? AND isModalTempData = 1"
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare(query)
	do rs.Execute(pageControllerID)
	while rs.Next()	{
		set element=##class(EF.pageController.element).%OpenId(rs.Get("ID"),,.sc)
		if $IsObject(element) {
			do element.delete()
		}
	}
]]></Implementation>
</Method>

<Method name="removeModalTempDataFlagForPage">
<ClassMethod>1</ClassMethod>
<FormalSpec>pageControllerID</FormalSpec>
<Implementation><![CDATA[
	&SQL(UPDATE EF_pageController.element 
		SET isModalTempData=0
		WHERE page = :pageControllerID AND isModalTempData = 1
	)
]]></Implementation>
</Method>

<Method name="canUpdate">
<Description>
Checks whether we are allowed to update this data set</Description>
<FormalSpec>sessionID</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set ok=0
	set (userID,function)=""
	&SQL(SELECT xCRUserID,function INTO :tmp,:tmp2 FROM pageClasses.objPageDataPageDetails
		WHERE sessionID = :sessionID
		AND loadingClass=:loadingClass
		AND ID = :pageDataPageDetailsID
	)
	if +SQLCODE=0 {
		set ok=1
		set userID=tmp,function=tmp2
	}
	if $l(function) {
		if '##class(access.objFunction).hasFunctionByAccessID(userID,function) {	
			set ok=0
		}
	}
	quit ok
]]></Implementation>
</Method>

<Method name="getElementByIdentifier">
<FormalSpec>identifier</FormalSpec>
<ReturnType>EF.pageController.element</ReturnType>
<Implementation><![CDATA[
	set element=..allPageElements.GetAt(identifier)	
 	quit element
]]></Implementation>
</Method>

<Method name="renderHTMLControlFromTag">
<FormalSpec><![CDATA[&attrs]]></FormalSpec>
<Implementation><![CDATA[
	set identifier=$G(attrs("identifier"))
	set element=..getElementByIdentifier(identifier)
	if $IsObject(element) {
		do element.render()
	} elseif $Get(attrs("prowebcomponentname"))'="" {
		do ##class(EF.pages.frontend.base).outputProwebListRowsExperimental(attrs("prowebcomponentname"), 122589) // #################
	}
	quit
]]></Implementation>
</Method>

<Method name="renderContainerStartFromTag">
<FormalSpec><![CDATA[&attrs]]></FormalSpec>
<Implementation><![CDATA[
	set uiComponent=..getUIComponentFromTag(.attrs)
	if $IsObject(uiComponent) {
		do uiComponent.renderStart()
	}
	quit
]]></Implementation>
</Method>

<Method name="renderContainerEndFromTag">
<FormalSpec><![CDATA[&attrs]]></FormalSpec>
<Implementation><![CDATA[
	set uiComponent=..getUIComponentFromTag(.attrs)
	if $IsObject(uiComponent) {
		do uiComponent.renderEnd()
	}
	quit
]]></Implementation>
</Method>

<Method name="getUIComponentFromTag">
<FormalSpec><![CDATA[&attrs]]></FormalSpec>
<ReturnType>EF.ui.components.base</ReturnType>
<Implementation><![CDATA[
	set identifier=$G(attrs("identifier"))
	set type=$G(attrs("type"))
	set uiComponent=""
	if $l(identifier) {
		set element=..getElementByIdentifier(identifier)
		if $IsObject(element) {
			set uiComponent=element.uiComponent
		}
	} elseif $l(type) {
		set uiComponent=$CASE(type,
			"column":..getUIComponentColumnFromTag(.attrs),
			"well":..getUIComponentWellFromTag(.attrs),
			"row":..getUIComponentRowFromTag(.attrs),
			"modal-body":..getUIComponentModalBodyFromTag(.attrs),
			"panel-body":..getUIComponentPanelBodyFromTag(.attrs),
			"modal-footer":..getUIComponentModalFooterFromTag(.attrs),
			:""
		)
	}
	quit uiComponent
]]></Implementation>
</Method>

<Method name="getUIComponentModalBodyFromTag">
<FormalSpec><![CDATA[&attrs]]></FormalSpec>
<ReturnType>EF.ui.components.backend.well</ReturnType>
<Implementation><![CDATA[
	set uiComponent=##class(EF.ui.components.backend.modalBody).%New()
	
	quit uiComponent
]]></Implementation>
</Method>

<Method name="getUIComponentPanelBodyFromTag">
<FormalSpec><![CDATA[&attrs]]></FormalSpec>
<ReturnType>EF.ui.components.backend.well</ReturnType>
<Implementation><![CDATA[
	set uiComponent=##class(EF.ui.components.backend.panelBody).%New()
	
	quit uiComponent
]]></Implementation>
</Method>

<Method name="getUIComponentModalFooterFromTag">
<FormalSpec><![CDATA[&attrs]]></FormalSpec>
<ReturnType>EF.ui.components.backend.well</ReturnType>
<Implementation><![CDATA[
	set uiComponent=##class(EF.ui.components.backend.modalFooter).%New()
	
	quit uiComponent
]]></Implementation>
</Method>

<Method name="getUIComponentWellFromTag">
<FormalSpec><![CDATA[&attrs]]></FormalSpec>
<ReturnType>EF.ui.components.backend.well</ReturnType>
<Implementation><![CDATA[
	set width=$G(attrs("width"))
	set uiComponent=##class(EF.ui.components.backend.well).%New()
	if width {
		set uiComponent.width=width
	}
	quit uiComponent
]]></Implementation>
</Method>

<Method name="getUIComponentColumnFromTag">
<FormalSpec><![CDATA[&attrs]]></FormalSpec>
<ReturnType>EF.ui.components.backend.well</ReturnType>
<Implementation><![CDATA[
	set width=$G(attrs("width"))
	set uiComponent=##class(EF.ui.components.backend.column).%New()
	if width {
		set uiComponent.width=width
	}
	quit uiComponent
]]></Implementation>
</Method>

<Method name="getUIComponentRowFromTag">
<FormalSpec><![CDATA[&attrs]]></FormalSpec>
<ReturnType>EF.ui.components.backend.well</ReturnType>
<Implementation><![CDATA[
	set uiComponent=##class(EF.ui.components.backend.row).%New()
	quit uiComponent
]]></Implementation>
</Method>

<Method name="showElementFromTag">
<FormalSpec><![CDATA[&attrs]]></FormalSpec>
<Implementation><![CDATA[
	set show=0
	set type=$G(attrs("type"))
	if $l(type) {
		set show=1
	} else {
		set identifier=$G(attrs("identifier"))
		set element=..getElementByIdentifier(identifier)
		if $IsObject(element) {
			set show=1
		}
	}
	quit show
]]></Implementation>
</Method>

<Method name="reloadUIComponents">
<Implementation><![CDATA[
	set key=""
	for {
		set element=..allPageElements.GetNext(.key)
		if key="" quit
		if '$IsObject(element.uiComponent) {
			do element.reloadUIComponent()
		}
 	}
]]></Implementation>
</Method>

<Method name="updateUIComponents">
<Implementation><![CDATA[
	set key=""
	for {
		set element=..allPageElements.GetNext(.key)
		if key="" quit
	    do element.updateUIComponent()
 	}
]]></Implementation>
</Method>

<Method name="updateUIComponent">
<Implementation><![CDATA[	quit
]]></Implementation>
</Method>

<Method name="updateFromRequest">
<Implementation><![CDATA[
	set key=""
	do {
		set element=..allPageElements.GetNext(.key)
		if ('$IsObject(element)) continue
	    do element.updateValueFromRequest()
 	} While (key '= "")
]]></Implementation>
</Method>

<Method name="validatePage">
<Implementation><![CDATA[
	set ..hasError=0
	do ..validateElement()
	if '..hasError {
	 	do ..validate()
	}
 	do ..updateErrorMessages()
]]></Implementation>
</Method>

<Method name="isAnyElementUpdated">
<Implementation><![CDATA[
	set isUpdated=0
	set key=""
	for {
		set element=..allPageElements.GetNext(.key)
		if key="" quit
		if element.isUpdated() {
			set isUpdated=1	
		}
 	}	
 	quit isUpdated
]]></Implementation>
</Method>

<Method name="existsByIdentifier">
<FormalSpec>identifier</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set out=0
	set element=..getElementByIdentifier(identifier)
	if $IsObject(element) {
		set out=1
	}
	quit out
]]></Implementation>
</Method>

<Method name="isUpdatedByIdentifier">
<FormalSpec>identifier</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set isUpdated=0
	set element=..getElementByIdentifier(identifier)
	if $IsObject(element) {
		set isUpdated=element.isUpdated()
	}
	quit isUpdated
]]></Implementation>
</Method>

<Method name="getValueByIdentifier">
<FormalSpec>identifier</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set element=..getElementByIdentifier(identifier)
	if '$IsObject(element) throw ##class(shared.exceptions.generalException).%New("identifier does not exist")
	quit element.value
]]></Implementation>
</Method>

<Method name="getErrorDisplayElement">
<ReturnType>EF.pageController.element</ReturnType>
<Implementation><![CDATA[
	set key=""
	for {
		set element=..elementChildren.GetNext(.key)
		if key="" quit
		if element.%IsA("EF.pageController.containerElements.panel") {
			return element	
		}
 	}
 	return $this
]]></Implementation>
</Method>

<Method name="addErrorMessagesToElement">
<FormalSpec>elementIdentifier:%String,listOfErrors:%ListOfDataTypes</FormalSpec>
<Implementation><![CDATA[
	set element=..getElementByIdentifier(elementIdentifier)
	for i=1:1:listOfErrors.Count() {
		do element.setErrorMessage(listOfErrors.GetAt(i))	
	}
]]></Implementation>
</Method>

<Method name="setErrorMessage">
<FormalSpec>errorMessage</FormalSpec>
<Implementation><![CDATA[
	set panel=..getErrorDisplayElement()
	if panel'=$this {
		do panel.setErrorMessage(errorMessage)
	}
	do ##super(errorMessage)
]]></Implementation>
</Method>

<Method name="getDataSetForElement">
<FormalSpec>elementID</FormalSpec>
<Implementation><![CDATA[
	set chartElement=..getElementByIdentifier(elementID)
	return chartElement.getDataSet()
]]></Implementation>
</Method>

<Method name="loadData">
</Method>

<Method name="validate">
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>

<Method name="getSuccessURL">
<Implementation><![CDATA[	return ..#returnPage
]]></Implementation>
</Method>

<Method name="getAJAXUpdateReturnData">
<Description>
This can be used to return data from a modal when saved via ajax.</Description>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[	return ""
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>pageDefaultData</DefaultData>
<Data name="pageDefaultData">
<Subscript>"page"</Subscript>
<Value name="1">
<Value>sessionID</Value>
</Value>
<Value name="2">
<Value>objEvent</Value>
</Value>
<Value name="3">
<Value>hasError</Value>
</Value>
<Value name="4">
<Value>isPageReadOnly</Value>
</Value>
<Value name="5">
<Value>isSettingsPageModal</Value>
</Value>
<Value name="6">
<Value>requestData</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.pageController.pages.abstractSettings">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.abstractSettings.CLS/EV.11
;vc; Component: CLS.EF.pageController.pages.abstractSettings
;vc;  Location: SmallDev
;vc; Date/Time: 26-Feb-16 14:53
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.abstractSettings.CLS/EV.11</td><td>CLS.EF.pageController.pages.abstractSettings</td><td>SmallDev</td><td style='white-space: nowrap;'>26-Feb-16 14:53</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63980,35034.348028</TimeChanged>
<TimeCreated>63403,44380.201118</TimeCreated>

<Parameter name="returnPage">
<Default>abstractSettings.csp</Default>
</Parameter>

<Method name="loadData">
<Implementation><![CDATA[
	set panel=..addPanel("submissions_panel","Submissions")
	do ..loadSubmissionsPanel(panel)
	
	set panel=..addPanel("reviews_panel","Reviews")
	do ..loadReviewsPanel(panel)
	
	set panel=..addPanel("website_panel","Website")
	do ..loadWebsitePanel(panel)
]]></Implementation>
</Method>

<Method name="loadSubmissionsPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	set eventID=..getEventID()
	
	set dateFormat=##class(shared.dateFunctions).getBackendInputDateFormat()
	
	set element=panel.addCheckbox("show_summary_field","Show ""Summary"" field",'(##class(setup.objEventSetting).getParameter("abstracts","suppress summary field",eventID)))
	set element=panel.addCheckbox("show_keywords_field","Show ""Keywords"" field",##class(setup.objEventSetting).getParameter("abstracts","use abstract keywords",eventID))
	set element=panel.addCheckbox("show_closing_dates","Show closing dates for each topic",##class(setup.objEventSetting).getParameter("abstracts","Show closing dates for each topic",eventID))
	
	set inputGroup=panel.addInputGroupNumber("title_length_input_group","Maximum title length:")
	set maxAbstractTitleLength=##class(setup.objEventSetting).getParameter("abstracts","max abstracts title length",eventID)
	set element=inputGroup.addIntegerInput("title_length_input","",maxAbstractTitleLength)
	set element.uiComponent.minValue=2
	set element.uiComponent.maxValue=400
	set element=inputGroup.addCaption("title_length_caption","characters")
	
	set element=panel.addIntegerInput("maximum_number_of_abstracts_per_person","Maximum number of abstracts per person:",##class(setup.objEventSetting).getParameter("abstracts","max abstracts per person",eventID))
	set element.uiComponent.minValue=1
	
	set allowTextSubmissionValue=1
	set allowFileUploadsValue=0
	set allowPaperUploadsValue=0
	set fileUploads=##class(setup.objEventSetting).getParameter("abstracts","abstract uploads",eventID)
	set fileUploadsOnly=##class(setup.objEventSetting).getParameter("abstracts","file submission only",eventID)
	set paperUploads=##class(setup.objEventSetting).getParameter("abstracts","allow uploading of papers",eventID)
	set paperUploadsOnly=##class(setup.objEventSetting).getParameter("abstracts","paper uploads only",eventID)
	if (fileUploadsOnly || paperUploadsOnly) {
		set allowTextSubmissionValue=0
	}
	set allowFileUploadsValue=fileUploads
	set allowPaperUploadsValue=paperUploads
	if (paperUploadsOnly) {
		set allowFileUploadsValue=0
		set allowPaperUploadsValue=1
	}
	set element=panel.addCheckbox("allow_html_text_submission","Allow text submission",allowTextSubmissionValue)
	set depList=element.addDependentList("allow_html_text_submission_dep")
	set inputGroup=depList.addInputGroupNumber("html_text_maximum_length_input_group","Maximum length:")
	set maxAbstractTextLength=##class(setup.objEventSetting).getParameter("abstracts","max abstracts text length",eventID)
	set maxAbstractWords=##class(setup.objEventSetting).getParameter("abstracts","max abstract words",eventID)
	set useCharacters=1
	if ('maxAbstractTextLength && 'maxAbstractWords) {
		set useCharacters=0
	}
	if maxAbstractWords {
		set useCharacters=0,maxAbstractTextLength=maxAbstractWords
	}
	set element=inputGroup.addIntegerInput("html_text_maximum_length_value","",maxAbstractTextLength)
	set element.uiComponent.minValue=20
	set element.uiComponent.maxValue=64000
	set element=inputGroup.addRadioButtons("html_text_maximum_length_unit","",$SELECT(useCharacters=1:"chars",1:"words"))
    do element.addAlternative("words","words")
    do element.addAlternative("chars","characters")
	
	set element=depList.addCheckbox("allow_html_tables","Allow tables",##class(setup.objEventSetting).getParameter("abstracts","allow abstracts to contain tables",eventID))
	set absSectionsOn=depList.addCheckbox("allow_sections","Split the abstract submission into sections",##class(setup.objEventSetting).getParameter("abstracts","use document sections",eventID))
	set depList=absSectionsOn.addDependentList("sections_list")
	
	set editSectionsModal=depList.addOpenInFormModalButton("edit_sections_button","Edit Sections...","abstractSettingsEditSectionsModal.csp","EF.pageController.pages.abstractSettingsEditSectionsModal")
	do editSectionsModal.uiComponent.addAttribute("data-modal-dialog-class","modal-lg")
	set element=panel.addCheckbox("allow_file_uploads","Allow file uploads",allowFileUploadsValue)
	
	set parentElement=panel.addCheckbox("allow_paper_uploads","Allow paper uploads until:",allowPaperUploadsValue)
	set depList=parentElement.addDependentList("allow_paper_uploads_dep")
	set papersDateTo=##class(setup.objEventSetting).getParameter("abstracts","allow paper uploads to",eventID)
	set papersDateTo=##class(shared.dateFunctions).multiDate(papersDateTo,dateFormat)
	set element=depList.addDatePicker("allow_paper_uploads_until","",papersDateTo)
	do element.setNameForValidationError("""Allow paper uploads until""")
	set element=depList.addTextAlertInfo("allow_paper_uploads_alert_info","Submitters will only be allowed to upload papers and will not be allowed to create, amend or delete submissions")
	set element.showHideDependencyList=##class(EF.ui.components.dependencyList).createNew("allow_paper_uploads",1)
	
	set value=0
	set absAmendDateFrom=##class(setup.objEventSetting).getParameter("abstracts","allow amendments from",eventID)
	set absAmendDateFrom=##class(shared.dateFunctions).multiDate(absAmendDateFrom,dateFormat)
	set absAmendDateTo=##class(setup.objEventSetting).getParameter("abstracts","allow amendments to",eventID)
	set absAmendDateTo=##class(shared.dateFunctions).multiDate(absAmendDateTo,dateFormat)
	if (($LENGTH(absAmendDateFrom)>0) && ($LENGTH(absAmendDateTo)>0)) {
		set value=1
	}
	set parentElement=panel.addCheckbox("allow_abstract_amendment","Allow abstract amendment",value)
	set element=panel.addDatePicker("abstract_amendment_date_from","From:",absAmendDateFrom)
	set element.enableDisableDependencyList=##class(EF.ui.components.dependencyList).createNew("allow_abstract_amendment",1)
	do element.setNameForValidationError("""Allow abstract amendment"" ""From""")
	set element=panel.addDatePicker("abstract_amendment_date_to","To:",absAmendDateTo)
	set element.enableDisableDependencyList=##class(EF.ui.components.dependencyList).createNew("allow_abstract_amendment",1)
	do element.setNameForValidationError("""Allow abstract amendment"" ""To""")
	set list=panel.addList("submissions_when_amending_abstracts","When amending abstracts:")
	set element=list.addCheckbox("submissions_when_amending_abstracts_show_reviews","Show reviews",##class(setup.objEventSetting).getParameter("abstracts","show reviews to submitters",eventID))
	
	set list=panel.addList("submissions_authors","Authors:")
	set element=list.addCheckbox("allow_submitter_to_change_presenting_author","Allow submitter to change the presenting author",'(##class(setup.objEventSetting).getParameter("abstracts","submitter cannot select presenting author",eventID)))
	set element=list.addCheckbox("allow_corresponding_authors_to_be_selected","Allow corresponding authors to be selected",##class(setup.objEventSetting).getParameter("abstracts","use corresponding authors",eventID))
	set element=list.addIntegerInput("maximum_number_of_coauthors","Maximum number of co-authors:",##class(setup.objEventSetting).getParameter("abstracts","max co-authors",eventID))
	set element.uiComponent.minValue=0
	
	set value=##class(setup.objEventSetting).getParameter("abstracts","Automatically number submissions",eventID)
	set element=panel.addCheckbox("auto_number_submissions","Automatically number submissions",value)
	if 'value {
		do element.uiComponent.addOnSubmitConfirmChange(1,"Automatically numbering submissions will replace any existing abstract numbers")
	}
	set depList=element.addDependentList("allow_auto_number_submissions")
	
	set editNumberingModal=depList.addOpenInFormModalButton("edit_numbering_modal_remote","Edit Numbering...","abstractSettingsEditNumberingModal.csp","EF.pageController.pages.abstractSettingsEditNumberingModal")
]]></Implementation>
</Method>

<Method name="loadReviewsPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	set eventID=..getEventID()
	
	set list=panel.addList("reviews_review","Review:")
	set element=list.addCheckbox("review_allow_reviewers_to_grade","Allow reviewers to grade the abstract",##class(setup.objEventSetting).getParameter("abstracts","let reviewers score",eventID))
	set element=list.addIntegerInput("review_points_on_grading_scale","Number of points on the grading scale:",##class(setup.objEventSetting).getParameter("abstracts","grade count",eventID))
	set element.uiComponent.minValue=1

	set readOnly=0
	if (##class(abstract.methods).areThereAnyReviewsForEvent(eventID)) {
		set readOnly=1
	}
	set element=list.addCheckbox("review_only_one_comment_per_review","Only allow a single comment per review",##class(setup.objEventSetting).getParameter("abstracts","single comment per abstract review",eventID),readOnly)
	if (readOnly) {
		set element.uiComponent.title="This setting is locked because there are reviews for this event"
	}

	set element=list.addCheckbox("review_comment_is_mandatory","Comment is mandatory",('(##class(setup.objEventSetting).getParameter("abstracts","reviewer comment is not mandatory",eventID))))
	set element=list.addCheckbox("review_grade_is_mandatory","Grade is mandatory",('(##class(setup.objEventSetting).getParameter("abstracts","reviewer score is not mandatory",eventID))))
	set element=list.addCheckbox("review_show_comment_below_criteria","Show the review comment below the criteria name",##class(setup.objEventSetting).getParameter("abstracts","display review box below prompt",eventID))
	
	set list=panel.addList("reviews_assignment","Assignment:")
	set element=list.addCheckbox("assignment_individual_abstracts","Assign reviewers to individual abstracts",##class(setup.objEventSetting).getParameter("abstracts","assign reviewers to abstracts",eventID))
	set element=list.addCheckbox("assignment_individual_papers","Assign reviewers to individual papers",##class(setup.objEventSetting).getParameter("abstracts","assign reviewers to papers",eventID))
	
	set list=panel.addList("reviews_display","Blinding:")
	set element=list.addCheckbox("reviews_display_show_submitter_and_author_details","Show author details to reviewers",('(##class(setup.objEventSetting).getParameter("abstracts","hide author from reviewers",eventID))))
	set depList=element.addDependentList("reviews_display_show_submitter_and_author_details_deps")
	set element=depList.addCheckbox("reviews_display_show_presenting_author","Show presenting author",##class(setup.objEventSetting).getParameter("abstracts","Review - Show Presenting Author",eventID))
	set element=depList.addCheckbox("reviews_display_show_corresponding_author","Show corresponding author",##class(setup.objEventSetting).getParameter("abstracts","Review - Show Corresponding Author",eventID))
	set element=list.addCheckbox("show_reviewer_details_to_submitters","Show reviewer details to submitters",('(##class(setup.objEventSetting).getParameter("abstracts","hide reviewer details from submitters",eventID))))
	set element=list.addCheckbox("reviews_display_show_reviews_from_other_reviewers","Show reviews from other reviewers",('(##class(setup.objEventSetting).getParameter("abstracts","make reviews confidential",eventID))))
	
	set list=panel.addList("reviews_downloads","Downloads:")
	set element=list.addCheckbox("reviews_downloads_allow_download_of_files","Allow download of files",##class(setup.objEventSetting).getParameter("abstracts","show file download button to reviewers",eventID))
	set element=list.addCheckbox("reviews_downloads_allow_export_to_word","Allow export to Word",##class(setup.objEventSetting).getParameter("abstracts","reviewers export to word",eventID) )
	
	set depList=element.addDependentList("downloads_export_to_word")
	set reviewerTemplateID=##class(setup.objEventSetting).getParameter("abstracts","reviewers export template",eventID)
	set href=##class(shared.pCSP).Link("emailDetails.csp?emailID="_(+reviewerTemplateID)_"&isAbstracts=1&isPurchase=0&isPersonal=1&isLetter=0&isLetter=0&isWord=1&returnPage="_$$$URLENCODE(%request.PageName))
	set element=depList.addLinkButton("reviews_downloads_edit_word_template","Edit Word Template…",href)
]]></Implementation>
</Method>

<Method name="loadWebsitePanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	set eventID=..getEventID()
	
	set showAbstractCheck=panel.addCheckbox("website_show_abstract_checkbox","Publish abstracts on the website",##class(setup.objEventSetting).getParameter("abstracts","Show abstracts on the website",eventID))
	set showAbstractCheckDependency=##class(EF.ui.components.dependencyList).createNew("website_show_abstract_checkbox",1)
	
	set dropdown=panel.addDropdown("format_author_name_dropdown","Format author names using:",##class(setup.objEventSetting).getParameter("abstracts","author name format",eventID))
	do dropdown.addAlternative("First Last","First Last")
	do dropdown.addAlternative("Last, First","Last, First")
	do dropdown.addAlternative("F. Last","F. Last")
	do dropdown.addAlternative("Last, F","Last, F")
	do dropdown.addAlternative("Title First Last","Title First Last")
	do dropdown.addAlternative("Title F. Last","Title F. Last")
	set dropdown.enableDisableDependencyList=showAbstractCheckDependency
	
	

	set list=panel.addList("website_format_checkboxes","")
	set element=list.addCheckbox("format_author_name_append_company","Append company/organisation",##class(setup.objEventSetting).getParameter("abstracts","absViewDocumentFE - append company/organisation",eventID))
	set element.enableDisableDependencyList=showAbstractCheckDependency

	set element=list.addCheckbox("format_author_name_append_country","Append country",##class(setup.objEventSetting).getParameter("abstracts","absViewDocumentFE - append country",eventID))
	set element.enableDisableDependencyList=showAbstractCheckDependency
		
	set dropdown=panel.addDropdown("format_id_presenting_author","Identify the presenting author using:",##class(setup.objEventSetting).getParameter("abstracts","Identify the presenting author using",eventID))	
	do dropdown.addAlternative("Underline","Underline")
	do dropdown.addAlternative("Bold","Bold")
	do dropdown.addAlternative("*","Asterisk (*)")
	do dropdown.addAlternative("None","None")
	set dropdown.enableDisableDependencyList=showAbstractCheckDependency
	
	set list=panel.addList("website_abstract_details","On the ""Abstract details"" page:")
	set element=list.addCheckbox("abstract_details_show_uploaded_files","Show uploaded files",('(##class(setup.objEventSetting).getParameter("abstracts","absViewDocumentFE - Hide Uploaded Files",eventID))))
	set element.enableDisableDependencyList=showAbstractCheckDependency

	set element=list.addCheckbox("abstract_details_show_presentation_time","Show presentation time",('(##class(setup.objEventSetting).getParameter("abstracts","absViewDocumentFE - Hide Speech Time",eventID))))
	set element.enableDisableDependencyList=showAbstractCheckDependency


	
	set list=panel.addList("website_session_details","On the ""Session details"" page:")
	set element=list.addCheckbox("session_details_show_presentation_times","Show presentation times",##class(setup.objEventSetting).getParameter("abstracts","show presentation time in session details",eventID))
	set element.enableDisableDependencyList=showAbstractCheckDependency
]]></Implementation>
</Method>

<Method name="validate">
<Implementation><![CDATA[
	set allowTextSubmissionValue=(+(..getValueByIdentifier("allow_html_text_submission")))
	set allowFileUploadsValue=(+(..getValueByIdentifier("allow_file_uploads")))
	set allowPaperUploadsValue=(+(..getValueByIdentifier("allow_paper_uploads")))
	
	if (('allowTextSubmissionValue) && ('allowFileUploadsValue) && ('allowPaperUploadsValue)) {
		do ..getElementByIdentifier("submissions_panel").setErrorMessage("you must select at least one of the following options: ""Allow text submission"", ""Allow file uploads"", ""Allow paper uploads until""")
	}
	
	if (..getValueByIdentifier("allow_paper_uploads")) {
		if ('$LENGTH(..getValueByIdentifier("allow_paper_uploads_until"))) {
			do ..getElementByIdentifier("allow_paper_uploads").setErrorMessage("""Allow paper uploads until"" is incorrect")
		}
	}
	
	if (..getValueByIdentifier("allow_abstract_amendment")) {
		set absAmendDateFrom=..getValueByIdentifier("abstract_amendment_date_from")
		set absAmendDateTo=..getValueByIdentifier("abstract_amendment_date_to")
		
		if '$l(absAmendDateFrom) {
			do ..getElementByIdentifier("abstract_amendment_date_from").setErrorMessage("""Allow abstract amendment"" ""From"" is incorrect")
		}
		if '$l(absAmendDateTo) {
			do ..getElementByIdentifier("abstract_amendment_date_to").setErrorMessage("""Allow abstract amendment"" ""To"" is incorrect")
		}
		
		if $l(absAmendDateFrom)&&$l(absAmendDateTo) {
			if ##class(shared.timeFunctions).compareTimeStamps(##class(shared.timeFunctions).convertInputDateToTimeStamp(absAmendDateFrom),##class(shared.timeFunctions).convertInputDateToTimeStamp(absAmendDateTo),">") {
				do ..getElementByIdentifier("allow_abstract_amendment").setErrorMessage("""Allow registration amendment"" ""From"" is after ""To"" date and time")
			}
		}
	}
]]></Implementation>
</Method>

<Method name="saveData">
<Implementation><![CDATA[
	do ..saveSubmissionsPanel()
	do ..saveReviewsPanel()
	do ..saveWebsitePanel()
]]></Implementation>
</Method>

<Method name="saveSubmissionsPanel">
<Implementation><![CDATA[
	set eventID=..getEventID()
	set dateFormat=##class(shared.dateFunctions).getBackendInputDateFormat()
	
	if ..isUpdatedByIdentifier("show_summary_field") {
		do ##class(setup.objEventSetting).setParameter("abstracts","suppress summary field",('(..getValueByIdentifier("show_summary_field"))),eventID)
	}
	if ..isUpdatedByIdentifier("show_keywords_field") {
		do ##class(setup.objEventSetting).setParameter("abstracts","use abstract keywords",..getValueByIdentifier("show_keywords_field"),eventID)
	}
	if ..isUpdatedByIdentifier("show_closing_dates") {
		do ##class(setup.objEventSetting).setParameter("abstracts","Show closing dates for each topic",..getValueByIdentifier("show_closing_dates"),eventID)
	}

	if ..isUpdatedByIdentifier("title_length_input") {
		do ##class(setup.objEventSetting).setParameter("abstracts","max abstracts title length",..getValueByIdentifier("title_length_input"),eventID)
	}
	if ..isUpdatedByIdentifier("maximum_number_of_abstracts_per_person") {
		do ##class(setup.objEventSetting).setParameter("abstracts","max abstracts per person",..getValueByIdentifier("maximum_number_of_abstracts_per_person"),eventID)
	}
	
	if (..isUpdatedByIdentifier("allow_html_text_submission") 
		|| ..isUpdatedByIdentifier("allow_file_uploads")
		|| ..isUpdatedByIdentifier("allow_paper_uploads")
		) {
		
		set allowTextSubmissionValue=(+(..getValueByIdentifier("allow_html_text_submission")))
		set allowFileUploadsValue=(+(..getValueByIdentifier("allow_file_uploads")))
		set allowPaperUploadsValue=(+(..getValueByIdentifier("allow_paper_uploads")))
		
		set fileUploads=allowFileUploadsValue
		if (fileUploads) {
			set fileUploadsOnly='allowTextSubmissionValue
		} else {
			set fileUploadsOnly=0
		}
		set paperUploads=allowPaperUploadsValue
		if (paperUploads) {
			set paperUploadsOnly='allowTextSubmissionValue
			if (fileUploadsOnly) {
				set paperUploadsOnly=0
			}
		} else {
			set paperUploadsOnly=0
		}
		if (paperUploadsOnly) {
			set fileUploadsOnly=1
		}
		
		do ##class(setup.objEventSetting).setParameter("abstracts","abstract uploads",fileUploads,eventID)
		do ##class(setup.objEventSetting).setParameter("abstracts","file submission only",fileUploadsOnly,eventID)
		do ##class(setup.objEventSetting).setParameter("abstracts","allow uploading of papers",paperUploads,eventID)
		do ##class(setup.objEventSetting).setParameter("abstracts","paper uploads only",paperUploadsOnly,eventID)
	}

	if ..isUpdatedByIdentifier("allow_sections") {
		do ##class(setup.objEventSetting).setParameter("abstracts","use document sections",..getValueByIdentifier("allow_sections"),eventID)
	}
	if ((..isUpdatedByIdentifier("html_text_maximum_length_value")) || (..isUpdatedByIdentifier("html_text_maximum_length_unit"))) {
		set value=+..getValueByIdentifier("html_text_maximum_length_value")
		set unit=..getValueByIdentifier("html_text_maximum_length_unit")
		if (unit="words") {
			do ##class(setup.objEventSetting).setParameter("abstracts","max abstract words",value,eventID)
			do ##class(setup.objEventSetting).setParameter("abstracts","max abstracts text length","",eventID)	
		} elseif (unit="chars") {
			do ##class(setup.objEventSetting).setParameter("abstracts","max abstract words","",eventID)
			do ##class(setup.objEventSetting).setParameter("abstracts","max abstracts text length",value,eventID)	
		}
	}
	
	if ..isUpdatedByIdentifier("allow_html_tables") {
		do ##class(setup.objEventSetting).setParameter("abstracts","allow abstracts to contain tables",..getValueByIdentifier("allow_html_tables"),eventID)
	}
	
	set papersDateTo=""
	set papersDateToUpdated=0
	if ..isUpdatedByIdentifier("allow_paper_uploads") {
		if ('..getValueByIdentifier("allow_paper_uploads")) {
			set papersDateToUpdated=1
		}
	}
	if ..isUpdatedByIdentifier("allow_paper_uploads_until") {
		set papersDateTo=##class(shared.dateFunctions).multiDate(..getValueByIdentifier("allow_paper_uploads_until"),1,,dateFormat)
		set papersDateToUpdated=1
	}
	if (papersDateToUpdated) {
		do ##class(setup.objEventSetting).setParameter("abstracts","allow paper uploads to",papersDateTo,eventID)
	}
	
	set absAmendDateFrom=""
	set absAmendDateTo=""
	set absAmendDateFromUpdated=0
	set absAmendDateToUpdated=0
	if (..isUpdatedByIdentifier("allow_abstract_amendment")) {
		if ('..getValueByIdentifier("allow_abstract_amendment")) {
			set absAmendDateFromUpdated=1
			set absAmendDateToUpdated=1
		}
	}
	if (('absAmendDateFromUpdated) && (..isUpdatedByIdentifier("abstract_amendment_date_from"))) {
		set absAmendDateFrom=##class(shared.dateFunctions).multiDate(..getValueByIdentifier("abstract_amendment_date_from"),1,,dateFormat)
		set absAmendDateFromUpdated=1
	}
	if (('absAmendDateToUpdated) && (..isUpdatedByIdentifier("abstract_amendment_date_to"))) {
		set absAmendDateTo=##class(shared.dateFunctions).multiDate(..getValueByIdentifier("abstract_amendment_date_to"),1,,dateFormat)
		set absAmendDateToUpdated=1
	}
	if (absAmendDateFromUpdated) {
		do ##class(setup.objEventSetting).setParameter("abstracts","allow amendments from",absAmendDateFrom,eventID)
	}
	if (absAmendDateToUpdated) {
		do ##class(setup.objEventSetting).setParameter("abstracts","allow amendments to",absAmendDateTo,eventID)
	}
	
	if ..isUpdatedByIdentifier("submissions_when_amending_abstracts_show_reviews") {
		do ##class(setup.objEventSetting).setParameter("abstracts","show reviews to submitters",..getValueByIdentifier("submissions_when_amending_abstracts_show_reviews"),eventID)
	}
	if ..isUpdatedByIdentifier("show_reviewer_details_to_submitters") {
		do ##class(setup.objEventSetting).setParameter("abstracts","hide reviewer details from submitters",('(..getValueByIdentifier("show_reviewer_details_to_submitters"))),eventID)
	}
	
	if ..isUpdatedByIdentifier("allow_submitter_to_change_presenting_author") {
		do ##class(setup.objEventSetting).setParameter("abstracts","submitter cannot select presenting author",('(..getValueByIdentifier("allow_submitter_to_change_presenting_author"))),eventID)
	}
	if ..isUpdatedByIdentifier("allow_corresponding_authors_to_be_selected") {
		do ##class(setup.objEventSetting).setParameter("abstracts","use corresponding authors",..getValueByIdentifier("allow_corresponding_authors_to_be_selected"),eventID)
	}
	if ..isUpdatedByIdentifier("maximum_number_of_coauthors") {
		do ##class(setup.objEventSetting).setParameter("abstracts","max co-authors",+(..getValueByIdentifier("maximum_number_of_coauthors")),eventID)
	}
	
	if ..isUpdatedByIdentifier("auto_number_submissions") {
		
		if +..getValueByIdentifier("auto_number_submissions") = 0 {
			try {
				do ##class(abstract.methods).disableAutomaticNumbering(eventID) 
			} catch error {
				throw ##class(shared.exceptions.generalException).%New(error.DisplayString())	
			}
		} elseif +..getValueByIdentifier("auto_number_submissions") = 1 {
			do ##class(abstract.methods).enableAutomaticNumbering(eventID)		}

	}
]]></Implementation>
</Method>

<Method name="saveReviewsPanel">
<Implementation><![CDATA[
	set eventID=..getEventID()
	
	if ..isUpdatedByIdentifier("review_allow_reviewers_to_grade") {
		do ##class(setup.objEventSetting).setParameter("abstracts","let reviewers score",..getValueByIdentifier("review_allow_reviewers_to_grade"),eventID)
	}
	if ..isUpdatedByIdentifier("review_points_on_grading_scale") {
		do ##class(setup.objEventSetting).setParameter("abstracts","grade count",+(..getValueByIdentifier("review_points_on_grading_scale")),eventID)
	}
	if ..isUpdatedByIdentifier("review_only_one_comment_per_review") {
		if ('(##class(abstract.methods).areThereAnyReviewsForEvent(eventID))) {
			do ##class(setup.objEventSetting).setParameter("abstracts","single comment per abstract review",..getValueByIdentifier("review_only_one_comment_per_review"),eventID)
		}
	}
	if ..isUpdatedByIdentifier("review_comment_is_mandatory") {
		do ##class(setup.objEventSetting).setParameter("abstracts","reviewer comment is not mandatory",('(..getValueByIdentifier("review_comment_is_mandatory"))),eventID)
	}
	if ..isUpdatedByIdentifier("review_grade_is_mandatory") {
		do ##class(setup.objEventSetting).setParameter("abstracts","reviewer score is not mandatory",('(..getValueByIdentifier("review_grade_is_mandatory"))),eventID)
	}
	if ..isUpdatedByIdentifier("review_show_comment_below_criteria") {
		do ##class(setup.objEventSetting).setParameter("abstracts","display review box below prompt",..getValueByIdentifier("review_show_comment_below_criteria"),eventID)
	}
	
	if ..isUpdatedByIdentifier("assignment_individual_abstracts") {
		do ##class(setup.objEventSetting).setParameter("abstracts","assign reviewers to abstracts",..getValueByIdentifier("assignment_individual_abstracts"),eventID)
	}
	if ..isUpdatedByIdentifier("assignment_individual_papers") {
		do ##class(setup.objEventSetting).setParameter("abstracts","assign reviewers to papers",..getValueByIdentifier("assignment_individual_papers"),eventID)
	}
	
	if ..isUpdatedByIdentifier("reviews_display_show_submitter_and_author_details") {
		do ##class(setup.objEventSetting).setParameter("abstracts","hide author from reviewers",('(..getValueByIdentifier("reviews_display_show_submitter_and_author_details"))),eventID)
	}
	if ..isUpdatedByIdentifier("reviews_display_show_presenting_author") {
		do ##class(setup.objEventSetting).setParameter("abstracts","Review - Show Presenting Author",..getValueByIdentifier("reviews_display_show_presenting_author"),eventID)
	}
	if ..isUpdatedByIdentifier("reviews_display_show_corresponding_author") {
		do ##class(setup.objEventSetting).setParameter("abstracts","Review - Show Corresponding Author",..getValueByIdentifier("reviews_display_show_corresponding_author"),eventID)
	}
	if ..isUpdatedByIdentifier("reviews_display_show_reviews_from_other_reviewers") {
		do ##class(setup.objEventSetting).setParameter("abstracts","make reviews confidential",('(..getValueByIdentifier("reviews_display_show_reviews_from_other_reviewers"))),eventID)
	}
	
	if ..isUpdatedByIdentifier("reviews_downloads_allow_download_of_files") {
		do ##class(setup.objEventSetting).setParameter("abstracts","show file download button to reviewers",..getValueByIdentifier("reviews_downloads_allow_download_of_files"),eventID)
	}
	if ..isUpdatedByIdentifier("reviews_downloads_allow_export_to_word") {
		do ##class(setup.objEventSetting).setParameter("abstracts","reviewers export to word",..getValueByIdentifier("reviews_downloads_allow_export_to_word"),eventID)
	}
]]></Implementation>
</Method>

<Method name="saveWebsitePanel">
<Implementation><![CDATA[
	set eventID=..getEventID()
	if ..isUpdatedByIdentifier("website_show_abstract_checkbox") {
		do ##class(setup.objEventSetting).setParameter("abstracts","Show abstracts on the website",..getValueByIdentifier("website_show_abstract_checkbox"),eventID)
	}	
		if ..isUpdatedByIdentifier("format_author_name_dropdown") {
		do ##class(setup.objEventSetting).setParameter("abstracts","author name format",..getValueByIdentifier("format_author_name_dropdown"),eventID)
	}	
	if ..isUpdatedByIdentifier("format_author_name_append_company") {
		do ##class(setup.objEventSetting).setParameter("abstracts","absViewDocumentFE - Append company/organisation",..getValueByIdentifier("format_author_name_append_company"),eventID)
	}
	if ..isUpdatedByIdentifier("format_author_name_append_country") {
		do ##class(setup.objEventSetting).setParameter("abstracts","absViewDocumentFE - append country",..getValueByIdentifier("format_author_name_append_country"),eventID)
	}	
	if ..isUpdatedByIdentifier("format_id_presenting_author") {
		do ##class(setup.objEventSetting).setParameter("abstracts","Identify the presenting author using",..getValueByIdentifier("format_id_presenting_author"),eventID)
	}	
	if ..isUpdatedByIdentifier("abstract_details_show_coauthors") {
		do ##class(setup.objEventSetting).setParameter("abstracts","absViewDocumentFE - Hide Co-Authors",('(..getValueByIdentifier("abstract_details_show_coauthors"))),eventID)
	}
	if ..isUpdatedByIdentifier("abstract_details_show_uploaded_files") {
		do ##class(setup.objEventSetting).setParameter("abstracts","absViewDocumentFE - Hide Uploaded Files",('(..getValueByIdentifier("abstract_details_show_uploaded_files"))),eventID)
	}



	// abstract details page 
	if ..isUpdatedByIdentifier("abstract_details_show_presentation_time") {
		do ##class(setup.objEventSetting).setParameter("abstracts","absViewDocumentFE - Hide Speech Time",'..getValueByIdentifier("abstract_details_show_presentation_time"),eventID)
	}	


	// session details	
	if ..isUpdatedByIdentifier("session_details_show_presentation_times") {
		do ##class(setup.objEventSetting).setParameter("abstracts","show presentation time in session details",..getValueByIdentifier("session_details_show_presentation_times"),eventID)
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.abstractSettingsEditNumberingModal">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.abstractSettingsEditNumberingModal.CLS/EV.3
;vc; Component: CLS.EF.pageController.pages.abstractSettingsEditNumberingModal
;vc;  Location: SmallDev
;vc; Date/Time: 26-Feb-16 14:58
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.abstractSettingsEditNumberingModal.CLS/EV.3</td><td>CLS.EF.pageController.pages.abstractSettingsEditNumberingModal</td><td>SmallDev</td><td style='white-space: nowrap;'>26-Feb-16 14:58</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63974,53927.917856</TimeChanged>
<TimeCreated>63406,53067.617995</TimeCreated>

<Method name="loadData">
<Implementation><![CDATA[
	set editNumberingModal=..addModalHeader("edit_numbering_header","Edit Numbering")

	#dim storedValue=##class(setup.objEventSetting).getParameter("abstracts","Automatic numbering format",..getEventID())
	set value=..getIndexFromFormat(storedValue)
	
	set dropdown = ..addDropdown("edit_numbering_dropdown","Numbering Format",value)
	do dropdown.addAlternative(1,"{{AbstractID}} (e.g. ""123"")")
	do dropdown.addAlternative(2,"{{SessionCode}}-{{SessionOrder#2}} (e.g. ""P1-06"")")
	do dropdown.addAlternative(3,"{{SessionCode}}-{{AbstractID#4}} (e.g. ""P1-0123"")")
	do dropdown.addAlternative(4,"Custom")
	
	
	set div=..addDiv("ef-id-custom-numbering-format-container")
	set div.showHideDependencyList=##class(EF.ui.components.dependencyList).createNew("edit_numbering_dropdown",4)
	
	set element = div.addTextInput("custom_numbering_input","Custom Format:",storedValue)
	set element.showHideDependencyList=##class(EF.ui.components.dependencyList).createNew("edit_numbering_dropdown",4)
	
	set element=..addCloseModalButton("edit_numbering_cancel_button","Cancel")
	set element=..addSubmitModalButton("edit_numbering_save_button","OK")
]]></Implementation>
</Method>

<Method name="getIndexFromFormat">
<FormalSpec>format</FormalSpec>
<Private>1</Private>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	return $Case(format,
		"":1,
		"{{AbstractID}}":1,
		"{{SessionCode}}-{{SessionOrder#2}}":2,
		"{{SessionCode}}-{{AbstractID#4}}":3,
		:4
	)
]]></Implementation>
</Method>

<Method name="getFormatFromIndex">
<FormalSpec>index</FormalSpec>
<Private>1</Private>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	return $Case(index,
		1:"{{AbstractID}}",
		2:"{{SessionCode}}-{{SessionOrder#2}}",
		3:"{{SessionCode}}-{{AbstractID#4}}",
		4:"Custom",
		:"Invalid alternative"
	)
]]></Implementation>
</Method>

<Method name="validate">
<Implementation><![CDATA[
	#dim submittedCustomFormat as %String = ..getValueByIdentifier("custom_numbering_input")
	
	if $Length(submittedCustomFormat)>64 {
		do ..getElementByIdentifier("custom_numbering_input").setErrorMessage("""Custom Format"" cannot be more than 64 characters")	
	}
]]></Implementation>
</Method>

<Method name="saveData">
<Implementation><![CDATA[
	if (..isUpdatedByIdentifier("edit_numbering_dropdown")) ! (..isUpdatedByIdentifier("custom_numbering_input")) {
		#dim submittedValue = ..getValueByIdentifier("edit_numbering_dropdown")
		#dim customFormat as %String = ..getValueByIdentifier("custom_numbering_input")
		#dim value =..getFormatFromIndex(submittedValue)
		if value = "Custom" {
			set value = customFormat		
		}
		do ##class(setup.objEventSetting).setParameter("abstracts","Automatic numbering format",value,..getEventID())
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.abstractSettingsEditSectionsModal">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.abstractSettingsEditSectionsModal.CLS/EV.5
;vc; Component: CLS.EF.pageController.pages.abstractSettingsEditSectionsModal
;vc;  Location: SmallDev
;vc; Date/Time: 23-Mar-16 16:56
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.abstractSettingsEditSectionsModal.CLS/EV.5</td><td>CLS.EF.pageController.pages.abstractSettingsEditSectionsModal</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Mar-16 16:56</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>64000,61017.965866</TimeChanged>
<TimeCreated>63406,53067.617995</TimeCreated>

<Method name="loadData">
<Implementation><![CDATA[
	set eventID=..objEvent.%Id()
    set languageCount=##class(shared.objLanguage).getLanguagesForEvent(eventID,.languageArray)
    if 'languageCount {
	 	set languageArray(1)="English"   
    }
	
	set editSectionsModal=..addModalHeader("edit_section_header","Edit Abstract Sections")
	set element=..addButton("add_section_button","Add","add","primary")
	
	set element=..addCloseModalButton("edit_section_cancel_button","Cancel")
	set element=..addSubmitModalButton("edit_section_submit_button","OK")
	
    if languageCount>1 {
		set editLanguageDropdown=..addDropdown("edit_language","Edit language:",##class(setup.objEventSetting).getParameter("backend","default creation language",eventID))
		set languageID=""
		for  {
		    set languageID=$O(languageArray(languageID))
		    if languageID="" quit
		    set languageDescription=languageArray(languageID)
		    set isDefaultLanguage=0
		    if $ZCVT(languageDescription,"U")="ENGLISH" {
			 	set isDefaultLanguage=1   
		    }
		 	do editLanguageDropdown.addAlternative(languageID,languageDescription,isDefaultLanguage)	
	    }
    }
	do ..loadEditSectionTable(.languageArray)
]]></Implementation>
</Method>

<Method name="loadEditSectionTable">
<FormalSpec><![CDATA[&languageArray]]></FormalSpec>
<Implementation><![CDATA[
	set table=..addResponsiveTable("edit_section_table")
	
	set isActiveColumn=table.addColumn("section_is_active","Active")
	set isActiveColumn.alignment="center"
	do isActiveColumn.uiComponent.addClass("ef-table-column-xs")
	set sectionNameColumn=table.addColumn("section_name","Section Name")
	do sectionNameColumn.uiComponent.addClass("ef-table-column-md")
	do table.addColumn("instruction_text","Instruction Text")
	set rs=##class(%ResultSet).%New("abstract.objDocumentSectionDefinition:qGetAllSectionDefinitionsForEvent")
	do rs.Execute(..objEvent.%Id())
	while rs.Next() {
		set sectionDefinitionID=rs.Get("ID")
		set isActive=rs.Get("isActive")
		do ..addSectionRow(table,sectionDefinitionID,isActive,.languageArray)
	}
	set table.addNewRowMethod="addNewSectionRow"
]]></Implementation>
</Method>

<Method name="addSectionRow">
<FormalSpec><![CDATA[table:EF.pageController.containerElements.responsiveTable,sectionDefinitionID,isActive,&languageArray]]></FormalSpec>
<Implementation><![CDATA[
	set rowIdentifier="section_definition_"_sectionDefinitionID
	set editLanguageDropdown=..getElementByIdentifier("edit_language")
	if sectionDefinitionID="NEW" {
		set rowIdentifier=rowIdentifier_(table.elementChildren.Count()+1)	
	}
	set row=table.addRow(rowIdentifier)
	if sectionDefinitionID="NEW" {
		set row.isModalTempData=1	
	}
	set row.objectId=sectionDefinitionID
	set cell=row.addCellByColumnIdentifier("section_is_active","")
	set sectionActiveCheckbox=cell.addCheckbox("section_is_active_"_rowIdentifier,"",isActive)
	set sectionActiveCheckboxDependency=##class(EF.ui.components.dependencyList).createNew("section_is_active_"_rowIdentifier,1)
	set sectionNameCell=row.addCellByColumnIdentifier("section_name","")
	set instructionTextCell=row.addCellByColumnIdentifier("instruction_text","")
	set languageID=""
	for  {
	    set languageID=$O(languageArray(languageID))
	    if languageID="" quit
	    set languageDependency=##class(EF.ui.components.dependencyList).createNew("edit_language",languageID)
	    set sectionNameInput=..addSectionNameElement(sectionNameCell,rowIdentifier,sectionDefinitionID,languageID)
	    set sectionNameInput.enableDisableDependencyList=sectionActiveCheckboxDependency
		if $IsObject(editLanguageDropdown) {
			set sectionNameInput.showHideDependencyList=languageDependency
		}
	    set sectionInstructionTextInput=..addInstructionTextElement(instructionTextCell,rowIdentifier,sectionDefinitionID,languageID)
	    set sectionInstructionTextInput.enableDisableDependencyList=sectionActiveCheckboxDependency
		if $IsObject(editLanguageDropdown) {
			set sectionInstructionTextInput.showHideDependencyList=languageDependency
				
		}
	}
	quit row
]]></Implementation>
</Method>

<Method name="addSectionNameElement">
<FormalSpec>cell:EF.pageController.containerElements.cell,rowIdentifier,sectionDefinitionID,languageID</FormalSpec>
<Implementation><![CDATA[
	if sectionDefinitionID {
		set sectionName=##class(abstract.objDocumentSectionDefinition).getDocumentSectionNameByLanguageID(sectionDefinitionID,languageID)
	} else {
		set sectionName=""	
	}
	set sectionNameInput=cell.addTextInput("section_name_"_rowIdentifier_"_"_languageID,"",sectionName)
	quit sectionNameInput
]]></Implementation>
</Method>

<Method name="addInstructionTextElement">
<FormalSpec>cell:EF.pageController.containerElements.cell,rowIdentifier,sectionDefinitionID,languageID</FormalSpec>
<Implementation><![CDATA[
	if sectionDefinitionID {
		set instructionText=##class(abstract.objDocumentSectionDefinition).getDocumentSectionInstructionTextByLanguageID(sectionDefinitionID,languageID)
	} else {
		set instructionText=""	
	}
		
	set sectionInstructionTextInput=cell.addTextArea("instruction_text_"_rowIdentifier_"_"_languageID,"",instructionText)
	quit sectionInstructionTextInput
]]></Implementation>
</Method>

<Method name="addNewSectionRow">
<Implementation><![CDATA[
	set eventID=..objEvent.%Id()
	set sectionTable=..getElementByIdentifier("edit_section_table")
    set languageCount=##class(shared.objLanguage).getLanguagesForEvent(eventID,.languageArray)
    if 'languageCount {
	 	set languageArray(1)="English"   
    }
	set row=..addSectionRow(sectionTable,"NEW",1,.languageArray)
	quit row
]]></Implementation>
</Method>

<Method name="validate">
<Implementation><![CDATA[
	set isAnySectionActive=0
	set sectionTable=..getElementByIdentifier("edit_section_table")
	set key=""
	for {
		set row=sectionTable.elementChildren.GetNext(.key)
		if key="" quit
		if row.%IsA("EF.pageController.containerElements.row") {
			if ..getValueByIdentifier("section_is_active_"_row.identifier) {
				set isAnySectionActive=1
			}
		}
	}
	if 'isAnySectionActive {
		do ..setErrorMessage("at least one section must be active")	
	}
]]></Implementation>
</Method>

<Method name="saveData">
<Implementation><![CDATA[
	set eventID=..objEvent.%Id()
	set languageCount=##class(shared.objLanguage).getLanguagesForEvent(eventID,.languageArray)
    if 'languageCount {
	 	set languageArray(1)="English"   
    }
	set sectionTable=..getElementByIdentifier("edit_section_table")
	set key=""
	for {
		set row=sectionTable.elementChildren.GetNext(.key)
		if key="" quit
		if row.%IsA("EF.pageController.containerElements.row") {
			set isActive=..getValueByIdentifier("section_is_active_"_row.identifier)
			set sectionDefinitionID=row.objectId
			if sectionDefinitionID {
				do ##class(abstract.objDocumentSectionDefinition).updateIsActive(sectionDefinitionID,+isActive)	
			}
			if isActive {
				if sectionDefinitionID="NEW" {
					set sectionDefinitionID=##class(abstract.objDocumentSectionDefinition).create(eventID)	
				}
				set languageID=""
				for  {
				    set languageID=$O(languageArray(languageID))
				    if languageID="" quit
					set sectionName=..getValueByIdentifier("section_name_"_row.identifier_"_"_languageID)
					set instructionText=..getValueByIdentifier("instruction_text_"_row.identifier_"_"_languageID)
					// If the language does not exist and if has been left blank, copy if from English
					if '##class(abstract.objDocumentSectionDefinitionDetails).getDetailsID(sectionDefinitionID,languageID) {
						if '$l(sectionName) {
							set sectionName=..getValueByIdentifier("section_name_"_row.identifier_"_"_$$$efEnglishLangID)	
						}
						if '$l(sectionName) {
							set instructionText=..getValueByIdentifier("instruction_text_"_row.identifier_"_"_$$$efEnglishLangID)	
						}
					}
					do ##class(abstract.objDocumentSectionDefinitionDetails).update(sectionDefinitionID,languageID,sectionName,instructionText)
				}
			}
		}
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.abstractSubmissions">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.abstractSubmissions.CLS/EV.19
;vc; Component: CLS.EF.pageController.pages.abstractSubmissions
;vc;  Location: SmallDev
;vc; Date/Time: 24-Feb-16 11:57
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.abstractSubmissions.CLS/EV.19</td><td>CLS.EF.pageController.pages.abstractSubmissions</td><td>SmallDev</td><td style='white-space: nowrap;'>24-Feb-16 11:57</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63972,43147.996159</TimeChanged>
<TimeCreated>63727,53797.165537</TimeCreated>

<Parameter name="returnPage">
<Default>abstractSubmissions.csp</Default>
</Parameter>

<Parameter name="useAutomaticAudit">
<Default>0</Default>
</Parameter>

<Method name="delete">
<Implementation><![CDATA[
	if ##class(EF.dataCollections.indexTempGlobal).exists(..getRowDataReference()) {
		set indexTempGlobal=##class(EF.dataCollections.indexTempGlobal).open(..getRowDataReference())
		do indexTempGlobal.delete()
	}
	do ##super()
	quit
]]></Implementation>
</Method>

<Method name="getRowDataReference">
<Implementation><![CDATA[	return "page_controller_grid_row_ids_"_..%Id()
]]></Implementation>
</Method>

<Method name="loadData">
<Description><![CDATA[
<option value="Submitted" selected="" data-filter-field="status" data-filter-operator="eq" data-filter-value="Submitted">Submitted</option>
<option value="Review incomplete" data-filter-field="status" data-filter-operator="eq" data-filter-value="Submitted" data-filter-field2="reviewsCompleted" data-filter-operator2="lt" data-filter-value2="2">Review incomplete</option>
<option value="Review complete" data-filter-field="status" data-filter-operator="eq" data-filter-value="Submitted" data-filter-field2="reviewsCompleted" data-filter-operator2="gte" data-filter-value2="2">Review complete</option>
<option value="No session" data-filter-field="status" data-filter-operator="eq" data-filter-value="Submitted" data-filter-field2="session" data-filter-operator2="eq" data-filter-value2="">No session</option>
<option value="No registered presenter" data-filter-field="status" data-filter-operator="eq" data-filter-value="Submitted" data-filter-field-2="presentingAuthorRegistered" data-filter-operator-2="eq" data-filter-value-2="No">No registered presenter</option>
<option value="All">All</option>
<option value="Unsubmitted" data-filter-field="status" data-filter-operator="eq" data-filter-value="Unsubmitted">Unsubmitted</option>
<option value="Archived" data-filter-field="status" data-filter-operator="eq" data-filter-value="Archived">Archived</option>]]></Description>
<Implementation><![CDATA[
	#dim gridRemote As EF.pageController.containerElements.gridRemote
	#dim gridComponent As EF.ui.components.backend.grid.gridRemote
	#dim toolBar As EF.ui.components.backend.grid.toolBar
	#dim filterDropdown As EF.ui.components.backend.grid.filterDropdown
	#dim toolDropdown As EF.ui.components.backend.grid.toolDropdown
	#dim rowEditButton As EF.ui.components.backend.grid.rowEditButton
	set eventConfiguration=##class(setup.eventConfiguration).createForEventID(..getEventID())
	set hasSessions=eventConfiguration.hasAnySessions()

	set submissionsPanel=..addPanel("submissions-panel","Submissions")

	set gridRemote=submissionsPanel.addGridRemote("mainGrid")
	set gridComponent=gridRemote.uiComponent
	set gridComponent.isSelectable=1
	set gridComponent.isSortable=1
	do gridComponent.configureDefaultSorting("id","desc")
	set gridComponent.rowCountMessage="Showing {2} submissions"
	set gridComponent.columnDefinitionURL="pageControllerGridColumnsJSON.csp?pageControllerID="_..%Id()
	set gridComponent.dataURL="pageControllerGridDataJSON.csp?pageControllerID="_..%Id()
	set gridComponent.dateFormat=##class(shared.dateFunctions).getBackendInputDateFormat()
	set rowEditButton=gridComponent.addRowEditButton()
	set rowEditButton.popupURL="abstractSubmissionsEditAbstract.csp?pageControllerID="_..%Id()
	do rowEditButton.addClass("ef-grid-row-button-allow-doubleclick")
	
	set toolBar=gridComponent.addToolBar()
	set filterDropdown=toolBar.addFilterDropdown("abstractTopicFilter","Topic:")
	do filterDropdown.addFilterItem("All")
	set rsTopics=##class(%ResultSet).%New("abstract.objTopic:qAllActiveTopics")
	do rsTopics.Execute(..objEvent.%Id())
	while rsTopics.Next() {
		set topicID = rsTopics.Get("topicID")
		set topicName = ##class(abstract.objTopicDescription).getDescription(topicID,$$$efEnglishLangID)
		do filterDropdown.addFilterItem(topicName,"topic","eq",topicName)
	}
	
	
	set filterDropdown=toolBar.addFilterDropdown("abstractMethodFilter","Method:")
	do filterDropdown.addFilterItem("All")
	set rsMethods=##class(%ResultSet).%New("abstract.lnkPresentationMethodEvent:qAssignableMethodsForEvent")
	do rsMethods.Execute(..objEvent.%Id())
	while rsMethods.Next() {
		set presentationMethodID = rsMethods.Get("presentationMethodID")
		set method=##class(abstract.objPresentationMethodDescription).getDescription(presentationMethodID,$$$efEnglishLangID) 
		do filterDropdown.addFilterItem(method,"method","eq",method)
	}
	
	set filterDropdown=toolBar.addFilterDropdown("abstractMainFilter","Show:")
	do filterDropdown.addFilterItem("Submitted","status","eq","Submitted")
	do filterDropdown.addFilterItem("No completed reviews","reviewsCompleted","eq","0")
	do filterDropdown.addFilterItem("No session","status","eq","Submitted","session","eq","")
	do filterDropdown.addFilterItem("Session assigned","status","eq","Submitted","session","neq","")
	do filterDropdown.addFilterItem("No registered presenter","status","eq","Submitted","presentingAuthorRegistered","eq","No")
	do filterDropdown.addFilterItem("All")
	do filterDropdown.addFilterItem("Unsubmitted","status","eq","Unsubmitted")
	do filterDropdown.addFilterItem("Archived","status","eq","Archived")
	
	set toolDropdown=toolBar.addToolDropdown()
	set toolItem=toolDropdown.addToolItemRedirect("Email authors…","abstractSubmissionsEmailAuthors.csp?pageControllerID="_..%Id())
	set toolItem.requiresSelectedRows=1
	do toolDropdown.addDivider()

	set toolItem=toolDropdown.addToolItemOpenModal("Change topic…","abstractSubmissionsChangeTopicModal.csp?parentPageControllerID="_..%Id())
	set toolItem.requiresSelectedRows=1
	
	set toolItem=toolDropdown.addToolItemOpenModal("Change presentation method…","abstractSubmissionsChangePresentationModal.csp?parentPageControllerID="_..%Id())
	set toolItem.requiresSelectedRows=1
	
	set toolItem=toolDropdown.addToolItemOpenModal("Change session…","abstractSubmissionsChangeSessionModal.csp?parentPageControllerID="_..%Id())
	set toolItem.requiresSelectedRows=1
	if 'hasSessions {
		set toolItem.isDisabled=1
	}
	
	set toolItem=toolDropdown.addDivider()
	
	set toolItem=toolDropdown.addExportToExcel("Export results to Excel…")
	set toolItem=toolDropdown.addToolItemRedirect("Export selected submissions to Word…","abstractSubmissionsWordExport.csp?pageControllerID="_..%Id())
	set toolItem.requiresSelectedRows=1
	set toolItem=toolDropdown.addDivider()
	
	set toolItem=toolDropdown.addToolItemOpenModal("Archive…","abstractSubmissionsArchiveModal.csp?parentPageControllerID="_..%Id())
	set toolItem.requiresSelectedRows=1
	set toolItem=toolDropdown.addToolItemOpenModal("Restore…","abstractSubmissionsRestoreModal.csp?parentPageControllerID="_..%Id())
	set toolItem.requiresSelectedRows=1

	do toolDropdown.addDivider()
	
	set toolItem=toolDropdown.addToolItemOpenModal("Session running order…","abstractSubmissionsSessionOrderModal.csp?parentPageControllerID="_..%Id()) 
	set toolItem.action.modalSize="large"
	if 'hasSessions {
		set toolItem.isDisabled=1
	}
	set toolItem=toolDropdown.addDivider()
	set toolItem=toolDropdown.addSelectAll()
	set toolItem=toolDropdown.addSelectNone()
]]></Implementation>
</Method>

<Method name="getDataSet">
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[
	#dim gridDataDocument As abstract.gridDataDocument
	set gridDataDocument=##class(abstract.gridDataDocument).createNew()
	do gridDataDocument.populateDataSet(..objEvent.%Id(),$this)
	return gridDataDocument.dataSet
]]></Implementation>
</Method>

<Method name="getColumns">
<Implementation><![CDATA[
	set gridDataDocument=##class(abstract.gridDataDocument).createNew(##class(shared.dateFunctions).getBackendOutputDateFormat())
	do gridDataDocument.createColumns()
	set cells=##class(%ZEN.proxyObject).%New()
	set cells.schema=gridDataDocument.getColumnSchemaJSON()
	set cells.columns=gridDataDocument.getColumnsAsJSON()
	set cells.searchableColumns=gridDataDocument.getSearchColumnsJSON()
	return cells
]]></Implementation>
</Method>

<Method name="addRow">
<FormalSpec>documentID</FormalSpec>
<ReturnType>EF.pageController.element</ReturnType>
<Implementation><![CDATA[
	set elementID="sumission_row_"_documentID
	set row=..getElementByIdentifier(elementID)
	if '$IsObject(row) {
		set row=##class(EF.pageController.containerElement).%New(elementID)
		set row.objectId=documentID
		do ..addChild(row)
		
	}
	return row
]]></Implementation>
</Method>

<Method name="getDocumentID">
<FormalSpec>rowID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	#dim indexTempGlobal As EF.dataCollections.indexTempGlobal
	set indexTempGlobal=##class(EF.dataCollections.indexTempGlobal).open(..getRowDataReference())
	return indexTempGlobal.getValue(rowID)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.abstractSubmissionsArchiveModal">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.pages.abstractSubmissionsArchiveModal.CLS/EV.4
;vc; Component: CLS.EF.pageController.pages.abstractSubmissionsArchiveModal
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.abstractSubmissionsArchiveModal.CLS/EV.4</td><td>CLS.EF.pageController.pages.abstractSubmissionsArchiveModal</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63761,46332</TimeChanged>
<TimeCreated>63406,53067.617995</TimeCreated>

<Method name="loadData">
<Implementation><![CDATA[
	#dim eventID as %Integer
	
	set eventID=..objEvent.%Id()
	set archiveModal=..addModalHeader("archive_header","Archive Submissions")

	set sessionDropdown=..addText("archive_text","Are you sure that you want to archive the selected submissions?")
	
	set element=..addCloseModalButton("archive_cancel_button","Cancel")
	set element=..addSubmitModalButton("archive_archive_button","Archive")
]]></Implementation>
</Method>

<Method name="validate">
</Method>

<Method name="save">
<Implementation><![CDATA[
	#dim objDocument as abstract.objDocument
	#dim documentID as %String
	set parentPageControllerID=%request.Get("parentPageControllerID")
	set selectedRowIds=%request.Get("selectedRowIds")
	set parentPageController=##class(EF.pageController.pages.abstractSubmissions).open(parentPageControllerID,..contextData)	
	if '$IsObject(parentPageController) {
		throw ##class(shared.exceptions.generalException).%New("could not open page controller")
	}
	for i=1:1:$L(selectedRowIds,"|") {
		set rowID = $Piece(selectedRowIds,"|",i)
		if rowID {
			set documentID = parentPageController.getDocumentID(rowID)
			if documentID {
				set objDocument=##class(abstract.objDocument).%OpenId(documentID)
				do objDocument.%Reload()
				if objDocument.active = 1 {
					do objDocument.archiveDocument(..contextData)
				}
				kill objDocument
			}
		}
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.abstractSubmissionsChangePresentationModal">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.pages.abstractSubmissionsChangePresentationModal.CLS/EV.2
;vc; Component: CLS.EF.pageController.pages.abstractSubmissionsChangePresentationModal
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.abstractSubmissionsChangePresentationModal.CLS/EV.2</td><td>CLS.EF.pageController.pages.abstractSubmissionsChangePresentationModal</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63761,46353</TimeChanged>
<TimeCreated>63406,53067.617995</TimeCreated>

<Method name="loadData">
<Implementation><![CDATA[
	#dim eventID as %Integer
	#dim presentationID as %Integer
	#dim currentPresentationID as %Integer
	#dim presentationName as %String
	
	set eventID=..objEvent.%Id()
	set changePresentationModal=..addModalHeader("change_presentation_header","Change Presentation Method")

	set presentationDropdown=..addDropdown("presentation_dropdown","Change the presentation method for "_($Length(%request.Get("selectedRowIds"),"|")-1)_" selected submissions to:",5)
	set presentationDropdown.uiComponent.isPersistent=1
	do presentationDropdown.addAlternative("","None")
	
	set rsPresentations=##class(%ResultSet).%New("abstract.lnkPresentationMethodEvent:qAssignableMethodsForEvent")
	do rsPresentations.Execute(eventID)
	while rsPresentations.Next() {
		set presentationID = rsPresentations.Get("presentationMethodID")
		set presentationName = ##class(abstract.objPresentationMethodDescription).getDescription(presentationID,$$$efEnglishLangID)
		do presentationDropdown.addAlternative(presentationID,presentationName)
	}
	
	set element=..addCloseModalButton("change_presentation_cancel_button","Cancel")
	set element=..addSubmitModalButton("change_presentation_save_button","Save")
]]></Implementation>
</Method>

<Method name="validate">
</Method>

<Method name="save">
<Implementation><![CDATA[
	#dim objDocument as abstract.objDocument
	#dim documentID as %String
	#dim oldPresentationID as %String=""
	
	set parentPageControllerID=%request.Get("parentPageControllerID")
	set selectedRowIds=%request.Get("selectedRowIds")
	set presentationID=..getValueByIdentifier("presentation_dropdown")
	
	set parentPageController=##class(EF.pageController.pages.abstractSubmissions).open(parentPageControllerID,..contextData)	

	for i=1:1:$L(selectedRowIds,"|") {
		set rowID = $Piece(selectedRowIds,"|",i)
		if rowID {
			set documentID = parentPageController.getDocumentID(rowID)
			if documentID {
				
				set objDocument = ##class(abstract.objDocument).%OpenId(documentID)	
				if '$IsObject(objDocument) {
					throw ##class(shared.exceptions.generalException).%New("Could not open abstract document")	
				}
				if $IsObject(objDocument.objAssignedPresentationMethod) {
					set oldPresentationID = objDocument.objAssignedPresentationMethod.%Id()
				}
				if presentationID '= oldPresentationID {
					do objDocument.objAssignedPresentationMethodSetObjectId(presentationID)
					do ##class(abstract.objAuditTrail).setFromContext(documentID,..contextData,"Assigned presentation method",##class(abstract.objPresentationMethodDescription).getDescription(oldPresentationID,$$$efEnglishLangID),##class(abstract.objPresentationMethodDescription).getDescription(presentationID,$$$efEnglishLangID))
					try {
						set status = objDocument.%Save()
					} catch error {
						throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(status)
					}
				}
				kill objDocument 	
			}
		}
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.abstractSubmissionsChangeSessionModal">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.pages.abstractSubmissionsChangeSessionModal.CLS/EV.4
;vc; Component: CLS.EF.pageController.pages.abstractSubmissionsChangeSessionModal
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.abstractSubmissionsChangeSessionModal.CLS/EV.4</td><td>CLS.EF.pageController.pages.abstractSubmissionsChangeSessionModal</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.pages.abstractSubmissions</Super>
<TimeChanged>63761,50990</TimeChanged>
<TimeCreated>63406,53067.617995</TimeCreated>

<Method name="loadData">
<Implementation><![CDATA[
	#dim sessionID as %Integer
	#dim currentSessionID as %Integer
	#dim sessionName as %String
	#dim dayDescription as %String
	#dim dayNumber as %Integer
	
	set changeSessionModal=..addModalHeader("change_session_header","Change Session")

	set sessionDropdown=..addDropdown("session_dropdown","Change the session for "_($Length(%request.Get("selectedRowIds"),"|")-1)_" selected submissions to:",5)
	set sessionDropdown.uiComponent.isPersistent=1
	do sessionDropdown.addAlternative("","None")
	
	set rsSessions=##class(%ResultSet).%New("setup.objItem:qSessionsForEventOrdered")
	do rsSessions.Execute(..objEvent.%Id(),$$$efEnglishLangID)
	while rsSessions.Next() {
		set sessionID = rsSessions.Get("ID")
		set sessionName = ##class(setup.objItemDetails).getDetails(sessionID,$$$efEnglishLangID)
		set dayNumber = ##class(setup.objItem).getDayNumber(sessionID)
		set sessionDate= ##class(setup.objItem).getDayDescription(..objEvent.%Id(),dayNumber,$$$efEnglishLangID)
		set sessionTime = ##class(shared.timeFunctions).getDisplayTime(##class(setup.objItem).getStartTimeHoro(sessionID),##class(shared.timeFunctions).getBackendOutputTimeFormat())
		
		do sessionDropdown.addAlternative(sessionID,sessionName_" ("_sessionDate_", "_sessionTime_")")		
	}
	
	set element=..addCloseModalButton("change_session_cancel_button","Cancel")
	set element=..addSubmitModalButton("change_session_save_button","Save")
]]></Implementation>
</Method>

<Method name="validate">
</Method>

<Method name="save">
<Implementation><![CDATA[
	#dim objDocument as abstract.objDocument
	#dim documentID as %String
	#dim selectedSessionID as %String
	#dim oldSessionID as %String =""
	
	set parentPageControllerID=%request.Get("parentPageControllerID")
	set selectedRowIds=%request.Get("selectedRowIds")
	set selectedSessionID=..getValueByIdentifier("session_dropdown")
	
	set parentPageController=##class(EF.pageController.pages.abstractSubmissions).open(parentPageControllerID,..contextData)	
	
	for i=1:1:$L(selectedRowIds,"|") {
		set rowID = $Piece(selectedRowIds,"|",i)
		if rowID {
			set documentID = parentPageController.getDocumentID(rowID)
			if documentID {
				set objDocument=##class(abstract.objDocument).%OpenId(documentID)
				do objDocument.%Reload()
				
				if $IsObject(objDocument.objItem) {
					set oldSessionID = objDocument.objItem.%Id()
				}
				if selectedSessionID '= oldSessionID {
					do objDocument.updateSessionID(selectedSessionID,..contextData)
				}
				kill objDocument
			}
		}
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>abstractSubmissionsChangeSessionModalDefaultData</DefaultData>
<Data name="abstractSubmissionsChangeSessionModalDefaultData">
<Subscript>"abstractSubmissionsChangeSessionModal"</Subscript>
<Value name="1">
<Value>parentPageClassId</Value>
</Value>
<Value name="2">
<Value>parentPageControllerID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.pageController.pages.abstractSubmissionsChangeTopicModal">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.pages.abstractSubmissionsChangeTopicModal.CLS/EV.2
;vc; Component: CLS.EF.pageController.pages.abstractSubmissionsChangeTopicModal
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.abstractSubmissionsChangeTopicModal.CLS/EV.2</td><td>CLS.EF.pageController.pages.abstractSubmissionsChangeTopicModal</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63761,46379</TimeChanged>
<TimeCreated>63406,53067.617995</TimeCreated>

<Method name="loadData">
<Implementation><![CDATA[
	#dim eventID as %Integer
	#dim topicID as %Integer
	#dim currentTopicID as %Integer
	#dim topicName as %String
	
	set eventID=..objEvent.%Id()
	set changeTopicModal=..addModalHeader("change_topic_header","Change Topic")

	set topicDropdown=..addDropdown("topic_dropdown","Change the topic for "_($Length(%request.Get("selectedRowIds"),"|")-1)_" selected submissions to:",5)
	set topicDropdown.uiComponent.isPersistent=1
	set rsTopics=##class(%ResultSet).%New("abstract.objTopic:qAllActiveTopics")
	do rsTopics.Execute(eventID)
	while rsTopics.Next() {
		set topicID = rsTopics.Get("topicID")
		set topicName = ##class(abstract.objTopicDescription).getDescription(topicID,$$$efEnglishLangID)
		do topicDropdown.addAlternative(topicID,topicName)
	}
	
	set element=..addCloseModalButton("change_topic_cancel_button","Cancel")
	set element=..addSubmitModalButton("change_topic_submit_button","Save")
]]></Implementation>
</Method>

<Method name="validate">
</Method>

<Method name="save">
<Implementation><![CDATA[
	#dim objDocument as abstract.objDocument
	#dim documentID as %String
	#dim oldTopicID as %String=""
	
	set parentPageControllerID=%request.Get("parentPageControllerID")
	set selectedRowIds=%request.Get("selectedRowIds")
	set topicID=..getValueByIdentifier("topic_dropdown")

	set parentPageController=##class(EF.pageController.pages.abstractSubmissions).open(parentPageControllerID,..contextData)	
	for i=1:1:$L(selectedRowIds,"|") {
		set rowID = $Piece(selectedRowIds,"|",i)
		if rowID {
			set documentID = parentPageController.getDocumentID(rowID)
			if documentID {
				set objDocument = ##class(abstract.objDocument).%OpenId(documentID)	
				if '$IsObject(objDocument) {
					throw ##class(shared.exceptions.generalException).%New("Could not open abstract document")	
				}
				set oldTopicID = objDocument.objTopic.%Id()
				if topicID '= oldTopicID {
					do objDocument.objTopicSetObjectId(topicID)
					do ##class(abstract.objAuditTrail).setFromContext(documentID,..contextData,"Topic",##class(abstract.objTopicDescription).getDescription(oldTopicID,$$$efEnglishLangID),##class(abstract.objTopicDescription).getDescription(topicID,$$$efEnglishLangID))
					try {
						set status = objDocument.%Save()
					} catch error {
						throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(status)
					}
				}
				do objDocument.%Close() 	
			}
		}
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.abstractSubmissionsRestoreModal">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.pages.abstractSubmissionsRestoreModal.CLS/EV.3
;vc; Component: CLS.EF.pageController.pages.abstractSubmissionsRestoreModal
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.abstractSubmissionsRestoreModal.CLS/EV.3</td><td>CLS.EF.pageController.pages.abstractSubmissionsRestoreModal</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63761,46396</TimeChanged>
<TimeCreated>63406,53067.617995</TimeCreated>

<Method name="loadData">
<Implementation><![CDATA[
	#dim eventID as %Integer
	
	set eventID=..objEvent.%Id()
	set restoreModal=..addModalHeader("restore_header","Restore Submissions")

	set sessionDropdown=..addText("restore_text","Are you sure that you want to restore the selected submissions?")
	
	
	set element=..addCloseModalButton("restore_cancel_button","Cancel")
	set element=..addSubmitModalButton("restore_restore_button","Restore")
]]></Implementation>
</Method>

<Method name="validate">
</Method>

<Method name="save">
<Implementation><![CDATA[
	#dim objDocument as abstract.objDocument
	#dim documentID as %String
	set parentPageControllerID=%request.Get("parentPageControllerID")
	set selectedRowIds=%request.Get("selectedRowIds")
	set parentPageController=##class(EF.pageController.pages.abstractSubmissions).open(parentPageControllerID,..contextData)	
	if '$IsObject(parentPageController) {
		throw ##class(shared.exceptions.generalException).%New("could not open page controller")
	}
	for i=1:1:$L(selectedRowIds,"|") {
		set rowID = $Piece(selectedRowIds,"|",i)
		if rowID {
			set documentID = parentPageController.getDocumentID(rowID)
			if documentID {
				set objDocument=##class(abstract.objDocument).%OpenId(documentID)
				do objDocument.%Reload()
				if +objDocument.active = 0 {
					do objDocument.restoreDocument(..contextData)
				}
				kill objDocument
			}
		}
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.abstractSubmissionsSessionOrderModal">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.pages.abstractSubmissionsSessionOrderModal.CLS/EV.1
;vc; Component: CLS.EF.pageController.pages.abstractSubmissionsSessionOrderModal
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.abstractSubmissionsSessionOrderModal.CLS/EV.1</td><td>CLS.EF.pageController.pages.abstractSubmissionsSessionOrderModal</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63760,47820</TimeChanged>
<TimeCreated>63748,36673.327544</TimeCreated>

<Parameter name="useAutomaticAudit">
<Default>0</Default>
</Parameter>

<Method name="loadData">
<Implementation><![CDATA[
	#dim sessionID as %Integer
	#dim sessionName as %String
	#dim dayDescription as %String
	#dim counter as %Integer = 0
	
	set changeSessionModal=..addModalHeader("change_session_order_header","Session Running Order")
	
	set filterElem=##class(EF.pageController.element).addElementToParent($this,"session_dropdown","Session:")
	set filterDropdown=##class(EF.ui.components.backend.grid.filterDropdown).createNew("session_dropdown",,"Session:")
	set filterElem.uiComponent=filterDropdown
	set filterDropdown.gridID="session_order_grid"
	
	set gridRemote=..addGridRemote("session_order_grid")
	do gridRemote.makeDraggable("session_order_row_ids")
	set gridRemote.uiComponent.isSortable=0
	set gridRemote.uiComponent.rowCountMessage=""
	set gridRemote.uiComponent.dateFormat=##class(shared.dateFunctions).getBackendInputDateFormat()
	set rsSessions=##class(%ResultSet).%New("setup.objItem:qSessionsForEventOrdered")
	do rsSessions.Execute(..objEvent.%Id(),$$$efEnglishLangID)
	while rsSessions.Next() {
		set sessionID = rsSessions.Get("ID")
		set sessionName = ##class(setup.objItemDetails).getDetails(sessionID,$$$efEnglishLangID)
		set dayNumber = ##class(setup.objItem).getDayNumber(sessionID)
		set sessionDate= ##class(setup.objItem).getDayDescription(..objEvent.%Id(),dayNumber,$$$efEnglishLangID)
		set sessionTime = ##class(shared.timeFunctions).getDisplayTime(##class(setup.objItem).getStartTimeHoro(sessionID),##class(shared.timeFunctions).getBackendOutputTimeFormat())
		
		do filterDropdown.addFilterItem(sessionName_" ("_sessionDate_", "_sessionTime_")","sessionID","eq",sessionID)		
	}
	
	set element=..addCloseModalButton("change_session_order_cancel_button","Cancel")
	set element=..addSubmitModalButton("change_session_order_submit_button","Save")
]]></Implementation>
</Method>

<Method name="getDataSet">
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[
	#dim gridDataDocument As abstract.gridDataSessionRunningOrder
	set gridDataDocument=##class(abstract.gridDataSessionRunningOrder).createNew()
	do gridDataDocument.populateDataSet(..objEvent.%Id(),$this)
	return gridDataDocument.dataSet
]]></Implementation>
</Method>

<Method name="getColumns">
<Implementation><![CDATA[
	set gridDataDocument=##class(abstract.gridDataSessionRunningOrder).createNew(##class(shared.dateFunctions).getBackendOutputDateFormat())
	do gridDataDocument.createColumns()
	set cells=##class(%ZEN.proxyObject).%New()
	set cells.schema=gridDataDocument.getColumnSchemaJSON()
	set cells.columns=gridDataDocument.getColumnsAsJSON()
	set cells.searchableColumns=gridDataDocument.getSearchColumnsJSON()
	return cells
]]></Implementation>
</Method>

<Method name="addRow">
<FormalSpec>documentID</FormalSpec>
<ReturnType>EF.pageController.element</ReturnType>
<Implementation><![CDATA[
	set elementID="submission_row_"_documentID
	set row=..getElementByIdentifier(elementID)
	if '$IsObject(row) {
		set row=##class(EF.pageController.containerElement).%New(elementID)
		set row.objectId=documentID
		do ..addChild(row)
		
	}
	return row
]]></Implementation>
</Method>

<Method name="getDocumentID">
<FormalSpec>rowID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	#dim indexTempGlobal As EF.dataCollections.indexTempGlobal
	set indexTempGlobal=##class(EF.dataCollections.indexTempGlobal).open(..getRowDataReference())
	return indexTempGlobal.getValue(rowID)
]]></Implementation>
</Method>

<Method name="getRowDataReference">
<Implementation><![CDATA[	return "page_controller_grid_row_ids_"_..%Id()
]]></Implementation>
</Method>

<Method name="validate">
</Method>

<Method name="save">
<Implementation><![CDATA[
	#dim oldOrder as %Integer
	
	set sessionOrderRowIds=..getValueByIdentifier("session_order_row_ids")
	for i=1:1 {
		set elem=$p(sessionOrderRowIds,"|",i)
		if elem="" quit
		set rowID=$p(elem,"~",1)
		set order=$p(elem,"~",2)
		set documentID=..getDocumentID(rowID)
		set objDocument=##class(abstract.objDocument).%OpenId(documentID)
		set oldOrder = objDocument.presentationOrder
		set objDocument.presentationOrder=order
		do objDocument.%Save()
		do ##class(abstract.objAuditTrail).setFromContext(documentID,..contextData,"Session running order",oldOrder,order)
		kill objDocument
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.changePassword">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.changePassword.CLS/EV.0
;vc; Component: CLS.EF.pageController.pages.changePassword
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.changePassword.CLS/EV.0</td><td>CLS.EF.pageController.pages.changePassword</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>64176,57509.645565</TimeChanged>
<TimeCreated>63406,53067.617995</TimeCreated>

<Parameter name="returnPage">
<Default>changePassword.csp</Default>
</Parameter>

<Parameter name="isSystemPage">
<Default>1</Default>
</Parameter>

<Parameter name="useAutomaticAudit">
<Default>0</Default>
</Parameter>

<Method name="loadData">
<Implementation><![CDATA[
	set panel=..addPanel("ef-change-password-panel","Change Password")
	do panel.addTextAlertInfo("ef-change-password-explanation","Your password has expired. Change the password you use to log in to the Eventsforce administration portal.")
	do panel.addText("ef-change-password-email-address",##class(cod.objItemData).get(..xCRuserID,"email"))
	do panel.addPasswordInput("ef-change-password-new","New password:","")
	do panel.addPasswordInput("ef-change-password-new-confirm","Confirm new password:","")
]]></Implementation>
</Method>

<Method name="validate">
<Implementation><![CDATA[
	
	if ..getValueByIdentifier("ef-change-password-new")'=..getValueByIdentifier("ef-change-password-new-confirm") {
		do ..setErrorMessage("""New password"" and ""Confirm new password"" do not match")
		return	
	}
]]></Implementation>
</Method>

<Method name="save">
<Implementation><![CDATA[	do ##class(access.objLoginAttempt).changeBackendPW(..xCRuserID,..getValueByIdentifier("ef-change-password-new"))
]]></Implementation>
</Method>

<Method name="getSuccessURL">
<Implementation><![CDATA[	return ##class(access.backendPageNav).loginNavToHomePage(..xCRuserID)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.changePasswordModal">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.changePasswordModal.CLS/EV.1
;vc; Component: CLS.EF.pageController.pages.changePasswordModal
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.changePasswordModal.CLS/EV.1</td><td>CLS.EF.pageController.pages.changePasswordModal</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63890,39897</TimeChanged>
<TimeCreated>63406,53067.617995</TimeCreated>

<Parameter name="isSystemPage">
<Default>1</Default>
</Parameter>

<Parameter name="useAutomaticAudit">
<Default>0</Default>
</Parameter>

<Method name="loadData">
<Implementation><![CDATA[
	do ..addText("ef-change-password-email-address",##class(cod.objItemData).get(..xCRuserID,"email"))
	do ..addPasswordInput("ef-change-password-old","Current password:","")
	do ..addPasswordInput("ef-change-password-new","New password:","")
	do ..addPasswordInput("ef-change-password-new-confirm","Confirm new password:","")
	
	set element=..addCloseModalButton("ef-reset-password-cancel-button","Cancel")
	set element=..addSubmitModalButton("ef-reset-password-change-button","Change")
]]></Implementation>
</Method>

<Method name="validate">
<Implementation><![CDATA[
	if '##class(access.objLoginAttempt).checkBackendPW(..xCRuserID,..getValueByIdentifier("ef-change-password-old")) {
		do ..setErrorMessage("""Current password"" is incorrect")
		return
	}
	if ..getValueByIdentifier("ef-change-password-new")'=..getValueByIdentifier("ef-change-password-new-confirm") {
		do ..setErrorMessage("""New password"" and ""Confirm new password"" do not match")
		return	
	}
]]></Implementation>
</Method>

<Method name="save">
<Implementation><![CDATA[	do ##class(access.objLoginAttempt).changeBackendPW(..xCRuserID,..getValueByIdentifier("ef-change-password-new"))
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.commEventSession4">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.commEventSession4.CLS/EV.1
;vc; Component: CLS.EF.pageController.pages.commEventSession4
;vc;  Location: SmallDev
;vc; Date/Time: 25-Apr-16 14:48
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.commEventSession4.CLS/EV.1</td><td>CLS.EF.pageController.pages.commEventSession4</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Apr-16 14:48</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>64021,43940</TimeChanged>
<TimeCreated>63372,47463.737212</TimeCreated>

<Method name="loadData">
<Implementation><![CDATA[
	#dim mailShotID as %Integer = %session.Data("eventsforce","backend","Adhoc mailShotID")
	#dim isScheduled as %Integer = $G(%session.Data("eventsforce","backend","Adhoc mailShot","IsScheduled"))
	
	set objMailShot=##class(mail.objMailShot).%OpenId(mailShotID)
	set totalSent=objMailShot.objMails.Count()

	
	set myPanel=..addPanel("my_panel","Email Sending Results")
	set customMessage=##class(shared.callOuts).runObj("commEventSession4.csp","outputEmailSuccessMsg",1,totalSent,mailShotID) 
	if +customMessage {
		set message=$p(customMessage,"|",3)
	} else {
		if totalSent=1 {
			set message=totalSent_" email has been "_$S(isScheduled:"scheduled.",1:"sent.")	
		} else {
			set message=totalSent_" emails have been "_$S(isScheduled:"scheduled.",1:"sent.")	
		}
	}
	do myPanel.addText("message_text",message)
	
	kill %session.Data("eventsforce","backend","Adhoc mailShotID")
	kill %session.Data("eventsforce","backend","Adhoc mailShot","IsScheduled")
	quit
]]></Implementation>
</Method>

<Method name="validate">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit 1
]]></Implementation>
</Method>

<Method name="saveData">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.dashBoardChangeContentModal">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.dashBoardChangeContentModal.CLS/EV.1
;vc; Component: CLS.EF.pageController.pages.dashBoardChangeContentModal
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.dashBoardChangeContentModal.CLS/EV.1</td><td>CLS.EF.pageController.pages.dashBoardChangeContentModal</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63970,59745</TimeChanged>
<TimeCreated>63406,53067.617995</TimeCreated>

<Method name="loadData">
<Implementation><![CDATA[
	set chartIdentifier="dashboard chart "_%request.Get("chartNumber")
	set chartName=%request.Get("chartName")
	do ..addHiddenInput("ef-chart-identifier","chart identifier",chartIdentifier,1)
	set archiveModal=..addModalHeader("ef-change-chart-content-header","Change Panel Content")
	set dropdown=..addDropdown("ef-select-panel-content-dropdown","Change the panel to show:","")
	set allCharts=##class(EF.ui.components.backend.chart.base).getAllAvailableChartsSorted(..contextData)
	
	Set key=""
	For {
		Set key=allCharts.Next(key)
		If (key="") Quit
		set chart=allCharts.GetAt(key)
		Set isDefault=0
		If (chart.getIdentifier() = chartName) {
			Set isDefault=1
		}
		do ..addChartToDropdown(dropdown,chart.getIdentifier(),chart.#name,chart.#description,,isDefault)
	}
	
	set element=..addCloseModalButton("ef-change-chart-cancel-button","Cancel")
	set element=..addSubmitModalButton("ef-change-chart-submit-button","Submit")
]]></Implementation>
</Method>

<Method name="addChartToDropdown">
<FormalSpec>dropdown:EF.pageController.inputElements.dropdown,identifier,name,description,value="",isDefault=0</FormalSpec>
<Implementation><![CDATA[
	#dim alternative As EF.ui.components.alternative
	set alternative=dropdown.addAlternative(identifier,name,isDefault)
	do alternative.addAttribute("data-ef-long-description",description)
]]></Implementation>
</Method>

<Method name="validate">
</Method>

<Method name="save">
<Implementation><![CDATA[
	set chartIdentifier=..getValueByIdentifier("ef-chart-identifier")
	set value=..getValueByIdentifier("ef-select-panel-content-dropdown")
	do ##class(EF.dataCollections.serverStorageUserPageEvent).set(chartIdentifier,value,..xCRuserID,"backend/home/dashboardv2.csp",..objEvent.%Id())
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.dashboardChangeEventComparisonModal">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.dashboardChangeEventComparisonModal.CLS/EV.1
;vc; Component: CLS.EF.pageController.pages.dashboardChangeEventComparisonModal
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.dashboardChangeEventComparisonModal.CLS/EV.1</td><td>CLS.EF.pageController.pages.dashboardChangeEventComparisonModal</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63853,57402</TimeChanged>
<TimeCreated>63406,53067.617995</TimeCreated>

<Method name="loadData">
<Implementation><![CDATA[
	if '..isReload {
		set settingIdentifier="comparisonEventID-"_%request.Get("chartNumber")
		set chartName=%request.Get("chartName")
		set comparisonEventID=##class(EF.dataCollections.serverStorageUserPageEvent).get(settingIdentifier,..xCRuserID,"backend/home/dashboardv2.csp",..getEventID())
		do ..addHiddenInput("ef-comparison-identifier","comparison identifier",settingIdentifier,1)
		do ..addModalHeader("ef-change-chart-comparison-header","Compare to Event")
		set dropdown=..addSearchableDropdown("ef-select-event-dropdown","Compare the current event to this event:",comparisonEventID)
		if $l(chartName) {
			set eventListUrl=##class(EF.ui.components.backend.chart.chart).getComparisonEventListDataSourceURLForChartName(chartName)
			do dropdown.uiComponent.addAttribute("data-link-url",##class(shared.pCSP).Link(eventListUrl))
		}
		set dropdown.uiComponent.dataTextField="idAndName"
		set dropdown.uiComponent.dataValueField="id"
		set element=..addCloseModalButton("ef-change-chart-cancel-button","Cancel")
		set element=..addSubmitModalButton("ef-change-chart-submit-button","Submit")
	}
]]></Implementation>
</Method>

<Method name="validate">
</Method>

<Method name="save">
<Implementation><![CDATA[
	set settingIdentifier=..getValueByIdentifier("ef-comparison-identifier")
	set value=..getValueByIdentifier("ef-select-event-dropdown")
	do ##class(EF.dataCollections.serverStorageUserPageEvent).set(settingIdentifier,value,..xCRuserID,"backend/home/dashboardv2.csp",..objEvent.%Id())
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.dashboardV2">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.dashboardV2.CLS/EV.5
;vc; Component: CLS.EF.pageController.pages.dashboardV2
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.dashboardV2.CLS/EV.5</td><td>CLS.EF.pageController.pages.dashboardV2</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63970,59745</TimeChanged>
<TimeCreated>63832,36677.60852</TimeCreated>

<Parameter name="useAutomaticAudit">
<Default>0</Default>
</Parameter>

<Method name="loadData">
<Implementation><![CDATA[
	#define kendoDateFormat 25
	#dim panel as EF.pageController.containerElements.panel
	#dim panelTitle as %String
	#dim nameOfChartClass as %String 
	#dim chartName as %String 
	#dim chartNumber as %Integer
	#dim div as EF.pageController.containerElements.div
	#dim messagesArea as EF.pageController.containerElements.div
	#dim xPersonID = ..xCRuserID
	#dim xEventID = ..getEventID()
	#dim summary as EF.dataSources.eventSummary
	#dim contextData As EF.contextData = ..contextData
	#dim message As admin.message
	
	kill defaultCharts
	set defaultCharts(1)="eventRegistrationsTotal" //Registrations over Time (double-width)
	set defaultCharts(2)="eventSummary" //Event Status
	set defaultCharts(3)="eventRegistrationsComparison" //Registrations Comparison
	set defaultCharts(4)="eventRevenueComparison" //Revenue Comparison
	set defaultCharts(5)="eventRevenueOverTime" //Revenue over Time
	set defaultCharts(6)="eventInvitationStatus" //Invitation Status
	set defaultCharts(7)="eventAttendeeCategories" //Registrations by Attendee Category
	
	
	if ##class(access.objFunction).hasFunctionByAccessID(xPersonID,"DASHUSERMESSAGES") {
		set messagesArea=..addDiv("user-messages")
		set messages=##class(admin.message).getMessagesForPerson(xPersonID)
		set key=""
		for count=1:1 {
			set key=messages.Previous(key)
			if key="" quit
			set message=messages.GetAt(key)
			if (##class(%SYSTEM.SQL).DATEDIFF("dd",message.messageTimeStamp, ##class(%Library.UTC).NowUTC()) < 30) {
				set messageComponent=##class(EF.ui.components.backend.userMessage).createNew("message-alert-"_count,message)
				do messagesArea.uiComponent.addChild(messageComponent)
			}
		}
	}
	
	if ##class(access.objFunction).hasFunctionByAccessID(xPersonID,"DASHSEARCH") {
		set panel=..addPanel("search-panel","Search")
		set element=panel.addTextInput("last-name-search","Last name:","")
		set element=panel.addTextInput("company-search","Company:","")
		set element=panel.addTextInput("registration-reference-search","Registration reference:","")
		do element.uiComponent.makeSystemItem()
		set element=panel.addTextInput("invoice-number-search","Invoice number:","")
		do element.uiComponent.makeSystemItem()
		set button=panel.addButton("search-button","Search")
		do button.uiComponent.addAttribute("data-link-url",##class(shared.pCSPmanage).Link("dashboardGetSearchRedirect.csp?pageControllerID="_..%Id()))
		if $D(%session) {
			set openBookingPurchaseID=$G(%session.Data("backend","dashboardv2.csp","openPurchaseID"))
			if openBookingPurchaseID {
				set openBookingURL="../../frontend/reg/initSession.csp?page=amendPrepareSession.csp&eventID="_xEventID_"&backendBooking=1&purchaseID="_openBookingPurchaseID
				set element=panel.addHiddenInput("open-booking-url","",openBookingURL,1)
				kill %session.Data("backend","dashboardv2.csp","openPurchaseID")
			}
		}
	}
	
	if ##class(access.objFunction).hasFunctionByAccessID(xPersonID,"DASHCHARTS") {
		for chartNumber=1:1:7 {
			set chartName=##class(EF.dataCollections.serverStorageUserPageEvent).get("dashboard chart "_chartNumber,xPersonID,"backend/home/dashboardv2.csp",xEventID)
			set comparisonEventID=##class(EF.dataCollections.serverStorageUserPageEvent).get("comparisonEventID-"_chartNumber,xPersonID,"backend/home/dashboardv2.csp",xEventID)
			if '##class(EF.ui.components.backend.chart.base).hasAccessToChartName(chartName,contextData) {
				set chartName=defaultCharts(chartNumber)
			}
			
			set panel=..addPanelChart("chart-"_chartNumber_"-panel")
			set toolDropdown=panel.uiComponent.addToolDropdown()
			do toolDropdown.addToolItemOpenModal("Change content...", "dashBoardChangeContentModal.csp?chartNumber="_##class(EF.htmlGenerator).encodeForURL(chartNumber)_"&chartName="_##class(EF.htmlGenerator).encodeForURL(chartName))
			
			if ##class(EF.ui.components.backend.chart.base).hasAccessToChartName(chartName,contextData) {
				
				set chart=panel.addChart("chart-"_chartNumber,chartName)
				
				if chart.#hasComparisonEvent {
					do toolDropdown.addToolItemOpenModal("Compare to...", "dashboardChangeEventComparisonModal.csp?chartNumber="_##class(EF.htmlGenerator).encodeForURL(chartNumber)_"&chartName="_##class(EF.htmlGenerator).encodeForURL(chartName))
				}
				
				if chartName="eventSummary" {
					set chart.dataSource=##class(EF.dataSources.eventSummary).createNew(contextData)
				} elseif chartName="accountSummary" {
					set chart.dataSource=##class(EF.dataSources.accountSummary).createNew(contextData)	
				} elseif chartName="eventActionSummary" {
					set chart.dataSource=##class(EF.dataSources.eventActionSummary).createNew(contextData)	
				}
				if chart.%IsA("EF.ui.components.backend.chart.chart") {
					do chart.configureChart(xEventID,comparisonEventID)
					
					do toolDropdown.addDivider()
					do toolDropdown.addExportAsImage("Export as image","chart-"_chartNumber)
					do toolDropdown.addExportAsPDF("Export as PDF","chart-"_chartNumber)
					do toolDropdown.addExportToExcel("Export data to Excel","chart-"_chartNumber)
				}		
				
			} else {
				// don't draw empty chart		
			}			
		}
	}
]]></Implementation>
</Method>

<Method name="getSearchRedirectURL">
<FormalSpec>lastname,company,bookingRef,invoiceNo</FormalSpec>
<Implementation><![CDATA[
	
	set (invoicePurchaseID,bookingRefPurchaseID,gotoPurchaseID)=""
	// skip the entire results page if we have a matching invoice number or booking reference
	if invoiceNo'="" {
		set objInvoice=##class(eCom.objInvoice).getInvoiceFromInvoiceNumber(invoiceNo)
		if $IsObject(objInvoice) {
			set (invoicePurchaseID,gotoPurchaseID)=objInvoice.purchaseID
			
		}
		kill objInvoice
	}
	if bookingRef'="" {
		set (bookingRefPurchaseID,gotoPurchaseID)=##class(eCom.objPurchase).bookingRefToPurchaseID(bookingRef)
	}
	
	// If they have entered something for invoice number and booking reference only get the booking if they match
	if (invoiceNo'="")&&(bookingRef'="") {
		if invoicePurchaseID'=bookingRefPurchaseID {
			set gotoPurchaseID=""	
		}	
	}
	if gotoPurchaseID {
		set gotoEventID=##class(eCom.objPurchase).getEventID(gotoPurchaseID)
		if '##class(links.lnkAccessPersonEvent).hasEvent(..contextData.auditPersonID,gotoEventID) {
			set gotoPurchaseID=""
		}
	}
	
	
	if gotoPurchaseID {
		set url="switchEvent.csp?eventID="_gotoEventID
		set %session.Data("backend","dashboardv2.csp","openPurchaseID")=gotoPurchaseID
	} else {
		set url="../../backend/home/delegateSearchSimple.csp?butSearch.x=1&dashboardSearch=1"
		set url=##class(EF.htmlGenerator).addParameterToURL(url,"lastname",lastname)
		set url=##class(EF.htmlGenerator).addParameterToURL(url,"company",company)
		set url=##class(EF.htmlGenerator).addParameterToURL(url,"bookingRef",bookingRef)
	}
	return url
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.eventAttendeeCategories">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.eventAttendeeCategories.CLS/EV.0
;vc; Component: CLS.EF.pageController.pages.eventAttendeeCategories
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.eventAttendeeCategories.CLS/EV.0</td><td>CLS.EF.pageController.pages.eventAttendeeCategories</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>64113,45783</TimeChanged>
<TimeCreated>63383,42544.650013</TimeCreated>

<Parameter name="returnPage">
<Default>eventAttendeeCategories.csp</Default>
</Parameter>

<Property name="eventAttendeeCategories">
<Type>setup.eventAttendeeCategories</Type>
<Transient>1</Transient>
</Property>

<Method name="loadData">
<Implementation><![CDATA[
	set eventID=..getEventID()
	set eventConfiguration = ##class(setup.eventConfiguration).createForEventID(..getEventID())
	set ..eventAttendeeCategories=##class(setup.eventAttendeeCategories).createNew(eventConfiguration)
	do ..eventAttendeeCategories.load()
	
	set mainPanel=..addPanel("attendee-categories-panel","Attendee Categories")
	do ..loadMainPanel(mainPanel)
]]></Implementation>
</Method>

<Method name="loadMainPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	#dim table As EF.pageController.containerElements.responsiveTable = panel.addResponsiveTable("attendee-categories-table")
	
	do table.makeReorderable("ef-category-display-order")
	set handleColumn=table.addColumn("col-resize-handle","","center")
	set column=table.addColumn("col-category-description","Description","left")
	set column=table.addColumn("col-category-status","Status","left")
	set column=table.addColumn("col-category-is-default","Default","center")
	do column.uiComponent.addClass("ef-table-column-xs")
	
	set listOfAttendeeCategories=..eventAttendeeCategories.getAttendeeCategoriesOrdered()
	set key=""
	for {
		set attendeeCategory=listOfAttendeeCategories.GetNext(.key)
		if key="" quit
		do ..addRow(table,attendeeCategory)	
	}
]]></Implementation>
</Method>

<Method name="addRow">
<FormalSpec>table:EF.pageController.containerElements.responsiveTable,attendeeCategory:setup.eventAttendeeCategory</FormalSpec>
<Implementation><![CDATA[
	#dim row As EF.pageController.containerElements.row
	
	set eventCategoryID=attendeeCategory.eventCategoryID
	set row=table.addRow("row-att-cat-"_eventCategoryID,"")
	set row.objectId=eventCategoryID
	set eventCategoryID=row.objectId
	set status="not active"
	if attendeeCategory.isActive {
		set status="active"
		if attendeeCategory.isInvitationOnly {
			set status="invitation only"
		}
	}
	
	set cell=row.addCellByColumnIdentifier("col-resize-handle","")
	do cell.uiComponent.addClass("ef-table-row-drag-handle")
	if status="not active" {
		do row.uiComponent.addClass("ef-sortable-row-disabled")	
	}
	set cell=row.addCellByColumnIdentifier("col-category-description",attendeeCategory.name)
	set cell=row.addCellByColumnIdentifier("col-category-status","")
	
	set dropdown=cell.addDropdown("ef-category-status-"_eventCategoryID, "", status,)
	do dropdown.addAlternative("active","On")
	do dropdown.addAlternative("invitation only","Invitation only")
	if attendeeCategory.isAllowedToDisable(.explanationText) {
		do dropdown.addAlternative("not active","Off")
	} else {
		set dropdown.uiComponent.title=explanationText
	}
	set cell=row.addCellByColumnIdentifier("col-category-is-default","")
	set isReadOnly='attendeeCategory.isActive

	set radio=cell.addRadio("ef-is-default-"_eventCategoryID, "", attendeeCategory.isDefault,isReadOnly, "ef-is-default",attendeeCategory.isDefault)
	if 'isReadOnly {
		set radio.enableDisableDependencyList=##class(EF.ui.components.dependencyList).createNew("ef-category-status-"_eventCategoryID,"not active","neq")
	}
	
	set row.uiComponent.toggleClassDependencyList=##class(EF.ui.components.dependencyList).createNew("ef-category-status-"_eventCategoryID,"not active","eq")
	set row.uiComponent.toggleClassDependencyClassName="ef-sortable-row-disabled"
]]></Implementation>
</Method>

<Method name="validate">
<Implementation><![CDATA[
	do ..updateAttendeeCategories()
	if '..eventAttendeeCategories.isValid(.errors) {
		do ..addErrorMessagesToElement("attendee-categories-panel",errors)
	}
]]></Implementation>
</Method>

<Method name="updateAttendeeCategories">
<Implementation><![CDATA[
	set tableRows=..getElementByIdentifier("attendee-categories-table").rows
	set key=""
	for {
		set row=tableRows.GetNext(.key)
		if key="" quit
		set eventCategoryID=row.objectId
		set attendeeCategory=..eventAttendeeCategories.getAttendeeCategory(eventCategoryID)
		
		if ..isUpdatedByIdentifier("ef-is-default-"_eventCategoryID) {
			if ..getValueByIdentifier("ef-is-default-"_eventCategoryID) {
				set attendeeCategory.isDefault=1
			} else {
				set attendeeCategory.isDefault=0
			}
		}
		if ..isUpdatedByIdentifier("ef-category-status-"_eventCategoryID) {
			set status=..getValueByIdentifier("ef-category-status-"_eventCategoryID)
			if status="not active" {
				set attendeeCategory.isActive=0
				set attendeeCategory.isInvitationOnly=0	
			} elseif status="active" {
				set attendeeCategory.isActive=1
				set attendeeCategory.isInvitationOnly=0
			} elseif status="invitation only" {
				set attendeeCategory.isActive=1
				set attendeeCategory.isInvitationOnly=1
			}
		}
		
	}
	
	if ..isUpdatedByIdentifier("ef-category-display-order") {
		set rowIds=..getValueByIdentifier("ef-category-display-order")
		for displayOrder=1:1:$l(rowIds,",") {
			set rowId=$p(rowIds,",",displayOrder)
			set attendeeCategory=..eventAttendeeCategories.getAttendeeCategory(..getElementByIdentifier(rowId).objectId)
			set attendeeCategory.displayOrder=displayOrder
		}
	}
]]></Implementation>
</Method>

<Method name="saveData">
<Implementation><![CDATA[	do ..eventAttendeeCategories.save()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.eventCapacity">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.eventCapacity.CLS/EV.2
;vc; Component: CLS.EF.pageController.pages.eventCapacity
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.eventCapacity.CLS/EV.2</td><td>CLS.EF.pageController.pages.eventCapacity</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>64142,57044</TimeChanged>
<TimeCreated>63383,42544.650013</TimeCreated>

<Parameter name="returnPage">
<Default>eventCapacity.csp</Default>
</Parameter>

<Property name="eventDays">
<Type>setup.eventDays</Type>
<Transient>1</Transient>
</Property>

<Property name="showAttendeeCategories">
<Type>%Boolean</Type>
<Transient>1</Transient>
</Property>

<Method name="loadData">
<Implementation><![CDATA[
	do ..loadEventConfiguration()
	set ..eventDays=..eventConfiguration.getEventDays()
	set ..showAttendeeCategories=..eventConfiguration.eventAttendeeCategories.isMultiCategory()
	
	set mainPanel=..addPanel("event-days-panel","Days")
	do ..loadDaysPanel(mainPanel)
]]></Implementation>
</Method>

<Method name="loadDaysPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	#dim table As EF.pageController.containerElements.responsiveTable = panel.addResponsiveTable("event-days-table")
	
	do table.uiComponent.useCustomStripes()
	set column=table.addColumn("col-day","Day","left")
	if ..showAttendeeCategories {
		set column=table.addColumn("col-day-attendee-category","Attendee Category","left")
	}
	set column=table.addColumn("col-day-registrations","Registrations","left")
	set column=table.addColumn("col-day-capacity","Capacity","left")
	do column.uiComponent.addClass("ef-table-column-xs")
	set column=table.addColumn("col-day-capacity-used","Used","right")
	do column.uiComponent.addClass("ef-table-column-xs")
	set column=table.addColumn("col-day-capacity-in-progress","In Progress","right")
	do column.uiComponent.addClass("ef-table-column-xs")
	set column=table.addColumn("col-day-capacity-remaining","Remaining","right")
	do column.uiComponent.addClass("ef-table-column-xs")
	set column=table.addColumn("col-day-capacity-notification-level","Notification","left")
	do column.uiComponent.addClass("ef-table-column-xs")
	
	set listOfDays=..eventDays.getEventDaysOrdered()
	set key=""
	for {
		set eventDay=listOfDays.GetNext(.key)
		if key="" quit
		set rowClass=$select($increment(counter)#2=0:"ef-table-row-even",1:"ef-table-row-odd")
		do ..addRowsForDay(table,eventDay,rowClass)	
	}
]]></Implementation>
</Method>

<Method name="addRowsForDay">
<FormalSpec>table:EF.pageController.containerElements.responsiveTable,eventDay:setup.eventDay,rowClass:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	#dim row As EF.pageController.containerElements.row
	#dim cell As EF.pageController.containerElements.cell
	set dayNumber=eventDay.dayNumber
	set row=table.addRow("row-event-day-"_dayNumber,"")
	do row.uiComponent.addClass(rowClass)
	set isReadOnly=0,readOnlyTitle=""
	if 'eventDay.isUsedForAvailabilityChecking() {
		set isReadOnly=1
		set readOnlyTitle="This cannot be changed because day selection is switched off"
	}
	
	set cell=row.addCellByColumnIdentifier("col-day",eventDay.dayName.getPhrase())
	if ..showAttendeeCategories {
		set cell=row.addCellByColumnIdentifier("col-day-attendee-category","All categories")
	}
	set cell=row.addCellByColumnIdentifier("col-day-registrations","")
	set dropdown=cell.addDropdown("event-day-registration-status-"_dayNumber,"",eventDay.registrationStatus,isReadOnly)
	do dropdown.addAlternative("unlimited","Unlimited")
	do dropdown.addAlternative("limited","Limited")
	do dropdown.addAlternative("stopped","Stopped")
	set dropdown.uiComponent.title=readOnlyTitle
	
	set cell=row.addCellByColumnIdentifier("col-day-capacity","")
	set integerInput=cell.addIntegerInput("event-day-capacity-"_dayNumber,"",eventDay.capacity)
	do integerInput.setNameForValidationError("capacity for day "_dayNumber)
	set integerInput.showHideDependencyList=##class(EF.ui.components.dependencyList).createNew("event-day-registration-status-"_dayNumber,"limited")
	set cell=row.addCellByColumnIdentifier("col-day-capacity-used",eventDay.bookingLevel.getCompleted())
	set cell=row.addCellByColumnIdentifier("col-day-capacity-in-progress",eventDay.bookingLevel.getNewInProgress())
	set remaining=eventDay.getRemainingCapacity()
	set cell=row.addCellByColumnIdentifier("col-day-capacity-remaining",remaining)
	if $length(remaining)&&(remaining<=0) {
		do cell.addWarning()
	}
	set cell=row.addCellByColumnIdentifier("col-day-capacity-notification-level","")
	do ..addNotificationInput(cell,"event-day-notification-level-"_dayNumber,"event-day-notification-on-"_dayNumber,eventDay.hasCapacityNotification,eventDay.capacityNotificationLevel,eventDay.dayNumber,isReadOnly,readOnlyTitle)
	if ..showAttendeeCategories {
		set listOfAttendeeCategories=..eventConfiguration.getAttendeeCategories().getAttendeeCategoriesOrdered()
		set key=""
		for {
			set attendeeCategory=listOfAttendeeCategories.GetNext(.key)
			if key="" quit
			if attendeeCategory.isActive {
				do ..addRowForCategory(table,eventDay,attendeeCategory,rowClass)	
			}
		}
	}
]]></Implementation>
</Method>

<Method name="addRowForCategory">
<FormalSpec>table:EF.pageController.containerElements.responsiveTable,eventDay:setup.eventDay,attendeeCategory:setup.eventAttendeeCategory,rowClass:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	#dim row As EF.pageController.containerElements.row
	#dim cell As EF.pageController.containerElements.cell
	set isReadOnly=0
	if 'eventDay.isUsedForAvailabilityChecking() {
		set isReadOnly=1	
	}
	set eventCategoryID=attendeeCategory.eventCategoryID
	set dayNumber=eventDay.dayNumber
	set eventDayAttendeeCategory=eventDay.getAttendeeCategory(attendeeCategory)
	set row=table.addRow("row-event-day-"_dayNumber_"-category-"_eventCategoryID,"")
	do row.uiComponent.addClass(rowClass)
	
	set cell=row.addCellByColumnIdentifier("col-day","")
	set cell=row.addCellByColumnIdentifier("col-day-attendee-category",attendeeCategory.name)
	set cell=row.addCellByColumnIdentifier("col-day-registrations","")
	
	
	set dropdown=cell.addDropdown("event-day-registration-status-"_dayNumber_"-category-"_eventCategoryID,"",eventDayAttendeeCategory.registrationStatus,isReadOnly)
	do dropdown.addAlternative("allowed","Allowed")
	do dropdown.addAlternative("notAllowed","Not Allowed")
	do dropdown.addAlternative("limited","Limited")
	if isReadOnly {
		set dropdown.uiComponent.title="This cannot be changed because day selection is switched off"
	}	
	
	set cell=row.addCellByColumnIdentifier("col-day-capacity","")
	set integerInput=cell.addIntegerInput("event-day-capacity-"_dayNumber_"-category-"_eventCategoryID,"",eventDayAttendeeCategory.capacity)
	set integerInput.showHideDependencyList=##class(EF.ui.components.dependencyList).createNew("event-day-registration-status-"_dayNumber_"-category-"_eventCategoryID,"limited")
	set cell=row.addCellByColumnIdentifier("col-day-capacity-used",eventDayAttendeeCategory.bookingLevel.getCompleted())
	set cell=row.addCellByColumnIdentifier("col-day-capacity-in-progress",eventDayAttendeeCategory.bookingLevel.getNewInProgress())
	set remaining=eventDayAttendeeCategory.getRemainingCapacity()
	set cell=row.addCellByColumnIdentifier("col-day-capacity-remaining",remaining)
	if $length(remaining)&&(remaining<=0) {
		do cell.addWarning()
	}
	set cell=row.addCellByColumnIdentifier("col-day-capacity-notification-level","")
]]></Implementation>
</Method>

<Method name="addNotificationInput">
<FormalSpec>parent:EF.pageController.containerElement,inputElementID,checkBoxElementID,isEnabled,notificationLevel,dayNumber,isReadOnly=0,title=""</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set div=parent.addDiv(inputElementID_"-group")
	do div.uiComponent.addClass("input-group")
	set span=div.addSpan(checkBoxElementID_"-span")
	do span.uiComponent.addClass("input-group-addon")
	set checkBox=span.addCheckbox(checkBoxElementID,"",isEnabled,isReadOnly)
	set checkBox.uiComponent.title=title
	set integerInput=div.addIntegerInput(inputElementID,"",notificationLevel)
	do integerInput.setNameForValidationError("notification level for day "_dayNumber)
	set integerInput.uiComponent.minValue=0
	set integerInput.uiComponent.maxValue=100
	set integerInput.enableDisableDependencyList=##class(EF.ui.components.dependencyList).createNew(checkBoxElementID,1)
	do integerInput.uiComponent.addClass("ef-number-input-group")
	set integerInput.uiComponent.title=title
	set span=div.addSpan(inputElementID_"-span")
	do span.addText(inputElementID_"-caption","%")
	do span.uiComponent.addClass("input-group-addon")
]]></Implementation>
</Method>

<Method name="validate">
<Implementation><![CDATA[
	do ..updateEventDays()
	if '..eventDays.isValid(.errors) {
		do ..addErrorMessagesToElement("event-days-panel",errors)
	}
]]></Implementation>
</Method>

<Method name="updateEventDays">
<Private>1</Private>
<Implementation><![CDATA[
	set listOfDays=..eventDays.getEventDaysOrdered()
	set key=""
	for {
		set eventDay=listOfDays.GetNext(.key)
		if key="" quit
		do ..updateEventDay(eventDay)	
	}
]]></Implementation>
</Method>

<Method name="updateEventDay">
<FormalSpec>eventDay:setup.eventDay</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set dayNumber=eventDay.dayNumber
	if ..isUpdatedByIdentifier("event-day-registration-status-"_dayNumber) {
		set eventDay.registrationStatus=..getValueByIdentifier("event-day-registration-status-"_dayNumber)	
	}
	if ..isUpdatedByIdentifier("event-day-capacity-"_dayNumber) {
		set eventDay.capacity=..getValueByIdentifier("event-day-capacity-"_dayNumber)	
	}
	if ..isUpdatedByIdentifier("event-day-notification-on-"_dayNumber) {
		set eventDay.hasCapacityNotification=..getValueByIdentifier("event-day-notification-on-"_dayNumber)	
	}
	
	if ..isUpdatedByIdentifier("event-day-notification-level-"_dayNumber) {
		set eventDay.capacityNotificationLevel=..getValueByIdentifier("event-day-notification-level-"_dayNumber)	
	}
	set listOfAttendeeCategories=..eventConfiguration.getAttendeeCategories().getAttendeeCategoriesOrdered()
	set key=""
	for {
		set attendeeCategory=listOfAttendeeCategories.GetNext(.key)
		if key="" quit
		if attendeeCategory.isActive {
			do ..updateEventDayAttendeeCategory(eventDay,attendeeCategory)
		}
	}
]]></Implementation>
</Method>

<Method name="updateEventDayAttendeeCategory">
<FormalSpec>eventDay:setup.eventDay,attendeeCategory:setup.eventAttendeeCategory</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set dayNumber=eventDay.dayNumber
	set eventCategoryID=attendeeCategory.eventCategoryID
	#dim eventDayAttendeeCategory As setup.eventDayAttendeeCategory = eventDay.getAttendeeCategory(attendeeCategory)
	if ..isUpdatedByIdentifier("event-day-registration-status-"_dayNumber_"-category-"_eventCategoryID) {
		set eventDayAttendeeCategory.registrationStatus=..getValueByIdentifier("event-day-registration-status-"_dayNumber_"-category-"_eventCategoryID)	
	}
	if eventDayAttendeeCategory.registrationStatus="limited" {
		if ..isUpdatedByIdentifier("event-day-capacity-"_dayNumber_"-category-"_eventCategoryID) {
			set eventDayAttendeeCategory.capacity=..getValueByIdentifier("event-day-capacity-"_dayNumber_"-category-"_eventCategoryID)	
		}
	}
]]></Implementation>
</Method>

<Method name="saveData">
<Implementation><![CDATA[	do ..eventDays.save()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.eventDayTranslations">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.eventDayTranslations.CLS/EV.1
;vc; Component: CLS.EF.pageController.pages.eventDayTranslations
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.eventDayTranslations.CLS/EV.1</td><td>CLS.EF.pageController.pages.eventDayTranslations</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.pages.translationModal</Super>
<TimeChanged>64138,40353</TimeChanged>
<TimeCreated>64131,61117.823608</TimeCreated>

<Method name="loadData">
<Implementation><![CDATA[
	set eventDay=..getEventDay()
	set ..translations=eventDay.dayName.getTranslationsOrderedByLanguageName()
	
	
	do ..addText("ef-translations-title","Translations for """_eventDay.getDayNameLabelForSettingsPage()_"""")
	
	set translationsListElem=..addList("ef-translations-list","")
	
	for {
		set translation=..translations.GetNext(.key)
		if key="" quit
		set languageInput=translationsListElem.addTextInput("ef-translation-"_translation.languageID,translation.languageName_":",translation.translation)
	}
    
    set element=..addCloseModalButton("ef-translations-cancel-button","Cancel")
	set element=..addSubmitModalButton("ef-translations-save-button","OK")
]]></Implementation>
</Method>

<Method name="validate">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set eventDay=..getEventDay()
	do ..updateEventDay(eventDay)
	set ..translations=eventDay.dayName.getTranslationsOrderedByLanguageName()
]]></Implementation>
</Method>

<Method name="getEventDay">
<ReturnType>setup.eventDay</ReturnType>
<Implementation><![CDATA[	return ..getEventConfiguration().getDay(..getRequestData("eventDayNumber"))
]]></Implementation>
</Method>

<Method name="updateEventDay">
<FormalSpec>eventDay:setup.eventDay</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set translations=eventDay.dayName.getTranslationsOrderedByLanguageName()
	for {
		set translation=translations.GetNext(.key)
		if key="" quit
		if ..isUpdatedByIdentifier("ef-translation-"_translation.languageID) {
			set translation.translation=..getValueByIdentifier("ef-translation-"_translation.languageID)	
		}
	}
]]></Implementation>
</Method>

<Method name="saveData">
<Implementation><![CDATA[
	set eventDay=..getEventDay()
	do ..updateEventDay(eventDay)
	do eventDay.saveTranslations()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>eventDayTranslationsDefaultData</DefaultData>
<Data name="eventDayTranslationsDefaultData">
<Subscript>"eventDayTranslations"</Subscript>
<Value name="1">
<Value>hasUpdated</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.pageController.pages.eventNameTranslations">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.eventNameTranslations.CLS/EV.6
;vc; Component: CLS.EF.pageController.pages.eventNameTranslations
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.eventNameTranslations.CLS/EV.6</td><td>CLS.EF.pageController.pages.eventNameTranslations</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.pages.translationModal</Super>
<TimeChanged>64124,37765</TimeChanged>
<TimeCreated>63372,47629.62783</TimeCreated>

<Property name="websiteLanguages">
<Type>setup.eventWebsiteLanguages</Type>
<Transient>1</Transient>
</Property>

<Method name="loadData">
<Implementation><![CDATA[
	set eventConfiguration = ##class(setup.eventConfiguration).createNew(..objEvent)
	set ..websiteLanguages=eventConfiguration.websiteLanguages
	set ..translations=..websiteLanguages.getEventName().getTranslationsOrderedByLanguageName()
	set translationsList=..addList("event-name-translations-list","")
	
	set translation=""
	for {
		set translation=..translations.GetNext(.key)
		if key="" quit
		set languageInput=translationsList.addTextInput("event-name-translations-"_translation.languageID,translation.languageName_":",translation.translation)
	}
	    
    
    set element=..addCloseModalButton("ef-event-name-translations-cancel-button","Cancel")
	set element=..addSubmitModalButton("ef-event-name-translations-save-button","OK")
]]></Implementation>
</Method>

<Method name="validate">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	
	do ..updateWebsiteLanguages()
	
	if '..websiteLanguages.isValid(.listOfErrors) {
		for i=1:1:listOfErrors.Count() {
			do ..setErrorMessage(listOfErrors.GetAt(i))	
		}
	}
]]></Implementation>
</Method>

<Method name="updateWebsiteLanguages">
<Implementation><![CDATA[
	set key=""
    for {
		set translation=..translations.GetNext(.key)
		if key="" quit
		if ..isUpdatedByIdentifier("event-name-translations-"_translation.languageID) {
			do ..websiteLanguages.setEventName(translation.languageID,..getValueByIdentifier("event-name-translations-"_translation.languageID))	
		}
	}
	set ..translations=..websiteLanguages.getEventName().getTranslationsOrderedByLanguageName()
]]></Implementation>
</Method>

<Method name="saveData">
<Implementation><![CDATA[
	set eventConfiguration = ##class(setup.eventConfiguration).createNew(..objEvent)
	set ..websiteLanguages=eventConfiguration.websiteLanguages
	do ..updateWebsiteLanguages()
	do ..websiteLanguages.save()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.eventProperties">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.eventProperties.CLS/EV.14
;vc; Component: CLS.EF.pageController.pages.eventProperties
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.eventProperties.CLS/EV.14</td><td>CLS.EF.pageController.pages.eventProperties</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>64142,57077</TimeChanged>
<TimeCreated>63372,47629.62783</TimeCreated>

<Parameter name="returnPage">
<Default>eventProperties.csp</Default>
</Parameter>

<Property name="dateFormat">
<Type>%Integer</Type>
</Property>

<Property name="timeFormat">
<Type>%Integer</Type>
</Property>

<Property name="hasDepartment">
<Type>%Boolean</Type>
</Property>

<Property name="isNewEvent">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="eventDays">
<Type>setup.eventDays</Type>
<Private>1</Private>
<Transient>1</Transient>
</Property>

<Method name="isSystemPage">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if (%request.Get("eventID")="NEW")!(..isNewEvent=1) {
		return 1
	} else {
		return 0
	}
]]></Implementation>
</Method>

<Method name="setEventConfiguration">
<Implementation><![CDATA[
	if ..isNewEvent {
		set ..eventConfiguration = ##class(setup.eventConfiguration).createForNewEvent()
	} else {
		set ..eventConfiguration = ##class(setup.eventConfiguration).createForEventID(..getEventID())
	}
]]></Implementation>
</Method>

<Method name="loadData">
<Implementation><![CDATA[
	if %request.Get("eventID")="NEW" {
		set ..isNewEvent=1	
	}
	
	do ..setEventConfiguration()
	set ..eventDays=..eventConfiguration.getEventDays()
	
	do ..eventConfiguration.populateCustomEventFields("database")
	
	set ..dateFormat=##class(shared.dateFunctions).getBackendInputDateFormat()
	set ..timeFormat=##class(shared.timeFunctions).getBackendInputTimeFormat()
	set ..hasDepartment=##class(setup.objSetting).getParameter("data separation","use department")
	
	set detailsPanel=..addPanel("event-details-panel","Details")
	do ..loadDetailsPanel(detailsPanel)
	set detailsPanel=..addPanel("event-options-panel","Options")
	do ..loadOptionsPanel(detailsPanel)
	if ##class(setup.objSystemTypes).isModuleAllowed("Multi Lingual Frontend") {
		set detailsPanel=..addPanel("event-languages-panel","Languages")
		do ..loadLanguagesPanel(detailsPanel)
	}
	if '##class(setup.objSetting).getParameter("feature flags","use legacy event capacity page") {
		if '..isNewEvent {
			set panel=..addPanel("days-panel","Days")
			do ..loadDaysPanel(panel)
		}
	}
	if ##class(setup.objSystemTypes).isModuleAllowed("SALESFORCE") {
		if ##class(access.objFunction).hasFunctionByAccessID(..xCRuserID,"SFEVENTSETTV2") {
			set saleforcePanel=..addPanel("salesforce-panel","Salesforce.com")
			do ..loadSalesforcePanel(saleforcePanel)
		}
	}
	if ..eventConfiguration.customEventFields.Count() {
		set detailsPanel=..addPanel("event-custom-fields","Custom Event Fields")
		do ..loadCustomEventFieldsPanel(detailsPanel)
	}
]]></Implementation>
</Method>

<Method name="loadDetailsPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	#dim eventStatusControl as EF.pageController.inputElements.radioButtons 
	#dim userCanChangeEventStatus as %Boolean = +##class(access.objFunction).hasFunction(..xCRuserID,"Change Event Status")
	set eventStatusControl = panel.addRadioButtons("event-status","Status:",..eventConfiguration.getStatus())
	set button=eventStatusControl.addAlternative("notlive","Not Live")
	if 'userCanChangeEventStatus {
		set button.isDisabled=1	
	}
	set button=eventStatusControl.addAlternative("live","Live")
	if (..isNewEvent)||('userCanChangeEventStatus) {
		set button.isDisabled=1
	}
	set button=eventStatusControl.addAlternative("archived","Archived")
	if (..isNewEvent)||('userCanChangeEventStatus) {
		set button.isDisabled=1
	}
	set button=eventStatusControl.addAlternative("cancelled","Cancelled")
	if (..isNewEvent)||('userCanChangeEventStatus) {
		set button.isDisabled=1
	}
	do ..loadEventNameInput(panel)
	if ..hasDepartment {
		set departmentDropdown=panel.addDropdown("event-department","Department:",..eventConfiguration.getDepartment())
		set itemNameID=##class(cod.objItemName).getIDFromDescriptionNoEvent("Department")
		set rs=##class(cod.objItemAlternatives).getAlternativesForCodItemAsResultSet(itemNameID)
 		while rs.Next() {
	 		set description=rs.Get("description")
	 		do departmentDropdown.addAlternative(description,description)
 		}
	}
	set defaultEventDate=+##class(shared.timeFunctions).getCurrentLocalTimeStamp(..eventConfiguration.getTimeZone())
	set startDateTime=panel.addDateTimePicker("event-start-date-time","Start date and time:",..eventConfiguration.getEventStartTimeStampFormatted(..dateFormat,..timeFormat))
	set startDateTime.uiComponent.defaultDateTime=##class(shared.timeFunctions).formatTimestampForDisplay(##class(shared.dateFunctions).multiDate(defaultEventDate,25)_" 09:00:00",..dateFormat,..timeFormat)
	do startDateTime.setIsMandatory(1)
	set endDateTime=panel.addDateTimePicker("event-end-date-time","End date and time:",..eventConfiguration.getEventEndTimeStampFormatted(..dateFormat,..timeFormat))
	set endDateTime.uiComponent.defaultDateTime=##class(shared.timeFunctions).formatTimestampForDisplay(##class(shared.dateFunctions).multiDate(defaultEventDate,25)_" 17:00:00",..dateFormat,..timeFormat)
	do endDateTime.setIsMandatory(1)
	#dim timeZoneDropdown as EF.pageController.inputElements.dropdown
	set timeZoneDropdown=panel.addDropdown("event-time-zone","Time zone:",..eventConfiguration.getTimeZone())
	do ##class(shared.timeFunctions).getTimeZoneList(.timeZoneList)
	for i=1:1:timeZoneList {
		do timeZoneDropdown.addAlternative(timeZoneList(i,"tz ID"),timeZoneList(i,"display name"))
	}
]]></Implementation>
</Method>

<Method name="loadOptionsPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	#dim eventTypeDropdown as EF.pageController.inputElements.dropdown
	set eventType="to do"
	set eventTypeDropdown=panel.addDropdown("event-type","Event Type:",..eventConfiguration.getEventType())
	do eventTypeDropdown.addAlternative("registration","Registration")
	set alternative=eventTypeDropdown.addAlternative("registrationAndAbstracts","Registration with Abstracts")
	if '##class(setup.objSystemTypes).isModuleAllowed("Abstract Management") {
		set alternative.isDisabled=1
	}
	set alternative=eventTypeDropdown.addAlternative("awards","Awards")
	if '##class(setup.objSystemTypes).isModuleAllowed("Awards")	 {
		set alternative.isDisabled=1	
	}
	#dim eventCostRadio as EF.pageController.inputElements.radioButtons
	set eventCostRadio=panel.addRadioButtons("event-cost","Cost:",$S(..eventConfiguration.getHasCost():"paid",1:"free"))
	set freeAlternative=eventCostRadio.addAlternative("free","Free")
	set paidAlternative=eventCostRadio.addAlternative("paid","Paid")
	if '##class(setup.objSystemTypes).isModuleAllowed("Pricing") {
		set eventCostRadio.value="free"
		set paidAlternative.isDisabled=1
		set eventCostRadio.uiComponent.title="This feature is not available because it is not licensed."	
	}
	if ..eventConfiguration.hasAnyActivePrices() {
		set eventCostRadio.value="paid"
		set freeAlternative.isDisabled=1
		set eventCostRadio.uiComponent.title="The event can't be changed to ""Free"" because it has active prices."
	}
	
	#dim actionListDropdown as EF.pageController.inputElements.dropdown
	set actionListDropdown=panel.addDropdown("action-list","Action List:",..eventConfiguration.getActionListID())
	do actionListDropdown.addAlternative("","None")
	set rsActionLists = ##class(%ResultSet).%New("eventWizard.objWizard:qAllWizard")
	do rsActionLists.Execute()
	while rsActionLists.Next() {
		if rsActionLists.Get("active") {
			do actionListDropdown.addAlternative(rsActionLists.Get("ID"),rsActionLists.Get("description"))
		}
	}
	
	#dim eventFeaturesCheckBoxes as EF.pageController.containerElements.list
	set eventFeaturesCheckBoxes=panel.addCheckboxGroup("event-features","Features:")
	set hasAccomCheckbox=eventFeaturesCheckBoxes.addCheckbox("has-accomodation","Accommodation",..eventConfiguration.getHasAccommodation())
	if '##class(setup.objSystemTypes).isModuleAllowed("Accommodation") {
		set hasAccomCheckbox.uiComponent.isDisabled=1
		set hasAccomCheckbox.uiComponent.title="This feature is not available because it is not licensed."
	}
	set hasMeetingManagerCheckbox=eventFeaturesCheckBoxes.addCheckbox("has-meeting-manager","Meeting Manager",..eventConfiguration.getHasMeetingManager())
	if '##class(setup.objSystemTypes).isModuleAllowed("Meeting Manager") {
		set hasMeetingManagerCheckbox.uiComponent.isDisabled=1
		set hasMeetingManagerCheckbox.uiComponent.title="This feature is not available because it is not licensed."
	}
	set hasTableBookingCheckbox=eventFeaturesCheckBoxes.addCheckbox("has-table-booking","Table booking",..eventConfiguration.getHasTableBooking())
	if '##class(setup.objSystemTypes).isModuleAllowed("table booking") {
		set hasTableBookingCheckbox.uiComponent.isDisabled=1
		set hasTableBookingCheckbox.uiComponent.title="This feature is not available because it is not licensed."
	}
]]></Implementation>
</Method>

<Method name="loadLanguagesPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	set enableLanguageGroup=panel.addCheckboxGroup("event-enabled-languages","Enable these languages:")
	set enableLanguageGroup.uiComponent.columns=2
	set defaultLanguageDropdown=panel.addDropdown("event-default-language","Default language:",..eventConfiguration.getDefaultCreationLanguageID())
    set languageCount=##class(shared.objLanguage).getArrayOfActiveLanguages(.languageArray)
    for i=1:1:languageCount {
	    set languageID=$p(languageArray(i),"|",1)
	    set languageName=$p(languageArray(i),"|",2)
	 	do defaultLanguageDropdown.addAlternative(languageID,languageName,languageID=$$$efEnglishLangID)	
	 	set languageCheckbox=enableLanguageGroup.addCheckbox("enable-language-"_languageID,languageName,..eventConfiguration.isWebsiteLanguageActive(languageID),languageID=$$$efEnglishLangID)
    }
]]></Implementation>
</Method>

<Method name="loadDaysPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set div=panel.addDiv("day-names")
	set listOfDays=..eventDays.getEventDaysOrdered()
	set key=""
	for {
		set eventDay=listOfDays.GetNext(.key)
		if key="" quit
		kill requestData
		set requestData("eventDayNumber")=eventDay.dayNumber
		
		do div.addTranslatableTextInput("day-name-"_eventDay.dayNumber,eventDay.getDayNameLabelForSettingsPage(),eventDay.dayName,"eventDayTranslations.csp","EF.pageController.pages.eventDayTranslations",.requestData)	
	}
]]></Implementation>
</Method>

<Method name="loadCustomEventFieldsPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	
	set eventCustomFieldList1=panel.addDiv("event-custom-field-list-1","")
	set eventCustomFieldList2=panel.addDiv("event-custom-field-list-2","")
	set customFieldCount=..eventConfiguration.customEventFields.Count()
	for i=1:1:customFieldCount {
		set customEventField=..eventConfiguration.customEventFields.GetAt(i)
		if i<=$System.SQL.CEILING(customFieldCount/2) {
			do ..addCustomEventFieldToList(customEventField,eventCustomFieldList1)
		} else {
			do ..addCustomEventFieldToList(customEventField,eventCustomFieldList2)	
		}
	}
]]></Implementation>
</Method>

<Method name="loadEventNameInput">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	set defaultLanguageID=..eventConfiguration.getDefaultCreationLanguageID()
	set div=panel.addDiv("event-name-container","")
		
	set label="Event name"
	if ..eventConfiguration.isMultiLingual() {
		set label=label_" ("_##class(shared.objLanguage).getDisplayNameForLanguageID(defaultLanguageID)_")"	
	}
	set label=label_":"
	set eventNameButton=div.addTranslatableTextInput("event-name",label,..eventConfiguration.websiteLanguages.getEventName(),"eventNameTranslations.csp","EF.pageController.pages.eventNameTranslations")	

	do eventNameButton.setIsMandatory(1)
]]></Implementation>
</Method>

<Method name="addCustomEventFieldToList">
<FormalSpec>customEventField:setup.customEventField,eventCustomFieldList:EF.pageController.containerElements.list</FormalSpec>
<Implementation><![CDATA[
	#dim customEventFieldInput As EF.pageController.inputElement
	set type=customEventField.objEventPrompt.type
	set customPromptID=customEventField.getID()
	set identifier="event-custom-field-"_customPromptID
	set fieldName=customEventField.objEventPrompt.description
	if type'="checkbox" {
		set fieldName=fieldName_":"	
	}
	if type="time" {
		if $l(customEventField.value) {
			set fieldValue=##class(shared.timeFunctions).getDisplayTime($ZTH(customEventField.value,$$$24HourFormat,""),..timeFormat)
		} else {
			set fieldValue=""	
		}
	}
	set customEventFieldInput=$CASE(type,
		"text":eventCustomFieldList.addTextInput(identifier,fieldName,customEventField.value),
		"multiline":eventCustomFieldList.addTextArea(identifier,fieldName,customEventField.value),
		"dropdown":eventCustomFieldList.addDropdown(identifier,fieldName,customEventField.value),	
		"radiobutton":eventCustomFieldList.addRadioButtons(identifier,fieldName,customEventField.value),	
		"checkbox":eventCustomFieldList.addCheckbox(identifier,fieldName,$Select(customEventField.value="true":1,1:"")),
		"date":eventCustomFieldList.addDatePicker(identifier,fieldName,##class(shared.dateFunctions).multiDate(customEventField.value,..dateFormat)),
		"time":eventCustomFieldList.addTimePicker(identifier,fieldName,fieldValue),
		:""
	)
	
	if (type="text")!(type="multiline") {
		set customEventFieldInput.uiComponent.validator.maxLength=450
	}
	if (type="dropdown")!(type="radiobutton") {
		if type="dropdown" {
			do customEventFieldInput.addAlternative("","")
		}
		set rsAlts = ##class(%ResultSet).%New("setup.objEventPromptAlternative:qAlternativesByPrompt")
		do rsAlts.Execute(customEventField.objEventPrompt.%Id())
		while rsAlts.Next() {
			set alternative = ##class(setup.objEventPromptAlternative).%OpenId(rsAlts.Get("ID"))
			do alternative.%Reload()
			do customEventFieldInput.addAlternative(alternative.description,alternative.description)	
		}
	}
]]></Implementation>
</Method>

<Method name="loadSalesforcePanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	set isIntegrationEnabled=##class(EF.extSys.salesforce.CRMintegrationSF).isIntegrationEnabledForEvent(..eventConfiguration.getEventID())
	set isDisabled=##class(EF.extSys.salesforce.CRMintegrationSF).getActiveIntegrationVersion()'=2
	do panel.addToggle("is-salesforce-integration-on","Salesforce integration for this event is:",isIntegrationEnabled,isDisabled)
]]></Implementation>
</Method>

<Method name="validate">
<Implementation><![CDATA[
	do ..updateEventConfiguration()
	
	if '..eventConfiguration.areEventDatesValid(.eventDateErrors) {
		do ..addErrorMessagesToElement("event-details-panel",.eventDateErrors)
	}
	if '..eventConfiguration.isMainEventNameValid(.eventNameErrors) {
		do ..addErrorMessagesToElement("event-details-panel",.eventNameErrors)
	}
	if '..eventConfiguration.isEventStatusValid(.eventStatusErrors) {
		do ..addErrorMessagesToElement("event-details-panel",.eventStatusErrors)
	}
	
	if '..eventConfiguration.areEventOptionsValid(.eventOptionsErrors) {
		do ..addErrorMessagesToElement("event-options-panel",eventOptionsErrors)	
	}
	if ..existsByIdentifier("event-default-language") {
		set defaultLanguageID=..getValueByIdentifier("event-default-language")
		set enableLanguageIdentifier="enable-language-"_defaultLanguageID
		if '..getValueByIdentifier(enableLanguageIdentifier) {
			do ..getElementByIdentifier(enableLanguageIdentifier).setErrorMessage("the default language must be enabled")
		}
	}
]]></Implementation>
</Method>

<Method name="saveData">
<Implementation><![CDATA[
	do ..eventConfiguration.save()
	do ..eventConfiguration.saveCustomEventFields()
	if '..isNewEvent {
		do ..eventDays.save()
	}
	if ..isUpdatedByIdentifier("is-salesforce-integration-on") {
		do ##class(setup.objEventSetting).setParameter("Salesforce V2","Integration disabled for this event",'..getValueByIdentifier("is-salesforce-integration-on"),..eventConfiguration.getEventID())
	}
]]></Implementation>
</Method>

<Method name="updateEventConfiguration">
<Implementation><![CDATA[
	if ..isUpdatedByIdentifier("event-status") {
		do ..eventConfiguration.setStatus(..getValueByIdentifier("event-status"))
	}
	if ..isUpdatedByIdentifier("event-name") {
		do ..eventConfiguration.setMainEventName(..getValueByIdentifier("event-name"))
	}
	if ..isUpdatedByIdentifier("event-start-date-time") {
		set startTimeStamp=##class(shared.timeFunctions).convertInputDateTimeToTimeStamp(..getValueByIdentifier("event-start-date-time"),..dateFormat,..timeFormat)
		do ..eventConfiguration.setEventStartTimeStamp(startTimeStamp)
	}
	if ..isUpdatedByIdentifier("event-end-date-time") {
		set endTimeStamp=##class(shared.timeFunctions).convertInputDateTimeToTimeStamp(..getValueByIdentifier("event-end-date-time"),..dateFormat,..timeFormat)
		do ..eventConfiguration.setEventEndTimeStamp(endTimeStamp)
	}
	if ..isUpdatedByIdentifier("event-time-zone") {
		do ..eventConfiguration.setTimeZone(..getValueByIdentifier("event-time-zone"))
	}
	
	if ..isUpdatedByIdentifier("event-type") {
		do ..eventConfiguration.setEventType(..getValueByIdentifier("event-type"))		
	}
	if ..isUpdatedByIdentifier("event-cost") {
		if ..getValueByIdentifier("event-cost")="paid" {
			do ..eventConfiguration.setHasCost(1)
		} else {
			do ..eventConfiguration.setHasCost(0)
		}
	}
	
	if ..isUpdatedByIdentifier("action-list") {
		do ..eventConfiguration.setActionListID(..getValueByIdentifier("action-list"))	
	}
	
	if ..isUpdatedByIdentifier("has-accomodation") {
		do ..eventConfiguration.setHasAccommodation(..getValueByIdentifier("has-accomodation"))	
	}
	if ..isUpdatedByIdentifier("has-meeting-manager") {
		do ..eventConfiguration.setHasMeetingManager(..getValueByIdentifier("has-meeting-manager"))	
	}
	if ..isUpdatedByIdentifier("has-table-booking") {
		do ..eventConfiguration.setHasTableBooking(..getValueByIdentifier("has-table-booking"))	
	}
	if ..isUpdatedByIdentifier("has-table-booking") {
		do ..eventConfiguration.setHasTableBooking(..getValueByIdentifier("has-table-booking"))	
	}
	if ..isUpdatedByIdentifier("event-default-language") {
		do ..eventConfiguration.setDefaultCreationLanguageID(..getValueByIdentifier("event-default-language"))	
	}
	if ..isUpdatedByIdentifier("event-department") {
		do ..eventConfiguration.setDepartment(..getValueByIdentifier("event-department"))	
	}
	
	// save languages
	set languageCount=##class(shared.objLanguage).getArrayOfActiveLanguages(.languageArray)
    for i=1:1:languageCount {
	    set languageID=$p(languageArray(i),"|",1)
	    set elementId="enable-language-"_languageID
	    if ..isUpdatedByIdentifier(elementId) {
		    do ..eventConfiguration.setIsWebsiteLanguageActive(languageID,..getValueByIdentifier(elementId))
	    }
    }
    
    set listOfDays=..eventDays.getEventDaysOrdered()
	set key=""
	for {
		set eventDay=listOfDays.GetNext(.key)
		if key="" quit
		if ..isUpdatedByIdentifier("day-name-"_eventDay.dayNumber) {
			do eventDay.dayName.setPhrase(..getValueByIdentifier("day-name-"_eventDay.dayNumber))
		}
	}
	// save soft event prompts
	// Store the soft event prompts
	set customFieldCount=..eventConfiguration.customEventFields.Count()
	for i=1:1:customFieldCount {
		set customEventField=..eventConfiguration.customEventFields.GetAt(i)
		set elementId="event-custom-field-"_customEventField.getID()
		if ..isUpdatedByIdentifier(elementId) {
			set value=..getValueByIdentifier(elementId)
			if $l(value) {
				if customEventField.getType()="time" {
					set value=##class(shared.timeFunctions).convertDisplayTimeTo24HourFormat(value)
				} elseif customEventField.getType()="date" {
					set value=##class(shared.dateFunctions).multiDate(value,1,,..dateFormat)
				} elseif (customEventField.getType()="checkbox")&&(value=1) {
					set value="true"
				}
			}
			set customEventField.value=value
		}
	}
]]></Implementation>
</Method>

<Method name="getSuccessURL">
<Implementation><![CDATA[
	if ..isNewEvent {
		return "switchEvent.csp?pg=eventProperties.csp&eventID="_..eventConfiguration.getEventID()
	} else {
		do ##class(shared.pageMethods).clearBackendMenuCache()
		return ##super()	
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>eventPropertiesDefaultData</DefaultData>
<Data name="eventPropertiesDefaultData">
<Subscript>"eventProperties"</Subscript>
<Value name="1">
<Value>dateFormat</Value>
</Value>
<Value name="2">
<Value>timeFormat</Value>
</Value>
<Value name="3">
<Value>hasDepatrment</Value>
</Value>
<Value name="4">
<Value>hasDepartment</Value>
</Value>
<Value name="5">
<Value>isNewEvent</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.pageController.pages.eventPropertiesAviva">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.eventPropertiesAviva.CLS/EV.0
;vc; Component: CLS.EF.pageController.pages.eventPropertiesAviva
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.eventPropertiesAviva.CLS/EV.0</td><td>CLS.EF.pageController.pages.eventPropertiesAviva</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.pages.eventProperties</Super>
<TimeChanged>63942,34510</TimeChanged>
<TimeCreated>63907,54297.735554</TimeCreated>

<Property name="eventConfiguration">
<Type>setup.eventConfigurationAviva</Type>
</Property>

<Parameter name="numberOfOrgUnits">
<Default>4</Default>
</Parameter>

<Method name="loadData">
<Implementation><![CDATA[
	do ##super()
	set eventID=..eventConfiguration.getEventID()
	
	
	set orgUnitsPanel=..addPanel("aviva-organisational-units","Organisational Units")
	do ..loadOrgUnitsPanel(orgUnitsPanel)
	set eventManagersPanel=..addPanel("aviva-event-managers","Event Managers")
	do ..loadEventManagersPanel(eventManagersPanel)
]]></Implementation>
</Method>

<Method name="loadOrgUnitsPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	
	for position=1:1:..#numberOfOrgUnits {
		set warnings=##class(%ListOfDataTypes).%New()
		set orgUnitDetails=..eventConfiguration.getAvivaOrgUnitDetailsAtPosition(position)
		
		do ..addOrgUnitDropdown(panel,orgUnitDetails,position,.warnings)
		do ..addCostCentreFields(panel,orgUnitDetails,position,.warnings)
		do ..addStakeHolderDropdown(panel,orgUnitDetails,position,.warnings)
		if warnings.Count() {
			set warning="Warning: "
			for i=1:1:warnings.Count() {
				if i>1 set warning=warning_$C(13,10)
				set warning=warning_warnings.GetAt(i)
			}
			set warningsContainer=panel.addTextAlertInfo("aviva-organisational-warnings-"_position,warning)	
		}	
			
	}
]]></Implementation>
</Method>

<Method name="addOrgUnitDropdown">
<FormalSpec>panel:EF.pageController.containerElements.list,orgUnitDetails:setup.eventConfigurationAvivaOrgUnit,position:%Integer,warnings:%ListOfDataTypes</FormalSpec>
<Implementation><![CDATA[
	set currentOrgUnitID=orgUnitDetails.getOrgUnitID()
	set loopEVOrgUnitDesc=##class(setup.objOrgUnit).getDescription(currentOrgUnitID)
	set enableOrgUnitDropDown=1
	// if the user does not have access to the currently selected org unit, show text only
	if '##class(setup.objOrgUnit).allowedAccess(..xCRuserID,currentOrgUnitID) set enableOrgUnitDropDown=0
	// also if the cost centre or stakeholder is selected then make this text only
	set (stakeHolderID,hasStakeholder)=orgUnitDetails.getStakeHolderID()
	set hasCC=orgUnitDetails.getCostCentreID()
	if (hasStakeholder!hasCC) set enableOrgUnitDropDown=0
	if enableOrgUnitDropDown=0,'currentOrgUnitID set enableOrgUnitDropDown=1  // if we have stakeholder or cc set but no org unit

	if '##class(setup.objOrgUnit).isActive(currentOrgUnitID) {
		do warnings.Insert("Organisational Unit is not active")
	}
	set orgUnitDropdown=panel.addDropdown("aviva-organisational-unit-"_position,"Organisational Unit "_position_":",currentOrgUnitID)
	do ##class(setup.objOrgUnit).getOrgUnitsDropDownAsArray(,,currentOrgUnitID,0,1,..xCRuserID,,.orgUnitArray)
	if enableOrgUnitDropDown {
		do orgUnitDropdown.addAlternative("","")	
	}
	for orgUnitIndex=1:1:$G(orgUnitArray) {
		if enableOrgUnitDropDown {
			set showAlternative=1
		} elseif orgUnitArray(orgUnitIndex,"value") = currentOrgUnitID {
			set showAlternative=1
		} else {
			set showAlternative=0
		}
		if showAlternative {
			do orgUnitDropdown.addAlternative(orgUnitArray(orgUnitIndex,"value"),orgUnitArray(orgUnitIndex,"description"))	
		}
	}
]]></Implementation>
</Method>

<Method name="addCostCentreFields">
<FormalSpec>panel:EF.pageController.containerElements.list,orgUnitDetails:setup.eventConfigurationAvivaOrgUnit,position:%Integer,warnings:%ListOfDataTypes</FormalSpec>
<Implementation><![CDATA[
	set eventID=..eventConfiguration.getEventID()
	// if we have selected an org unit then allow the cost code selection
	set showCCSEL=0
	set currentOrgUnitID=orgUnitDetails.getOrgUnitID()
	set costCentreDropdown=panel.addDropdown("aviva-cost-centre-"_position,"Cost Centre:",orgUnitDetails.getCostCentreID())
	do costCentreDropdown.addAlternative("","")
	if $G(currentOrgUnitID) set showCCSEL=1
	if showCCSEL {
		// get parent of corresponding org unit
		set parentOrgUnitID=##class(setup.objOrgUnit).getParent(currentOrgUnitID)

		set sqlcode="SELECT *,objOrgUnit->description As orgUnitDesc FROM eCom.objCostCentreOrgUnit"
		set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		do rs.Prepare(sqlcode)
		do rs.Execute()
		while rs.Next()	{
			set val=rs.Data("code")_" "_rs.Data("name")  //_" ("_rs.Data("orgUnitDesc")_")"
			set ccOrgUnitID=rs.Data("ID")
			set orgUnitID=rs.Data("objOrgUnit")
			set selected=""
			
			if orgUnitDetails.getCostCentreID()=ccOrgUnitID {
				set selected="SELECTED"
			}
			set show=0
			//  Check whether teh cost centre is linked to the orgUnit
			if currentOrgUnitID=orgUnitID {
				set show=1
			}
			if 'show,$l(selected) {
				do warnings.Insert("Cost Centre is no longer associated with Organisational Unit")
				set show=1
			}
			
			if show {
				set show=+rs.Data("active")
			
				if 'show,$l(selected) {
					do warnings.Insert("Cost Centre is not active")
					set show=1
				}
			}
			if show {
				if '##class(setup.objOrgUnit).isActive(orgUnitID) set show=0
				if 'show,$l(selected) {
					set show=1
				}
			}
			if show {
				do costCentreDropdown.addAlternative(ccOrgUnitID,val)
			}
			
		}	
	}
	set inputGroup=panel.addInputGroupNumber("aviva-cost-centre-weighting-group-"_position,"Weighting:")
	set inputElement=inputGroup.addNumericInput("aviva-cost-centre-weighting-"_position,"",orgUnitDetails.getCostCentreWeighting())
	do inputGroup.addCaption("aviva-cost-centre-weighting-caption-"_position,"%")
	if '$G(currentOrgUnitID) {
		set costCentreDropdown.uiComponent.isDisabled=1
		set inputElement.uiComponent.isDisabled=1
	}
]]></Implementation>
</Method>

<Method name="addStakeHolderDropdown">
<FormalSpec>panel:EF.pageController.containerElements.list,orgUnitDetails:setup.eventConfigurationAvivaOrgUnit,position:%Integer,warnings:%ListOfDataTypes</FormalSpec>
<Implementation><![CDATA[
	set eventID=..eventConfiguration.getEventID()
	
	set loopEVOwnerID=orgUnitDetails.getStakeHolderID()
	set currentOrgUnitID=orgUnitDetails.getOrgUnitID()
	do ##class(admin.objUser).avivaStakeholders(.avivaStakes,,"firstname",loopEVOwnerID,currentOrgUnitID)
	set stakeHolderDropdown=panel.addDropdown("aviva-event-stake-holder-"_position,"Stakeholder:",loopEVOwnerID)
	do stakeHolderDropdown.addAlternative("","")
	set ii=""
	for  {
		set ii=$O(avivaStakes(ii))
		if ii="" quit
		set personID=$P(avivaStakes(ii),"|",1)
		set fname=$P(avivaStakes(ii),"|",2)
		set lname=$P(avivaStakes(ii),"|",3)
		// Only allow stakeholders who are directly assigned to org unit to show in dropdown
		set show=##class(links.lnkUserOrgUnit).hasOrgUnitID(personID,currentOrgUnitID)

		set selected=""
		if loopEVOwnerID=personID {
			if '$p(avivaStakes(ii),"|",4) {
				do warnings.Insert("Assigned Stakeholder is not active")
			}
			if 'show {
				// If they are the owner, show them even if they are in the wrong org unit, however do show a warning
				set show=1
				do warnings.Insert("Assigned Stakeholder is not assigned to Organisational Unit")
			}
			if '$p(avivaStakes(ii),"|",6) {
				do warnings.Insert("Assigned Stakeholder has not been assigned the role 'Stakeholder'")
			}
		}
		if show {
			do stakeHolderDropdown.addAlternative(personID,fname_" "_lname)
		}
	}
	if 'currentOrgUnitID {
		set stakeHolderDropdown.uiComponent.isDisabled=1
	}
]]></Implementation>
</Method>

<Method name="loadEventManagersPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	do ..addEventPlannerDropdown(panel,1,"Strategic Account Manager / Planner 1")
	do ..addEventPlannerDropdown(panel,2,"Senior Project Manager / Planner 2")
	do ..addEventPlannerDropdown(panel,3,"Project Manager / Planner 3")
]]></Implementation>
</Method>

<Method name="addEventPlannerDropdown">
<FormalSpec>panel,plannerNumber,description</FormalSpec>
<Implementation><![CDATA[
	set plannerID=##class(setup.objEventSetting).getParameter("event planners","planner "_plannerNumber,..eventConfiguration.getEventID())
	set eventPlannerDropdown=panel.addDropdown("aviva-event-planner-"_plannerNumber,description,plannerID)
	do eventPlannerDropdown.addAlternative("","")
	do ##class(admin.objUser).avivaUsers(.avivaUsers,,"firstname",plannerID)
	set ii=""
	for  {
		set ii=$O(avivaUsers(ii))
		if ii="" quit
		set personID=$P(avivaUsers(ii),"|",1)
		set fname=$P(avivaUsers(ii),"|",2)
		set lname=$P(avivaUsers(ii),"|",3)
		do eventPlannerDropdown.addAlternative(personID,fname_" "_lname)
	}
]]></Implementation>
</Method>

<Method name="updateEventConfiguration">
<Implementation><![CDATA[
	do ##super()
	#dim orgUnitDetails As setup.eventConfigurationAvivaOrgUnit
	for position=1:1:..#numberOfOrgUnits {
		set orgUnitDetails=..eventConfiguration.getAvivaOrgUnitDetailsAtPosition(position)
		if ..isUpdatedByIdentifier("aviva-organisational-unit-"_position) {
			do orgUnitDetails.setOrgUnitID(..getValueByIdentifier("aviva-organisational-unit-"_position))
		}
		if ..isUpdatedByIdentifier("aviva-cost-centre-"_position) {
			do orgUnitDetails.setCostCentreID(..getValueByIdentifier("aviva-cost-centre-"_position))
		}
		if ..isUpdatedByIdentifier("aviva-cost-centre-weighting-"_position) {
			do orgUnitDetails.setCostCentreWeighting(..getValueByIdentifier("aviva-cost-centre-weighting-"_position))
		}
		if ..isUpdatedByIdentifier("aviva-event-stake-holder-"_position) {
			do orgUnitDetails.setStakeHolderID(..getValueByIdentifier("aviva-event-stake-holder-"_position))
		}
	}
	for plannerNo=1:1:3 {
		set identifier="aviva-event-planner-"_plannerNo
		if ..isUpdatedByIdentifier(identifier) {
			do ..eventConfiguration.setAvivaPlanner(plannerNo,..getValueByIdentifier(identifier))
		}
	}
]]></Implementation>
</Method>

<Method name="validate">
<Implementation><![CDATA[
	do ##super()
	if '..eventConfiguration.areCostCentresValid(.constCentreErrors) {
		do ..addErrorMessagesToElement("aviva-organisational-units",.constCentreErrors)
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>eventPropertiesAvivaDefaultData</DefaultData>
<Data name="eventPropertiesAvivaDefaultData">
<Subscript>"eventPropertiesAviva"</Subscript>
<Value name="1">
<Value>eventConfiguration</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.pageController.pages.eventSelection">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.eventSelection.CLS/EV.4
;vc; Component: CLS.EF.pageController.pages.eventSelection
;vc;  Location: SmallDev
;vc; Date/Time: 13-Jan-16 12:13
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.eventSelection.CLS/EV.4</td><td>CLS.EF.pageController.pages.eventSelection</td><td>SmallDev</td><td style='white-space: nowrap;'>13-Jan-16 12:13</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63932,36926.056883</TimeChanged>
<TimeCreated>63727,53797.165537</TimeCreated>

<Parameter name="returnPage">
<Default>eventSelection.csp</Default>
</Parameter>

<Parameter name="useAutomaticAudit">
<Default>0</Default>
</Parameter>

<Parameter name="isSystemPage">
<Description>
indicates that the page may be run without a selected event</Description>
<Default>1</Default>
</Parameter>

<Method name="getRowDataReference">
<Implementation><![CDATA[	return "page_controller_grid_row_ids_"_..%Id()
]]></Implementation>
</Method>

<Method name="loadData">
<Implementation><![CDATA[
	#define kendoDateFormat 25
	#dim userID as %Integer = $G(%session.Data("eventsforce","backend","xPersonID"))
	#dim gridRemote As EF.pageController.containerElements.gridRemote
	#dim gridComponent As EF.ui.components.backend.grid.gridRemote
	#dim toolBar As EF.ui.components.backend.grid.toolBar
	#dim filterDropdown As EF.ui.components.backend.grid.filterDropdown
	#dim toolDropdown As EF.ui.components.backend.grid.toolDropdown
	#dim showDepartment as %Boolean = +##class(setup.objSetting).getParameter("data separation","use department")
	#dim userCanChangeEventStatus as %Boolean = +##class(access.objFunction).hasFunction(userID,"Change Event Status")
	
	if ##class(setup.objSystemTypes).isModuleAllowed("Organisational Units - Aviva Only") {
		set orgUnitsPanel=..addPanel("orgUnits-panel","Organisational Unit")
	}
	
	set eventsPanel=..addPanel("events-panel","Events")
	set gridRemote=eventsPanel.addGridRemote("mainGrid")
	set gridComponent=gridRemote.uiComponent
	set gridComponent.isSelectable=1
	set gridComponent.isSortable=1
	do gridComponent.configureDefaultSorting("id","desc")
	set gridComponent.rowCountMessage="Showing {2} events"
	set gridComponent.columnDefinitionURL="pageControllerGridColumnsJSON.csp?pageControllerID="_..%Id()
	set gridComponent.dataURL="pageControllerGridDataJSON.csp?pageControllerID="_..%Id()
	set gridComponent.dateFormat=##class(shared.dateFunctions).getBackendInputDateFormat()
	set rowSelectButton=gridComponent.addRowSelectButton()
	set rowSelectButton.gotoURL="eventSelectionGotoEvent.csp?pageControllerID="_..%Id()
	do rowSelectButton.addClass("ef-grid-row-button-allow-doubleclick")
	
	set toolBar=gridComponent.addToolBar()
	
	if showDepartment {
		set filterDropdown=toolBar.addFilterDropdown("departmentFilter","Department:")
		do filterDropdown.addFilterItem("All")
		set rsDepts=##class(%ResultSet).%New("cod.objItemAlternatives:qAlternativesForCodItem")
		do rsDepts.Execute(##class(cod.objItemName).getIDFromDescriptionNoEvent("Department"))
		while rsDepts.Next() {
			do filterDropdown.addFilterItem(rsDepts.Get("description"),"department","eq",rsDepts.Get("description"))
		}
	}
	
	set activeEventsFilter=##class(EF.ui.components.backend.grid.filterList).createNew("or")
	do activeEventsFilter.addFilterListItem(##class(EF.ui.components.backend.grid.filter).createNew("status","eq","Live"))
	do activeEventsFilter.addFilterListItem(##class(EF.ui.components.backend.grid.filter).createNew("status","eq","Not Live"))
	
	
	set filterDropdown=toolBar.addFilterDropdown("eventMainFilter","Show:")
	set filterItem=filterDropdown.addFilterItem("Active")
	do filterItem.filterList.addFilterListItem(activeEventsFilter)
	
	set filterItem=filterDropdown.addFilterItem("Upcoming events","endDateUTC","gte",##class(shared.dateFunctions).multiDate($ZTS-1,$$$kendoDateFormat))
	set filterItem.filterList.logic="and"
	do filterItem.filterList.addFilterListItem(activeEventsFilter)
	
	set filterItem=filterDropdown.addFilterItem("Past events","endDateUTC","lt",##class(shared.dateFunctions).multiDate($ZTS-1,$$$kendoDateFormat))
	set filterItem.filterList.logic="and"
	do filterItem.filterList.addFilterListItem(activeEventsFilter) 
	
	set filterItem=filterDropdown.addFilterItem("Recently created","creationDate","gte",##class(shared.dateFunctions).multiDate($ZTS-90,$$$kendoDateFormat)) 
	set filterItem.filterList.logic="and"
	do filterItem.filterList.addFilterListItem(activeEventsFilter)
	
	do filterDropdown.addFilterItem("Live","status","eq","Live") 
	do filterDropdown.addFilterItem("Not live","status","eq","Not Live") 
	do filterDropdown.addFilterItem("Cancelled","status","eq","Cancelled") 
	do filterDropdown.addFilterItem("Archived","status","eq","Archived") 
	do filterDropdown.addFilterItem("All")
	
	set toolDropdown=toolBar.addToolDropdown()
	set toolItem=toolDropdown.addToolItemOpenModal("Make ""Live""…","eventSelectionMakeLiveModal.csp?parentPageControllerID="_..%Id())
	set toolItem.requiresSelectedRows=1
	if userCanChangeEventStatus=0 {
		set toolItem.isDisabled=1
	}
	set toolItem=toolDropdown.addToolItemOpenModal("Make ""Not live""…","eventSelectionMakeNotLiveModal.csp?parentPageControllerID="_..%Id())
	set toolItem.requiresSelectedRows=1
	if userCanChangeEventStatus=0 {
		set toolItem.isDisabled=1
	}
	set toolItem=toolDropdown.addToolItemOpenModal("Archive…","eventSelectionArchiveModal.csp?parentPageControllerID="_..%Id())
	set toolItem.requiresSelectedRows=1
	if userCanChangeEventStatus=0 {
		set toolItem.isDisabled=1
	}
	set toolItem=toolDropdown.addToolItemOpenModal("Cancel…","eventSelectionCancelModal.csp?parentPageControllerID="_..%Id())
	set toolItem.requiresSelectedRows=1
	if userCanChangeEventStatus=0 {
		set toolItem.isDisabled=1
	}
	do toolDropdown.addDivider()
	
	set toolItem=toolDropdown.addExportToExcel("Export results to Excel…")
	do toolDropdown.addDivider()
	set toolItem=toolDropdown.addToolItemRedirect("Copy event…","eventSelectionCopyEvent.csp?pageControllerID="_..%Id())
	if +##class(access.objFunction).hasFunction(userID,"Event using an existing event as a template")=0 {
		set toolItem.isDisabled=1
	}
	set toolItem.requiresSingleSelectedRow=1
	set toolItem=toolDropdown.addToolItemRedirect("Get calendar link","eventSelectionGetCalendar.csp?pageControllerID="_..%Id())
	set toolItem.requiresSingleSelectedRow=1
	
	set toolItem=toolDropdown.addDivider()
	set toolItem=toolDropdown.addSelectAll()
	set toolItem=toolDropdown.addSelectNone()
	
	set calendarButton=toolBar.addCalendarButton("gotoCalendar")
	set calendarButton.href=##class(shared.pCSP).Link("eventCalendarMonthly.csp")
]]></Implementation>
</Method>

<Method name="getDataSet">
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[
	#dim gridDataEvent As setup.gridDataEvent
	set gridDataEvent=##class(setup.gridDataEvent).createNew()
	do gridDataEvent.populateDataSet($this)
	return gridDataEvent.dataSet
]]></Implementation>
</Method>

<Method name="getColumns">
<Implementation><![CDATA[
	set gridDataEvent=##class(setup.gridDataEvent).createNew(##class(shared.dateFunctions).getBackendOutputDateFormat())
	do gridDataEvent.createColumns()
	set cells=##class(%ZEN.proxyObject).%New()
	set cells.schema=gridDataEvent.getColumnSchemaJSON()
	set cells.columns=gridDataEvent.getColumnsAsJSON()
	set cells.searchableColumns=gridDataEvent.getSearchColumnsJSON()
	return cells
]]></Implementation>
</Method>

<Method name="getEventID">
<FormalSpec>rowID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	#dim indexTempGlobal As EF.dataCollections.indexTempGlobal
	set indexTempGlobal=##class(EF.dataCollections.indexTempGlobal).open(..getRowDataReference())
	return indexTempGlobal.getValue(rowID)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.eventSelectionArchiveModal">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.eventSelectionArchiveModal.CLS/EV.0
;vc; Component: CLS.EF.pageController.pages.eventSelectionArchiveModal
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.eventSelectionArchiveModal.CLS/EV.0</td><td>CLS.EF.pageController.pages.eventSelectionArchiveModal</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63802,61975</TimeChanged>
<TimeCreated>63406,53067.617995</TimeCreated>

<Method name="loadData">
<Implementation><![CDATA[
	set archiveModal=..addModalHeader("archive_header","Archive Events")
	set tmp=..addText("archive_text","Are you sure that you want to archive the selected events?")
	set element=..addCloseModalButton("archive_no_button","No")
	set element=..addSubmitModalButton("archive_yes_button","Yes")
]]></Implementation>
</Method>

<Method name="validate">
</Method>

<Method name="save">
<Implementation><![CDATA[
	#dim eventID as %String
	#dim warningMessage as %String = ""
	#dim userID as %Integer = $G(%session.Data("eventsforce","backend","xPersonID"))
	
	set parentPageControllerID=%request.Get("parentPageControllerID")
	set selectedRowIds=%request.Get("selectedRowIds")
	set parentPageController=##class(EF.pageController.pages.eventSelection).open(parentPageControllerID,..contextData)	
	if '$IsObject(parentPageController) {
		throw ##class(shared.exceptions.generalException).%New("could not open page controller")
	}
	for i=1:1:$L(selectedRowIds,"|") {
		set rowID = $Piece(selectedRowIds,"|",i)
		if rowID {
			set eventID = parentPageController.getEventID(rowID)
			if eventID {
				try {
					do ##class(setup.objEvent).updateEventStatus(eventID,"archived",userID)
				} catch error {
					set ..warningMessages = "Some events could not be archived"
				}
			}
		}
	
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.eventSelectionCancelModal">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.eventSelectionCancelModal.CLS/EV.0
;vc; Component: CLS.EF.pageController.pages.eventSelectionCancelModal
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.eventSelectionCancelModal.CLS/EV.0</td><td>CLS.EF.pageController.pages.eventSelectionCancelModal</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63802,61950</TimeChanged>
<TimeCreated>63406,53067.617995</TimeCreated>

<Method name="loadData">
<Implementation><![CDATA[
	set archiveModal=..addModalHeader("cancel_header","Cancel Events")
	set tmp=..addText("cancel_text","Are you sure that you want to cancel the selected events?")
	set element=..addCloseModalButton("cancel_no_button","No")
	set element=..addSubmitModalButton("cancel_yes_button","Yes")
]]></Implementation>
</Method>

<Method name="validate">
</Method>

<Method name="save">
<Implementation><![CDATA[
	#dim eventID as %String
	#dim warningMessage as %String = ""
	#dim userID as %Integer = $G(%session.Data("eventsforce","backend","xPersonID"))
	
	set parentPageControllerID=%request.Get("parentPageControllerID")
	set selectedRowIds=%request.Get("selectedRowIds")
	set parentPageController=##class(EF.pageController.pages.eventSelection).open(parentPageControllerID,..contextData)	
	if '$IsObject(parentPageController) {
		throw ##class(shared.exceptions.generalException).%New("could not open page controller")
	}
	for i=1:1:$L(selectedRowIds,"|") {
		set rowID = $Piece(selectedRowIds,"|",i)
		if rowID {
			set eventID = parentPageController.getEventID(rowID)
			if eventID {
				try {
					do ##class(setup.objEvent).updateEventStatus(eventID,"cancelled",userID)
				} catch error {
					set ..warningMessages = "Some events could not be cancelled"
				}
				
			}
		}
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.eventSelectionMakeLiveModal">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.eventSelectionMakeLiveModal.CLS/EV.1
;vc; Component: CLS.EF.pageController.pages.eventSelectionMakeLiveModal
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.eventSelectionMakeLiveModal.CLS/EV.1</td><td>CLS.EF.pageController.pages.eventSelectionMakeLiveModal</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63943,56358</TimeChanged>
<TimeCreated>63406,53067.617995</TimeCreated>

<Method name="loadData">
<Implementation><![CDATA[
	set archiveModal=..addModalHeader("status_header","Make Events Live")
	set sessionDropdown=..addText("status_text","Are you sure that you want make the selected events live?")
	set element=..addCloseModalButton("status_no_button","No")
	set element=..addSubmitModalButton("status_yes_button","Yes")
]]></Implementation>
</Method>

<Method name="validate">
</Method>

<Method name="save">
<Implementation><![CDATA[
	#dim eventID as %String
	#dim warningMessage as %String = ""
	#dim userID as %Integer = $G(%session.Data("eventsforce","backend","xPersonID"))
	
	set parentPageControllerID=%request.Get("parentPageControllerID")
	set selectedRowIds=%request.Get("selectedRowIds")
	set parentPageController=##class(EF.pageController.pages.eventSelection).open(parentPageControllerID,..contextData)	
	if '$IsObject(parentPageController) {
		throw ##class(shared.exceptions.generalException).%New("could not open page controller")
	}
	set (eventCount,failedCount)=0
	for i=1:1:$L(selectedRowIds,"|") {
		set rowID = $Piece(selectedRowIds,"|",i)
		if rowID {
			set eventID = parentPageController.getEventID(rowID)
			if eventID {
				set eventCount=eventCount+1
				try {
					do ##class(setup.objEvent).updateEventStatus(eventID,"live",userID)
				} catch error {
					set failedCount=failedCount+1
				}
			}
		}
	}
	if failedCount {
		if ##class(setup.objSetting).getParameter("system","aviva special") {
			set ..warningMessages=failedCount_" out of "_eventCount_" events could not be made live because not all of the mandatory questions have been completed."
		} else {
			set ..warningMessages=failedCount_" out of "_eventCount_" events could not be made live because not all of the mandatory custom event fields have been completed."
		}
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.eventSelectionMakeNotLiveModal">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.eventSelectionMakeNotLiveModal.CLS/EV.0
;vc; Component: CLS.EF.pageController.pages.eventSelectionMakeNotLiveModal
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.eventSelectionMakeNotLiveModal.CLS/EV.0</td><td>CLS.EF.pageController.pages.eventSelectionMakeNotLiveModal</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63802,61895</TimeChanged>
<TimeCreated>63406,53067.617995</TimeCreated>

<Method name="loadData">
<Implementation><![CDATA[
	set archiveModal=..addModalHeader("status_header","Make Events 'Not Live'")
	set tmp=..addText("status_text","Are you sure that you want make the selected events 'not live'?")
	set element=..addCloseModalButton("status_no_button","No")
	set element=..addSubmitModalButton("status_yes_button","Yes")
]]></Implementation>
</Method>

<Method name="validate">
</Method>

<Method name="save">
<Implementation><![CDATA[
	#dim eventID as %String
	#dim warningMessage as %String = ""
	#dim userID as %Integer = $G(%session.Data("eventsforce","backend","xPersonID"))
	
	set parentPageControllerID=%request.Get("parentPageControllerID")
	set selectedRowIds=%request.Get("selectedRowIds")
	set parentPageController=##class(EF.pageController.pages.eventSelection).open(parentPageControllerID,..contextData)	
	if '$IsObject(parentPageController) {
		throw ##class(shared.exceptions.generalException).%New("could not open page controller")
	}
	for i=1:1:$L(selectedRowIds,"|") {
		set rowID = $Piece(selectedRowIds,"|",i)
		if rowID {
			set eventID = parentPageController.getEventID(rowID)
			if eventID {
				try {
					do ##class(setup.objEvent).updateEventStatus(eventID,"not live",userID)
				} catch error {
					set ..warningMessages = "Some events could not be made 'Not Live'"
				}
			}
		}
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.eventSettingsAgendaSessions">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.eventSettingsAgendaSessions.CLS/EV.2
;vc; Component: CLS.EF.pageController.pages.eventSettingsAgendaSessions
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.eventSettingsAgendaSessions.CLS/EV.2</td><td>CLS.EF.pageController.pages.eventSettingsAgendaSessions</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63950,50723</TimeChanged>
<TimeCreated>63588,61073.921706</TimeCreated>

<Parameter name="returnPage">
<Default>eventSettingsAgendaSessions.csp</Default>
</Parameter>

<Method name="loadData">
<Implementation><![CDATA[
	set panel=..addPanel("general_panel","General")
	do ..loadGeneralPanel(panel)
	
	set panel=..addPanel("agenda_panel","Agenda")
	do ..loadCalendarViewPanel(panel)
	do ..loadListViewPanel(panel)
	
	set panel=..addPanel("session_settings_panel","Session Details")
	do ..loadSessionSettingsPanel(panel)
]]></Implementation>
</Method>

<Method name="loadGeneralPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	set eventID=..getEventID()
	
	set inputGroup=panel.addInputGroup("display_caption_for_no_price","Caption for sessions without a price:")
	set customCaptionMode=##class(setup.objEventSetting).getParameter("frontend","caption for sessions without prices",eventID)
	set customCaption=##class(setup.objEventSetting).getParameter("frontend","caption text for sessions without prices",eventID)
	
	if customCaptionMode=0 {
		set customCaption="(no price)"
		set customCaptionMode=1
	}
	set customCaption=inputGroup.addTextInput("custom_caption","",customCaption)
	set customCaptionMode=inputGroup.addRadioButtons("custom_caption_mode","",customCaptionMode)
    do customCaptionMode.addAlternative(1,"No caption",1)
    do customCaptionMode.addAlternative(2,"Custom")
    set customCaption.enableDisableDependencyList=##class(EF.ui.components.dependencyList).createNew("custom_caption_mode",2)
    
	set element=panel.addCheckbox("display_prices_on_agenda_page","Show prices",##class(setup.objEventSetting).getParameter("chooseItems","show prices",eventID))
	set element=panel.addCheckbox("must_book_one_session","Each person must book at least one session",##class(setup.objEventSetting).getParameter("chooseItems","force at least one",eventID))
	
	set element=panel.addRadioButtons("initial_amendment_page","When amending a registration, initially show:",##class(setup.objEventSetting).getParameter("system","session amendment mode",eventID))
    do element.addAlternative("basket","Basket page",1)
    do element.addAlternative("session selection","Session selection")
]]></Implementation>
</Method>

<Method name="loadCalendarViewPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	set eventID=..getEventID()
	set list=panel.addList("calendar_display_in","Show the calendar view in:")
    set element=list.addCheckbox("calendar_display_in_website","Website",##class(setup.objEventSetting).getParameter("sessions","use grid view in daily agenda",eventID))
    set element=list.addCheckbox("calendar_display_registration_process","Registration process",##class(setup.objEventSetting).getParameter("sessions","use grid view in choose items",eventID))
	
	set element=panel.addRadioButtons("view_sessions_by","View sessions by:",##class(setup.objEventSetting).getParameter("grid layout","location or category",eventID))
    do element.addAlternative("location","Location",1)
    do element.addAlternative("category","Display category")
    do element.addAlternative("both","Allow switching between views")
    set element=panel.addCheckbox("sessions_span_locations","Identical sessions can span locations",##class(setup.objEventSetting).getParameter("sessions","sessions span locations",eventID))
]]></Implementation>
</Method>

<Method name="loadListViewPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	set eventID=..getEventID()
	set list=panel.addList("list_display_in","Show the list view in:")
    set element=list.addCheckbox("list_display_in_website","Website",##class(setup.objEventSetting).getParameter("sessions","use list view in daily agenda",eventID))
    set element=list.addCheckbox("list_display_registration_process","Registration process",##class(setup.objEventSetting).getParameter("sessions","use list view in choose items",eventID))
	

	set element=panel.addRadioButtons("list_group_sessions_by","Group sessions primarily by:",##class(setup.objEventSetting).getParameter("daily agenda","order by date",eventID))
    do element.addAlternative(0,"Location",1)
    do element.addAlternative(1,"Time")
    
    set list=panel.addList("list_session_info_options","During registration show:")
    
    set element=list.addCheckbox("session_capacity","Session capacity",##class(setup.objEventSetting).getParameter("sessions","show capacity when booking",eventID))
    set element=list.addCheckbox("current_booking_level","Current booking level",##class(setup.objEventSetting).getParameter("sessions","show booking level when booking",eventID))
]]></Implementation>
</Method>

<Method name="loadSessionSettingsPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	set eventID=..getEventID()
	
    set list=panel.addList("session_details_options","On the session details page show:")
    set element=list.addCheckbox("show_session_summary","Show session summary",##class(setup.objEventSetting).getParameter("session details","show session summary",eventID))
    set element=list.addCheckbox("show_session_type","Show session type",'##class(setup.objEventSetting).getParameter("abstracts","session Details - Hide Session Type",eventID))
]]></Implementation>
</Method>

<Method name="validate">
</Method>

<Method name="saveData">
<Implementation><![CDATA[
	do ..saveGeneralPanel()
	do ..saveCalendarViewPanel()
	do ..saveListViewPanel()
	do ..saveSessionDetailsPanel()
]]></Implementation>
</Method>

<Method name="saveGeneralPanel">
<Implementation><![CDATA[
	set eventID=..getEventID()
	
	if ..isUpdatedByIdentifier("custom_caption") {
		do ##class(setup.objEventSetting).setParameter("frontend","caption text for sessions without prices",..getValueByIdentifier("custom_caption"),eventID)
	}
	if ..isUpdatedByIdentifier("custom_caption_mode") {
		do ##class(setup.objEventSetting).setParameter("frontend","caption for sessions without prices",..getValueByIdentifier("custom_caption_mode"),eventID)
	}
	if ..isUpdatedByIdentifier("display_prices_on_agenda_page") {
		do ##class(setup.objEventSetting).setParameter("chooseItems","show prices",..getValueByIdentifier("display_prices_on_agenda_page"),eventID)
	}
	if ..isUpdatedByIdentifier("must_book_one_session") {
		do ##class(setup.objEventSetting).setParameter("chooseItems","force at least one",..getValueByIdentifier("must_book_one_session"),eventID)
	}
	if ..isUpdatedByIdentifier("initial_amendment_page") {
		do ##class(setup.objEventSetting).setParameter("system","session amendment mode",..getValueByIdentifier("initial_amendment_page"),eventID)
	}
]]></Implementation>
</Method>

<Method name="saveCalendarViewPanel">
<Implementation><![CDATA[
	set eventID=..getEventID()
	
	if ..isUpdatedByIdentifier("calendar_display_in_website") {
		do ##class(setup.objEventSetting).setParameter("sessions","use grid view in daily agenda",..getValueByIdentifier("calendar_display_in_website"),eventID)
	}
	if ..isUpdatedByIdentifier("calendar_display_registration_process") {
		do ##class(setup.objEventSetting).setParameter("sessions","use grid view in choose items",..getValueByIdentifier("calendar_display_registration_process"),eventID)
	}
	if ..isUpdatedByIdentifier("view_sessions_by") {
		do ##class(setup.objEventSetting).setParameter("grid layout","location or category",..getValueByIdentifier("view_sessions_by"),eventID)
	}
	if ..isUpdatedByIdentifier("sessions_span_locations") {
		do ##class(setup.objEventSetting).setParameter("sessions","sessions span locations",..getValueByIdentifier("sessions_span_locations"),eventID)
	}
]]></Implementation>
</Method>

<Method name="saveListViewPanel">
<Implementation><![CDATA[
	set eventID=..getEventID()
	
	if ..isUpdatedByIdentifier("list_display_in_website") {
		do ##class(setup.objEventSetting).setParameter("sessions","use list view in daily agenda",..getValueByIdentifier("list_display_in_website"),eventID)
	}
	if ..isUpdatedByIdentifier("list_display_registration_process") {
		do ##class(setup.objEventSetting).setParameter("sessions","use list view in choose items",..getValueByIdentifier("list_display_registration_process"),eventID)
	}
	if ..isUpdatedByIdentifier("list_group_sessions_by") {
		do ##class(setup.objEventSetting).setParameter("daily agenda","order by date",..getValueByIdentifier("list_group_sessions_by"),eventID)
	}
	if ..isUpdatedByIdentifier("session_capacity") {
		do ##class(setup.objEventSetting).setParameter("sessions","show capacity when booking",..getValueByIdentifier("session_capacity"),eventID)
	}
	if ..isUpdatedByIdentifier("current_booking_level") {
		do ##class(setup.objEventSetting).setParameter("sessions","show booking level when booking",..getValueByIdentifier("current_booking_level"),eventID)
	}
]]></Implementation>
</Method>

<Method name="saveSessionDetailsPanel">
<Implementation><![CDATA[
	set eventID=..getEventID()
	if ..isUpdatedByIdentifier("show_session_summary") {
		do ##class(setup.objEventSetting).setParameter("session details","show session summary",..getValueByIdentifier("show_session_summary"),eventID)
	}
	if ..isUpdatedByIdentifier("show_session_type") {
		do ##class(setup.objEventSetting).setParameter("abstracts","session Details - Hide Session Type",'..getValueByIdentifier("show_session_type"),eventID)
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.eventSettingsSalesforce">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.pages.eventSettingsSalesforce.CLS/EV.0
;vc; Component: CLS.EF.pageController.pages.eventSettingsSalesforce
;vc;  Location: SmallDev
;vc; Date/Time: 15-Jul-14 15:25
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.eventSettingsSalesforce.CLS/EV.0</td><td>CLS.EF.pageController.pages.eventSettingsSalesforce</td><td>SmallDev</td><td style='white-space: nowrap;'>15-Jul-14 15:25</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63372,47463</TimeChanged>
<TimeCreated>63372,47463.737212</TimeCreated>

<Parameter name="returnPage">
<Default>eventSettingsSalesforce.csp</Default>
</Parameter>

<Method name="loadData">
<Implementation><![CDATA[
	set eventID=..getEventID()
	set panel=..addPanel("salesforce_panel","Salesforce.com")
	set isIntegrationEnabled=##class(EF.extSys.salesforce.CRMintegrationSF).isIntegrationEnabledForEvent(eventID)
	set isDisabled=##class(EF.extSys.salesforce.CRMintegrationSF).getActiveIntegrationVersion()'=2
	
	do panel.addToggle("is_integration_on","Salesforce integration for this event is:",isIntegrationEnabled,isDisabled)
	
	quit
]]></Implementation>
</Method>

<Method name="validate">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit 1
]]></Implementation>
</Method>

<Method name="saveData">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set eventID=..getEventID()
	if ..isUpdatedByIdentifier("is_integration_on") {
		do ##class(setup.objEventSetting).setParameter("Salesforce V2","Integration disabled for this event",'..getValueByIdentifier("is_integration_on"),eventID)
	}
	quit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.eventsforceLicense">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.eventsforceLicense.CLS/EV.7
;vc; Component: CLS.EF.pageController.pages.eventsforceLicense
;vc;  Location: SmallDev
;vc; Date/Time: 26-Feb-16 15:09
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.eventsforceLicense.CLS/EV.7</td><td>CLS.EF.pageController.pages.eventsforceLicense</td><td>SmallDev</td><td style='white-space: nowrap;'>26-Feb-16 15:09</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63974,55023.37829</TimeChanged>
<TimeCreated>63383,42544.650013</TimeCreated>

<Parameter name="returnPage">
<Default>eventsForceLicense.csp</Default>
</Parameter>

<Parameter name="isSystemPage">
<Default>1</Default>
</Parameter>

<Parameter name="useAutomaticAudit">
<Default>0</Default>
</Parameter>

<Method name="loadData">
<Implementation><![CDATA[
	set usagePanel=..addPanel("usage_panel","Usage")
	set licensePanel=..addPanel("license_panel","License")
	set addLicenseButton=licensePanel.addOpenModalButton("add_license_button","Add License...")
	set addPackageButton=licensePanel.addOpenModalButton("add_package_button","Add Package...")
	do ..loadUsagePanel(usagePanel)
	do ..loadLicensePanel(licensePanel)
	
	set addLicenseModal=..addModal("add_license_modal","Add License")
	do ..loadAddLicenseModal(addLicenseModal)
	do addLicenseButton.setTargetElement(addLicenseModal)
	
	set addPackageModal=..addModal("add_package_modal","Add Package to License")
	do ..loadAddPackageModal(addPackageModal)
	do addPackageButton.setTargetElement(addPackageModal)
]]></Implementation>
</Method>

<Method name="loadUsagePanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	set expiryTimeStamp=##class(EF.licensing.objLicense).getLastLicensedTimeStampUTC()
	do panel.addText("usage_text","Current license expires on "_##class(shared.dateFunctions).getBackendFriendlyOutputDate(expiryTimeStamp))
	
	set table=panel.addResponsiveTable("usage_table")
	set row=table.addRow("licensed_row","Licensed")
	set row=table.addRow("used_row","Used")
	set row=table.addRow("remaining_row","Remaining")
	set column=table.addColumn("usage_users_column","Users","right")
	do column.setAJAXMethod("loadUsersColumn")
	set column=table.addColumn("usage_registrations_column","Registrations","right")
	do column.setAJAXMethod("loadRegistrationsColumn")
	set column=table.addColumn("usage_abstracts_column","Abstracts Events","right")
	do column.setAJAXMethod("loadAbstractsColumn")
	set column=table.addColumn("usage_abstract_submissions_column","Abstract Submissions","right")
	do column.setAJAXMethod("loadAbstractSubmissionsColumn")
	set column=table.addColumn("usage_awards_column","Awards Events","right")
	do column.setAJAXMethod("loadAwardsColumn")
	set column=table.addColumn("usage_award_entries_column","Award Entries","right")
	do column.setAJAXMethod("loadAwardEntriesColumn")
	set column=table.addColumn("usage_meet_man_column","Meeting Manager Events","right")
	do column.setAJAXMethod("loadMeetingManagerColumn")
	
	do table.createCells()
]]></Implementation>
</Method>

<Method name="addUsageData">
<FormalSpec>table,columnID,licensed,used</FormalSpec>
<Implementation><![CDATA[
	do table.addCellByIdentifiers("licensed_row",columnID,licensed)
	do table.addCellByIdentifiers("used_row",columnID,used)
	set cell=table.addCellByIdentifiers("remaining_row",columnID,licensed-used)
	if licensed-used<0 {
		do cell.addWarning()	
	}
]]></Implementation>
</Method>

<Method name="loadUsersColumn">
<Implementation><![CDATA[
	set currentLicense=##class(EF.licensing.objLicense).getCurrentLicense()
	set licensedUsers=currentLicense.getUserQuantity()
	set usedUsers=currentLicense.getUserQuantityUsed()
	do ..loadUsageData("usage_users_column", licensedUsers, usedUsers)
]]></Implementation>
</Method>

<Method name="loadRegistrationsColumn">
<Implementation><![CDATA[
	set currentLicense=##class(EF.licensing.objLicense).getCurrentLicense()
	set licensedRegistrations=currentLicense.getRegistrationQuantity()
	set usedRegistrations=currentLicense.getRegistrationQuantityUsed()
	do ..loadUsageData("usage_registrations_column", licensedRegistrations, usedRegistrations)
]]></Implementation>
</Method>

<Method name="loadAbstractsColumn">
<Implementation><![CDATA[
	set currentLicense=##class(EF.licensing.objLicense).getCurrentLicense()
	set licensedAbstractEvents=currentLicense.getAbstractEventQuantity()
	set usedAbstractEvents=currentLicense.getAbstractEventQuantityUsed()
	do ..loadUsageData("usage_abstracts_column", licensedAbstractEvents, usedAbstractEvents)
]]></Implementation>
</Method>

<Method name="loadAbstractSubmissionsColumn">
<Implementation><![CDATA[
	set currentLicense=##class(EF.licensing.objLicense).getCurrentLicense()
	set licensedAbstractSubmissions=currentLicense.getAbstractSubmissionsQuantity()
	set usedAbstractSubmissions=currentLicense.getAbstractSubmissionsQuantityUsed()
	do ..loadUsageData("usage_abstract_submissions_column", licensedAbstractSubmissions, usedAbstractSubmissions)
]]></Implementation>
</Method>

<Method name="loadAwardsColumn">
<Implementation><![CDATA[
	set currentLicense=##class(EF.licensing.objLicense).getCurrentLicense()
	set licensedAwardsEvents=currentLicense.getAwardEventQuantity()
	set usedAwardsEvents=currentLicense.getAwardEventQuantityUsed()
	do ..loadUsageData("usage_awards_column", licensedAwardsEvents, usedAwardsEvents)
]]></Implementation>
</Method>

<Method name="loadAwardEntriesColumn">
<Implementation><![CDATA[
	set currentLicense=##class(EF.licensing.objLicense).getCurrentLicense()
	set licensedAwardEntries=currentLicense.getAwardEntriesQuantity()
	set usedAwardEntries=currentLicense.getAwardEntriesQuantityUsed()
	do ..loadUsageData("usage_award_entries_column", licensedAwardEntries, usedAwardEntries)
]]></Implementation>
</Method>

<Method name="loadMeetingManagerColumn">
<Implementation><![CDATA[
	set currentLicense=##class(EF.licensing.objLicense).getCurrentLicense()
	set licensedMeetManEvents=currentLicense.getMeetingManagerEventQuantity()
	set usedMeetManEvents=currentLicense.getMeetingManagerEventQuantityUsed()
	do ..loadUsageData("usage_meet_man_column", licensedMeetManEvents, usedMeetManEvents)
]]></Implementation>
</Method>

<Method name="loadUsageData">
<FormalSpec>columnID,licensed,used</FormalSpec>
<Implementation><![CDATA[
	#define isRemainingQuantity 1
	set column=..getElementByIdentifier(columnID)
	do column.updateCellByRowIdentifier("licensed_row",..formatQuantityForDisplay(licensed))
	do column.updateCellByRowIdentifier("used_row",..formatQuantityForDisplay(used))
	set cell=column.updateCellByRowIdentifier("remaining_row",..formatQuantityForDisplay(licensed-used,$$$isRemainingQuantity))
	if licensed-used<0 {
		do cell.addWarning()	
	}
]]></Implementation>
</Method>

<Method name="loadLicensePanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	set table=panel.addResponsiveTable("license_table")
	do table.addColumn("order_no_column","Order No.")
	do table.addColumn("start_column","Start")
	do table.addColumn("end_column","End")
	do table.addColumn("quantity_column","Quantity","right")
	do table.addColumn("package_column","Package")
	do table.addColumn("users_column","Users","right")
	do table.addColumn("registrations_column","Registrations","right")
	do table.addColumn("abstracts_column","Abstracts Events","right")
	do table.addColumn("abstract_submissions_column","Abstract Submissions","right")
	do table.addColumn("awards_column","Awards Events","right")
	do table.addColumn("award_entries_column","Award Entries","right")
	do table.addColumn("meeting_manager_column","Meeting Manager Events","right")
	do table.addColumn("delete_button_column")
	set currentLicenseID=##class(EF.licensing.objLicense).getCurrentLicenseID()
	set packages=##class(EF.licensing.package).getAllPackages()
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	set query="SELECT * FROM EF_licensing.objLicense ORDER BY endTimeStampUTC DESC"
	do rs.Prepare(query)
	do rs.Execute()
	while rs.Next() {
		set licenseID=rs.Data("ID")
		set isCurrentLicense=(licenseID=currentLicenseID)
		set rs2=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		set licenseRowIdentifier="row"_(table.rows.Count()+1)
		set licenseRow=table.addRow(licenseRowIdentifier)
		set (totalUsers,totalRegistrations,totalAbstracts,totalAbstractSubmissions,totalAwards,totalAwardEntries,totalMeetMans)=0
		
		set query="SELECT ID FROM EF_licensing.objLicensedPackage WHERE objLicense = ?"
		do rs2.Prepare(query)
		do rs2.Execute(licenseID)
		while rs2.Next() {
			set licensedPackageID=rs2.Get("ID")
			set licensedPackage=##class(EF.licensing.objLicensedPackage).%OpenId(licensedPackageID)
			set packageIdentifier=licensedPackage.getPackageIdentifier()
			set package=packages.GetAt(packageIdentifier)
			
			set userQuantity=(licensedPackage.quantity)*(package.userQuantity)
			set totalUsers=totalUsers+userQuantity
			set registrationQuantity=(licensedPackage.quantity)*(package.registrationQuantity)
			set totalRegistrations=totalRegistrations+registrationQuantity
			set abstractEventQuantity=(licensedPackage.quantity)*(package.abstractEventQuantity)
			set totalAbstracts=totalAbstracts+abstractEventQuantity
			set abstractSubmissionsQuantity=(licensedPackage.quantity)*(package.abstractSubmissionsQuantity)
			set totalAbstractSubmissions=totalAbstractSubmissions+abstractSubmissionsQuantity
			set awardEventQuantity=(licensedPackage.quantity)*(package.awardEventQuantity)
			set totalAwards=totalAwards+awardEventQuantity
			set awardEntriesQuantity=(licensedPackage.quantity)*(package.awardEntriesQuantity)
			set totalAwardEntries=totalAwardEntries+awardEntriesQuantity
			set meetingManagerEventQuantity=(licensedPackage.quantity)*(package.meetingManagerEventQuantity)
			set totalMeetMans=totalMeetMans+meetingManagerEventQuantity
			
			
			set licensedPackageRowIdentifier="row"_(table.rows.Count()+1)
			set packageRow=table.addRow(licensedPackageRowIdentifier)
			do ..populateLicenseRow(
				packageRow
				,""
				,licensedPackage.quantity
				,packages.GetAt(packageIdentifier).getOutputDescription()
				,""
				,""
				,userQuantity
				,registrationQuantity
				,abstractEventQuantity
				,abstractSubmissionsQuantity
				,awardEventQuantity
				,awardEntriesQuantity
				,meetingManagerEventQuantity
				,isCurrentLicense)
			do packageRow.uiComponent.applyIsItalic()
			set cell=table.addCellByIdentifiers(licensedPackageRowIdentifier,"delete_button_column","")
			set element=cell.addDeleteButton("delete_licensed_package_"_licensedPackageID,"Delete","deletePackageFromLicense",licensedPackageID,"Please confirm that you would like to delete this package")
		}
		set orderNo=rs.Data("orderNo")
		set start=##class(shared.dateFunctions).getBackendFriendlyOutputDate(rs.Data("startTimeStampUTC"))
		set end=##class(shared.dateFunctions).getBackendFriendlyOutputDate(rs.Data("endTimeStampUTC"))
		do ..populateLicenseRow(licenseRow,orderNo,"","",start,end,totalUsers,totalRegistrations,totalAbstracts,totalAbstractSubmissions,totalAwards,totalAwardEntries,totalMeetMans, isCurrentLicense)
		set cell=table.addCellByIdentifiers(licenseRowIdentifier,"delete_button_column","")
		set element=cell.addDeleteButton("delete_licensed_"_licenseID,"Delete","deleteLicense",licenseID,"Please confirm that you would like to delete this license")
		
	}
]]></Implementation>
</Method>

<Method name="populateLicenseRow">
<FormalSpec>row:EF.pageController.containerElements.row,orderNo,quantity,package,start,end,users,registrations,abstracts,abstractSubmissions,awards,awardEntries,meetMans,isCurrentLicense</FormalSpec>
<Implementation><![CDATA[
	set table=row.elementParent
	set rowIdentifier=row.identifier
	do table.addCellByIdentifiers(rowIdentifier,"order_no_column",orderNo)
	do table.addCellByIdentifiers(rowIdentifier,"start_column",start)
	do table.addCellByIdentifiers(rowIdentifier,"end_column",end)
	do table.addCellByIdentifiers(rowIdentifier,"quantity_column",quantity)
	do table.addCellByIdentifiers(rowIdentifier,"package_column",package)
	do table.addCellByIdentifiers(rowIdentifier,"users_column",..formatQuantityForDisplay(users))
	do table.addCellByIdentifiers(rowIdentifier,"registrations_column",..formatQuantityForDisplay(registrations))
	do table.addCellByIdentifiers(rowIdentifier,"abstracts_column",..formatQuantityForDisplay(abstracts))
	do table.addCellByIdentifiers(rowIdentifier,"abstract_submissions_column",..formatQuantityForDisplay(abstractSubmissions))
	do table.addCellByIdentifiers(rowIdentifier,"awards_column",..formatQuantityForDisplay(awards))
	do table.addCellByIdentifiers(rowIdentifier,"award_entries_column",..formatQuantityForDisplay(awardEntries))
	do table.addCellByIdentifiers(rowIdentifier,"meeting_manager_column",..formatQuantityForDisplay(meetMans))
	
	if 'isCurrentLicense {
		do row.uiComponent.applyIsMuted()	
	}
]]></Implementation>
</Method>

<Method name="deletePackageFromLicense">
<FormalSpec>button:EF.pageController.buttons.delete</FormalSpec>
<Implementation><![CDATA[	do ##class(EF.licensing.objLicensedPackage).delete(button.objectId)
]]></Implementation>
</Method>

<Method name="deleteLicense">
<FormalSpec>button:EF.pageController.buttons.delete</FormalSpec>
<Implementation><![CDATA[	do ##class(EF.licensing.objLicense).delete(button.objectId)
]]></Implementation>
</Method>

<Method name="loadAddLicenseModal">
<FormalSpec>modal:EF.pageController.containerElements.modal</FormalSpec>
<Implementation><![CDATA[
	set element=modal.addTextInput("add_license_order_number","Order number:","")
	set element=modal.addDatePicker("add_license_start_date","Start date:","")
	set element=modal.addDatePicker("add_license_end_date","End date:","")
	
	set element=modal.addCloseModalButton("add_license_cancel_button","Cancel")
	set element=modal.addSubmitButton("add_license_add_button","Add")
]]></Implementation>
</Method>

<Method name="loadAddPackageModal">
<FormalSpec>modal:EF.pageController.containerElements.modal</FormalSpec>
<Implementation><![CDATA[
	
	set element=modal.addIntegerInput("add_package_quantity","Quantity:",1)
	set element.uiComponent.minValue=1
	
	set element=modal.addDropdown("add_package_dropdown","Package:","")
	set packages=##class(EF.licensing.package).getAllPackages(0,0)
	for tmpCustomPackage=0,1 {
		set key=""
		for {
			set package= packages.GetNext(.key)
			if key="" quit
			if package.canAddToLicense {
				if package.isCustomPackage = tmpCustomPackage {
					do element.addAlternative(package.identifier,package.getOutputDescription())
				}
			}
		}
	}
	
	
	set element=modal.addDropdown("add_license_dropdown","License:","")
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	set query="SELECT ID FROM EF_licensing.objLicense ORDER BY endTimeStampUTC DESC"
	do rs.Prepare(query)
	do rs.Execute()
	while rs.Next() {
		set licenseID=rs.Data("ID")
		do element.addAlternative(licenseID,##class(EF.licensing.objLicense).getDisplayDescription(licenseID))
	}
	
	set element=modal.addCloseModalButton("add_package_cancel_button","Cancel")
	set element=modal.addSubmitButton("add_package_add_button","Add")
]]></Implementation>
</Method>

<Method name="validate">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if ..submitButtonClickedIdentifier="add_license_add_button" { 
		set startDate=..getValueByIdentifier("add_license_start_date")
		set endDate=..getValueByIdentifier("add_license_end_date")
		if '$l(startDate) {
			do ..getElementByIdentifier("add_license_modal").setErrorMessage("""Start date"" is empty")
		}
		if '$l(endDate) {
			do ..getElementByIdentifier("add_license_modal").setErrorMessage("""End date"" is empty")
		}
		if $l(startDate)&&$l(endDate) {
			if ##class(shared.timeFunctions).compareTimeStamps(##class(shared.timeFunctions).convertInputDateToTimeStamp(startDate),##class(shared.timeFunctions).convertInputDateToTimeStamp(endDate),">") {
				do ..getElementByIdentifier("add_license_modal").setErrorMessage("""Start date"" must be before ""End date""")
			} elseif ##class(EF.licensing.objLicense).doesLicenseExistForPeriod(##class(shared.timeFunctions).convertInputDateToTimeStamp(startDate),##class(shared.timeFunctions).convertInputDateToTimeStamp(endDate)) {
				do ..getElementByIdentifier("add_license_modal").setErrorMessage("there is already a license for this period")
			}
		}
		if ..getValueByIdentifier("add_license_order_number") = "" {
			do ..getElementByIdentifier("add_license_order_number").setErrorMessage("you must enter an order number")
		}
	}
	if ..submitButtonClickedIdentifier="add_package_add_button" { 
		set quantity=..getValueByIdentifier("add_package_quantity")
		if 'quantity {
			do ..getElementByIdentifier("add_package_quantity").setErrorMessage("you must enter a quantity")	
		}
	}
	
	quit 1
]]></Implementation>
</Method>

<Method name="saveData">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if ..submitButtonClickedIdentifier="add_license_add_button" {
		set orderNumber=..getValueByIdentifier("add_license_order_number")
		set startDate=..getValueByIdentifier("add_license_start_date")
		set endDate=..getValueByIdentifier("add_license_end_date")
		set startDateTimeStampUTC=##class(shared.timeFunctions).convertInputDateToTimeStamp(startDate)_" 00:00:00"
		set endDateTimeStampUTC=##class(shared.timeFunctions).convertInputDateToTimeStamp(endDate)_" 23:59:59"
		
		do ##class(EF.licensing.objLicense).add(orderNumber,startDateTimeStampUTC,endDateTimeStampUTC)
	}
	
	if ..submitButtonClickedIdentifier="add_package_add_button" { 
		set licenseID=..getValueByIdentifier("add_license_dropdown")
		set quantity=..getValueByIdentifier("add_package_quantity")
		set packageIdentifier=..getValueByIdentifier("add_package_dropdown")
		do ##class(EF.licensing.objLicensedPackage).add(packageIdentifier,licenseID,quantity)
	}
	
	quit
]]></Implementation>
</Method>

<Method name="formatQuantityForDisplay">
<ClassMethod>1</ClassMethod>
<FormalSpec>quantity:%Integer,isRemainingQuantity:%Boolean=0</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ret=quantity
	
	If (ret=##class(EF.licensing.package).getUnlimitedQuantityValue()) {
		If (isRemainingQuantity) {
			Set ret=""
		} else {
			Set ret="Unlimited"
		}
	}
	
	Return ret
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.invitationEmailSendResult">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.invitationEmailSendResult.CLS/EV.0
;vc; Component: CLS.EF.pageController.pages.invitationEmailSendResult
;vc;  Location: SmallDev
;vc; Date/Time: 16-Dec-15 13:27
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.invitationEmailSendResult.CLS/EV.0</td><td>CLS.EF.pageController.pages.invitationEmailSendResult</td><td>SmallDev</td><td style='white-space: nowrap;'>16-Dec-15 13:27</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63902,47904</TimeChanged>
<TimeCreated>63372,47463.737212</TimeCreated>

<Method name="loadData">
<Implementation><![CDATA[
	#dim totalSent as %Integer = %session.Data("eventsforce","backend","Number of invitations emails sent")
	#dim mailShotID as %Integer = %session.Data("eventsforce","backend","Invitations mailShotID")

	
	set myPanel=..addPanel("my_panel","Invitation Emails")
	set customMessage=##class(shared.callOuts).runObj("preRegisterEmail.csp","outputEmailSuccessMsg",1,totalSent,mailShotID)
	if +customMessage {
		set message=$p(customMessage,"|",3)
	} else {
		if totalSent=1 {
			set message=totalSent_" email has been sent."	
		} else {
			set message=totalSent_" emails have been sent."
		}
	}
	do myPanel.addText("message_text",message)

	quit
]]></Implementation>
</Method>

<Method name="validate">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit 1
]]></Implementation>
</Method>

<Method name="saveData">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.myDetails">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.myDetails.CLS/EV.3
;vc; Component: CLS.EF.pageController.pages.myDetails
;vc;  Location: SmallDev
;vc; Date/Time: 26-Feb-16 15:18
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.myDetails.CLS/EV.3</td><td>CLS.EF.pageController.pages.myDetails</td><td>SmallDev</td><td style='white-space: nowrap;'>26-Feb-16 15:18</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>64176,57649.176306</TimeChanged>
<TimeCreated>63883,56602.617157</TimeCreated>

<Parameter name="returnPage">
<Default>myDetails.csp</Default>
</Parameter>

<Parameter name="isSystemPage">
<Default>1</Default>
</Parameter>

<Parameter name="useAutomaticAudit">
<Default>1</Default>
</Parameter>

<Method name="loadData">
<Implementation><![CDATA[
	;#dim panel As EF.pageController.containerElements.panel
	;set panel=..addPanel("my-details-panel","My Details")
	do ..addTextInput("first-name","First name:",##class(cod.objItemData).get(..xCRuserID,"firstname"))
	do ..addTextInput("last-name","Last name:",##class(cod.objItemData).get(..xCRuserID,"lastname"))
	do ..addEmailInput("email-address","Email address:",##class(cod.objItemData).get(..xCRuserID,"email"))
	
	/*
	#dim dateFormatDropdown As EF.pageController.inputElements.dropdown
	set dateFormatDropdown = panel.addDropdown("preferred-date-format","Preferred date format:",##class(shared.dateFunctions).getBackendInputDatePattern())	
	do dateFormatDropdown.addAlternative("DD/MM/YYYY","26/03/2015")
	do dateFormatDropdown.addAlternative("MM/DD/YYYY","03/26/2015")
	
	#dim timeFormatDropdown As EF.pageController.inputElements.dropdown
	set timeFormatDropdown=panel.addDropdown("preferred-time-format","Preferred time format:",##class(shared.timeFunctions).getBackendOutputTimeFormat())	
	do timeFormatDropdown.addAlternative("12","12:30 PM")
	do timeFormatDropdown.addAlternative("24","14:30")
	
	set button=panel.addOpenModalAjaxButton("change-password-button","Change password…","changePasswordModal.csp")
	*/
]]></Implementation>
</Method>

<Method name="validate">
<Implementation><![CDATA[
	if ..isUpdatedByIdentifier("email-address") {
		if ##class(cod.objItemData).findSingle("email",..getValueByIdentifier("email-address")) {
			do ..getElementByIdentifier("email-address").setErrorMessage("the email address is already taken")
		}
	}
]]></Implementation>
</Method>

<Method name="saveData">
<Implementation><![CDATA[
	
	if ..isUpdatedByIdentifier("first-name") {
		do ##class(cod.objItemData).set(..xCRuserID,"firstname",..getValueByIdentifier("first-name"))
	}
	if ..isUpdatedByIdentifier("last-name") {
		do ##class(cod.objItemData).set(..xCRuserID,"lastname",..getValueByIdentifier("last-name"))
	}
	if ..isUpdatedByIdentifier("email-address") {
		do ##class(cod.objItemData).set(..xCRuserID,"email",..getValueByIdentifier("email-address"))
	}
	if ..isUpdatedByIdentifier("preferred-date-format") {
		do ##class(cod.objItemData).set(..xCRuserID,"EF_Backend_User_Date_Format",..getValueByIdentifier("preferred-date-format"))
	}
	if ..isUpdatedByIdentifier("preferred-time-format") {
		do ##class(cod.objItemData).set(..xCRuserID,"EF_Backend_User_Time_Format",..getValueByIdentifier("preferred-time-format"))
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.registrationSettings">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.registrationSettings.CLS/EV.13
;vc; Component: CLS.EF.pageController.pages.registrationSettings
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.registrationSettings.CLS/EV.13</td><td>CLS.EF.pageController.pages.registrationSettings</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>64135,57967</TimeChanged>
<TimeCreated>63929,66605.974644</TimeCreated>

<Parameter name="returnPage">
<Default>registrationSettings.csp</Default>
</Parameter>

<Property name="eventConfiguration">
<Type>setup.eventConfiguration</Type>
<Transient>1</Transient>
</Property>

<Property name="dateFormat">
<Type>%Integer</Type>
</Property>

<Property name="timeFormat">
<Type>%Integer</Type>
</Property>

<Method name="displayTimestamp">
<FormalSpec>timestamp</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ##class(shared.timeFunctions).formatTimestampForDisplay(timestamp,..dateFormat,..timeFormat)
]]></Implementation>
</Method>

<Method name="loadData">
<Implementation><![CDATA[
	set eventID=..getEventID()
	set ..eventConfiguration = ##class(setup.eventConfiguration).createForEventID(..getEventID())
	set ..dateFormat=##class(shared.dateFunctions).getBackendInputDateFormat()
	set ..timeFormat=##class(shared.timeFunctions).getBackendInputTimeFormat()

	set panel=..addPanel("registration-access-panel","Access")
	do ..loadAccessPanel(panel)

	set panel=..addPanel("registration-dates-panel","Dates")
	do ..loadDatesPanel(panel)
	
	if '##class(setup.objSetting).getParameter("feature flags","use legacy event capacity page") {
		set panel=..addPanel("days-panel","Days")
		do ..loadDaysPanel(panel)	
	}

	if (##class(setup.objSystemTypes).isModuleAllowed("Group Bookings")&&('..eventConfiguration.getIsAwardsEvent())) {
		set panel=..addPanel("registration-groups-panel","Groups")
		do ..loadGroupsPanel(panel)
	}

	if ##class(setup.objSetting).getParameter("GMP Domino","Integrate with GMP Domino") {
		set panel=..addPanel("gmp-domino-panel","Greater Manchester Police Integtation (GMP Domino)")
		do ..loadGMPDominoPanel(panel)
	}

	set panel=..addPanel("registration-advanced-panel","Advanced")
	do ..loadAdvancedPanel(panel)
]]></Implementation>
</Method>

<Method name="loadAccessPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	set eventID=..getEventID()
	set disableIdentifyAttendees=0
	if '..eventConfiguration.isIdentifierUpdateAllowed() {
		set disableIdentifyAttendees=1
		set disableIdentifyAttendeesTitle="The attendee identifier cannot be changed because the event is live or has completed registrations"
	}
		
	set identifyAttendeesElement=panel.addRadioButtons("identify-attendees","Identify attendees using:",..eventConfiguration.getIdentifier())  // looks like the read-only parameter does not do anything for this
	if (disableIdentifyAttendees) {
		set identifyAttendeesElement.uiComponent.title=disableIdentifyAttendeesTitle
		set identifyAttendeesElement.isReadOnly=1
	}
    set radioButton=identifyAttendeesElement.addAlternative("email","Email address",1)
    if (disableIdentifyAttendees) {set radioButton.isDisabled=1}
    set radioButton=identifyAttendeesElement.addAlternative("username","Username")
    if (disableIdentifyAttendees) {set radioButton.isDisabled=1}
    if '##class(setup.objSetting).getParameter("system","do not allow anonymous mode") {
    	set radioButton=identifyAttendeesElement.addAlternative("anonymous","Registration reference")
	    if (disableIdentifyAttendees) {set radioButton.isDisabled=1}  
    }

	set radAccessWebsiteAndRegistration=..eventConfiguration.getAccessForEvent()

	set radioGroup=panel.addRadioGroup("website-and-registration-access","website-and-registration-access",radAccessWebsiteAndRegistration)
    set radioElement=radioGroup.addRadio("rad-access-public","Registration and event website are public",$S(radAccessWebsiteAndRegistration="public":1,1:0),0,"rad-group-website-and-registration-access",$S(radAccessWebsiteAndRegistration="public":1,1:0))
    set radioElement=radioGroup.addRadio("rad-access-private-sharedcodes","Registration and event website are private using a shared entry code",$S(radAccessWebsiteAndRegistration="private-sharedcode":1,1:0),0,"rad-group-website-and-registration-access",$S(radAccessWebsiteAndRegistration="private-sharedcode":1,1:0))

	set depList=radioElement.addDependentList("manage-entry-codes")
	set href=##class(shared.pCSP).Link("entryCodes.csp")
	set element2=depList.addLinkButton("manage-entry-codes-button","Manage entry codes…",href)

    if ##class(setup.objSetting).getParameter("single sign on","web SSO enabled for frontend") {
    	set radioElement=radioGroup.addRadio("rad-access-private-external","Registration and event website are private using external authentication",$S(radAccessWebsiteAndRegistration="private-external":1,1:0),0,"rad-group-website-and-registration-access",$S(radAccessWebsiteAndRegistration="private-external":1,1:0))
    }
    set radioElement=radioGroup.addRadio("rad-access-invitation-only","Registration is invitation-only",$S(radAccessWebsiteAndRegistration="invitation-only":1,1:0),0,"rad-group-website-and-registration-access",$S(radAccessWebsiteAndRegistration="invitation-only":1,1:0))

	set depList=radioElement.addDependentList("invitation-only-checkboxgrouplist")
	set checkbox=depList.addCheckbox("invitation-only-website-also","Event website is also invitation-only",(..eventConfiguration.getPrivateWebsiteByInvitation()),0)
	set checkbox=depList.addCheckbox("invitation-only-start-registration-after-login","Start registration after login",(..eventConfiguration.getPrivateWebsiteGoStraightToRegistration()),0)
]]></Implementation>
</Method>

<Method name="loadDatesPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	#define dontUseCalculatedValue 1
	#define true 1
	#define dateRangeStartTitle "If a start date is not entered the then the event creation date will be used"
	#define dateRangeEndTitle "If an end date is not entered the last day of the event will be used"
	set eventID=..getEventID()
	set defaultStartTime=..displayTimestamp(##class(shared.timeFunctions).convertTimestampFromUTC(..eventConfiguration.getCreationTimestampUTC(),,..eventConfiguration.getTimeZone()))
	set defaultEndTime=..displayTimestamp(..eventConfiguration.getEventEndTimeStamp())
		
	set checkboxElement=panel.addCheckbox("allow-registration","Allow registration",..eventConfiguration.getAllowRegistration())
	set registrationStartDateTime=panel.addDateTimePicker("registration-start-date-time","From:",..displayTimestamp(..eventConfiguration.getRegistrationTimestampFrom($$$dontUseCalculatedValue)))
    set registrationStartDateTime.enableDisableDependencyList=##class(EF.ui.components.dependencyList).createNew("allow-registration",$$$true)
    set registrationStartDateTime.uiComponent.defaultDateTime=defaultStartTime
	set registrationStartDateTime.uiComponent.title=$$$dateRangeStartTitle
	do registrationStartDateTime.setNameForValidationError("""Allow registration"" ""From""")

	set registrationEndDateTime=panel.addDateTimePicker("registration-end-date-time","To:",..displayTimestamp(..eventConfiguration.getRegistrationTimestampTo($$$dontUseCalculatedValue)))
    set registrationEndDateTime.enableDisableDependencyList=##class(EF.ui.components.dependencyList).createNew("allow-registration",$$$true)
    set registrationEndDateTime.uiComponent.defaultDateTime=defaultEndTime
	set registrationEndDateTime.uiComponent.title=$$$dateRangeEndTitle
	do registrationEndDateTime.setNameForValidationError("""Allow registration"" ""To""")

	set checkboxElement=panel.addCheckbox("allow-registration-amendment","Allow registration amendment",..eventConfiguration.getAllowRegistrationAmendment())
	set amendmentStartDateTime=panel.addDateTimePicker("amendment-start-date-time","From:",..displayTimestamp(..eventConfiguration.getRegistrationAmendmentTimestampFrom($$$dontUseCalculatedValue)))
    set amendmentStartDateTime.enableDisableDependencyList=##class(EF.ui.components.dependencyList).createNew("allow-registration-amendment",$$$true)
    set amendmentStartDateTime.uiComponent.defaultDateTime=defaultStartTime
	set amendmentStartDateTime.uiComponent.title=$$$dateRangeStartTitle
	do amendmentStartDateTime.setNameForValidationError("""Allow registration amendment"" ""From""")

	set amendmentEndDateTime=panel.addDateTimePicker("amendment-end-date-time","To:",..displayTimestamp(..eventConfiguration.getRegistrationAmendmentTimestampTo($$$dontUseCalculatedValue)))
    set amendmentEndDateTime.enableDisableDependencyList=##class(EF.ui.components.dependencyList).createNew("allow-registration-amendment",$$$true)
    set amendmentEndDateTime.uiComponent.defaultDateTime=defaultEndTime
	set amendmentEndDateTime.uiComponent.title=$$$dateRangeEndTitle
	do amendmentEndDateTime.setNameForValidationError("""Allow registration amendment"" ""To""")

	set checkboxElement=panel.addCheckbox("allow-cancellation","Allow cancellation",..eventConfiguration.getAllowRegistrationCancellation())
	set checkboxElement.enableDisableDependencyList=##class(EF.ui.components.dependencyList).createNew("allow-registration-amendment",$$$true)
	do checkboxElement.uiComponent.addOnDisableAction("uncheck")
	set cancellationStartDateTime=panel.addDateTimePicker("cancellation-start-date-time","From:",..displayTimestamp(..eventConfiguration.getRegistrationCancellationTimestampFrom($$$dontUseCalculatedValue)))
    set cancellationStartDateTime.enableDisableDependencyList=##class(EF.ui.components.dependencyList).createNew("allow-cancellation",$$$true)
    set cancellationStartDateTime.uiComponent.defaultDateTime=defaultStartTime
	set cancellationStartDateTime.uiComponent.title=$$$dateRangeStartTitle
	do cancellationStartDateTime.setNameForValidationError("""Allow cancellation"" ""From""")

	set cancellationEndDateTime=panel.addDateTimePicker("cancellation-end-date-time","To:",..displayTimestamp(..eventConfiguration.getRegistrationCancellationTimestampTo($$$dontUseCalculatedValue)))
    set cancellationEndDateTime.enableDisableDependencyList=##class(EF.ui.components.dependencyList).createNew("allow-cancellation",$$$true)
    set cancellationEndDateTime.uiComponent.defaultDateTime=defaultEndTime
	set cancellationEndDateTime.uiComponent.title=$$$dateRangeEndTitle
	do cancellationEndDateTime.setNameForValidationError("""Allow cancellation"" ""To""")

	if ..eventConfiguration.areSessionsAllowed() {
		set div=panel.addDiv("allow-session-amendment-dates")
		set checkboxElement=div.addCheckbox("allow-session-amendment","Allow session amendment",..eventConfiguration.getAllowSessionAmendment())
	    if ..eventConfiguration.getAllowGroupBookings() {
		    set checkboxElement.uiComponent.isDisabled=1
		}
		set sessionAmendmentStartDateTime=div.addDateTimePicker("session-amendment-start-date-time","From:",..displayTimestamp(..eventConfiguration.getSessionAmendmentTimestampFrom($$$dontUseCalculatedValue)))
	    set sessionAmendmentStartDateTime.enableDisableDependencyList=##class(EF.ui.components.dependencyList).createNew("allow-session-amendment",$$$true)
		set sessionAmendmentStartDateTime.uiComponent.defaultDateTime=defaultStartTime
		set sessionAmendmentStartDateTime.uiComponent.title=$$$dateRangeStartTitle
		do sessionAmendmentStartDateTime.setNameForValidationError("""Allow session amendment"" ""From""")

		set sessionAmendmentEndDateTime=div.addDateTimePicker("session-amendment-end-date-time","To:",..displayTimestamp(..eventConfiguration.getSessionAmendmentTimestampTo($$$dontUseCalculatedValue)))
	    set sessionAmendmentEndDateTime.enableDisableDependencyList=##class(EF.ui.components.dependencyList).createNew("allow-session-amendment",$$$true)
		set sessionAmendmentEndDateTime.uiComponent.defaultDateTime=defaultEndTime
		set sessionAmendmentEndDateTime.uiComponent.title=$$$dateRangeEndTitle
		do sessionAmendmentEndDateTime.setNameForValidationError("""Allow session amendment"" ""To""")
	}
]]></Implementation>
</Method>

<Method name="loadDaysPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	if ..eventConfiguration.isDaySelectionPageAllowed() {
		set value=..eventConfiguration.getShowDaySelectionPage()
		set isDisabled=0
	} else {
		set value=""
		set isDisabled=1
	}
	set checkbox=panel.addCheckbox("show-day-selection-page","Show day selection page",value,isDisabled)
	
	set depList=checkbox.addDependentList("day-selection-group")
	set checkbox=depList.addCheckbox("show-day-capacity","Show day capacity",..eventConfiguration.getShowCapacityOnDaySelectionPage())
	set checkbox=depList.addCheckbox("show-current-registration-level","Show current registration level",..eventConfiguration.getShowCurrentBookingLevelOnDaySelectionPage())
	set checkbox=depList.addCheckbox("days-selected-by-default","Days are selected by default",..eventConfiguration.getAreAllDaysSelectedByDefault())
	set checkbox=depList.addCheckbox("allow-guests-to-select-days","Allow guests to select days",..eventConfiguration.getAllowGuestsToSelectDays())
]]></Implementation>
</Method>

<Method name="loadGroupsPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	set eventID=..getEventID()
	set showGroupsCheck=panel.addCheckbox("allow-group-registrations","Allow group registrations",..eventConfiguration.getAllowGroupBookings())
	
	set showGroupCheckDependency=##class(EF.ui.components.dependencyList).createNew("allow-group-registrations",1)
	if '..eventConfiguration.isAllowGroupBookingsUpdateAllowed() {
		if ..eventConfiguration.getAllowGroupBookings() {
			set showGroupCheckDependency="" // Disable the dependency if it is on and locked
		}
		set showGroupsCheck.isReadOnly=1
		set showGroupsCheck.uiComponent.isDisabled=1
		set showGroupsCheck.uiComponent.title="It is not possible to select this option because the event is live or has completed registrations"
	}
	
	
    set element=panel.addIntegerInput("group-max-num-of-attendees","Maximum number of attendees per registration:",..eventConfiguration.getMaxAttendeesPerRegistration())
    set element.enableDisableDependencyList=showGroupCheckDependency
	set element.uiComponent.minValue=2
	set element.uiComponent.maxValue=100

	set element=panel.addCheckbox("group-allow-multi-categories","Allow multiple attendee categories in a registration",(..eventConfiguration.getAllowMultiCategoriesPerRegistration()))
    if ..eventConfiguration.getHasTicketingPersonMode() {
		set element.isReadOnly=1
	    set element.uiComponent.isDisabled=1
	    set element.uiComponent.title="This is switched on because the event has QBIs that create registrations"
    } elseif ##class(links.lnkPersonEvent).hasAnyBookings(eventID) {
	    set element.isReadOnly=1
	    set element.uiComponent.isDisabled=1
	    set element.uiComponent.title="It is not possible to select this option because the event has completed registrations"
	} else {
		set element.enableDisableDependencyList=showGroupCheckDependency	
	} 

	set element=panel.addCheckbox("group-auto-populate-address","Automatically populate address fields for attendees",..eventConfiguration.getAutopopulateAddressForAttendees())
    set element.enableDisableDependencyList=showGroupCheckDependency

	set element=panel.addCheckbox("group-send-registration-emails-to-all","Send new registration emails to every attendee",..eventConfiguration.getSendRegistrationEmailsToAllAttendees())
    set element.enableDisableDependencyList=showGroupCheckDependency

	set element=panel.addCheckbox("group-registration-contact-must-attend","Registration contact must attend the event",..eventConfiguration.getRegistrationContactMustAttend())
    set element.enableDisableDependencyList=showGroupCheckDependency

	set element=panel.addCheckbox("group-disable-attendee-deletion-on-amendment","Disable attendee deletion during amendment",..eventConfiguration.getDisableAttendeeDeletionOnAmend())
    set element.enableDisableDependencyList=showGroupCheckDependency

	set element=panel.addCheckbox("group-authenticate-group-attendees","Authenticate group attendees",'(..eventConfiguration.getDoNotAuthenticateGroupAttendees()))
    set element.enableDisableDependencyList=showGroupCheckDependency
]]></Implementation>
</Method>

<Method name="loadGMPDominoPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	set eventID=..getEventID()

	set gmpActiveCheckbox=panel.addCheckbox("gmp-pass-registrations-to-gmp","Pass registrations to Greater Manchester Police Domino System",..eventConfiguration.getGMPSendRegistrations())

    set element=panel.addTextInput("gmp-username","Username:",..eventConfiguration.getGMPUsername())
    set element.enableDisableDependencyList=##class(EF.ui.components.dependencyList).createNew("gmp-pass-registrations-to-gmp",1)
	
	set value=$S($L(..eventConfiguration.getGMPPassword()):"xxxxx",1:"")
    set element=panel.addPasswordInput("gmp-password","Password:",value)
    set element.enableDisableDependencyList=##class(EF.ui.components.dependencyList).createNew("gmp-pass-registrations-to-gmp",1)
]]></Implementation>
</Method>

<Method name="loadAdvancedPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Implementation><![CDATA[
	#dim element As EF.pageController.element
	#dim examplePrefix as %String = "EV"
	#dim exampleNumber as %String = "123456"

	set eventID=..getEventID()

	set inputGroup=panel.addInputGroup("registration-reference-prefix-input-group","Registration reference prefix:")
	set inputElement=inputGroup.addTextInput("registration-reference-prefix","",..eventConfiguration.getRegistrationReferencePrefix())
	set inputElement.uiComponent.validator.maxLength=8
	do inputElement.setIsMandatory(1)

	if ..eventConfiguration.getRegistrationReferenceIsScrambled() = 1 {
		set exampleNumber = "8UT6"
	}
	if ..eventConfiguration.getRegistrationReferencePrefix() '= "" {
		set examplePrefix = ..eventConfiguration.getRegistrationReferencePrefix()
	}
	set element=inputGroup.addCaption("registration-reference-prefix-caption","e.g. "_examplePrefix_exampleNumber)
	
	if ..eventConfiguration.getAllowGuests() {
		set element=panel.addIntegerInput("max-num-of-guests","Maximum number of guests per attendee:",(..eventConfiguration.getMaxGuestsPerAttendee()))
		set element.uiComponent.minValue=0
		set element.uiComponent.maxValue=10
	}
	
	if (##class(setup.objSystemTypes).isModuleAllowed("Temporary Save"))&&('..eventConfiguration.getIsAwardsEvent()) {
		set inputGroup=panel.addInputGroupNumber("saved-registrations-num-hours-kept-input-group","Saved registrations are kept for:")
		set element=inputGroup.addIntegerInput("saved-registrations-num-hours-kept","",..eventConfiguration.getTempSaveMaxHours())
		set element.uiComponent.minValue=0
		set element.uiComponent.maxValue=3000  // HaymarketUS have the highest value (3000) for this setting (excluding old CMPI events)
		set element=inputGroup.addCaption("saved-registrations-num-hours-kept-caption","hours")
	}

	set element=panel.addCheckbox("scramble-registration-refs","Scramble registration references",..eventConfiguration.getRegistrationReferenceIsScrambled())
	
	set element=panel.addCheckbox("force-email-confirmation","Force email confirmation",..eventConfiguration.getForceEmailAddressConfirmation())
	set element.enableDisableDependencyList=##class(EF.ui.components.dependencyList).createNew("identify-attendees","email")
    
	set element=panel.addCheckbox("invitations-ask-for-decline-reason","Ask for reason when invitations are declined",..eventConfiguration.getAskForDeclineReason())
	
	if '..eventConfiguration.getIsAwardsEvent() {
		set element=panel.addCheckbox("automatically-select-category-for-invitees","Automatically select attendee category for invitees",..eventConfiguration.getAutomaticallySelectAttendeeCategory())
		set element=panel.addCheckbox("show-financial-info-when-scanning","Show financial information when scanning badges",..eventConfiguration.getShowFinancialInfoWhenScanning())
		set element=panel.addCheckbox("only-allow-fully-paid-to-be-marked-attended","Only allow fully-paid attendees to be marked as attended",..eventConfiguration.getAllowOnlyFullyPaidAttendeesToAttend())
		set element=panel.addCheckbox("send-different-admin-emails-for-each-category","Send different admin emails for each attendee category",..eventConfiguration.getSendDifferentAdminEmailsToEachCategory())
	}
	set element=panel.addCheckbox("suggest-alternative-usernames","Suggest alternative usernames",'(..eventConfiguration.getDoNotShowAlternativeUsernames()))   // looks like the read-only parameter does not do anything for this
	set element.enableDisableDependencyList=##class(EF.ui.components.dependencyList).createNew("identify-attendees","username")
]]></Implementation>
</Method>

<Method name="validate">
<Implementation><![CDATA[
	do ..updateEventConfiguration()
	
	if '..eventConfiguration.areRegistrationAccessSettingsValid(.registrationAccessErrors) {
		do ..addErrorMessagesToElement("registration-access-panel",.registrationAccessErrors)
	}
	
	if '..eventConfiguration.areRegistrationDatesValid(.registrationDateErrors) {
		do ..addErrorMessagesToElement("registration-dates-panel",.registrationDateErrors)
	}
	
	if '..eventConfiguration.areAdvancedSettingsValid(.eventAdvancedSettingsErrors) {
		do ..addErrorMessagesToElement("registration-advanced-panel",eventAdvancedSettingsErrors)	
	}

	if '..eventConfiguration.areGroupSettingsValid(.eventGroupSettingsErrors) {
		do ..addErrorMessagesToElement("registration-groups-panel",eventGroupSettingsErrors)	
	}
]]></Implementation>
</Method>

<Method name="updateEventConfiguration">
<Implementation><![CDATA[
	
	// access
	if ..isUpdatedByIdentifier("identify-attendees") {
		do ..eventConfiguration.setIdentifier(..getValueByIdentifier("identify-attendees"))
	}

	set newAccessValue=""
	
	set updateRadioAccessGroup=0
	if (..isUpdatedByIdentifier("rad-access-public")) {
		set updateRadioAccessGroup=1
		if ..getValueByIdentifier("rad-access-public") {
			set newAccessValue="public"
		}
	}
	if (..isUpdatedByIdentifier("rad-access-private-sharedcodes")) {
		set updateRadioAccessGroup=1
		if ..getValueByIdentifier("rad-access-private-sharedcodes") {
			set newAccessValue="private-sharedcode"
		}
	}
	if ##class(setup.objSetting).getParameter("single sign on","web SSO enabled for frontend") {
		if (..isUpdatedByIdentifier("rad-access-private-external")) {
			set updateRadioAccessGroup=1
			if ..getValueByIdentifier("rad-access-private-external") {
				set newAccessValue="private-external"
			}
		}
	}
	if (..isUpdatedByIdentifier("rad-access-invitation-only")) {
		set updateRadioAccessGroup=1
		if (..getValueByIdentifier("rad-access-invitation-only")) {
			set newAccessValue="invitation-only"
		}
	}
	if (updateRadioAccessGroup) {
		if $L(newAccessValue) {
			do ..eventConfiguration.setAccessForEvent(newAccessValue)
		}
	}

	if ..isUpdatedByIdentifier("invitation-only-website-also") {
		do ..eventConfiguration.setPrivateWebsiteByInvitation(..getValueByIdentifier("invitation-only-website-also"))
	}
	if ..isUpdatedByIdentifier("invitation-only-start-registration-after-login") {
		do ..eventConfiguration.setPrivateWebsiteGoStraightToRegistration(..getValueByIdentifier("invitation-only-start-registration-after-login"))
	}
		
	// dates
	if ..isUpdatedByIdentifier("allow-registration") {
		do ..eventConfiguration.setAllowRegistration(..getValueByIdentifier("allow-registration"))
	}
	if ..isUpdatedByIdentifier("registration-start-date-time") {
		set timestamp=##class(shared.timeFunctions).convertInputDateTimeToTimeStamp(..getValueByIdentifier("registration-start-date-time"),..dateFormat,..timeFormat)
		do ..eventConfiguration.setRegistrationTimestampFrom(timestamp)
	}
	if ..isUpdatedByIdentifier("registration-end-date-time") {
		set timestamp=##class(shared.timeFunctions).convertInputDateTimeToTimeStamp(..getValueByIdentifier("registration-end-date-time"),..dateFormat,..timeFormat)
		do ..eventConfiguration.setRegistrationTimestampTo(timestamp)
	}
	if ..isUpdatedByIdentifier("allow-registration-amendment") {
		do ..eventConfiguration.setAllowRegistrationAmendment(..getValueByIdentifier("allow-registration-amendment"))
	}
	if ..isUpdatedByIdentifier("amendment-start-date-time") {
		set timestamp=##class(shared.timeFunctions).convertInputDateTimeToTimeStamp(..getValueByIdentifier("amendment-start-date-time"),..dateFormat,..timeFormat)
		do ..eventConfiguration.setRegistrationAmendmentTimestampFrom(timestamp)
	}
	if ..isUpdatedByIdentifier("amendment-end-date-time") {
		set timestamp=##class(shared.timeFunctions).convertInputDateTimeToTimeStamp(..getValueByIdentifier("amendment-end-date-time"),..dateFormat,..timeFormat)
		do ..eventConfiguration.setRegistrationAmendmentTimestampTo(timestamp)
	}

	if ..isUpdatedByIdentifier("allow-cancellation") {
		do ..eventConfiguration.setAllowRegistrationCancellation(..getValueByIdentifier("allow-cancellation"))
	}
	if ..isUpdatedByIdentifier("cancellation-start-date-time") {
		set timestamp=##class(shared.timeFunctions).convertInputDateTimeToTimeStamp(..getValueByIdentifier("cancellation-start-date-time"),..dateFormat,..timeFormat)
		do ..eventConfiguration.setRegistrationCancellationTimestampFrom(timestamp)
	}
	if ..isUpdatedByIdentifier("cancellation-end-date-time") {
		set timestamp=##class(shared.timeFunctions).convertInputDateTimeToTimeStamp(..getValueByIdentifier("cancellation-end-date-time"),..dateFormat,..timeFormat)
		do ..eventConfiguration.setRegistrationCancellationTimestampTo(timestamp)
	}
	if ..isUpdatedByIdentifier("allow-session-amendment") {
		do ..eventConfiguration.setAllowSessionAmendment(..getValueByIdentifier("allow-session-amendment"))
	}
	if ..isUpdatedByIdentifier("session-amendment-start-date-time") {
		set timestamp=##class(shared.timeFunctions).convertInputDateTimeToTimeStamp(..getValueByIdentifier("session-amendment-start-date-time"),..dateFormat,..timeFormat)
		do ..eventConfiguration.setSessionAmendmentTimestampFrom(timestamp)
	}
	if ..isUpdatedByIdentifier("session-amendment-end-date-time") {
		set timestamp=##class(shared.timeFunctions).convertInputDateTimeToTimeStamp(..getValueByIdentifier("session-amendment-end-date-time"),..dateFormat,..timeFormat)
		do ..eventConfiguration.setSessionAmendmentTimestampTo(timestamp)
	}
	
	// Days
	if ..isUpdatedByIdentifier("show-day-selection-page") {
		do ..eventConfiguration.setShowDaySelectionPage(..getValueByIdentifier("show-day-selection-page"))
	}
	if ..isUpdatedByIdentifier("show-day-capacity") {
		do ..eventConfiguration.setShowCapacityOnDaySelectionPage(..getValueByIdentifier("show-day-capacity"))
	}
	if ..isUpdatedByIdentifier("show-current-registration-level") {
		do ..eventConfiguration.setShowCurrentBookingLevelOnDaySelectionPage(..getValueByIdentifier("show-current-registration-level"))
	}
	if ..isUpdatedByIdentifier("days-selected-by-default") {
		do ..eventConfiguration.setAreAllDaysSelectedByDefault(..getValueByIdentifier("days-selected-by-default"))
	}
	if ..isUpdatedByIdentifier("allow-guests-to-select-days") {
		do ..eventConfiguration.setAllowGuestsToSelectDays(..getValueByIdentifier("allow-guests-to-select-days"))
	}

	// groups
	if ..isUpdatedByIdentifier("allow-group-registrations") {
		do ..eventConfiguration.setAllowGroupBookings(..getValueByIdentifier("allow-group-registrations"))
	}
	if ..isUpdatedByIdentifier("group-max-num-of-attendees") {
		do ..eventConfiguration.setMaxAttendeesPerRegistration(..getValueByIdentifier("group-max-num-of-attendees"))
	}
	if ..isUpdatedByIdentifier("group-allow-multi-categories") {
		do ..eventConfiguration.setAllowMultiCategoriesPerRegistration(..getValueByIdentifier("group-allow-multi-categories"))
	}
	if ..isUpdatedByIdentifier("group-auto-populate-address") {
		do ..eventConfiguration.setAutopopulateAddressForAttendees(..getValueByIdentifier("group-auto-populate-address"))
	}
	if ..isUpdatedByIdentifier("group-send-registration-emails-to-all") {
		do ..eventConfiguration.setSendRegistrationEmailsToAllAttendees(..getValueByIdentifier("group-send-registration-emails-to-all"))
	}
	if ..isUpdatedByIdentifier("group-registration-contact-must-attend") {
		do ..eventConfiguration.setRegistrationContactMustAttend(..getValueByIdentifier("group-registration-contact-must-attend"))
	}
	if ..isUpdatedByIdentifier("group-disable-attendee-deletion-on-amendment") {
		do ..eventConfiguration.setDisableAttendeeDeletionOnAmend(..getValueByIdentifier("group-disable-attendee-deletion-on-amendment"))
	}
	if ..isUpdatedByIdentifier("group-authenticate-group-attendees") {
		do ..eventConfiguration.setDoNotAuthenticateGroupAttendees('(..getValueByIdentifier("group-authenticate-group-attendees")))
	}
	
	// GMP
	if ..isUpdatedByIdentifier("gmp-pass-registrations-to-gmp") {
		do ..eventConfiguration.setGMPSendRegistrations(..getValueByIdentifier("gmp-pass-registrations-to-gmp"))
	}
	if ..isUpdatedByIdentifier("gmp-username") {
		do ..eventConfiguration.setGMPUsername(..getValueByIdentifier("gmp-username"))
	}
	if ..isUpdatedByIdentifier("gmp-password") {
		set newValue=..getValueByIdentifier("gmp-password")
		if ($L(newValue)&&(newValue'="xxxxxx")) {
			do ..eventConfiguration.setGMPPassword(..getValueByIdentifier("gmp-password"))
		}
	}
	
	// advanced
	if ..isUpdatedByIdentifier("registration-reference-prefix") {
		do ..eventConfiguration.setRegistrationReferencePrefix(..getValueByIdentifier("registration-reference-prefix"))
	}
	if ..isUpdatedByIdentifier("max-num-of-guests") {
		do ..eventConfiguration.setMaxGuestsPerAttendee(..getValueByIdentifier("max-num-of-guests"))
	}

	// if we didn't show the number of hours for a saved registration, reset it back to zero
	if (..existsByIdentifier("saved-registrations-num-hours-kept"))	{
		if ..isUpdatedByIdentifier("saved-registrations-num-hours-kept") {
			do ..eventConfiguration.setTempSaveMaxHours(..getValueByIdentifier("saved-registrations-num-hours-kept"))
		}
	} else {
		do ..eventConfiguration.setTempSaveMaxHours(0)
	}

	if ..isUpdatedByIdentifier("scramble-registration-refs") {
		do ..eventConfiguration.setRegistrationReferenceIsScrambled(..getValueByIdentifier("scramble-registration-refs"))
	}
	if ..isUpdatedByIdentifier("force-email-confirmation") {
		do ..eventConfiguration.setForceEmailAddressConfirmation(..getValueByIdentifier("force-email-confirmation"))
	}
	if ..isUpdatedByIdentifier("invitations-ask-for-decline-reason") {
		do ..eventConfiguration.setAskForDeclineReason(..getValueByIdentifier("invitations-ask-for-decline-reason"))
	}
	if ..isUpdatedByIdentifier("automatically-select-category-for-invitees") {
		do ..eventConfiguration.setAutomaticallySelectAttendeeCategory(..getValueByIdentifier("automatically-select-category-for-invitees"))
	}
	if ..isUpdatedByIdentifier("show-financial-info-when-scanning") {
		do ..eventConfiguration.setShowFinancialInfoWhenScanning(..getValueByIdentifier("show-financial-info-when-scanning"))
	}
	if ..isUpdatedByIdentifier("only-allow-fully-paid-to-be-marked-attended") {
		do ..eventConfiguration.setAllowOnlyFullyPaidAttendeesToAttend(..getValueByIdentifier("only-allow-fully-paid-to-be-marked-attended"))
	}
	if ..isUpdatedByIdentifier("send-different-admin-emails-for-each-category") {
		do ..eventConfiguration.setSendDifferentAdminEmailsToEachCategory(..getValueByIdentifier("send-different-admin-emails-for-each-category"))
	}
	if ..isUpdatedByIdentifier("suggest-alternative-usernames") {
		do ..eventConfiguration.setDoNotShowAlternativeUsernames('(..getValueByIdentifier("suggest-alternative-usernames")))
	}
]]></Implementation>
</Method>

<Method name="saveData">
<Implementation><![CDATA[	do ..eventConfiguration.save()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>registrationSettingsDefaultData</DefaultData>
<Data name="registrationSettingsDefaultData">
<Subscript>"registrationSettings"</Subscript>
<Value name="1">
<Value>dateFormat</Value>
</Value>
<Value name="2">
<Value>timeFormat</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.pageController.pages.registrations">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.registrations.CLS/EV.3
;vc; Component: CLS.EF.pageController.pages.registrations
;vc;  Location: SmallDev
;vc; Date/Time: 26-Feb-16 16:07
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.registrations.CLS/EV.3</td><td>CLS.EF.pageController.pages.registrations</td><td>SmallDev</td><td style='white-space: nowrap;'>26-Feb-16 16:07</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>63974,58364.925546</TimeChanged>
<TimeCreated>63727,53797.165537</TimeCreated>

<Parameter name="returnPage">
<Default>registrations.csp</Default>
</Parameter>

<Parameter name="useAutomaticAudit">
<Default>0</Default>
</Parameter>

<Method name="getRowDataReference">
<Implementation><![CDATA[	return "page_controller_grid_row_ids_"_..%Id()
]]></Implementation>
</Method>

<Method name="loadData">
<Implementation><![CDATA[
	#define kendoDateFormat 25
	#dim userID as %Integer = $G(%session.Data("eventsforce","backend","xPersonID"))
	#dim gridRemote As EF.pageController.containerElements.gridRemote
	#dim gridComponent As EF.ui.components.backend.grid.gridRemote
	#dim toolBar As EF.ui.components.backend.grid.toolBar
	#dim filterDropdown As EF.ui.components.backend.grid.filterDropdown
	#dim toolDropdown As EF.ui.components.backend.grid.toolDropdown
	
	set eventsPanel=..addPanel("registrations-panel","Registrations")
	set gridRemote=eventsPanel.addGridRemote("main-grid")
	set gridComponent=gridRemote.uiComponent
	set gridComponent.isSelectable=1
	set gridComponent.isSortable=1
	do gridComponent.configureDefaultSorting("registeredUTC","desc")
	set gridComponent.rowCountMessage="Showing {2} people"
	set gridComponent.columnDefinitionURL="pageControllerGridColumnsJSON.csp?pageControllerID="_..%Id()
	set gridComponent.dataURL="pageControllerGridDataJSON.csp?pageControllerID="_..%Id()
	set gridComponent.toolTipURL="registrationsToolTipAJAX.csp?pageControllerID="_..%Id()
	set gridComponent.dateFormat=##class(shared.dateFunctions).getBackendInputDateFormat()
	set gridComponent.timeFormat=##class(shared.timeFunctions).getBackendOutputTimeFormat()

	set toolBar=gridComponent.addToolBar()
	set toolDropdown=toolBar.addToolDropdown()

	set toolItem=toolDropdown.addToolItemOpenNewTab("Edit registration…","registrationsEditRegistrationRedirect.csp?pageControllerID="_..%Id())
	set toolItem.requiresSingleSelectedRow=1

	set toolItem=toolDropdown.addToolItemRedirect("Edit person…","registrationsEditPersonRedirect.csp?pageControllerID="_..%Id())
	set toolItem.requiresSingleSelectedRow=1
	
	set toolItem=toolDropdown.addToolItemRedirect("Update payment…","registrationsUpdatePaymentRedirect.csp?pageControllerID="_..%Id())
	set toolItem.requiresSingleSelectedRow=1

	do toolDropdown.addDivider()
	
	set toolItem=toolDropdown.addExportToExcel("Export results to Excel…")

	if ##class(setup.objEventSetting).getParameter("event setup","allow meeting manager",..objEvent.%Id()) {
		set toolItem=toolDropdown.addToolItemOpenNewTab("Meeting diary…","registrationsEditMeetingsRedirect.csp?pageControllerID="_..%Id())
		set toolItem.requiresSingleSelectedRow=1
	}
	
	set filterDropdown=toolBar.addFilterDropdown("registrationsMainFilter","Show:")
	do filterDropdown.addFilterItem("Attendees","personType","contains","Attendee") 
	do filterDropdown.addFilterItem("Registration contacts","personType","contains","Registration contact") 
	do filterDropdown.addFilterItem("Guests","personType","startswith","Guest") 
	do filterDropdown.addFilterItem("Room guests","personType","contains","Room guest") 
	do filterDropdown.addFilterItem("Table guests","personType","contains","Table guest") 
	do filterDropdown.addFilterItem("All") 
	
    set filterDropdown=toolBar.addFilterDropdown("statusFilter","Status:")
    
    do filterDropdown.addFilterItem("Registered","isRegistered","eq","1")
    do filterDropdown.addFilterItem("Completed","status","eq","completed")
    
    set filterList=##class(EF.ui.components.backend.grid.filterList).createNew("or")
	do filterList.addFilterListItem(##class(EF.ui.components.backend.grid.filter).createNew("paymentStatus","eq","paid"))
	do filterList.addFilterListItem(##class(EF.ui.components.backend.grid.filter).createNew("paymentStatus","eq","overpaid"))
    set filterItem=filterDropdown.addFilterItem("Paid")
    do filterItem.filterList.addFilterListItem(filterList)

    
    set filterList=##class(EF.ui.components.backend.grid.filterList).createNew("or")
	do filterList.addFilterListItem(##class(EF.ui.components.backend.grid.filter).createNew("paymentStatus","eq","unpaid"))
	do filterList.addFilterListItem(##class(EF.ui.components.backend.grid.filter).createNew("paymentStatus","eq","partly paid"))
    set filterItem=filterDropdown.addFilterItem("Balance unpaid")
    do filterItem.filterList.addFilterListItem(filterList)

    do filterDropdown.addFilterItem("Overpaid","paymentStatus","eq","overpaid")
	
	kill filterList
	
    do filterDropdown.addFilterItem("Cancelled","isCancelled","eq","1")
	
	do filterDropdown.addFilterItem("All") 
    	
	set rowSelectButton=gridComponent.addRowSelectButton()
	do rowSelectButton.addClass("ef-grid-row-person-button")
	set rowSelectButton.glyphIconName = "glyphicon-user"
	set rowSelectButton.gotoURL="registrationsEditPerson.csp?pageControllerID="_..%Id()

	set rowEditButton=gridComponent.addRowEditButton()
	do rowEditButton.addClass("ef-grid-row-button-allow-doubleclick")
	set rowEditButton.newTabURL="registrationsEditRegistration.csp?pageControllerID="_..%Id()
	
	set %session.Data("eventsforce","backend","codEditMain return page") = "registrations.csp"
	set %session.Data("eventsforce","backend","paymentUpdate3 return page") = "registrations.csp"
]]></Implementation>
</Method>

<Method name="getDataSet">
<ReturnType>EF.dataCollections.dataSet</ReturnType>
<Implementation><![CDATA[
	#dim gridDataRegistrations As setup.gridDataRegistrations
	set gridDataRegistrations=##class(setup.gridDataRegistrations).createNew()
	do gridDataRegistrations.populateDataSet($this,..objEvent)
	return gridDataRegistrations.dataSet
]]></Implementation>
</Method>

<Method name="getColumns">
<Implementation><![CDATA[
	set gridDataRegistrations=##class(setup.gridDataRegistrations).createNew(##class(shared.dateFunctions).getBackendOutputDateFormat())
	do gridDataRegistrations.createColumns(..objEvent)
	set cells=##class(%ZEN.proxyObject).%New()
	set cells.schema=gridDataRegistrations.getColumnSchemaJSON()
	set cells.columns=gridDataRegistrations.getColumnsAsJSON()
	set cells.searchableColumns=gridDataRegistrations.getSearchColumnsJSON()
	return cells
]]></Implementation>
</Method>

<Method name="getPersonIDForRowID">
<FormalSpec>rowID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	#dim indexTempGlobal As EF.dataCollections.indexTempGlobal
	set indexTempGlobal=##class(EF.dataCollections.indexTempGlobal).open(..getRowDataReference())
	return $Piece(indexTempGlobal.getValue(rowID),"|",1)
]]></Implementation>
</Method>

<Method name="getPurchaseIDForRowID">
<FormalSpec>rowID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	#dim indexTempGlobal As EF.dataCollections.indexTempGlobal
	set indexTempGlobal=##class(EF.dataCollections.indexTempGlobal).open(..getRowDataReference())
	return $Piece(indexTempGlobal.getValue(rowID),"|",2)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.translationModal">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.translationModal.CLS/EV.0
;vc; Component: CLS.EF.pageController.pages.translationModal
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.translationModal.CLS/EV.0</td><td>CLS.EF.pageController.pages.translationModal</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>64121,62092</TimeChanged>
<TimeCreated>63372,47629.62783</TimeCreated>

<Property name="translations">
<Type>translations.translation</Type>
<Collection>array</Collection>
<Transient>1</Transient>
</Property>

<Method name="getAJAXUpdateReturnData">
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set returnObject=##class(%ZEN.proxyObject).%New()
	set returnObject.languages=##class(%ListOfDataTypes).%New()
	set key=""
	for {
		set translation=..translations.GetNext(.key)
		if key="" quit
	    set languageObj=##class(%ZEN.proxyObject).%New()
	    set languageObj.name=translation.languageName
	    set languageObj.value=translation.translation
	    do returnObject.languages.Insert(languageObj)

    }
	return returnObject
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.websiteAppearance">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.websiteAppearance.CLS/EV.3
;vc; Component: CLS.EF.pageController.pages.websiteAppearance
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.websiteAppearance.CLS/EV.3</td><td>CLS.EF.pageController.pages.websiteAppearance</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>64117,43994</TimeChanged>
<TimeCreated>64110,54916.351765</TimeCreated>

<Parameter name="returnPage">
<Default>websiteAppearance.csp</Default>
</Parameter>

<Property name="eventConfiguration">
<Type>setup.eventConfiguration</Type>
<Transient>1</Transient>
</Property>

<Method name="loadData">
<Implementation><![CDATA[
	#dim panel as EF.pageController.containerElements.panel
	#dim dropdown as EF.pageController.inputElements.dropdown
	do ##class(layout.objStyleAttribute).getFontList(.fontArray)
	
	set eventID=..getEventID()
	set ..eventConfiguration = ##class(setup.eventConfiguration).createForEventID(eventID)
	
	set panel = ..addPanel("website-appearance-panel","Website Appearance")
	set element = panel.addTextInput("efWebsiteColorPickerRGBInput","Colour Code:", ##class(layout.eventColorMethods).getWebsiteColor1(eventID) )
	set element.uiComponent.title="You can type a colour code here, this is typically six numbers or letters, e.g. CD202C."

	do panel.addHiddenInput("efWebsiteColorValueHidden", "efWebsiteColorValueHidden" , 	##class(layout.eventColorMethods).getWebsiteColor1(eventID) )

	set dropdown = panel.addDropdown("headingsFont","Headings:",##class(layout.objStyleAttribute).getAttribute(eventID,"headings","font"))
	set tmpFont = ""
	for  {
		set tmpFont = $Order(fontArray(tmpFont))	
		if tmpFont="" quit

		set tmpFontDesc=$Piece(fontArray(tmpFont),"|",1)
		if tmpFont=##class(layout.objStyleAttribute).getDefault("headings","font") {
			set tmpFontDesc=tmpFontDesc_" (Default)"
		}
		do dropdown.addAlternative(tmpFont,tmpFontDesc)	
	}

	set dropdown = panel.addDropdown("otherTextFont","Other Text:",##class(layout.objStyleAttribute).getAttribute(eventID,"otherText","font"))
	set tmpFont = ""
	for  {
		set tmpFont = $Order(fontArray(tmpFont))	
		if tmpFont="" quit

		set tmpFontDesc=$Piece(fontArray(tmpFont),"|",1)
		if tmpFont=##class(layout.objStyleAttribute).getDefault("otherText","font") {
			set tmpFontDesc=tmpFontDesc_" (Default)"
		}
		do dropdown.addAlternative(tmpFont,tmpFontDesc)	
	}
	
	set event = ##class(setup.objEvent).%OpenId(eventID)
	do event.%Reload()
	
	if ##class(layout.methods).canUseCustomEventCSS(eventID) {
		set element = panel.addCheckbox("useCustomCSS","Use custom CSS",+event.useCustomEventCSS)
		set useCustomCSSCheckDependency = ##class(EF.ui.components.dependencyList).createNew("useCustomCSS",1)
		
		set element = panel.addTextArea("customCSS","",event.customEventCSS )
		set element.enableDisableDependencyList = useCustomCSSCheckDependency
	}
		
	// push the preview values into the session when reloading so that the we can pick it up when rendering the frontend page
	set %session.Data("efWebsiteColorPickerRGBInput") = ..getValueByIdentifier("efWebsiteColorPickerRGBInput")
	set %session.Data("headingsFont") = ..getValueByIdentifier("headingsFont")
	set %session.Data("otherTextFont") = ..getValueByIdentifier("otherTextFont")
]]></Implementation>
</Method>

<Method name="validate">
<Implementation><![CDATA[
	Set data = ..getValueByIdentifier("efWebsiteColorPickerRGBInput")
	Set colorPattern="0.1""#""1(3(1N,1""A"",1""B"",1""C"",1""D"",1""E"",1""F""),6(1N,1""A"",1""B"",1""C"",1""D"",1""E"",1""F""))"
	if ('($ZCONVERT(data,"U")?@colorPattern)) {
		do ..getElementByIdentifier("efWebsiteColorPickerRGBInput").setErrorMessage("Colour Code is incorrect. Please enter a valid, six digit RGB value e.g. C203F2")
	}
]]></Implementation>
</Method>

<Method name="saveData">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set eventID=..getEventID()
	
	if ..isUpdatedByIdentifier("efWebsiteColorPickerRGBInput") {
		set colorHex =..getValueByIdentifier("efWebsiteColorPickerRGBInput")
		if colorHex'?1"#".E {
			set colorHex = "#"_colorHex
		}
		do ##class(layout.eventColorMethods).setWebsiteBaseColor(..getEventID(), colorHex)
	}
	if ..isUpdatedByIdentifier("headingsFont") {
		do ##class(layout.objStyleAttribute).setAttribute(..getEventID(),"headings","font",..getValueByIdentifier("headingsFont"))	
	}
	if ..isUpdatedByIdentifier("otherTextFont") {
		do ##class(layout.objStyleAttribute).setAttribute(..getEventID(),"otherText","font",..getValueByIdentifier("otherTextFont"))	
	}
	
	if ##class(layout.methods).canUseCustomEventCSS(eventID) {	
		set event = ##class(setup.objEvent).%OpenId(eventID)
		do event.%Reload()
		
		if ..isUpdatedByIdentifier("useCustomCSS") {
			set event.useCustomEventCSS = ..getValueByIdentifier("useCustomCSS")
		}
		if ..isUpdatedByIdentifier("customCSS") {
			set event.customEventCSS = ..getValueByIdentifier("customCSS")
		}
		do event.%Save()
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pages.websiteSettings">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pageController.pages.websiteSettings.CLS/EV.14
;vc; Component: CLS.EF.pageController.pages.websiteSettings
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.pages.websiteSettings.CLS/EV.14</td><td>CLS.EF.pageController.pages.websiteSettings</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pageController.page</Super>
<TimeChanged>64147,44955</TimeChanged>
<TimeCreated>63372,47629.62783</TimeCreated>

<Parameter name="returnPage">
<Default>websiteSettings.csp</Default>
</Parameter>

<Method name="loadData">
<Implementation><![CDATA[
	set eventID=..getEventID()
	set panel=..addPanel("display_panel","Display")
	do ..loadDisplayPanel(panel)
	
	set panel=..addPanel("social_media_panel","Social Media")
	do ..loadSocialMediaPanel(panel)

	set panel=..addPanel("advanced_panel","Advanced")
 	do ..loadAdvancedPanel(panel)
]]></Implementation>
</Method>

<Method name="loadDisplayPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	#dim eventConfiguration as setup.eventConfiguration
	
	set eventID=..getEventID()
	set eventConfiguration=##class(setup.eventConfiguration).createForEventID(eventID)
	set areSessionsAllowed=eventConfiguration.areSessionsAllowed()
	set eventAllowsGroupBookings=##class(setup.objEventSetting).getParameter("bookings","allow group bookings",eventID)
	
	
	set group=panel.addCheckboxGroup("basket_and_receipt_group","On the basket and receipt pages:")
	
	if ##class(setup.objSetting).getParameter("basket","showZeroValueItems") {
		set showItemsWithoutPrice=1
		set isReadOnly=1
	} else {
		set showItemsWithoutPrice=##class(setup.objEventSetting).getParameter("basket","showZeroValueItems",eventID)
		set isReadOnly=0	
	}
	if ##class(setup.objEventSetting).getParameter("receipt page","show zero value purchases",eventID) {
		set showItemsWithoutPrice=1	
	}
	set element=group.addCheckbox("show_items_without_price","Show items that do not have a price",showItemsWithoutPrice,isReadOnly)
	if isReadOnly {
		set element.uiComponent.title="This cannot be amended because it has been set as a system default"
	}
	
	set databaseItems = ##class(cod.objItemName).getListOfFrontendAddressItems()
	for count=1:1:$ListLength(databaseItems) {
		set databaseItem=$ListGet(databaseItems,count)
		set storedValue=##class(setup.objEventSetting).getParameter("show address details in basket/receipt",databaseItem,eventID) 
		set isReadOnly=0
		set element=group.addCheckbox("show_address_items_"_$Replace(databaseItem," ","_"),"Show "_$ZCVT(databaseItem,"L"),storedValue,isReadOnly)	
	}	
	
	set group=panel.addCheckboxGroup("basket_group","On the basket page:")
	
	if ##class(setup.objSystemTypes).isModuleAllowed("Show items for each delegate") {
		if eventAllowsGroupBookings {
			set showDelegateItems=##class(setup.objEventSetting).getParameter("basket","show delegate items",eventID)
			set isReadOnly=0
			set title=""
		} else {
			set showDelegateItems=""
			set isReadOnly=1
			set title="Requires group registrations to be enabled for this event"
		}
		set element=group.addCheckbox("show_item_breakdown","Show item breakdown for each attendee",showDelegateItems,isReadOnly)
		set element.uiComponent.title=title
	} else {
		set element=group.addCheckbox("show_item_breakdown","Show item breakdown for each attendee","",1)
		set element.uiComponent.title="Requires system module 'Show items for each delegate'"
	}
	
	if ##class(setup.objSystemTypes).isModuleAllowed("Button to amend sessions from basket page") {
		if ('eventAllowsGroupBookings)&&(areSessionsAllowed) {
			set amendSessionsButton=##class(setup.objEventSetting).getParameter("basket","amend session button",eventID)
			set isReadOnly=0
			set title=""
		} else {
			set amendSessionsButton=""
			set isReadOnly=1
			set title="Requires group registrations to be off and sessions to be enabled for this event"
		}
		set element=group.addCheckbox("show_session_amendment_link","Show session amendment link",amendSessionsButton,isReadOnly)
		set element.uiComponent.title=title
		
	} else {
		set element=group.addCheckbox("show_session_amendment_link","Show session amendment link","",1)
		set element.uiComponent.title="Requires system module 'Button to amend sessions from basket page'"		
	}
	

	set group=panel.addCheckboxGroup("receipt_group","On the receipt page:")
	set element=group.addCheckbox("show_top_print_button","Show ""Print"" button at top of page",##class(setup.objEventSetting).getParameter("receipt page","show top print button",eventID))
	set element=group.addCheckbox("show_bottom_print_button","Show ""Print"" button at bottom of page",'##class(setup.objEventSetting).getParameter("receipt page","hide print button",eventID))
	
	if eventConfiguration.getIsAwardsEvent()=0 {
		set group=panel.addCheckboxGroup("registration_summary_page","Registration summary page:")
		
		set (showRegSummaryDetailsTitle, showRegSummarySessionsTitle, showRegSummaryAccomTitle, showRegSummaryDiaryTitle)=""
		set (showRegSummaryDetails, showRegSummarySessions, showRegSummaryAccom, showRegSummaryDiary)=0
		if ##class(setup.objSystemTypes).isModuleAllowed("Show Booking Summary Page") {
			set showRegSummaryDetailsReadOnly=0
			set (regSummarySessionsReadOnly, regSummaryAccomReadOnly, regSummaryDiaryReadOnly)=1
			if areSessionsAllowed {
				set regSummarySessionsReadOnly=0	
			} else {
				set showRegSummarySessionsTitle="Requires sessions to be enabled for this event"
			}
			if ##class(setup.objEventSetting).getParameter("bookings","allow accommodation bookings",eventID) {
				set regSummaryAccomReadOnly=0	
			} else {
				set showRegSummaryAccomTitle="Requires accommodation to be enabled for this event"
			}
			if ##class(setup.objEventSetting).getParameter("event setup","allow meeting manager",eventID) {
				set regSummaryDiaryReadOnly=0
			} else {
				set showRegSummaryDiaryTitle="Requires meeting manager to be enabled for this event"
			}
			
			if ##class(setup.objEventSetting).getParameter("my registration pages","show my registration pages",eventID) {
				set showRegSummaryDetails=##class(setup.objEventSetting).getParameter("my registration pages","show my booking Details",eventID)
				if 'regSummarySessionsReadOnly {
					set showRegSummarySessions=##class(setup.objEventSetting).getParameter("my registration pages","show sessions",eventID)
				}
				if 'regSummaryAccomReadOnly {
					set showRegSummaryAccom=##class(setup.objEventSetting).getParameter("my registration pages","show accommodation",eventID)
				}
				if 'regSummaryDiaryReadOnly {
					set showRegSummaryDiary=##class(setup.objEventSetting).getParameter("my registration pages","show my Diary",eventID)
				}
			}
		} else {
			set (showRegSummaryDetailsReadOnly,regSummarySessionsReadOnly, regSummaryAccomReadOnly, regSummaryDiaryReadOnly)=1
			set (showRegSummaryDetailsTitle,showRegSummarySessionsTitle,showRegSummaryAccomTitle,showRegSummaryDiaryTitle)="Requires system module 'Show Booking Summary Page'"
		}
		set element=group.addCheckbox("show_registration_details","Show registration details",showRegSummaryDetails,showRegSummaryDetailsReadOnly)
		set element.uiComponent.title=showRegSummaryDetailsTitle
		if ##class(setup.objSystemTypes).isModuleAllowed("Sessions") {
			set element=group.addCheckbox("show_booked_sessions","Show booked sessions",showRegSummarySessions,regSummarySessionsReadOnly)
			set element.uiComponent.title=showRegSummarySessionsTitle
		}
		if ##class(setup.objSystemTypes).isModuleAllowed("Accommodation") {
			set element=group.addCheckbox("show_booked_accommodation","Show booked accommodation",showRegSummaryAccom,regSummaryAccomReadOnly)
			set element.uiComponent.title=showRegSummaryAccomTitle
		}
		if ##class(setup.objSystemTypes).isModuleAllowed("Meeting manager") {
			set element=group.addCheckbox("show_meeting_diary","Show meeting diary",showRegSummaryDiary,regSummaryDiaryReadOnly)
			set element.uiComponent.title=showRegSummaryDiaryTitle
		}
	}
		
	set element=panel.addDropdown("date_format","Date format:",##class(setup.objEvent).getDateFormat(eventID))
	do element.addAlternative("3","25/03/2014")
	do element.addAlternative("7","25-03-2014")
    do element.addAlternative("48","25-Mar-2014")
    do element.addAlternative("11","25.03.2014")
    do element.addAlternative("49","25.Mar.2014")
    do element.addAlternative("45","25 Mar 2014")
    do element.addAlternative("19","03/25/2014")
	do element.addAlternative("46","03-25-2014")
    do element.addAlternative("35","Mar-25-2014")
    do element.addAlternative("47","03.25.2014")
    do element.addAlternative("37","Mar.25.2014")
    do element.addAlternative("39","Mar 25, 2014")
    do element.addAlternative("25","2014-03-25")

    
    set element=panel.addRadioButtons("time_format","Time format:",##class(setup.objEventSetting).getParameter("system","time format",eventID))
    do element.addAlternative("24","24 hour",1)
    do element.addAlternative("12","12 hour")
]]></Implementation>
</Method>

<Method name="loadSocialMediaPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set eventID=..getEventID()
	
	do ..addFollowOnRadio(panel,"follow_on_facebook","Follow on Facebook:",##class(setup.objEventSetting).getParameter("social media","show Fb",eventID))
    set element=panel.addTextInput("facebook_id","Facebook group or page ID:",##class(setup.objEventSetting).getParameter("social media","facebook account",eventID))
    set element.uiComponent.placeHolder="facebook"
    
   do ..addFollowOnRadio(panel,"follow_on_twitter","Follow on Twitter:",##class(setup.objEventSetting).getParameter("social media","show Tw",eventID))
	set element=panel.addTextInput("twitter_account_name","Twitter account name:",##class(setup.objEventSetting).getParameter("social media","twitter account",eventID))
    set element.uiComponent.placeHolder="twitter"
    
    do ..addFollowOnRadio(panel,"follow_on_linkedin","Follow on LinkedIn:",##class(setup.objEventSetting).getParameter("social media","show Lk",eventID))
    set element=panel.addTextInput("linkedin_id","LinkedIn group ID:",##class(setup.objEventSetting).getParameter("social media","linkedin account",eventID))
    set element.uiComponent.placeHolder="2732642"
    
    set sharingButtonGroup=panel.addCheckboxGroup("sharing_buttons","Show these ""sharing"" buttons:")
    set element=sharingButtonGroup.addCheckbox("like_on_facebook","Like on Facebook",##class(setup.objEventSetting).getParameter("social media","share buttons facebook like",eventID))
	set element=sharingButtonGroup.addCheckbox("share_on_facebook","Share on Facebook",##class(setup.objEventSetting).getParameter("social media","share buttons facebook",eventID))
	set element=sharingButtonGroup.addCheckbox("share_on_twitter","Share on Twitter",##class(setup.objEventSetting).getParameter("social media","share buttons twitter",eventID))
	set element=sharingButtonGroup.addCheckbox("share_on_linkedIn","Share on LinkedIn",##class(setup.objEventSetting).getParameter("social media","share buttons linkedin",eventID))
	set element=sharingButtonGroup.addCheckbox("share_by_email","Share by email",##class(setup.objEventSetting).getParameter("social media","share buttons email",eventID))
	set element=sharingButtonGroup.addCheckbox("share_using_sharethis","Share using ""ShareThis""",##class(setup.objEventSetting).getParameter("social media","share buttons sharethis",eventID))
]]></Implementation>
</Method>

<Method name="addFollowOnRadio">
<FormalSpec>panel:EF.pageController.containerElements.panel,identifier,description,value</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set element=panel.addRadioButtons(identifier,description,value)
    do element.addAlternative("none","Disabled",1)
    do element.addAlternative("footer","In footer")
    do element.addAlternative("menu","Below menu")
]]></Implementation>
</Method>

<Method name="loadAdvancedPanel">
<FormalSpec>panel:EF.pageController.containerElements.panel</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set eventID=..getEventID()
	set eventConfiguration=##class(setup.eventConfiguration).createForEventID(eventID)
	
	if ##class(setup.objSystemTypes).isModuleAllowed("Window Title") {
		set element=panel.addTextInputWithDisabler("window_title","Default window title:",##class(setup.objEventSetting).getParameter("frontend","window title",eventID))
	} else {
		set element=panel.addTextInputWithDisabler("window_title","Default window title:","",1)
		set element.uiComponent.title="Requires system module 'Window Title'"	
	}
	set element.uiComponent.checkbox.label="Use event name"
	
	if ##class(setup.objSystemTypes).isModuleAllowed("Attendee/Delegate Description") {
		set element=panel.addTextInputWithDisabler("attendee_description","Attendee description:",##class(setup.objEventSetting).getParameter("frontend","delegate description",eventID))
	} else {
		set element=panel.addTextInputWithDisabler("attendee_description","Attendee description:","",1)
		set element.uiComponent.title="Requires system module 'Attendee/Delegate Description'"
	}
	set element.uiComponent.checkbox.label="Use category description"
	
	set element=panel.addRadioButtons("dependent_question_style","Dependent registration questions should be:",##class(setup.objEventSetting).getParameter("reg pages","hide dependent questions",eventID))
    do element.addAlternative("hide","Hidden")
    do element.addAlternative("grey","Greyed out",1)
    
    if ##class(setup.objSystemTypes).isModuleAllowed("Force Case Conversion") {
	    set element=panel.addCheckbox("auto_capitalise_names","Automatically capitalise names and addresses",##class(setup.objEventSetting).getParameter("COD prompts","convert names to sentence case",eventID))
    } else {
	 	set element=panel.addCheckbox("auto_capitalise_names","Automatically capitalise names and addresses","",1)
	 	set element.uiComponent.title="Requires system module 'Force Case Conversion'"
    }
    set element=panel.addCheckbox("show_progress_bar","Show registration progress bar",'##class(setup.objEventSetting).getParameter("reg pages","hide progress bar",eventID))
    set element=panel.addCheckbox("show_prices_in_reg_pages","Show prices in registration pages",'##class(setup.objEventSetting).getParameter("bookingings","suppress prices in reg pages",eventID))
    if ##class(setup.objSystemTypes).isModuleAllowed("Frame Sizes") {
	    set element=panel.addIntegerInput("menu_width","Menu width:",##class(setup.objEventSetting).getParameter("frameset","side menu cols",eventID))
	    set element.uiComponent.validator.minValue=0
	    set element.uiComponent.validator.maxValue=10000
	    set element=panel.addIntegerInput("banner_height","Banner height:",##class(setup.objEventSetting).getParameter("frameset","side menu rows",eventID))
	    set element.uiComponent.validator.minValue=0
	    set element.uiComponent.validator.maxValue=10000
    } else {
	 	set element=panel.addIntegerInput("menu_width","Menu width:","",1)
	 	set element.uiComponent.title="Requires system module 'Frame Sizes'"
	 	set element=panel.addIntegerInput("banner_height","Banner height:","",1)
	 	set element.uiComponent.title="Requires system module 'Frame Sizes'"
    }
    set isDisabled=0
    set title=""
	// No awards
	if ##class(setup.objEventSetting).getParameter("system","isAwardsEvent",eventID) {
		set isDisabled=1
		set title="Cannot be activated for awards event"
	}
	// No table bookings in case they create a stand-alone event
	if ##class(setup.objEventSetting).getParameter("table bookings","enable frontend",eventID) {
		set isDisabled=1
		set title="Cannot be activated for an event with table bookings"
	}
	// No ticketing in case they create a ticket which adds delegates
	if eventConfiguration.areQBIsAllowed() {
		if ##class(cod.objTicket).isTicketingPersonMode(eventID) {
			set isDisabled=1
			set title="Cannot be used in events where QBIs create registrations"
		}
	}
	// No accommodatiobn in case they create a stand-alone event
	if ##class(setup.objEventSetting).getParameter("bookings","allow accommodation bookings",eventID) {
		set isDisabled=1
		set title="Cannot be activated for an accommodation event"
	}
	// No page dependencies/ Cross page dependencies otherwise they may be able to not answer mandatoruy questions
	if ##class(setup.lnkCategoryEvent).hasCrossPageDependencies(eventID) {
		set isDisabled=1
		if '$l(title) {
			set title="Cannot be activated for an event with cross page dependencies"
		}
	}
   	if isDisabled {
	   	set value=""
   	} else { 	
	    set value=##class(setup.objEventSetting).getParameter("basket","basket links to registration pages",eventID)  	
   	}
   	
    set element=panel.addCheckbox("show_navigation_dropdown","Show registration page navigation drop-down on basket page",value,isDisabled)
    set element.uiComponent.title=title
]]></Implementation>
</Method>

<Method name="validate">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if ..existsByIdentifier("default_language") {
		set defaultLanguageID=..getValueByIdentifier("default_language")
		if '..getValueByIdentifier("enable_language_"_defaultLanguageID) {
			do ..getElementByIdentifier("default_language").setErrorMessage("the default language must be enabled")
		}
	}
]]></Implementation>
</Method>

<Method name="saveData">
<Implementation><![CDATA[
	do ..saveDisplayPanel()
    do ..saveSocialMediaPanel()
    do ..saveLanguagesPanel()
 	do ..saveAdvancedPanel()
]]></Implementation>
</Method>

<Method name="saveDisplayPanel">
<Private>1</Private>
<Implementation><![CDATA[
	set eventID=..getEventID()
	
	if ..isUpdatedByIdentifier("show_items_without_price") {
		do ##class(setup.objEventSetting).setParameter("basket","showZeroValueItems",..getValueByIdentifier("show_items_without_price"),eventID)
		do ##class(setup.objEventSetting).setParameter("receipt page","show zero value purchases",..getValueByIdentifier("show_items_without_price"),eventID)
	}
	
	set databaseItems = ##class(cod.objItemName).getListOfFrontendAddressItems()
	for count=1:1:$ListLength(databaseItems) {
		set databaseItem=$ListGet(databaseItems,count)
		set valueToSave=..getValueByIdentifier("show_address_items_"_$Replace(databaseItem," ","_"))
		do ##class(setup.objEventSetting).setParameter("show address details in basket/receipt",databaseItem,valueToSave,eventID) 
	}
		
	if ..isUpdatedByIdentifier("show_item_breakdown") {
		do ##class(setup.objEventSetting).setParameter("basket","show delegate items",..getValueByIdentifier("show_item_breakdown"),eventID)
	}
	
	if ..isUpdatedByIdentifier("show_session_amendment_link") {
		do ##class(setup.objEventSetting).setParameter("basket","amend session button",..getValueByIdentifier("show_session_amendment_link"),eventID)
	}
	if ..isUpdatedByIdentifier("show_top_print_button") {
		do ##class(setup.objEventSetting).setParameter("receipt page","show top print button",..getValueByIdentifier("show_top_print_button"),eventID)
	}
	if ..isUpdatedByIdentifier("show_bottom_print_button") {
		do ##class(setup.objEventSetting).setParameter("receipt page","hide print button",'..getValueByIdentifier("show_bottom_print_button"),eventID)
	}
	
			
	if ..isUpdatedByIdentifier("show_registration_details") {
		do ##class(setup.objEventSetting).setParameter("my registration pages","show my booking Details",..getValueByIdentifier("show_registration_details"),eventID)
	}
	if ..isUpdatedByIdentifier("show_booked_sessions") {
		do ##class(setup.objEventSetting).setParameter("my registration pages","show sessions",..getValueByIdentifier("show_booked_sessions"),eventID)
	}
	if ..isUpdatedByIdentifier("show_booked_accommodation") {
		do ##class(setup.objEventSetting).setParameter("my registration pages","show accommodation",..getValueByIdentifier("show_booked_accommodation"),eventID)
	}
	if ..isUpdatedByIdentifier("show_meeting_diary") {
		do ##class(setup.objEventSetting).setParameter("my registration pages","show my Diary",..getValueByIdentifier("show_meeting_diary"),eventID)
	}
	
	set isRegistrationSummaryPageOn=0
	for identifier="show_registration_details","show_booked_sessions","show_booked_accommodation","show_meeting_diary" {
		if ..existsByIdentifier(identifier) {
			if ..getValueByIdentifier(identifier) {
				set isRegistrationSummaryPageOn=1	
			}
		}	
	}
	
	do ##class(setup.objEventSetting).setParameter("my registration pages","show my registration pages",isRegistrationSummaryPageOn,eventID)
	
	
	if ..isUpdatedByIdentifier("date_format") {
		set dateFormat=..getValueByIdentifier("date_format")
		&SQL(UPDATE setup.objEvent SET dateFormat = :dateFormat WHERE ID = :eventID)
	}
	if ..isUpdatedByIdentifier("time_format") {
		do ##class(setup.objEventSetting).setParameter("system","time format",..getValueByIdentifier("time_format"),eventID)
	}
]]></Implementation>
</Method>

<Method name="saveSocialMediaPanel">
<Private>1</Private>
<Implementation><![CDATA[
	set eventID=..getEventID()
	if ..isUpdatedByIdentifier("follow_on_facebook") {
		do ##class(setup.objEventSetting).setParameter("social media","show Fb",..getValueByIdentifier("follow_on_facebook"),eventID)
	}
	if ..isUpdatedByIdentifier("facebook_id") {
		do ##class(setup.objEventSetting).setParameter("social media","facebook account",..getValueByIdentifier("facebook_id"),eventID)
	}
	if ..isUpdatedByIdentifier("follow_on_twitter") {
		do ##class(setup.objEventSetting).setParameter("social media","show Tw",..getValueByIdentifier("follow_on_twitter"),eventID)
	}
	if ..isUpdatedByIdentifier("twitter_account_name") {
		do ##class(setup.objEventSetting).setParameter("social media","twitter account",..getValueByIdentifier("twitter_account_name"),eventID)
	}
	
	if ..isUpdatedByIdentifier("follow_on_linkedin") {
		do ##class(setup.objEventSetting).setParameter("social media","show Lk",..getValueByIdentifier("follow_on_linkedin"),eventID)
	}
	if ..isUpdatedByIdentifier("linkedin_id") {
		do ##class(setup.objEventSetting).setParameter("social media","linkedin account",..getValueByIdentifier("linkedin_id"),eventID)
	}
	if ..isUpdatedByIdentifier("like_on_facebook") {
		do ##class(setup.objEventSetting).setParameter("social media","share buttons facebook like",..getValueByIdentifier("like_on_facebook"),eventID)
	}
	if ..isUpdatedByIdentifier("share_on_facebook") {
		do ##class(setup.objEventSetting).setParameter("social media","share buttons facebook",..getValueByIdentifier("share_on_facebook"),eventID)
	}
    if ..isUpdatedByIdentifier("share_on_twitter") {
		do ##class(setup.objEventSetting).setParameter("social media","share buttons twitter",..getValueByIdentifier("share_on_twitter"),eventID)
	}
	if ..isUpdatedByIdentifier("share_on_linkedIn") {
		do ##class(setup.objEventSetting).setParameter("social media","share buttons linkedin",..getValueByIdentifier("share_on_linkedIn"),eventID)
	}
	if ..isUpdatedByIdentifier("share_by_email") {
		do ##class(setup.objEventSetting).setParameter("social media","share buttons email",..getValueByIdentifier("share_by_email"),eventID)
	}
	if ..isUpdatedByIdentifier("share_using_sharethis") {
		do ##class(setup.objEventSetting).setParameter("social media","share buttons sharethis",..getValueByIdentifier("share_using_sharethis"),eventID)
	}
]]></Implementation>
</Method>

<Method name="saveLanguagesPanel">
<Private>1</Private>
<Implementation><![CDATA[
	set eventID=..getEventID()
	
    set languageCount=##class(shared.objLanguage).getArrayOfActiveLanguages(.languageArray)
    for i=1:1:languageCount {
	    set languageID=$p(languageArray(i),"|",1)
	    set languageName=$p(languageArray(i),"|",2)
	    if $ZCVT(languageName,"U")'="ENGLISH" {
		 	if ..isUpdatedByIdentifier("enable_language_"_languageID) {
				do ##class(setup.eventCreationMethods).setIsLanguageActiveForEvent(eventID,languageID,..getValueByIdentifier("enable_language_"_languageID))
		 	}
	    }
    }
    if ..isUpdatedByIdentifier("default_language") {
	    do ##class(setup.objEventSetting).setParameter("backend","default creation language",..getValueByIdentifier("default_language"),eventID)
    }
    if ..isUpdatedByIdentifier("show_language_flags") {
    	do ##class(setup.objEventSetting).setParameter("frontend","suppress language flags",'..getValueByIdentifier("show_language_flags"),eventID)
    }
]]></Implementation>
</Method>

<Method name="saveAdvancedPanel">
<Private>1</Private>
<Implementation><![CDATA[
	set eventID=..getEventID()
	if ..isUpdatedByIdentifier("window_title") {
		do ##class(setup.objEventSetting).setParameter("frontend","window title",..getValueByIdentifier("window_title"),eventID)	
	}
	if ..isUpdatedByIdentifier("attendee_description") {
		do ##class(setup.objEventSetting).setParameter("frontend","delegate description",..getValueByIdentifier("attendee_description"),eventID)	
	}
	if ..isUpdatedByIdentifier("dependent_question_style") {
		do ##class(setup.objEventSetting).setParameter("reg pages","hide dependent questions",..getValueByIdentifier("dependent_question_style"),eventID)
	}
	if ..isUpdatedByIdentifier("menu_width") {
		do ##class(setup.objEventSetting).setParameter("frameset","side menu cols",..getValueByIdentifier("menu_width"),eventID)
	}
	if ..isUpdatedByIdentifier("banner_height") {
		do ##class(setup.objEventSetting).setParameter("frameset","side menu rows",..getValueByIdentifier("banner_height"),eventID)
	}
	if ..isUpdatedByIdentifier("auto_capitalise_names") {
		do ##class(setup.objEventSetting).setParameter("COD prompts","convert names to sentence case",..getValueByIdentifier("auto_capitalise_names"),eventID)
	}
	if ..isUpdatedByIdentifier("show_progress_bar") {
		do ##class(setup.objEventSetting).setParameter("reg pages","hide progress bar",'..getValueByIdentifier("show_progress_bar"),eventID)
	}
	if ..isUpdatedByIdentifier("show_prices_in_reg_pages") {
		do ##class(setup.objEventSetting).setParameter("bookingings","suppress prices in reg pages",'..getValueByIdentifier("show_prices_in_reg_pages"),eventID)
	}
	if ..isUpdatedByIdentifier("show_navigation_dropdown") {
		do ##class(setup.objEventSetting).setParameter("basket","basket links to registration pages",..getValueByIdentifier("show_navigation_dropdown"),eventID)
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.pagesFrontend.t4Registration">
<Super>EF.pageController.page</Super>
<TimeChanged>64176,58240.426962</TimeChanged>
<TimeCreated>64176,58073.730326</TimeCreated>

<Method name="loadData">
<Implementation><![CDATA[
	&SQL(SELECT ID INTO :tempPersonID FROM eCom.tempPerson ORDER BY ID DESC) // #######
	do ..addTextInput("first-name","First name:",##class(eCom.tempCodData).get(tempPersonID,"firstname"))
	do ..addTextInput("last-name","Last name:",##class(eCom.tempCodData).get(tempPersonID,"lastname"))
	do ..addEmailInput("email-address","Email address:",##class(eCom.tempCodData).get(tempPersonID,"email"))
]]></Implementation>
</Method>

<Method name="validate">
</Method>

<Method name="saveData">
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.proweb.list">
<Description>
a list of proweb items</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64183,52826.49015</TimeChanged>
<TimeCreated>63992,66338.902496</TimeCreated>

<Property name="listItems">
<Type>EF.pageController.proweb.listItem</Type>
<Collection>list</Collection>
</Property>

<Property name="contextDataRegistration">
<Type>EF.contextDataRegistration</Type>
<Required>1</Required>
</Property>

<Property name="isProwebEditMode">
<Type>%Boolean</Type>
<Required>1</Required>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>contextDataRegistration:EF.contextDataRegistration</FormalSpec>
<ReturnType>EF.pageController.proweb.list</ReturnType>
<Implementation><![CDATA[
	set list = ..%New()
	set list.contextDataRegistration = contextDataRegistration
	return list
]]></Implementation>
</Method>

<Method name="populateFromListObject">
<FormalSpec>objList:sc.xModules.objList</FormalSpec>
<Implementation><![CDATA[
	#dim listItem as EF.pageController.proweb.listItem
	#dim previousGuestItem as EF.pageController.proweb.listItem
	#dim inputElement as EF.pageController.proweb.listItems.inputElementCOD
	
	if '$IsObject(objList) throw ##class(shared.exceptions.generalException).%New("No list object passed in to populate EF.pageController.proweb.list")
	
	set rsListItems=##class(%ResultSet).%New("sc.xModules.objList:qGetChildren")
	do rsListItems.Execute(objList.%Id())
	while rsListItems.Next() {	
		set dataID = rsListItems.Get("ID")
		set prowebItem = ##class(sc.objData).%OpenId(dataID)

		set listItem = ..createControllerForProwebItem(prowebItem)
		
		if listItem.isOkToAddToList() {
			do ..addListItem(listItem)
		}
	}
]]></Implementation>
</Method>

<Method name="createControllerForProwebItem">
<FormalSpec>prowebItem</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	if prowebItem.dataType = "objCODitem" { 
		set listItem = ##class(EF.pageController.proweb.listItems.inputElementCOD).%New()
		do listItem.populateFromProwebItem(prowebItem, ..contextDataRegistration)
		set listItem.uiComponentType = listItem.getUiComponentTypeFromProwebItem(prowebItem)
		
	} elseif prowebItem.dataType = "objText" {
		set listItem = ##class(EF.pageController.proweb.listItems.textBlock).%New()
		do listItem.populateFromProwebObject(prowebItem)
	
	} elseif prowebItem.dataType = "objFormDivider" {
		set listItem = ##class(EF.pageController.proweb.listItems.divider).%New()

	} else {
		throw ##class(shared.exceptions.generalException).%New("proweb item type not implemented yet")	
	}
	
	return listItem
]]></Implementation>
</Method>

<Method name="addListItem">
<FormalSpec>listItem:EF.pageController.proweb.listItem</FormalSpec>
<Implementation><![CDATA[
	do ..listItems.Insert(listItem)
	set listItem.htmlID = ..generateHtmlID(..listItems.Count())
]]></Implementation>
</Method>

<Method name="generateHtmlID">
<FormalSpec>displayOrder:%Integer</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set baseName = $Replace(..contextDataRegistration.componentName," ","")
	return ##class(shared.stringFunctions).encryptURLsafe(baseName_"|"_displayOrder) // ## may need enhancing ##
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	#dim listItem As EF.pageController.proweb.listItem
	#dim displayOrder as %Integer=0
	
	for  {
		set listItem = ..listItems.GetNext(.displayOrder)
		if displayOrder="" quit
		
		do listItem.render() 
	}
]]></Implementation>
</Method>

<Method name="debugTarget">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	#dim contextData as EF.contextDataRegistrationMock
	set contextData = ##class(EF.contextDataRegistrationMock).createNew()

	set list = ##class(EF.pageController.proweb.list).createNew(contextData)
	set listID = ##class(sc.xModules.objList).getListIDFromPageIDAndComponentName(contextData.pageID, contextData.componentName)
	
	set listObject=##class(sc.xModules.objList).%OpenId(listID)
	do list.populateFromListObject(listObject)

	do list.render()
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.proweb.listItem">
<Super>%RegisteredObject,EF.htmlGenerator</Super>
<TimeChanged>64183,55165.520408</TimeChanged>
<TimeCreated>63992,65826.878579</TimeCreated>

<Property name="htmlID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="uiComponentType">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="VALUELIST" value=",textInput"/>
</Property>

<Method name="isOkToAddToList">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	return 1
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[	// not implemented
]]></Implementation>
</Method>

<Method name="getUiComponentTypeFromProwebItem">
<FormalSpec>prowebItem:sc.objData</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// ",text,textarea,radiobutton,checkbox,dropdown,password,multibox,date,dateRange,time,emailAddress,multiEmailAddress,phoneNumber,integer,floatingPointNumber,webAddress"
	
	if prowebItem.type = "text" {
		return "textInput"
	
	} elseif prowebItem.type = "dropdown" {
		return "dropdown"
			
	} else {
		throw ##class(shared.exceptions.generalException).%New("Failed to resolve the UI component type")	
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.proweb.listItems.alternative">
<Description>
Hold the alternatives to dropdown, radios, multi check etc</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64183,61178.131402</TimeChanged>
<TimeCreated>64183,56080.501584</TimeCreated>

<Property name="label">
<Type>%String</Type>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Property name="code">
<Type>%String</Type>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Property name="isSelected">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="isDisabled">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="value">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>
</Class>


<Class name="EF.pageController.proweb.listItems.divider">
<Super>EF.pageController.proweb.listItem</Super>
<TimeChanged>64183,53088.836253</TimeChanged>
<TimeCreated>64183,52893.320101</TimeCreated>

<Method name="render">
<Implementation><![CDATA[
	set uiComponent = ##class(EF.ui.components.frontend.divider).%New(..htmlID)
	do uiComponent.render()
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.proweb.listItems.inputElement">
<Super>EF.pageController.proweb.listItem</Super>
<TimeChanged>64183,58699.309914</TimeChanged>
<TimeCreated>63992,62141.625478</TimeCreated>

<Property name="alternatives">
<Type>EF.pageController.proweb.listItems.alternative</Type>
<Collection>list</Collection>
</Property>

<Property name="labelText">
<Type>%String</Type>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Property name="isMandatory">
<Type>%Boolean</Type>
</Property>

<Property name="helpText">
<Type>%String</Type>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Property name="value">
<Type>%String</Type>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Method name="render">
<Implementation><![CDATA[
	#dim uiComponent as EF.ui.components.base
	set uiComponent = $CLASSMETHOD("EF.ui.components.frontend."_..uiComponentType,"%New",..htmlID)
	set uiComponent.label = ..labelText
	set uiComponent.hasMandatoryMarker = ..isMandatory
	set uiComponent.helpText = ..helpText
	set uiComponent.value = ..value
	set uiComponent.alternatives = ..alternatives
	do uiComponent.render()
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.proweb.listItems.inputElementCOD">
<Description>
Used for all input field on a registration page that are regular database items, as opposed to table booking and ticketing questions.</Description>
<Super>EF.pageController.proweb.listItems.inputElement</Super>
<TimeChanged>64183,60946.452565</TimeChanged>
<TimeCreated>64055,42548.552153</TimeCreated>

<Method name="populateFromProwebItem">
<FormalSpec>prowebItem:sc.objData,contextDataRegistration:EF.contextDataRegistration</FormalSpec>
<Implementation><![CDATA[
	#dim prowebID as %integer = prowebItem.%Id()
	#dim itemName as %String = ##class(sc.xModules.objCODitem).getCODItemName(prowebID)
	#dim tempPersonID as %String = contextDataRegistration.tempPersonID  
	
	if '$IsObject(prowebItem) {
		throw ##class(shared.exceptions.generalException).%New("No proweb item passed in")
	}
	set ..labelText = ##class(sc.objData).getQuestionPrompt(prowebID, contextDataRegistration.languageID)
	set ..helpText = prowebItem.helpText
	set ..isMandatory = prowebItem.mandatory
	set ..value = ##class(eCom.tempCodData).get(tempPersonID, itemName)
	
	do ..addAlternativesFromProwebItem(prowebItem)
]]></Implementation>
</Method>

<Method name="addAlternativesFromProwebItem">
<FormalSpec>prowebItem:sc.objData,contextDataRegistration:EF.contextDataRegistration</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set rsAlternative = ##class(cod.objItemAlternatives).getAlternativesForCodItemAsResultSet(prowebItem.objItemName.%Id())
	while rsAlternative.Next()	{
		Set alternativeDescription = rsAlternative.Get("description")
		set alternativeCode = rsAlternative.Get("code")
		
		do ..addAlternative(alternativeDescription,alternativeCode)
	}
]]></Implementation>
</Method>

<Method name="addAlternative">
<FormalSpec>alternativeDescription:%String,alternativeCode:%String</FormalSpec>
<Implementation><![CDATA[
	set alternative = ##class(EF.pageController.proweb.listItems.alternative).%New()
	set alternative.label = alternativeDescription
	set alternative.code = alternativeCode
	
	do ..alternatives.Insert(alternative)
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.proweb.listItems.textBlock">
<Super>EF.pageController.proweb.listItem</Super>
<TimeChanged>64183,53072.605755</TimeChanged>
<TimeCreated>64183,49747.663252</TimeCreated>

<Property name="text">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000000"/>
</Property>

<Method name="populateFromProwebObject">
<FormalSpec>prowebItem:sc.objData,contextDataRegistration:EF.contextDataRegistration</FormalSpec>
<Implementation><![CDATA[
	#dim prowebID as %integer = prowebItem.%Id()
	
	if '$IsObject(prowebItem) {
		throw ##class(shared.exceptions.generalException).%New("No proweb item passed in")
	}

	set ..text = prowebItem.description
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	set uiComponent = ##class(EF.ui.components.frontend.textBlock).%New(..htmlID)
	set uiComponent.text = ..text
	do uiComponent.render()
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.proweb.listTestCase">
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>64183,59177.184045</TimeChanged>
<TimeCreated>64183,49819.459938</TimeCreated>

<Method name="TestBasicInputTextField">
<Implementation><![CDATA[
	#dim contextData as EF.contextDataRegistrationMock
	#dim inputElement as EF.pageController.proweb.listItems.inputElementCOD
	#dim listItem as EF.pageController.proweb.listItems.inputElementCOD
	
	set contextData = ##class(EF.contextDataRegistrationMock).createNew()

	set list = ##class(EF.pageController.proweb.list).%New()
	
	set listItem = ##class(EF.pageController.proweb.listItems.inputElementCOD).%New()
	set listItem.labelText = "First input field"
	set listItem.uiComponentType = "textInput"
	set listItem.isMandatory = 0
	do list.addListItem(listItem)
	
	// test basic field
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(list,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowdraggableTR'><divclass='col-sm-4ef_proweb_form_prompt'><labelclass=""control-label""for=""|2401"">Firstinputfield</label></div><divclass='col-sm-8ef_proweb_form_prompt'><inputtype=""text""class=""form-control""title=""""id=""|2401""name=""""value=""""placeholder=""""></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)


	// test mandatory field
	set listItem.isMandatory = 1
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(list,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowdraggableTR'><divclass='col-sm-4ef_proweb_form_promptef-required-field'><labelclass=""control-label""for=""|2401"">Firstinputfield</label></div><divclass='col-sm-8ef_proweb_form_prompt'><inputtype=""text""class=""form-control""title=""""id=""|2401""name=""""value=""""placeholder=""""></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)

	// test with a second field
	set listItem2 = ##class(EF.pageController.proweb.listItems.inputElementCOD).%New()
	set listItem2.labelText = "Second input field"
	set listItem2.uiComponentType = "textInput"
	set listItem2.isMandatory = 0
	do list.addListItem(listItem2)

	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(list,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowdraggableTR'><divclass='col-sm-4ef_proweb_form_promptef-required-field'><labelclass=""control-label""for=""|2401"">Firstinputfield</label></div><divclass='col-sm-8ef_proweb_form_prompt'><inputtype=""text""class=""form-control""title=""""id=""|2401""name=""""value=""""placeholder=""""></div></div><divclass='rowdraggableTR'><divclass='col-sm-4ef_proweb_form_prompt'><labelclass=""control-label""for=""|2500"">Secondinputfield</label></div><divclass='col-sm-8ef_proweb_form_prompt'><inputtype=""text""class=""form-control""title=""""id=""|2500""name=""""value=""""placeholder=""""></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)
]]></Implementation>
</Method>

<Method name="TestTextBlock">
<Implementation><![CDATA[
	#dim contextData as EF.contextDataRegistrationMock
	#dim listItem as EF.pageController.proweb.listItems.textBlock
	
	set contextData = ##class(EF.contextDataRegistrationMock).createNew()

	set list = ##class(EF.pageController.proweb.list).%New()
	
	set listItem = ##class(EF.pageController.proweb.listItems.textBlock).%New()
	set listItem.text = "Lorem ipsum dolor sit amet, faucibus sagittis dui commodo integer. Vitae fringilla amet, wisi amet suspendisse ut vitae per vitae, pellentesque mi dis nisl tellus donec tempor, laoreet viverra, pellentesque ultricies conubia justo lorem. Torquent nibh risus aliquam fusce lacus in, non mus. Integer velit, volutpat a vel, tincidunt justo mattis, commodo lacus volutpat luctus felis. Sit adipiscing aliquet aenean fringilla nullam ac, velit dui, cum felis a nullam dapibus, condimentum pulvinar quis posuere integer justo."
	set listItem.uiComponentType = "textBlock"
	do list.addListItem(listItem)
	
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(list,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowdraggableTR'><divclass='col-sm-12'>Loremipsumdolorsitamet,faucibussagittisduicommodointeger.Vitaefringillaamet,wisiametsuspendisseutvitaepervitae,pellentesquemidisnisltellusdonectempor,laoreetviverra,pellentesqueultriciesconubiajustolorem.Torquentnibhrisusaliquamfuscelacusin,nonmus.Integervelit,volutpatavel,tinciduntjustomattis,commodolacusvolutpatluctusfelis.Sitadipiscingaliquetaeneanfringillanullamac,velitdui,cumfelisanullamdapibus,condimentumpulvinarquisposuereintegerjusto.</div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.text">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.text.CLS/EV.0
;vc; Component: CLS.EF.pageController.text
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:35
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.text.CLS/EV.0</td><td>CLS.EF.pageController.text</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:35</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.pageController.element</Super>
<TimeChanged>63390,33780</TimeChanged>
<TimeCreated>63389,34996.797831</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.base</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.text).%New(..identifier)
]]></Implementation>
</Method>

<Method name="initialiseUIComponent">
<FormalSpec>uiComponent:EF.ui.components.inputBase</FormalSpec>
<Implementation><![CDATA[
	do ##super(uiComponent)
	set ..uiComponent.text=..description
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.textElements.caption">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.textElements.caption.CLS/EV.0
;vc; Component: CLS.EF.pageController.textElements.caption
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.textElements.caption.CLS/EV.0</td><td>CLS.EF.pageController.textElements.caption</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.pageController.text</Super>
<TimeChanged>63410,63663</TimeChanged>
<TimeCreated>63410,63663.294133</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.backend.caption</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.caption).%New(..identifier)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.textElements.modalHeader">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.textElements.modalHeader.CLS/EV.0
;vc; Component: CLS.EF.pageController.textElements.modalHeader
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.textElements.modalHeader.CLS/EV.0</td><td>CLS.EF.pageController.textElements.modalHeader</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.pageController.text</Super>
<TimeChanged>63407,48816</TimeChanged>
<TimeCreated>63407,48788.31387</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.base</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.modalHeader).%New(..identifier)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.textElements.textAlert">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.textElements.textAlert.CLS/EV.0
;vc; Component: CLS.EF.pageController.textElements.textAlert
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.textElements.textAlert.CLS/EV.0</td><td>CLS.EF.pageController.textElements.textAlert</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.pageController.text</Super>
<TimeChanged>63407,38199</TimeChanged>
<TimeCreated>63407,38153.456074</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.base</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.textAlert).%New(..identifier)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pageController.textElements.textAlertInfo">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pageController.textElements.textAlertInfo.CLS/EV.0
;vc; Component: CLS.EF.pageController.textElements.textAlertInfo
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pageController.textElements.textAlertInfo.CLS/EV.0</td><td>CLS.EF.pageController.textElements.textAlertInfo</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.pageController.textElements.textAlert</Super>
<TimeChanged>63407,38557</TimeChanged>
<TimeCreated>63407,38557.324236</TimeCreated>

<Method name="getDefaultUIComponent">
<ReturnType>EF.ui.components.base</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.ui.components.backend.textAlertInfo).%New(..identifier)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="EF.pages.backendDataSource">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pages.backendDataSource.CLS/EV.0
;vc; Component: CLS.EF.pages.backendDataSource
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pages.backendDataSource.CLS/EV.0</td><td>CLS.EF.pages.backendDataSource</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<Super>shared.pCSPmanage</Super>
<TimeChanged>63855,34537</TimeChanged>
<TimeCreated>63845,43598.579588</TimeCreated>

<Parameter name="ENCODED">
<Default>1</Default>
</Parameter>

<Parameter name="PRIVATE">
<Default>1</Default>
</Parameter>

<Parameter name="dataSource">
</Parameter>

<Parameter name="requiresSingleEvent">
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Parameter name="requiresComparisonEvent">
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Do ..OnPageCSPROOT()
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnPreHTTPafter">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%Library.Boolean</ReturnType>
<Implementation><![CDATA[
  
 	try {
	 	do %session.Unlock()
	 	set contextData = ##class(EF.contextData).createFromBackendCSPSession()
	 	set dataSource=##class(EF.dataSources.base).getDataSource(..#dataSource,contextData)
	 	if ..#requiresSingleEvent {
		 	set dataSource.eventID=%request.Get("eventID")	
	 	}
	 	if ..#requiresComparisonEvent {
		 	set dataSource.comparisonEventID=%request.Get("comparisonEventID")
		 	if 'dataSource.comparisonEventID {
			 	set dataSource.comparisonEventID=dataSource.eventID
		 	}
	 	}
	 	if 'dataSource.isAuthorised() {
		 	throw ##class(shared.exceptions.generalException).%New("Not Authorised")
	 	}
	 	do dataSource.createDataSet()
	 	do ##class(shared.pageMethods).setHTTPHeaderForJSON()
	} catch errObj {
		do ##class(EF.errors.loggingMethods).logException(errObj,%request.PageName)
		return 0
	}
 	return 1
]]></Implementation>
</Method>

<Method name="OnPageCSPROOT">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	do dataSource.outputJSON()
]]></Implementation>
</Method>
</Class>


<Class name="EF.pages.backendGen4.base">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pages.backendGen4.base.CLS/EV.8
;vc; Component: CLS.EF.pages.backendGen4.base
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pages.backendGen4.base.CLS/EV.8</td><td>CLS.EF.pages.backendGen4.base</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<Super>shared.pCSPmanage</Super>
<TimeChanged>64119,53448</TimeChanged>
<TimeCreated>63406,58008.128031</TimeCreated>

<Parameter name="ENCODED">
<Default>1</Default>
</Parameter>

<Parameter name="PRIVATE">
<Default>1</Default>
</Parameter>

<Parameter name="efPageGenerationNumber">
<Type>%Integer</Type>
<Default>4</Default>
</Parameter>

<Parameter name="efUsePageController">
<Type>%Boolean</Type>
<Default>1</Default>
</Parameter>

<Parameter name="efFormName">
<Type>%String</Type>
<Default>myForm</Default>
</Parameter>

<Parameter name="efFormID">
<Type>%String</Type>
<Default>EFBackendForm</Default>
</Parameter>

<Parameter name="efServerStorageSaveLevel">
<Type>%String</Type>
<Default>event</Default>
</Parameter>

<Parameter name="efRenderMainModal">
<Type>%Boolean</Type>
<Default>1</Default>
</Parameter>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	Do ..OnPageCSPROOT()
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnPageCSPROOT">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Do ##class(shared.pageMethods).createBackendVariables()
	if ..usePageController() {
		set contextData = ##class(EF.contextData).createFromBackendCSPSession()
		set pageControllerID=%request.Get("pageControllerID")
		merge requestData=%request.Data
		
		if pageControllerID {
			try {
				do ..beforePageControllerReload(pageControllerID)
				set pageController=##class(EF.pageController.page).open(pageControllerID,contextData)
			} catch {
				// force a reload if there is a problem opening the page
				set pageControllerID=""
			}
		}
		if 'pageControllerID {
			set pageController=$CLASSMETHOD(..getPageDataClassName(),"createNew",contextData,.requestData)
			do pageController.%Save()
		}
		
		set pageControllerID=pageController.%Id()
	}
	do ..OnPagePageTop()
	do ..outputContents()
	do ..OnPagePageBottom()
]]></Implementation>
</Method>

<Method name="OnPagePageTop">
<ClassMethod>1</ClassMethod>
</Method>

<Method name="beforePageControllerReload">
<ClassMethod>1</ClassMethod>
<FormalSpec>pageControllerID</FormalSpec>
</Method>

<Method name="outputContents">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	do ..OnPagePageContent()
]]></Implementation>
</Method>

<Method name="OnPagePageContent">
<Description>
Overridden by the page</Description>
<ClassMethod>1</ClassMethod>
</Method>

<Method name="OnPagePageBottom">
<ClassMethod>1</ClassMethod>
</Method>

<Method name="getPageDataClassName">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit "EF.pageController.pages."_$PIECE($PIECE(..#CSPFILE,"\",$LENGTH(..#CSPFILE,"\")),".",1)
]]></Implementation>
</Method>

<Method name="getPageGenerationNumber">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	Quit ..#efPageGenerationNumber
]]></Implementation>
</Method>

<Method name="usePageController">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ..#efUsePageController
]]></Implementation>
</Method>

<Method name="getFormName">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ..#efFormName
]]></Implementation>
</Method>

<Method name="getFormID">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Quit ..#efFormID
]]></Implementation>
</Method>

<Method name="OnPageOutsideMainForm">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	if ..#efRenderMainModal {
		&html<<div class=" modal" id="ef-main-modal" tabindex="-1" role="dialog" aria-labelledby="timeout-modal-title" aria-hidden="true" >
				<div class="ef-admin-modal-dialog">
	   		 		<div class="modal-content">
	   		 		 </div>
			    </div>
	    	</div>
		>
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.pages.backendGen4.grid">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pages.backendGen4.grid.CLS/EV.6
;vc; Component: CLS.EF.pages.backendGen4.grid
;vc;  Location: SmallDev
;vc; Date/Time: 12-Jan-16 18:27
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pages.backendGen4.grid.CLS/EV.6</td><td>CLS.EF.pages.backendGen4.grid</td><td>SmallDev</td><td style='white-space: nowrap;'>12-Jan-16 18:27</td><td>RajibQ</td></tr></table>
]]></Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<Super>EF.pages.backendGen4.base</Super>
<TimeChanged>63929,66627.84015</TimeChanged>
<TimeCreated>63728,59826.553965</TimeCreated>

<Parameter name="efAlwaysDisplayVerticalScrollbar">
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Method name="outputContents">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&html<
		<div id="ef_menu_divFade" class="noPrint">
			<div class="ef-admin-top-button-panel">
	>
	
	
		
	Do ..OnPageMainButtonArea()
	
	&html<
			</div><!-- ef-admin-top-button-panel -->
		</div><!-- ef_menu_divFade -->
	>
	
	&html<
		<div class="container-fluid">
	>
	Do ..OnPagePageContent()
	&html<
		</div><!-- container -->
	>
	
	do ##class(EF.pageController.javascriptMethods).outputMainJS(pageController)
	
	
	do ..OnPageOutsideMainForm()
]]></Implementation>
</Method>

<Method name="OnPagePageTop">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Do ..Include("../../backend/home/backendTop.csp?pageGeneration="_..getPageGenerationNumber()_"&kendoweb=1&serverStorageSaveLevel="_..#efServerStorageSaveLevel_"&alwaysDisplayVerticalScrollbar="_..alwaysDisplayVerticalScrollbar())
]]></Implementation>
</Method>

<Method name="OnPagePageBottom">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Do ..Include("../../backend/home/backendBottom.csp?pageGeneration="_..getPageGenerationNumber())
]]></Implementation>
</Method>

<Method name="OnPagePageContent">
<ClassMethod>1</ClassMethod>
</Method>

<Method name="OnPageMainButtonArea">
<ClassMethod>1</ClassMethod>
</Method>

<Method name="alwaysDisplayVerticalScrollbar">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ..#efAlwaysDisplayVerticalScrollbar
]]></Implementation>
</Method>
</Class>


<Class name="EF.pages.backendGen4.modalContent">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pages.backendGen4.modalContent.CLS/EV.4
;vc; Component: CLS.EF.pages.backendGen4.modalContent
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pages.backendGen4.modalContent.CLS/EV.4</td><td>CLS.EF.pages.backendGen4.modalContent</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<Super>EF.pages.backendGen4.base</Super>
<TimeChanged>63959,33538</TimeChanged>
<TimeCreated>63406,58547.571032</TimeCreated>

<Parameter name="efReloadAfterSubmit">
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Parameter name="efRenderMainModal">
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Method name="OnPagePageTop">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&html<<!DOCTYPE html>
		<html>
			<head>
				  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
				  <title>Remote file for Bootstrap Modal</title>  
			</head>
			<body>
	>
]]></Implementation>
</Method>

<Method name="OnPagePageContent">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	do ..OnPageModalHeader()
	if ..usePageController() {
		set formClass="ef-pagecontroller-modal-ajax-form"
		if ..#efReloadAfterSubmit {
			set formClass=formClass_" ef-reload-after-submit"	
		}
		&HTML<
			<div class="ef-modal-message-area hidden">
				<div id="#(..encodeHTMLAttribute(..getErrorMessageDiv()))#" class="alert alert-danger ">
	            </div>
	        </div>
			<form id="#(..encodeHTMLAttribute(..getFormID()))#" class="#(..encodeForHTMLAttribute(formClass))#" name="#(..encodeHTMLAttribute(..getFormName()))#" action="#(..encodeForHTMLAttribute(..Link("pageControllerAJAXSave.csp")))#" data-error-message-div="#(..encodeForHTMLAttribute(..getErrorMessageDiv()))#">
				<input type="hidden" name="pageControllerID" value="#(..encodeForHTMLAttribute(pageController.%Id()))#">
				<input type="hidden" name="parentPageControllerID" value="#(..encodeForHTMLAttribute(%request.Get("parentPageControllerID")))#">
				<input type="hidden" name="selectedRowIds" value="#(..encodeForHTMLAttribute(%request.Get("selectedRowIds")))#">
		>
	}
	do ..OnPageModalContent()
	if ..usePageController() {
		&HTML<
			</form>
			<script language="javascript">
				#[do ..outputJavascript(pageController)]#
			</script>
		>
	}
]]></Implementation>
</Method>

<Method name="beforePageControllerReload">
<ClassMethod>1</ClassMethod>
<FormalSpec>pageControllerID</FormalSpec>
<Implementation><![CDATA[	do ##class(EF.pageController.page).clearDownModalTempData(pageControllerID)
]]></Implementation>
</Method>

<Method name="outputJavascript">
<ClassMethod>1</ClassMethod>
<FormalSpec>pageController</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	do ##class(EF.pageController.javascriptMethods).renderJSForElements(pageController)
]]></Implementation>
</Method>

<Method name="OnPageModalHeader">
<ClassMethod>1</ClassMethod>
</Method>

<Method name="OnPageModalContent">
<ClassMethod>1</ClassMethod>
</Method>

<Method name="OnPagePageBottom">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&html<
			</body>
		</html>
	>
]]></Implementation>
</Method>

<Method name="getFormName">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "ef-modal-form"_$p(%request.PageName,".",1)
]]></Implementation>
</Method>

<Method name="getFormID">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	quit "ef-modal-form-"_$p(%request.PageName,".",1)
]]></Implementation>
</Method>

<Method name="getErrorMessageDiv">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	quit "ef-modal-div-error-"_$p(%request.PageName,".",1)
]]></Implementation>
</Method>
</Class>


<Class name="EF.pages.backendGen4.standard">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pages.backendGen4.standard.CLS/EV.9
;vc; Component: CLS.EF.pages.backendGen4.standard
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pages.backendGen4.standard.CLS/EV.9</td><td>CLS.EF.pages.backendGen4.standard</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<Super>EF.pages.backendGen4.base</Super>
<TimeChanged>64110,61541</TimeChanged>
<TimeCreated>63407,61664.279687</TimeCreated>

<Parameter name="efShowDefaultSaveButton">
<Type>%Boolean</Type>
<Default>1</Default>
</Parameter>

<Parameter name="efShowDefaultBackButton">
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Parameter name="efUseJQUI">
<Description>
Defaulting to off as there is a conflict problem with bootstrap
Looks like it will be fixed in v3.2.0 https://github.com/twbs/bootstrap/pull/11966</Description>
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Parameter name="efUseKendoWeb">
<Type>%Boolean</Type>
<Default>1</Default>
</Parameter>

<Parameter name="efUseQTip">
<Type>%Boolean</Type>
<Default>1</Default>
</Parameter>

<Parameter name="efUseToggle">
<Type>%Boolean</Type>
<Default>1</Default>
</Parameter>

<Parameter name="efBackButtonURL">
<Type>%String</Type>
</Parameter>

<Parameter name="efFormAction">
<Type>%String</Type>
<Default>pageControllerStandardSave.csp</Default>
</Parameter>

<Parameter name="efContainerClass">
<Type>%String</Type>
<Default>container</Default>
</Parameter>

<Parameter name="efHideBackendMenu">
<Type>%String</Type>
<Default>0</Default>
</Parameter>

<Parameter name="efDisableUsernameAndPasswordAutoComplete">
<Type>%Boolean</Type>
<Default>1</Default>
</Parameter>

<Parameter name="efUseColourPicker">
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Method name="outputContents">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	if ..usePageController() {
	
		&html<
			<form onSubmit="formSubmitting=true;" id="#(..#efFormID)#" name="#(..getFormName())#" method="post" action="#(..Link(..getFormAction()))#">
				<input type="hidden" name="pageControllerID" value="#(pageControllerID)#">
				<input type="hidden" name="efFromPage" value="#(%request.PageName)#">
				<input type="hidden" id="efSubmitButtonIdentifier" name="efSubmitButtonIdentifier" value="">
				<input type="hidden" id="efDeleteButtonIdentifier" name="efDeleteButtonIdentifier" value="">
				<input type="hidden" id="efSaveAndReloadFormOnly" name="efSaveAndReloadFormOnly" value="">
		>
		if ..#efDisableUsernameAndPasswordAutoComplete {
			do ..outputDisableUsernameAndPasswordAutoCompleteHTML()
		}
	}
	
	&html<
		<div id="ef_menu_divFade" class="noPrint">
			<div class="ef-admin-top-button-panel">
	>
	
	If (..showDefaultBackButton()) {
		&html<
			<button id="ef_backend_button_back" type="button" class="btn ef-btn-header on-click-redirect" data-link-url="#(..encodeForHTMLAttribute(..Link(..getBackButtonURL())))#">
            	Back
        	</button>
		>
	}
	
	If (..showDefaultSaveButton()) {
		Do ##class(pageClasses.backendComponentMethods).renderBackendSaveButton()
	}
		
	Do ..OnPageMainButtonArea()
	
	&html<
			</div><!-- ef-admin-top-button-panel -->
		</div><!-- ef_menu_divFade -->
	>
	
	&html<
		<div class="#(..#efContainerClass)#">
	>
	Do ..OnPagePageContent()
	&html<
		</div><!-- container -->
	>
	
	If ..usePageController() {
		&html<
			</form>
		>
		do ##class(EF.pageController.javascriptMethods).outputMainJS(pageController)
	}
	
	do ..OnPageOutsideMainForm()
]]></Implementation>
</Method>

<Method name="OnPagePageTop">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Do ..Include("../../backend/home/backendTop.csp?pageGeneration="_..getPageGenerationNumber()_"&jqui="_..useJQUI()_"&kendoweb="_..useKendoWeb()_"&useQtip="_..useQTip()_"&useToggle="_..useToggle()_"&serverStorageSaveLevel="_..#efServerStorageSaveLevel_"&hideBackendMenu="_..#efHideBackendMenu_"&useColorPicker="_..#efUseColourPicker )
]]></Implementation>
</Method>

<Method name="OnPagePageBottom">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Do ..Include("../../backend/home/backendBottom.csp?pageGeneration="_..getPageGenerationNumber())
]]></Implementation>
</Method>

<Method name="OnPagePageContent">
<ClassMethod>1</ClassMethod>
</Method>

<Method name="OnPageMainButtonArea">
<ClassMethod>1</ClassMethod>
</Method>

<Method name="showDefaultSaveButton">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ..#efShowDefaultSaveButton
]]></Implementation>
</Method>

<Method name="showDefaultBackButton">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ..#efShowDefaultBackButton
]]></Implementation>
</Method>

<Method name="getBackButtonURL">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ..#efBackButtonURL
]]></Implementation>
</Method>

<Method name="getFormName">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ..#efFormName
]]></Implementation>
</Method>

<Method name="getFormAction">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ..#efFormAction
]]></Implementation>
</Method>

<Method name="useJQUI">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ..#efUseJQUI
]]></Implementation>
</Method>

<Method name="useKendoWeb">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ..#efUseKendoWeb
]]></Implementation>
</Method>

<Method name="useQTip">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ..#efUseQTip
]]></Implementation>
</Method>

<Method name="useToggle">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ..#efUseToggle
]]></Implementation>
</Method>

<Method name="usePageController">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ..#efUsePageController
]]></Implementation>
</Method>
</Class>


<Class name="EF.pages.frontend.awardsJudging">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pages.frontend.meetingManager.CLS/EV.0
;vc; Component: CLS.EF.pages.frontend.meetingManager
;vc;  Location: SmallDev
;vc; Date/Time: 25-Apr-16 14:48
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pages.frontend.meetingManager.CLS/EV.0</td><td>CLS.EF.pages.frontend.meetingManager</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Apr-16 14:48</td><td>JeremyW</td></tr></table>
]]></Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<Super>EF.pages.frontend.base</Super>
<TimeChanged>64035,38367.880032</TimeChanged>
<TimeCreated>63631,50108.34822</TimeCreated>

<Method name="OnPreHTTPbefore">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 	set xEventID=$G(%session.Data("eventsforce","frontend","xEventID"))
 	// Check if the judge is logged in. 
 	set judgePersonID=""
 	if '$G(%session.Data("inSitePageEditing")) {
 		set judgePersonID=##class(EF.security.websiteAccessHandler).getCurrentAwardsJudgePersonID(xEventID)
 		if 'judgePersonID {
 			set %response.Redirect=..Link("awardsJudgeLogin.csp?logoutJudging=1")
 			return 0
 		}
 	}
 	

 	return 1
]]></Implementation>
</Method>
</Class>


<Class name="EF.pages.frontend.base">
<Description><![CDATA[
Common page that all frontend pages could/should inherit from.
<!-- ;vc;
;vc;    Object: EF.pages.frontend.base.CLS/EV.9
;vc; Component: CLS.EF.pages.frontend.base
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pages.frontend.base.CLS/EV.9</td><td>CLS.EF.pages.frontend.base</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<Super>shared.pCSPmanage</Super>
<TimeChanged>64183,59758.563033</TimeChanged>
<TimeCreated>63635,40114.778424</TimeCreated>

<Parameter name="showRegistrationProgressBar">
<Default>0</Default>
</Parameter>

<Parameter name="hasRegistrationQuestions">
<Default>0</Default>
</Parameter>

<Parameter name="efUsePageController">
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	Do ..OnPageCSPROOT()
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnPageCSPROOT">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	do ..OnPagePageTop()
	do ..initPageController()
	do ..OnPagePageContent()
	do ..OnPagePageBottom()
]]></Implementation>
</Method>

<Method name="initPageController">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set contextData = ##class(EF.contextDataRegistration).createFromFrontendCSPSession()
	if ..usePageController() {
		set contextData = ##class(EF.contextData).createFromBackendCSPSession()
		set pageControllerID=%request.Get("pageControllerID")
		merge requestData=%request.Data
		
		if pageControllerID {
			try {
				do ..beforePageControllerReload(pageControllerID)
				set pageController=##class(EF.pageController.page).open(pageControllerID,contextData)
			} catch {
				// force a reload if there is a problem opening the page
				set pageControllerID=""
			}
		}
		if 'pageControllerID {
			set pageController=$CLASSMETHOD(..getPageDataClassName(),"createNew",contextData,.requestData)
			do pageController.%Save()
		}
		
		set pageControllerID=pageController.%Id()
	}
]]></Implementation>
</Method>

<Method name="OnPagePageTop">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	w ##class(shared.pageMethods).outputFrontendHeader()
	Write !,"<head>"
	Write !
 	do ##class(layout.objTemplate).writeBit("","{{ef_header}}")
	Write !
	Do ..Include("frontendHTTPheader.csp")
	Write !
	Do ..Include("colourScheme.csp")
	do ..OnPagePageHeaderCSS()
	Write !,!,"</head>"
	Write !,"<body class=""bodyBackground"">"
	Write !,!,!,!
	set app=##class(sc.objData).applicationPath()
	if ..#hasRegistrationQuestions {
		set isCOD = 1
	}
	do ##class(cspRealEV.system.proweb.templatestart).OnPageCSPROOT()
	
 	do ##class(layout.objTemplate).writeBit("{{ef_header}}","{{ef_banner}}")
 	do ##class(layout.objTemplate).writeBit("{{ef_banner}}","{{ef_main_progress}}")
 	if ..#showRegistrationProgressBar {
		if ($G(%session.Data("mode"))="preview")!($G(%session.Data("inSitePageEditing"))) {
			if '%request.Get("hideButtons") {
				Do ..Include("progress.csp")
			}
		}
 	}
 	do ##class(layout.objTemplate).writeBit("{{ef_main_progress}}","{{ef_main_header}}")
]]></Implementation>
</Method>

<Method name="OnPagePageHeaderCSS">
<ClassMethod>1</ClassMethod>
</Method>

<Method name="OnPagePageBottom">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	do ##class(layout.objTemplate).writeBit("{{ef_main_buttons}}","{{ef_footer}}")
	do ##class(layout.objTemplate).writeBit("{{ef_footer}}","")
	Do ..Include("editingFooter.csp")
	set app=##class(sc.objData).applicationPath()
	do ##class(cspRealEV.system.proweb.templatestop).OnPageCSPROOT()
	Write !,!,"</body>"
	Write !,"</html>",!
]]></Implementation>
</Method>

<Method name="OnPagePageContent">
<ClassMethod>1</ClassMethod>
</Method>

<Method name="outputProwebListRows">
<ClassMethod>1</ClassMethod>
<FormalSpec>componentName,pageID,isHTMLTable:%Boolean,paramIsRepeatedList:%Boolean=0</FormalSpec>
<Implementation><![CDATA[
	if +%session.Get("useExperimentalCMS")=0 {
		set beforeItem=##class(sc.xModules.objPage).getBeforeItem(pageID)
		new pageURL,app
		// Clear previously set component 
		KILL %session.Data("beforeRow")
		KILL %session.Data("afterRow")
		KILL %session.Data("beforeItem")
		KILL %session.Data("afterItem")
		KILL %session.Data("componentName")
		// retrieve the passed component name
		set %session.Data("beforeRow")=""
		set %session.Data("afterRow")=""
		if isHTMLTable {
			set %session.Data("beforeItem")=(beforeItem)
			set %session.Data("afterItem")="</TD></TR>"
		} else {
			set %session.Data("beforeItem")=""
			set %session.Data("afterItem")="" 	
		}
		set %session.Data("componentName")=componentName
		set isRepeatedList=paramIsRepeatedList
		set app=##class(sc.objData).applicationPath()
		set pageURL=app_"/system/proweb/tagFree.csp"
		do ##class(cspRealEV.system.proweb.tagfree).OnPageCSPROOT()
		
	} elseif +%session.Get("useExperimentalCMS")=1 {
		do ..outputProwebListRowsExperimental(componentName, pageID, paramIsRepeatedList)
	}
]]></Implementation>
</Method>

<Method name="outputProwebListRowsExperimental">
<ClassMethod>1</ClassMethod>
<FormalSpec>componentName,pageID</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[
	#dim list as sc.CMS.list
	#dim contextDataRegistration as EF.contextDataRegistration = ##class(EF.contextDataRegistration).createFromFrontendCSPSession()
	
	set contextDataRegistration.tempPersonID = $G(%session.Data("eventsforce","frontend","currentPersonID"))
	set contextDataRegistration.prowebMode = $G(%session.Data("mode"))
	set contextDataRegistration.componentName = componentName

	set floatingMenuCounter = %session.Data("floatCount") // ######### needs refactoring ######
	
	set listID = ##class(sc.xModules.objList).getListIDFromPageIDAndComponentName(pageID,componentName)
	set objList = ##class(sc.xModules.objList).%OpenId(listID)
	if '$IsObject(objList) {
		throw ##class(shared.exceptions.generalException).%New("No objList")	
	}
	
	set list = ##class(EF.pageController.proweb.list).createNew(contextDataRegistration)	
	if '$IsObject(list) {
		throw ##class(shared.exceptions.generalException).%New("No list created")
	}	
	do list.populateFromListObject(objList)
	do list.render()
]]></Implementation>
</Method>

<Method name="outputProwebList">
<ClassMethod>1</ClassMethod>
<FormalSpec>componentName,pageID</FormalSpec>
<Implementation><![CDATA[
	&html<<table border=0 cellpadding=0 cellspacing=0 class="black10px" width="100%">>
	do ..outputProwebListRows(componentName,pageID,1)
	&html<</table>>
]]></Implementation>
</Method>

<Method name="isPageBeingEditedOrPreviewed">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	return ##class(shared.pageMethodsFrontend).isPageBeingEditedOrPreviewed()
]]></Implementation>
</Method>

<Method name="beforePageControllerReload">
<Description>
################ these methods shuld be moved to a super class ######################</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pageControllerID</FormalSpec>
</Method>

<Method name="usePageController">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ..#efUsePageController
]]></Implementation>
</Method>

<Method name="getPageDataClassName">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit "EF.pageController.pagesFrontend."_$PIECE($PIECE(..#CSPFILE,"\",$LENGTH(..#CSPFILE,"\")),".",1)
]]></Implementation>
</Method>
</Class>


<Class name="EF.pages.frontend.login">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pages.frontend.login.CLS/EV.0
;vc; Component: CLS.EF.pages.frontend.login
;vc;  Location: SmallDev
;vc; Date/Time: 07-Jun-16 12:39
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pages.frontend.login.CLS/EV.0</td><td>CLS.EF.pages.frontend.login</td><td>SmallDev</td><td style='white-space: nowrap;'>07-Jun-16 12:39</td><td>JeremyW</td></tr></table>
]]></Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<Super>EF.pages.frontend.base</Super>
<TimeChanged>64048,46232</TimeChanged>
<TimeCreated>63631,50108.34822</TimeCreated>

<Method name="renderLoginMainContent">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID,identifier,password,errString</FormalSpec>
<Implementation><![CDATA[
	do ##class(layout.objTemplate).writeBit("{{ef_main_header}}","{{ef_main_content}}")
	&html<
	<table class="ef-registration-section" width="100%" cellpadding="0" cellspacing="0" border="0">
		<tr>
			<td colspan="2">
				#[do ..outputProwebList("TOP LIST",pageID)]#
			</td>
		</tr>
		<tr>
			<td class="redbold12px" colspan="2">#(..encodeForHTML(errString))#</td>
		</tr>
		#[do ..renderLoginDetailsHTML(eventID, identifier, password,xLangID)]#
		<tr>
			<td colspan="2">
				#[do ..outputProwebList("BOTTOM LIST",pageID)]#
			</td>
		</tr>
	</table>
	>
	do ##class(layout.objTemplate).writeBit("{{ef_main_content}}","{{ef_main_buttons}}")
]]></Implementation>
</Method>

<Method name="renderLoginDetailsHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID,identifier,password,xLangID</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[
	set emailOrUsername=##class(setup.objEventSetting).getParameter("system","identifying field",eventID)
	set doNotUseEmail=##class(setup.objEventSetting).getParameter("system","do not use email",eventID)
	
	if doNotUseEmail {
		set labelText=##class(translations.objPhraseWebsite).translatePhrase("Registration Reference",xLangID)
	} elseif emailOrUsername="username" {
		set labelText=##class(translations.objPhraseWebsite).translatePhrase("Username",xLangID)
	} else {
		set labelText=##class(translations.objPhraseWebsite).translatePhrase("Email address",xLangID)
	}
	
	&html<
		<tr>
			<td class="black10px ef_proweb_form_prompt">
				#[do ##class(EF.ui.components.frontend.label).createAndRender("txtEmail-label",labelText,"txtEmail",1,eventID)]#
			</td>
			<td>
				<input type="text" name="txtEmail" id="txtEmail" value="#(..encodeForHTMLAttribute(identifier))#" class="EF_inputBox">
			</td>
		</tr>
		<tr>
			<td class="black10px" colspan="2">&nbsp;</td>
		</tr>
		<tr>
			<td class="black10px ef_proweb_form_prompt">
				#[do ##class(EF.ui.components.frontend.label).createAndRender("txtPassword-label",##class(translations.objPhraseWebsite).translatePhrase("Password",xLangID),"txtPassword",1,eventID)]#
			</td>
			<td class="black10px">
				<input type="password" name="txtPassword" id="txtPassword" value="#(..encodeForHTMLAttribute(password))#" class="EF_inputBox">
			</td>
		</tr>
		<tr>
			<td class="black10px" colspan="2">&nbsp;</td>
		</tr>
		<tr>
			<td class="black10px" colspan="2">
				<a href="javascript: getPassword();" class="redbold12px">#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("Request login details",xLangID)))#</a>
			</td>
		</tr>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.pages.frontend.meetingManager">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pages.frontend.meetingManager.CLS/EV.1
;vc; Component: CLS.EF.pages.frontend.meetingManager
;vc;  Location: SmallDev
;vc; Date/Time: 27-Apr-16 10:23
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pages.frontend.meetingManager.CLS/EV.1</td><td>CLS.EF.pages.frontend.meetingManager</td><td>SmallDev</td><td style='white-space: nowrap;'>27-Apr-16 10:23</td><td>ShahadatH</td></tr></table>
]]></Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<Super>EF.pages.frontend.base</Super>
<TimeChanged>64035,37975.553123</TimeChanged>
<TimeCreated>63631,50108.34822</TimeCreated>

<Method name="OnPreHTTPbefore">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 	set xEventID=$G(%session.Data("eventsforce","frontend","xEventID"))
 	set xLangID=%session.Data("eventsforce","frontend","xLangID")
 	if $G(%session.Data("eventsforce","frontend","xPrefLangID")) set xLangID=%session.Data("eventsforce","frontend","xPrefLangID")
 	// If we haven't got a diaryID log out!!
 	set diaryID=""
 	if '$G(%session.Data("inSitePageEditing")) {
 		set diaryID=##class(EF.security.websiteAccessHandler).getCurrentMeetingManagerDiaryID(xEventID)
 		if 'diaryID {
 			set descriptionModifier=""
 			if xLangID>1 set descriptionModifier=" - "_##class(shared.objLanguage).getLanguageDesc(xLangID)
 			set loginPageID=##class(setup.objEventSetting).getParameter("meeting manager pages","Login PageID"_descriptionModifier,xEventID)
 			set %response.Redirect=..Link("../../system/proweb/start.csp?pageID="_loginPageID_"&logout=1")
 			return 0
 		}
 	}
 	return 1
]]></Implementation>
</Method>
</Class>


<Class name="EF.pages.frontend.meetingManagerUpdateMeeting">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pages.frontend.meetingManagerUpdateMeeting.CLS/EV.0
;vc; Component: CLS.EF.pages.frontend.meetingManagerUpdateMeeting
;vc;  Location: SmallDev
;vc; Date/Time: 07-Jun-16 12:39
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pages.frontend.meetingManagerUpdateMeeting.CLS/EV.0</td><td>CLS.EF.pages.frontend.meetingManagerUpdateMeeting</td><td>SmallDev</td><td style='white-space: nowrap;'>07-Jun-16 12:39</td><td>JeremyW</td></tr></table>
]]></Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<Super>EF.pages.frontend.meetingManager</Super>
<TimeChanged>64048,37149</TimeChanged>
<TimeCreated>64043,59077.158203</TimeCreated>

<Method name="outputMainContents">
<ClassMethod>1</ClassMethod>
<FormalSpec>xEventID,diaryID,meetingID,xLangID</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[
	set personID=##class(meetMan.objDiary).getPersonID(diaryID)
	
	set one2many=##class(setup.objEventSetting).getParameter("meetMan","allowManyAttendees",xEventID)

	set ownerDiaryID=##class(meetMan.objMeeting).getOwnerPersonID(meetingID)
	set ownerName=##class(cod.objItemData).get(ownerDiaryID,"firstname")_" "_##class(cod.objItemData).get(ownerDiaryID,"lastname")
	set company=##class(cod.objItemData).get(ownerDiaryID,"company")
	if $l(company) {
		set ownerName=ownerName_", "_company
	}
	set locationName=##class(meetMan.objMeeting).getLocationName(meetingID,xLangID)
	set locationDetails=##class(meetMan.objMeeting).getLocationDetails(meetingID)
	&html<
		<table width="100%" class="ef-registration-section" border="0" cellspacing="0" cellpadding="0">
			<tr height=40>
				<td class="blackbold12px" colspan=2 align="left">
					#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("Meeting Details:",xLangID)))#
				</td>
			</tr>
			<tr>
				<td class="blackbold10px ef_proweb_form_prompt" width=25% align="left">
					#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("Meeting initiated by:",xLangID)))#
				</td>
				<td class="black10px" align="left">
					#(..encodeForHTML(ownerName))#
				</td>
			</tr>
			<tr>
				<td class="blackbold10px ef_proweb_form_prompt">
					#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("Day:",xLangID)))#
				</td>
				<td class="black10px" align="left">
					#(..encodeForHTML(##class(meetMan.objMeeting).getMeetingDateDesc(meetingID,xEventID,xLangID)))#
				</td>
			</tr>
			<tr>
				<td class="blackbold10px ef_proweb_form_prompt">
					#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("Time:",xLangID)))#
				</td>
				<td class="black10px" align="left">
					#(##class(meetMan.objMeeting).getMeetingTime(meetingID))#
				</td>
			</tr>
	>			
	if $LENGTH(locationName) {
		&html<
			<tr height=40 valign="bottom">
				<td class="blackbold10px ef_proweb_form_prompt" align="left">#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("Location:",xLangID)))#</td>
				<td class="blackbold10px">
					#(..encodeForHTML(locationName))#
				</td>
			</tr>
			>
	}
	if $LENGTH(locationDetails) {
		&html<
		<tr height=40>
			<td height=40 class="blackbold10px ef_proweb_form_prompt">
				#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("Location details:",xLangID)))#
			</td>
			<td class="blackbold10px">
				<textarea class="black10px EF_inputBox" rows="3" cols="96" readonly name="txtMeetingLocationRO">#(..encodeHTMLContentForTextarea(locationDetails))#</textarea>
			</td>
		</tr>
		>
	}
	set showMessage='##class(setup.objEventSetting).getParameter("meetMan","supress messages in meeting requests",xEventID)
	
	if showMessage {
		set show='one2many
		if (show) {
			&html<
			<tr height=40>
				<td class="blackbold10px ef_proweb_form_prompt">
					#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("Message:",xLangID)))#
				</td>
				<td>
					<textarea class="black10px EF_inputBox" rows="3" cols="96" readonly name="txtNotesRO">#(##class(meetMan.objMeetingItemData).getLatestData(meetingID,"notes"))#</textarea>
				</td>
			</tr>
			>
		}
		&html<
		<tr height=40>
			<td class="blackbold10px ef_proweb_form_prompt">
				#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("Your message:",xLangID)))#
			</td>
			<td>
				<textarea class="black10px EF_inputBox" rows="3" cols="96" name="txtNotes"></textarea>
			</td>
		</tr>
		<input type="hidden" name="meetingID" value="#(meetingID)#">
		>
	}
	&html<</table>>
]]></Implementation>
</Method>

<Method name="outputEmailCheckbox">
<ClassMethod>1</ClassMethod>
<FormalSpec>xEventID,xLangID</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[
	set show=0
	if ##class(setup.objEventSetting).getParameter("meetMan","optional emails",xEventID) {
		if $G(%session.Data("eventsforce","frontend","backendBooking")) set show=1
	}
	if show {
		&html<
			<table width="100%" class="ef-registration-section" border="0" cellspacing="0" cellpadding="0">
				<tr valign="top">
					<td class="black10px ef_proweb_form_prompt" align="left">
						#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("Send confirmation emails:",xLangID)))#
						<br/><span class="blackbold10px">#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("(No emails will be sent unless this is ticked)",xLangID)))#</span>
					</td>
					<td align="left">
						<input type="checkbox" name="chkSendEmailToDelegate" value=1>
					</td>
				</tr>
			</table>
			<hr class="separatorLine">
		>
	} else {
		&html<<input type="hidden" name="chkSendEmailToDelegate" value=1>>
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.pages.frontend.registrationProcess">
<Description><![CDATA[
class that all pages in the registration process should inherit from
<!-- ;vc;
;vc;    Object: EF.pages.frontend.registrationProcess.CLS/EV.3
;vc; Component: CLS.EF.pages.frontend.registrationProcess
;vc;  Location: SmallDev
;vc; Date/Time: 07-Jun-16 12:39
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pages.frontend.registrationProcess.CLS/EV.3</td><td>CLS.EF.pages.frontend.registrationProcess</td><td>SmallDev</td><td style='white-space: nowrap;'>07-Jun-16 12:39</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.pages.frontend.base</Super>
<TimeChanged>64176,59794.821916</TimeChanged>
<TimeCreated>63631,50108.34822</TimeCreated>

<Parameter name="efUsePageController">
<Type>%Boolean</Type>
<Default>1</Default>
</Parameter>

<Method name="verifyValidPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Library.Boolean</ReturnType>
<Implementation><![CDATA[
	if (##class(eCom.tempPurchase).isThereAValidTempPurchaseInSession(%session.SessionId)) ! (%session.Get("mode")="edit") {
		return 1
	} else {
		set hdate=+$ZTS,htime=$P($ZTS,",",2)  
		set ^xPage(hdate,%session.SessionId,htime,$I(^xPage(hdate,%session.SessionId,htime)))="Redirected to 'registerNew.csp' from 'EF.pages.frontend.standard' due to invalid tempPurchase"
	 	set %response.Redirect="registerNew.csp"
	 	quit 0
 	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.pages.paymentPortal.redirectToPaymentPortal">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.pages.paymentPortal.redirectToPaymentPortal.CLS/EV.0
;vc; Component: CLS.EF.pages.paymentPortal.redirectToPaymentPortal
;vc;  Location: SmallDev
;vc; Date/Time: 06-Feb-15 15:13
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pages.paymentPortal.redirectToPaymentPortal.CLS/EV.0</td><td>CLS.EF.pages.paymentPortal.redirectToPaymentPortal</td><td>SmallDev</td><td style='white-space: nowrap;'>06-Feb-15 15:13</td><td>AdrianM</td></tr></table>
]]></Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<Super>shared.pCSPmanage</Super>
<TimeChanged>63474,58387</TimeChanged>
<TimeCreated>63474,58387.274529</TimeCreated>

<Parameter name="ENCODED">
<Default>1</Default>
</Parameter>

<Parameter name="PRIVATE">
<Default>1</Default>
</Parameter>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	Do ..OnPageCSPROOT()
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnPageCSPROOT">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set sessionID=%session.SessionId
	set xEventID=$G(%session.Data("eventsforce","frontend","xEventID"))
	w ##class(shared.pageMethods).outputFrontendHeader()
	&html<<head>
			#[do ##class(layout.objTemplate).writeBit("","{{ef_header}}")]#
			#[Do ..Include("frontendHTTPheader.csp")]#
			#[Do ..Include("colourScheme.csp")]#
		</head>
		<body class="bodyBackground" onLoad="document.forms[0].submit()">
	>
	do ##class(layout.objTemplate).writeBit("{{ef_header}}","{{ef_banner}}")
	do ##class(layout.objTemplate).writeBit("{{ef_banner}}","{{ef_main_progress}}")
	do ##class(layout.objTemplate).writeBit("{{ef_main_progress}}","{{ef_main_header}}")
	do ..OnPageRedirectionMessage()
	do ##class(layout.objTemplate).writeBit("{{ef_main_header}}","{{ef_main_content}}")
	
	do ..OnPageMainForm()
	
	do ##class(layout.objTemplate).writeBit("{{ef_main_content}}","{{ef_main_buttons}}")
	do ##class(layout.objTemplate).writeBit("{ef_main_buttons}}","{{ef_footer}}")
	do ##class(layout.objTemplate).writeBit("{{ef_footer}}","")
	
	&html<
		</body>
		</html>
	>
]]></Implementation>
</Method>

<Method name="OnPageRedirectionMessage">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	w ..out("Please wait while you are redirected to the payment system")
]]></Implementation>
</Method>

<Method name="OnPageMainForm">
<ClassMethod>1</ClassMethod>
</Method>
</Class>


<Class name="EF.pages.paymentPortal.responseFromPaymentPortal">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.pages.paymentPortal.responseFromPaymentPortal.CLS/EV.1
;vc; Component: CLS.EF.pages.paymentPortal.responseFromPaymentPortal
;vc;  Location: SmallDev
;vc; Date/Time: 20-May-16 11:39
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.pages.paymentPortal.responseFromPaymentPortal.CLS/EV.1</td><td>CLS.EF.pages.paymentPortal.responseFromPaymentPortal</td><td>SmallDev</td><td style='white-space: nowrap;'>20-May-16 11:39</td><td>AdrianM2</td></tr></table>
]]></Description>
<Language>cache</Language>
<ProcedureBlock>0</ProcedureBlock>
<Super>shared.pCSPmanage</Super>
<TimeChanged>64057,62116</TimeChanged>
<TimeCreated>63448,44159.440797</TimeCreated>

<Parameter name="ENCODED">
<Default>0</Default>
</Parameter>

<Parameter name="PRIVATE">
<Default>0</Default>
</Parameter>

<Parameter name="paymentPortalPackageName">
</Parameter>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	Do ..OnPageCSPROOT()
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnPreHTTPbefore">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	// THIS IS CALLED COMPLETELY INDEPENDENTLY FROM THE EVENTSFORCE FRONTEND PAGE FLOW
	// - PayPal Payflow posts directly to this page - and expects a 200 response back otherwise the transaction on their side will get rejected
	set transactionClassName=..getTransactionClassName()
	set transactionID="",errString=""
	set showError=1
	try {
		do $ClassMethod(transactionClassName,"verifyAndSaveResponse",%request,.objTransaction)
		if $IsObject(objTransaction) {
			do objTransaction.processResponse()
			set showError=0
		}
		
	} catch objExc {
		if objExc.%IsA("shared.exceptions.generalException") {
			do ##class(EF.errors.loggingMethods).logException(objExc,%request.PageName)
			set errString=objExc.Name
		} else {
			set errString="UNEXPECTED ERROR: "_objExc.DisplayString()
			do ##class(EF.errors.loggingMethods).logCaughtError(errString,%request.PageName)
			set errString="Unexpected error, please retry."
		}
	}
	
	quit showError
]]></Implementation>
</Method>

<Method name="OnPageCSPROOT">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	if '$l($g(errString)) set errString="Unexpected error, please retry"
	&html<
		<html>
			<body>
				#(errString)#
			</body>
		</html>
	>
]]></Implementation>
</Method>

<Method name="getTransactionClassName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..#paymentPortalPackageName_".objTransaction"
]]></Implementation>
</Method>
</Class>


<Class name="EF.sanitiser">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.sanitiser.CLS/EV.3
;vc; Component: CLS.EF.sanitiser
;vc;  Location: SmallDev
;vc; Date/Time: 05-Jul-16 10:17
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.sanitiser.CLS/EV.3</td><td>CLS.EF.sanitiser</td><td>SmallDev</td><td style='white-space: nowrap;'>05-Jul-16 10:17</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64106,40033.544</TimeChanged>
<TimeCreated>63999,38615.562112</TimeCreated>

<Method name="sanitise">
<ClassMethod>1</ClassMethod>
<FormalSpec>data:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set data = ##class(shared.stringFunctions).stripDisallowedControlCharacters(data)
	return data
]]></Implementation>
</Method>

<Method name="removeWhiteSpace">
<ClassMethod>1</ClassMethod>
<FormalSpec>input:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return $ZStrip(input,"<>W") // strips out leading and trailing spaces
]]></Implementation>
</Method>

<Method name="removeRepeatedWhiteSpace">
<ClassMethod>1</ClassMethod>
<FormalSpec>input:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return $ZStrip(input,"<=>W") // strips out leading, trailing and repeated spaces
]]></Implementation>
</Method>

<Method name="getSanitisedSubmittedValue">
<ClassMethod>1</ClassMethod>
<FormalSpec>HTMLelementName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set submittedValue = %request.Get(HTMLelementName)
	return ..sanitise(submittedValue)
]]></Implementation>
</Method>

<Method name="sanitiseHTML">
<Description>
sanitise HTML
type = frontendAbstract (case insensitive) or blank (uses default config) - controls the configuration and whitelist</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>data:%String,type:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set inDataStream=##class(%Stream.GlobalCharacter).%New()
	do inDataStream.Write(data)
	set outputDataStream=##class(%Stream.GlobalCharacter).%New()

	try {
		set outputDataStream=##class(EF.lib.jsxss).sanitise(inDataStream,type)
	} catch objExc {
		// for now, if we crash, use the original input stream - or perhaps fall back to the strip all HTML method we have? Or escape all?
		do outputDataStream.CopyFrom(inDataStream)

 		if objExc.%IsA("shared.exceptions.generalException") {
 			set errString=objExc.Name
 		} else {
 			set errString="UNEXPECTED ERROR: "_objExc.DisplayString()
 		}
		do ##class(EF.errors.loggingMethods).logException(objExc,"EF.sanitiser:sanitiseHTML")

	}
	do outputDataStream.Rewind()
	set outputString=outputDataStream.Read(outputDataStream.Size)
	return outputString
]]></Implementation>
</Method>
</Class>


<Class name="EF.sanitiserTestCase">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.sanitiserTestCase.CLS/EV.3
;vc; Component: CLS.EF.sanitiserTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.sanitiserTestCase.CLS/EV.3</td><td>CLS.EF.sanitiserTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>64127,61080</TimeChanged>
<TimeCreated>63999,39359.840438</TimeCreated>

<Parameter name="isIntegrationTest">
<Type>%Boolean</Type>
<Default>1</Default>
</Parameter>

<Method name="TestSanitation">
<Implementation><![CDATA[
	#dim string = "fish and finger"
	#dim stringWithWhiteSpace = "  fish  "
	#dim stringWithBell = "fish"_$Char(7)_"finger"
	#dim stringWithCRLF = "fish"_$Char(13,10)_"finger"
	#dim stringWithCR = "fish"_$Char(13)_"finger"
	#dim stringWithLF = "fish"_$Char(10)_"finger"
	#dim stringWithLFCR = "fish"_$Char(10,13)_"finger"
	#dim stringWithTab = "fish"_$Char(9)_"finger"
	
	do $$$AssertEquals(##class(EF.sanitiser).sanitise(string),string)
	do $$$AssertEquals(##class(EF.sanitiser).removeWhiteSpace(stringWithWhiteSpace),"fish")
	do $$$AssertEquals(##class(EF.sanitiser).sanitise(stringWithBell),"fishfinger")
	do $$$AssertEquals(##class(EF.sanitiser).sanitise(stringWithCRLF),stringWithCRLF)
	do $$$AssertEquals(##class(EF.sanitiser).sanitise(stringWithCR),stringWithCR)
	do $$$AssertEquals(##class(EF.sanitiser).sanitise(stringWithLFCR),stringWithLFCR)
	do $$$AssertEquals(##class(EF.sanitiser).sanitise(stringWithTab),"fishfinger")
]]></Implementation>
</Method>

<Method name="TestSanitisationHTML">
<Implementation><![CDATA[
	#dim format="frontendabstract"
	set index=0
	
	set inputHTML($I(index))= "<script>alert('XSS');</script>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG src=\""dkldlk\"" onClick=\""alert('XSS');\"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG SRC=\""jav    ascript:alert('XSS');\"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG SRC=&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#39;&#88;&#83;&#83;&#39;&#41;>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG SRC=JaVaScRiPt:alert('XSS')>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<a onmouseover=\""alert(document.cookie)\"">xxs link</a>"
	set outputHTML(index)= "xxs link"

	set inputHTML($I(index))= "<STYLE type=\""text/css\"">BODY{background:url(\""javascript:alert('XSS')\"")}</STYLE>"
	set outputHTML(index)= ""

	set inputHTML($I(index))= "<IFRAME SRC=\""javascript:alert('XSS');\""></IFRAME>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<DIV STYLE=\""background-image:\0075\0072\006C\0028'\006a\0061\0076\0061\0073\0063\0072\0069\0070\0074\003a\0061\006c\0065\0072\0074\0028.1027\0058.1053\0053\0027\0029'\0029\"">"
	set outputHTML(index)= "<div style>"
	
	set inputHTML($I(index))= "<!--[if gte IE 4]> <SCRIPT>alert('XSS');</SCRIPT> <![endif]-->"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<A HREF=\""http://66.102.7.147/\"">XSS</A>"
	set outputHTML(index)= "XSS"
	
	set inputHTML($I(index))= "<A HREF=\""http://1113982867/\"">XSS</A>"	
	set outputHTML(index)= "XSS"

	set inputHTML($I(index))= "<BODY ONLOAD=alert('XSS')>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<svg/onload=alert('XSS')>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG SRC=""livescript:[code]"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG SRC='vbscript:msgbox(""XSS"")'>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<STYLE>li {list-style-image: url(""javascript:alert('XSS')"");}</STYLE><UL><LI>XSS</br>"
	set outputHTML(index)= "<ul><li>XSS</br>"
	
	set inputHTML($I(index))= "<IMG LOWSRC=""javascript:alert('XSS')"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG DYNSRC=""javascript:alert('XSS')"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<BODY BACKGROUND=""javascript:alert('XSS')"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<INPUT TYPE=""IMAGE"" SRC=""javascript:alert('XSS');"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "</TITLE><SCRIPT>alert(""XSS"");</SCRIPT>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<SCRIPT>var a=""\\"";alert('XSS');//"";</SCRIPT><script>alert('XSS');</script>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<iframe src=http://xss.rocks/scriptlet.html <"
	set outputHTML(index)= "&lt;iframe src=http://xss.rocks/scriptlet.html &lt;"
	
	set inputHTML($I(index))= "<IMG SRC=""javascript:alert('XSS')"""
	set outputHTML(index)= "&lt;IMG SRC=""javascript:alert('XSS')"""
	
	set inputHTML($I(index))= "<SCRIPT SRC=//xss.rocks/.j>"
	set outputHTML(index)= "[removed]"
	
	set inputHTML($I(index))= "<SCRIPT SRC=http://xss.rocks/xss.js?< B >"
	set outputHTML(index)= "&lt;SCRIPT SRC=http://xss.rocks/xss.js?"
	
	set inputHTML($I(index))= "<<SCRIPT>alert(""XSS"");//<</SCRIPT>"
	set outputHTML(index)= "&lt;"
	
	set inputHTML($I(index))= "<SCRIPT/SRC=""http://xss.rocks/xss.js""></SCRIPT>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<BODY onload!#$%&()*~+-_.,:;?@[/|\]^`=alert(""XSS"")>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<SCRIPT/XSS SRC=""http://xss.rocks/xss.js""></SCRIPT>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG SRC="" &#14;  javascript:alert('XSS');"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "perl -e 'print ""<IMG SRC=java\0script:alert(\""XSS\"")>"";' > out"
	set outputHTML(index)= "perl -e 'print """";' &gt; out"
	
	set inputHTML($I(index))= "<IMG SRC=""jav&#x0D;ascript:alert('XSS');"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG SRC=""jav&#x0A;ascript:alert('XSS');"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG SRC=""jav&#x09;ascript:alert('XSS');"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG SRC=""jav	ascript:alert('XSS');"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG SRC=&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG SRC=&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<img src=x onerror=""&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG SRC=/ onerror=""alert(String.fromCharCode(88,83,83))""></img>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG onmouseover=""alert('xxs')"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG SRC= onmouseover=""alert('xxs')"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG SRC=# onmouseover=""alert('xxs')"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG SRC=javascript:alert(String.fromCharCode(88,83,83))>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG """"""><SCRIPT>alert(""XSS"")</SCRIPT>"">"
	set outputHTML(index)= """&gt;"
	
	set inputHTML($I(index))= "<a onmouseover=""alert(document.cookie)"">xxs link</a> "
	set outputHTML(index)= "xxs link "

	set inputHTML($I(index))= "<a onmouseover=alert(document.cookie)>xxs link</a> "
	set outputHTML(index)= "xxs link "
	
	set inputHTML($I(index))= "<IMG SRC=`javascript:alert(""RSnake says, 'XSS'"")`>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG SRC=javascript:alert(""XSS"")>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG SRC=javascript:alert('XSS')>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG SRC=""javascript:alert('XSS');"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "'"">><marquee><img src=x onerror=confirm(1)></marquee>""></plaintext\></|\><plaintext/onmouseover=prompt(1)><script>prompt(1)</script>@gmail.com<isindex formaction=javascript:alert(/XSS/) type=submit>'-->""></script><script>alert(document.cookie)</script>""><img/id=""confirm&lpar;1)""/alt=""/""src=""/""onerror=eval(id)>'""><img src=""http://www.shellypalmer.com/wp-content/images/2015/07/hacked-compressor.jpg"">"
	set outputHTML(index)= "'""&gt;&gt;""&gt;@gmail.com'--&gt;""&gt;""&gt;'""&gt;"
	
	set inputHTML($I(index))= "<SCRIPT SRC=http://xss.rocks/xss.js></SCRIPT>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "'';!--""<XSS>=&{()}"
	set outputHTML(index)= "'';!--""=&{()}"
	
	set inputHTML($I(index))= "';alert(String.fromCharCode(88,83,83))//';alert(String.fromCharCode(88,83,83))//"";alert(String.fromCharCode(88,83,83))//"";alert(String.fromCharCode(88,83,83))//--></SCRIPT>"">'><SCRIPT>alert(String.fromCharCode(88,83,83))</SCRIPT>"
	set outputHTML(index)= "';alert(String.fromCharCode(88,83,83))//';alert(String.fromCharCode(88,83,83))//"";alert(String.fromCharCode(88,83,83))//"";alert(String.fromCharCode(88,83,83))//--&gt;""&gt;'&gt;"
	
	set inputHTML($I(index))= "<BGSOUND SRC=""javascript:alert('XSS');"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<BR SIZE=""&{alert('XSS')}"">"
	set outputHTML(index)= "<br>"
	
	set inputHTML($I(index))= "<LINK REL=""stylesheet"" HREF=""javascript:alert('XSS');"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<LINK REL=""stylesheet"" HREF=""http://xss.rocks/xss.css"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<STYLE>@import'http://xss.rocks/xss.css';</STYLE>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<META HTTP-EQUIV=""Link"" Content=""<http://xss.rocks/xss.css>; REL=stylesheet"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<STYLE>BODY{-moz-binding:url(""http://xss.rocks/xssmoz.xml#xss"")}</STYLE>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IMG STYLE=""xss:expr/*XSS*/ession(alert('XSS'))"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "exp/*<A STYLE='no\xss:noxss(""*//*"");"
	set outputHTML(index)= "exp/*&lt;A STYLE='no\xss:noxss(""*//*"");"
	
	set inputHTML($I(index))= "xss:ex/*XSS*//*/*/pression(alert(""XSS""))'>"
	set outputHTML(index)= "xss:ex/*XSS*//*/*/pression(alert(""XSS""))'&gt;"
	
	set inputHTML($I(index))= "<STYLE TYPE=""text/javascript"">alert('XSS');</STYLE>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<STYLE>.XSS{background-image:url(""javascript:alert('XSS')"");}</STYLE><A CLASS=XSS></A>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<STYLE type=""text/css"">BODY{background:url(""javascript:alert('XSS')"")}</STYLE>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<XSS STYLE=""xss:expression(alert('XSS'))"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<XSS STYLE=""behavior: url(xss.htc);"">"
	set outputHTML(index)= ""

	set inputHTML($I(index))= "<META HTTP-EQUIV=""refresh"" CONTENT=""0;url=javascript:alert('XSS');"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<META HTTP-EQUIV=""refresh"" CONTENT=""0;url=data:text/html base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<META HTTP-EQUIV=""refresh"" CONTENT=""0; URL=http://;URL=javascript:alert('XSS');"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IFRAME SRC=""javascript:alert('XSS');""></IFRAME>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<IFRAME SRC=# onmouseover=""alert(document.cookie)""></IFRAME>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<FRAMESET><FRAME SRC=""javascript:alert('XSS');""></FRAMESET>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<TABLE BACKGROUND=""javascript:alert('XSS')"">"
	set outputHTML(index)= "<table background>"
	
	set inputHTML($I(index))= "<TABLE><TD BACKGROUND=""javascript:alert('XSS')"">"
	set outputHTML(index)= "<table><td background>"
	
	set inputHTML($I(index))= "<DIV STYLE=""background-image: url(javascript:alert('XSS'))"">"
	set outputHTML(index)= "<div style>"

	set inputHTML($I(index))= "<DIV STYLE=""background-image: url(&#1;javascript:alert('XSS'))"">"
	set outputHTML(index)= "<div style>"
	
	set inputHTML($I(index))= "<DIV STYLE=""width: expression(alert('XSS'));"">"
	set outputHTML(index)= "<div style>"
	
	set inputHTML($I(index))= "<!--[if gte IE 4]> <SCRIPT>alert('XSS');</SCRIPT> <![endif]-->"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<BASE HREF=""javascript:alert('XSS');//"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<OBJECT TYPE=""text/x-scriptlet"" DATA=""http://xss.rocks/scriptlet.html""></OBJECT>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<SCRIPT SRC=""http://xss.rocks/xss.jpg""></SCRIPT>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<!--#exec cmd=""/bin/echo '<SCR'""--><!--#exec cmd=""/bin/echo 'IPT SRC=http://xss.rocks/xss.js></SCRIPT>'""-->"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<HEAD><META HTTP-EQUIV=""CONTENT-TYPE"" CONTENT=""text/html; charset=UTF-7""> </HEAD>+ADw-SCRIPT+AD4-alert('XSS');+ADw-/SCRIPT+AD4-"
	set outputHTML(index)= " +ADw-SCRIPT+AD4-alert('XSS');+ADw-/SCRIPT+AD4-"
	
	set inputHTML($I(index))= "<SCRIPT a="">"" SRC=""httx://xss.rocks/xss.js""></SCRIPT>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<SCRIPT ="">"" SRC=""httx://xss.rocks/xss.js""></SCRIPT>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<SCRIPT a="">"" '' SRC=""httx://xss.rocks/xss.js""></SCRIPT>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<SCRIPT ""a='>'"" SRC=""httx://xss.rocks/xss.js""></SCRIPT>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<SCRIPT a=`>` SRC=""httx://xss.rocks/xss.js""></SCRIPT>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<SCRIPT a="">'>"" SRC=""httx://xss.rocks/xss.js""></SCRIPT>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<SCRIPT>document.write(""<SCRI"");</SCRIPT>PT SRC=""httx://xss.rocks/xss.js""></SCRIPT>"
	set outputHTML(index)= "PT SRC=""httx://xss.rocks/xss.js""&gt;"
	
	set inputHTML($I(index))= "<A HREF=""http://66.102.7.147/"">XSS</A>"
	set outputHTML(index)= "XSS"
	
	set inputHTML($I(index))= "<A HREF=""http://%77%77%77%2E%67%6F%6F%67%6C%65%2E%63%6F%6D"">XSS</A>"
	set outputHTML(index)= "XSS"
	
	set inputHTML($I(index))= "<A HREF=""http://1113982867/"">XSS</A>"
	set outputHTML(index)= "XSS"
	
	set inputHTML($I(index))= "<A HREF=""http://0x42.0x0000066.0x7.0x93/"">XSS</A>"
	set outputHTML(index)= "XSS"
	
	set inputHTML($I(index))= "<A HREF=""http://0102.0146.0007.00000223/"">XSS</A>"
	set outputHTML(index)= "XSS"
	
	set inputHTML($I(index))= "<A HREF=""h"_$CHAR(13)_"tt	p://6	6.000146.0x7.147/"">XSS</A>"
	set outputHTML(index)= "XSS"
	
	set inputHTML($I(index))= "<A HREF=""//www.google.com/"">XSS</A>"
	set outputHTML(index)= "XSS"
	
	set inputHTML($I(index))= "<A HREF=""//google"">XSS</A>"
	set outputHTML(index)= "XSS"
	
	set inputHTML($I(index))= "<A HREF=""http://ha.ckers.org@google"">XSS</A>"
	set outputHTML(index)= "XSS"
	
	set inputHTML($I(index))= "<A HREF=""http://google:ha.ckers.org"">XSS</A>"
	set outputHTML(index)= "XSS"
	
	set inputHTML($I(index))= "<A HREF=""javascript:document.location='http://www.google.com/'"">XSS</A>"
	set outputHTML(index)= "XSS"
	
	set inputHTML($I(index))= "<Img src = x onerror = ""javascript: window.onerror = alert; throw XSS"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<Video> <source onerror = ""javascript: alert (XSS)"">"
	set outputHTML(index)= " "
	
	set inputHTML($I(index))= "<Input value = ""XSS"" type = text>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<applet code=""javascript:confirm(document.cookie);"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<isindex x=""javascript:"" onmouseover=""alert(XSS)"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= """><img src=""x:x"" onerror=""alert(XSS)"">"
	set outputHTML(index)= """&gt;"
	
	set inputHTML($I(index))= """><iframe src=""javascript:alert(XSS)"">"
	set outputHTML(index)= """&gt;"
	
	set inputHTML($I(index))= "<object data=""javascript:alert(XSS)"">"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<isindex type=image src=1 onerror=alert(XSS)>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<img src=x:alert(alt) onerror=eval(src) alt=0>"
	set outputHTML(index)= ""
	
	set inputHTML($I(index))= "<img  src=""x:gif"" onerror=""window['al\u0065rt'](0)""></img>"
	set outputHTML(index)= ""
	
	set index=""
	for {
		set index=$ORDER(inputHTML(index))
		if index="" quit
		do $$$AssertEquals(##class(EF.sanitiser).sanitiseHTML(inputHTML(index),format),outputHTML(index))	
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.security.JWT">
<Description><![CDATA[
note this is not a full JWT implementation, just what was required to get Zendesk to work
Some references:
   http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html
   http://tools.ietf.org/html/draft-jones-json-web-token-10
<!-- ;vc;
;vc;    Object: EF.security.JWT.CLS/EV.2
;vc; Component: CLS.EF.security.JWT
;vc;  Location: SmallDev
;vc; Date/Time: 17-Apr-15 16:42
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.security.JWT.CLS/EV.2</td><td>CLS.EF.security.JWT</td><td>SmallDev</td><td style='white-space: nowrap;'>17-Apr-15 16:42</td><td>AdrianM</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63635,39051</TimeChanged>
<TimeCreated>63039,39923.6788</TimeCreated>

<Method name="testJWT">
<Description>
used to test the JWT method still works OK. This test is completely unrelated to zendesk. </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	/*
	{
		"iss":"joe",
		"exp":1300819380,
		"http://example.com/is_root":true
	}
	*/
	set payload(1)=$LB("iss","joe")
	set payload(2)=$LB("exp","1300819380")
	set payload(3)=$LB("http://example.com/is_root","true")
	
	set myJWT=..encode(.payload,"example","HS256")
	set passed=0
	if myJWT="eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJqb2UiLCJleHAiOiIxMzAwODE5MzgwIiwiaHR0cDpcL1wvZXhhbXBsZS5jb21cL2lzX3Jvb3QiOiJ0cnVlIn0.VNLhPXUBJgtOvKfaaoL42rBJPK6vd0oc8-oGDKiuPcw" set passed=1
	
	quit passed
]]></Implementation>
</Method>

<Method name="encode">
<Description>
payload = numeric array ordered so that json outputs in that order. Data value = $LIST of name value pair, eg $LB("name","value")
key = the key used to sign the token
algorithm = HS256 == HMAC SHA256 - the only allowed one at present - can be added to
returns a JSON Web Token</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&payload,key,algorithm="HS256"]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//set algorithm="SDS"
	set header(1)=$LB("typ","JWT")
	set header(2)=$LB("alg",algorithm)
	set headerJSON=..createFlatJSON(.header)
	set headerJSONUrlSafeB64=..urlSafeB64Encode(headerJSON)
	set payloadJSON=..createFlatJSON(.payload)
	set payloadJSONUrlSafeB64=..urlSafeB64Encode($ZCONVERT(payloadJSON,"O","UTF8"))  // sometimes does not work with UTF-8 unless this is done (eg with $C(237))
	
	set signingInput=headerJSONUrlSafeB64_"."_payloadJSONUrlSafeB64
	set signature=..sign(signingInput,key,algorithm)
	set signatureUrlSafeB64=..urlSafeB64Encode(signature)
	
	set signedJWT=headerJSONUrlSafeB64_"."_payloadJSONUrlSafeB64_"."_signatureUrlSafeB64
	quit signedJWT
	// copied from this PHP version from Zendesk:
	
    /**
     * Converts and signs a PHP object or array into a JWT string.
     *
     * @param object|array $payload PHP object or array
     * @param string       $key     The secret key
     * @param string       $algo    The signing algorithm. Supported
     *                              algorithms are 'HS256', 'HS384' and 'HS512'
     *
     * @return string      A signed JWT
     * @uses jsonEncode
     * @uses urlsafeB64Encode
    public static function encode($payload, $key, $algo = 'HS256')
    {
        $header = array('typ' => 'JWT', 'alg' => $algo);
        $segments = array();
        $segments[] = JWT::urlsafeB64Encode(JWT::jsonEncode($header));
        $segments[] = JWT::urlsafeB64Encode(JWT::jsonEncode($payload));
        $signing_input = implode('.', $segments);
        $signature = JWT::sign($signing_input, $key, $algo);
        $segments[] = JWT::urlsafeB64Encode($signature);
        return implode('.', $segments);
    }
    
    */
]]></Implementation>
</Method>

<Method name="sign">
<Description>
sign the message using an allowed algorithm - or return plaintext</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>msg,key,algorithm</FormalSpec>
<Implementation><![CDATA[
	set out=""
	if algorithm="HS256"	{
		set hash=$SYSTEM.Encryption.HMACSHA(256,msg,key)
		set out=hash
	} else {
		set out=msg
	}
	quit out
]]></Implementation>
</Method>

<Method name="createFlatJSON">
<Description>
simple method to create small json string from single level array - all data is treated as strings
example array:
    payload(1)=$LB("iss","joe")
    payload(2)=$LB("exp","1300819380")
    payload(3)=$LB("http://example.com/is_root","true")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&array]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set dq=""""
	set i=""
	for  {
		set i=$O(array(i))
		if i="" quit
		if $L(out) set out=out_","
		set name=$LG(array(i),1)
		set value=$LG(array(i),2)
		set out=out_dq_##class(shared.jsonFunctions).jsonEscape(name)_dq
		set out=out_":"
		set out=out_dq_##class(shared.jsonFunctions).jsonEscape(value)_dq
	}
	set out="{"_out_"}"
	quit out
]]></Implementation>
</Method>

<Method name="urlSafeB64Encode">
<Description>
Encode a string with URL-safe Base64</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str</FormalSpec>
<Implementation><![CDATA[
	//copied from PHP: return str_replace('=', '', strtr(base64_encode($input), '+/', '-_'));
	set str=##class(%SYSTEM.Encryption).Base64Encode(str)
	set str=$TR(str,"+/","-_")
	set str=$TR(str,"=","")
	set str=$TR(str,$C(10,13),"")  // seems that the Base64Encode leaves CRLFs in the string
	quit str
]]></Implementation>
</Method>
</Class>


<Class name="EF.security.authenticationBackend">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.security.authenticationBackend.CLS/EV.1
;vc; Component: CLS.EF.security.authenticationBackend
;vc;  Location: SmallDev
;vc; Date/Time: 13-Feb-15 15:19
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.security.authenticationBackend.CLS/EV.1</td><td>CLS.EF.security.authenticationBackend</td><td>SmallDev</td><td style='white-space: nowrap;'>13-Feb-15 15:19</td><td>RajibQ</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63596,55162.114458</TimeChanged>
<TimeCreated>63249,39822.855792</TimeCreated>

<Method name="userCanLoginWithGoogleOpenID">
<Description>
can this email login with GoogleOpenID</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>email</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set ret=0
	if ##class(EF.security.backendEFuserConfig).userMustBeEFUser(email) set ret=1
	quit ret
]]></Implementation>
</Method>

<Method name="getAllowedTypes">
<Description>
create a list of allowed SSO types that a user can use</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[email,&allowedSSOtypes]]></FormalSpec>
<Implementation><![CDATA[
	kill types
	if ##class(EF.security.backendEFuserConfig).userMustBeEFUser(email)	{
		set allowedSSOtypes("OPENIDGOOGLE")=""
		set allowedSSOtypes("GOOGLEPLUS")=""
	} else {
		// all users can use SAML2 (if setup) and NORMAL (= username and password)
		if ##class(setup.webSSOmethods).isWebSSOAllowedForBackend() set allowedSSOtypes("SAML2")=""
		set allowedSSOtypes("NORMAL")=""
	}
	quit
]]></Implementation>
</Method>

<Method name="checkTypeAllowedForUser">
<ClassMethod>1</ClassMethod>
<FormalSpec>email,type</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set allowed=0
	do ..getAllowedTypes(email,.allowedTypes)
	if $L(type)	{
		set type=$ZCVT(type,"U")
		if $D(allowedTypes(type)) set allowed=1
	}
	quit allowed
]]></Implementation>
</Method>

<Method name="getSSOTypeFromSession">
<Description>
requires %session.Data("eventsforce","backend","Web SSO SAML2","GUID")</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set GUID=$G(%session.Data("eventsforce","backend","Web SSO SAML2","GUID"))
	set ssoType=##class(setup.objWebSSOattempt).getTypeFromGUID(GUID)
	quit ssoType
]]></Implementation>
</Method>

<Method name="checkSSOTypeAllowedForUserFromSession">
<Description>
requires %session.Data("eventsforce","backend","Web SSO SAML2","GUID")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>email</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set GUID=$G(%session.Data("eventsforce","backend","Web SSO SAML2","GUID"))
	quit ..checkSSOTypeAllowedForUser(email,GUID)
]]></Implementation>
</Method>

<Method name="getLoginPage">
<ClassMethod>1</ClassMethod>
<FormalSpec>personID</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set page="login.htm"
	if personID	{
		set email=##class(cod.objItemData).get(personID,"email",,0)
		if $L(email) {
			if ##class(EF.security.backendEFuserConfig).userMustBeEFUser(email) set page="efSupportLogin.htm"
		}
	}
	quit page
]]></Implementation>
</Method>
</Class>


<Class name="EF.security.authorisationBackend">
<Abstract>1</Abstract>
<TimeChanged>63251,39971.123893</TimeChanged>
<TimeCreated>63249,40212.646952</TimeCreated>

<Method name="isAuthorisedForNamespace">
<ClassMethod>1</ClassMethod>
<FormalSpec>email</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if $L(email)=0 quit 0

	set userAuthorised=0
	set isActiveEFuser=0

	if ##class(admin.objUser).activeRegularUser(email) set userAuthorised=1
	
	if 'userAuthorised {
		if ##class(admin.objUser).allowedEFuser(email)	{
			set isActiveEFuser=##class(admin.objUser).activateAndCheckEFuser(email)
			if isActiveEFuser set userAuthorised=1
		}
	}
	
	quit userAuthorised
]]></Implementation>
</Method>
</Class>


<Class name="EF.security.backendEFuserConfig">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.security.backendEFuserConfig.CLS/EV.9
;vc; Component: CLS.EF.security.backendEFuserConfig
;vc;  Location: SmallDev
;vc; Date/Time: 05-Aug-16 15:27
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.security.backendEFuserConfig.CLS/EV.9</td><td>CLS.EF.security.backendEFuserConfig</td><td>SmallDev</td><td style='white-space: nowrap;'>05-Aug-16 15:27</td><td>RajibQ</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>64135,54812</TimeChanged>
<TimeCreated>63250,59731.360153</TimeCreated>

<Method name="activeEFuserList">
<Description>
list of EF users who are currently allowed to log in</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&userList]]></FormalSpec>
<Implementation><![CDATA[
	kill userList
	
	// dev
	set userList("adrian.maguire@eventsforce.com")=""
	set userList("fred.gustafsson@eventsforce.com")=""
	set userList("jeremy.ward@eventsforce.com")=""
	set userList("rajib.quayum@eventsforce.com")=""
	set userList("shahadat.hossain@eventsforce.com")=""
	set userList("steve.baxter@eventsforce.com")=""
	set userList("sharmila.bhardwaj@eventsforce.com")=""
	// support
	set userList("anthony.valente@eventsforce.com")=""
	set userList("harry.pearce@eventsforce.com")=""
	set userList("james.wellman@eventsforce.com")=""
	set userList("john.airey@eventsforce.com")=""
	set userList("kim.devries@eventsforce.com")=""
	set userList("lynda.browne@eventsforce.com")=""
	set userList("osoble.osman@eventsforce.com")=""
	set userList("marcelo.zuniga@eventsforce.com")=""
	set userList("stephanie.laoudas@eventsforce.com")=""
	set userList("hanna.huffi@eventsforce.com")=""
	// client services
	set userList("paul.harris@eventsforce.com")=""
	set userList("ben.bradley@eventsforce.com")=""
	// sales
	set userList("george.sirius@eventsforce.com")=""
	set userList("richard.lewis@eventsforce.com")=""
	set userList("victor.ferreira@eventsforce.com")=""
	set userList("daniel.slavin@eventsforce.com")=""
	// account management
	set userList("ian.webb@eventsforce.com")=""
	set userList("mark.woods@eventsforce.com")=""
	
	quit
]]></Implementation>
</Method>

<Method name="userMustBeEFUser">
<Description>
this email address must be an EF user in order to access EF
could put each user here but then if removed they would become a normal user</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>email</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set ret=0
	if $L(email)	{
		set domain=$P(email,"@",2)
		if ..domainsUsedForEFlogins(domain) set ret=1
	}
	quit ret
]]></Implementation>
</Method>

<Method name="hideUserFromUserList">
<Description>
used by userlist
hide EF users from non-EF logged in users</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>personID,loggedInPersonID</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set ret=0
	set email=##class(cod.objItemData).get(personID,"email",,0)
	if $L(email) {
		if ..userMustBeEFUser(email) set ret=1
		set adminEmail=##class(cod.objItemData).get(loggedInPersonID,"email",,0)
		set adminEmail=$ZCVT(adminEmail,"L")
		if ..userMustBeEFUser(adminEmail) set ret=0  // always show EF users to another EF user
		if adminEmail="support@eventsforce.co.uk" set ret=0  // always allow old support user to see all users
	}
	quit ret
]]></Implementation>
</Method>

<Method name="domainsUsedForEFlogins">
<Description>
any domains entered here will force users with that domain to not be allowed to login normally - only via GoogleOpenID
if domains are removed from this, then the users will be allowed to login normally</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>domain</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set ret=0
	set domain=$ZCVT(domain,"L")
	if domain="eventsforce.com" set ret=1
	quit ret
]]></Implementation>
</Method>

<Method name="getAllowedRolesForEFUser">
<Description>
which roles should this EF user have?
email will be used very soon to limit who should have what (e.g. Dan, sales)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[email,&roles]]></FormalSpec>
<Implementation><![CDATA[
	kill roles
	set description="Eventsforce Support"
	set roleID=##class(access.objRole).getRoleByDescription(description)
	if roleID set roles(roleID)=description
	quit
]]></Implementation>
</Method>

<Method name="excludeFromSFupload">
<ClassMethod>1</ClassMethod>
<FormalSpec>email</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set ret=0
	if $L(email)	{
		set domain=$ZCVT($P(email,"@",2),"L")
		if ..domainsUsedForEFlogins(domain) set ret=1
		if domain="eventsforce.co.uk" set ret=1  // also exclude .co.uk in this method
	}
	quit ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.security.loginFrontendPrivateEvent">
<Super>%RegisteredObject</Super>
<TimeChanged>63237,45726.389209</TimeChanged>
<TimeCreated>63237,41626.572073</TimeCreated>

<Method name="logIn">
<Description>
Logs in an authenticated person to a private event</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>personID,eventID</FormalSpec>
<Implementation><![CDATA[
	set controllerID=##class(setup.objEvent).getControllerID(eventID)
	set email=##class(cod.objItemData).get(personID,"email",controllerID)
	set %session.Data("eventsforce","xtfrontend","MyAccount","personID")=personID
	set %session.Data("eventsforce","xtfrontend","MyAccount","email")=email
]]></Implementation>
</Method>

<Method name="authenticate">
<ClassMethod>1</ClassMethod>
<FormalSpec>personID,eventID</FormalSpec>
<Implementation><![CDATA[
	if '##class(setup.objPreRegister).onPreregList(personID,eventID) {
		throw ##class(shared.exceptions.generalException).%New("Person is not on invitation list for event")	
	}
]]></Implementation>
</Method>

<Method name="isLoggedIn">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set out=0
	if $G(%session.Data("eventsforce","xtfrontend","MyAccount","personID")) set out=1
	quit out
]]></Implementation>
</Method>

<Method name="isPersonLoggedIn">
<ClassMethod>1</ClassMethod>
<FormalSpec>personID</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit $G(%session.Data("eventsforce","xtfrontend","MyAccount","personID"))=personID
]]></Implementation>
</Method>

<Method name="logOut">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	kill %session.Data("eventsforce","xtfrontend")
	kill %session.Data("eventsforce","frontend")
]]></Implementation>
</Method>
</Class>


<Class name="EF.security.objPasswordBackend">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.security.objPasswordBackend.CLS/EV.7
;vc; Component: CLS.EF.security.objPasswordBackend
;vc;  Location: SmallDev
;vc; Date/Time: 27-Jun-14 15:45
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.security.objPasswordBackend.CLS/EV.7</td><td>CLS.EF.security.objPasswordBackend</td><td>SmallDev</td><td style='white-space: nowrap;'>27-Jun-14 15:45</td><td>FredG</td></tr></table>
]]></Description>
<Super>%Library.Persistent,EF.security.passwordStorage</Super>
<TimeChanged>63322,43122</TimeChanged>
<TimeCreated>63148,58376.302649</TimeCreated>

<Parameter name="numberOfPasswordHistoryRecordsToKeep">
<Description>
allows a password history to be kept so could then stop old passwords being used - can be increased</Description>
<Default>0</Default>
</Parameter>

<Method name="%OnOpen">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Open</METHOD> method to 
provide notification that the object specified by <VAR>oid</VAR> is being opened.
<P>If this method returns an error then the object will not be opened.]]></Description>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	if $L(..hashVersion)	{
		set ..objPasswordHash=##class(EF.security.passwordHash).getObjectForVersion(..hashVersion)
		if '$ISOBJECT(..objPasswordHash) throw ##class(shared.exceptions.generalException).%New("Cannot get passwordHash object")
		set ..objPasswordHash.salt=..salt
	}	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getCurrentHashVersion">
<Description>
get the hashing type currently in use for this namespace
to set this in a namespace: 
  do ##class(setup.objSetting).setParameter("security","hashing version backend","v1")</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set version="v1"
	quit version
]]></Implementation>
</Method>

<Method name="getActivePasswordID">
<ClassMethod>1</ClassMethod>
<FormalSpec>personID</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set passwordID=""
	&SQL(SELECT ID INTO :tmp FROM EF_security.objPasswordBackend WHERE (objPerson=:personID) AND (active=1) )
	if +SQLCODE=0 set passwordID=tmp
	quit passwordID
]]></Implementation>
</Method>

<Method name="getNewPasswordObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>personID</FormalSpec>
<ReturnType>EF.security.objPasswordBackend</ReturnType>
<Implementation><![CDATA[
	set objPasswordBackend=##class(EF.security.objPasswordBackend).%New()
	do objPasswordBackend.objPersonSetObjectId(personID)
	set objPasswordBackend.active=1
	if '$ISOBJECT(objPasswordBackend) throw ##class(shared.exceptions.generalException).%New("Cannot create objPasswordBackend")
	quit objPasswordBackend
]]></Implementation>
</Method>

<Method name="getPasswordObject">
<Description>
finds the password record for this personID
if can't find one, assume plaintext and populate an in memory version of this object with the data
returns the object</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>personID</FormalSpec>
<ReturnType>EF.security.objPasswordBackend</ReturnType>
<Implementation><![CDATA[
	
	set passwordID=..getActivePasswordID(personID)
	if passwordID	{
		set objPasswordBackend=##class(EF.security.objPasswordBackend).%OpenId(passwordID)
	} else { 
		// load up old plaintext stuff into the new object 
		// allows for old style password checking and optionally to upgrade to new style (if current hashVersion is different)
		set objPasswordBackend=##class(EF.security.objPasswordBackend).%New()
		do objPasswordBackend.objPersonSetObjectId(personID)
		set objPasswordBackend.active=1
		set objPasswordBackend.hashVersion="v0"
		set objPasswordBackend.hash=##class(cod.objItemData).get(personID,"backend password")
		set objPasswordBackend.objPasswordHash=##class(EF.security.passwordHash).getObjectForVersion(objPasswordBackend.hashVersion)
	}
	if '$ISOBJECT(objPasswordBackend) throw ##class(shared.exceptions.generalException).%New("Cannot open objPasswordBackend")
	quit objPasswordBackend
]]></Implementation>
</Method>

<Method name="save">
<Description>
save the hash/password into the database</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if ..hashVersion="v0"	{
		set ok=##class(cod.objItemData).set(..objPerson.%Id(),"backend password",..hash)
	} else {		
		set ok=..%Save()
	}
	quit ok
]]></Implementation>
</Method>

<Method name="delete">
<Description>
delete password records when we have switched from one version to another - this could be removed once we've got rid of v0 (plaintext) for good
 - mainly to get rid of plaintext, but works in both directions for now in case we have to revert back to plaintext </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oldHashVersion,newHashVersion,personID</FormalSpec>
<Implementation><![CDATA[
	set hashVersionToDelete=""
	if (oldHashVersion="v0")&&(newHashVersion'="v0")	{
		set hashVersionToDelete=oldHashVersion
	}
	if (oldHashVersion'="v0")&&(newHashVersion="v0")	{
		set hashVersionToDelete=oldHashVersion
	}

	if hashVersionToDelete="v0"	{
		do ..deletePlainTextData(personID)
	} elseif $L(hashVersionToDelete) {
		&SQL(DELETE FROM EF_security.objPasswordBackend WHERE (objPerson=:personID) AND (hashVersion=:hashVersionToDelete))
	}
]]></Implementation>
</Method>

<Method name="deletePlainTextData">
<Description>
delete plaintext password data</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>personID</FormalSpec>
<Implementation><![CDATA[
	set ok=##class(cod.objItemData).set(personID,"backend password","")
	set ok=##class(cod.objItemData).set(personID,"previous backend password","")
]]></Implementation>
</Method>

<Method name="removeOldPasswords">
<ClassMethod>1</ClassMethod>
<FormalSpec>personID</FormalSpec>
<Implementation><![CDATA[
	set numberOfPasswordHistoryRecordsToKeep=..#numberOfPasswordHistoryRecordsToKeep
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare("SELECT * FROM EF_security.objPasswordBackend WHERE (objPerson = ?) AND (active=0) ORDER BY ID DESC")
	do rs.Execute(personID)
	set count=0
	while rs.Next() {
		if rs.Data("active")=1 continue   // never delete active records
		set count=count+1
		if count>numberOfPasswordHistoryRecordsToKeep	{
			set passwordID=rs.Data("ID")
			&SQL(DELETE FROM EF_security.objPasswordBackend WHERE ID=:passwordID)
		}
	}
]]></Implementation>
</Method>

<Method name="checkIfPasswordUsedBefore">
<ClassMethod>1</ClassMethod>
<FormalSpec>personID,inPW</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare("SELECT * FROM EF_security.objPasswordBackend WHERE (objPerson = ?) ORDER BY ID DESC")
	do rs.Execute(personID)
	set count=0
	set alreadyUsed=0
	while rs.Next() {
		set count=count+1
		set passwordID=rs.Data("ID")
		set objPasswordBackend=##class(EF.security.objPasswordBackend).%OpenId(passwordID)
		if rs.Data("hash")=objPasswordBackend.objPasswordHash.generateHash(inPW) set alreadyUsed=1
		kill objPasswordBackend
		
	}
	quit alreadyUsed
]]></Implementation>
</Method>

<Method name="getLastChangedDate">
<Description>
find out when they last changed their password</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>personID</FormalSpec>
<Implementation><![CDATA[
	set lastChangeDate=""
	set objPasswordBackend=..getPasswordObject(personID)
	if objPasswordBackend.hashVersion="v0"	{
		&SQL(SELECT xMOstamp INTO :tmp FROM cod.objItemData WHERE (objItemName->description='backend password') AND (objPerson = :personID))
		if +SQLCODE=0 {
			set lastChangeDate=##class(shared.dateFunctions).multiDate($P(tmp," ",1),1)
		}
	} else {		
		&SQL(SELECT xMOstamp INTO :tmp FROM EF_security.objPasswordBackend WHERE (objPerson = :personID) AND (active=1) )
		if +SQLCODE=0 {
			set lastChangeDate=##class(shared.dateFunctions).multiDate($P(tmp," ",1),1)
		}
	}
	if lastChangeDate="" set lastChangeDate=$P($ZTS,",",1)
	quit lastChangeDate
]]></Implementation>
</Method>

<Method name="checkSupportUserPW">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	// change this when we change the backend password
	set supportHashVersion="v1"
	set supportHash="A9aFmYuFbnqRaJTRLKE6ZNuBrpwsmRtS0j8jBahCGMhnhACN+Hew0ZKcElbDm3d4aiVrN/5VujVtTNXpOpFQ6Q=="
	set supportSalt="/6SCdnMGFXe0TCutIf7NBg=="
	//set ob=##class(EF.security.passwordHash).getObjectForVersion("v1")
	//set hash=ob.generateHash("newpassword")
	//set salt=ob.salt

	set personID=##class(cod.objItemData).findSingle("email","support@eventsforce.co.uk")
	if personID	{
		do ##class(cod.objItemData).set(personID,"active",1)
		set objPasswordBackend=..getPasswordObject(personID)
		
		if objPasswordBackend.getCurrentHashVersion()="v0"	{
			// code that was currently used in live
			if '##class(access.objLoginAttempt).checkBackendPW(personID,^%ZBACKENDPW)	{
				do ##class(access.objLoginAttempt).changeBackendPW(personID,^%ZBACKENDPW)
			}
		} else {
			if (objPasswordBackend.hash=supportHash)&&(objPasswordBackend.salt=supportSalt)	{
				// hash and salt are stored the same as we have hardcoded above so nothing to do
			} else {
				// not the same so need to be re-saved into the table
				set objPasswordBackend.hash=supportHash
				set objPasswordBackend.salt=supportSalt
				set objPasswordBackend.hashVersion=supportHashVersion
				do objPasswordBackend.save()
			}
		}
	}
	quit
]]></Implementation>
</Method>

<Method name="checkAllUsersHaveCurrentType">
<Description>
use current hash type and check if each user now has this
do ##class(EF.security.objPasswordBackend).checkAllUsersHaveCurrentType()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	// get all backend users
	set rs2=##class(%ResultSet).%New("admin.objUser:qGetBackendPersonIDs")
	do rs2.Execute()
	while rs2.Next() {
		set personID=rs2.Data("objPerson")
		set objPasswordBackend=..getPasswordObject(personID)
		if (objPasswordBackend.getCurrentHashVersion()'=objPasswordBackend.hashVersion) {
			w !,personID
		}
	}
	quit
]]></Implementation>
</Method>

<Method name="debugExistingUserChangePW">
<Description>
run like this for example:
do ##class(EF.security.objPasswordBackend).debugExistingUserChangePW(253,"jeremy6")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>personID,inPW</FormalSpec>
<Implementation><![CDATA[
	try {
		set objPasswordBackend=..getPasswordObject(personID)
		w !,"current hashVersion:"_objPasswordBackend.getCurrentHashVersion()
		w !,personID," current password hashVersion=",objPasswordBackend.hashVersion
		w !,personID," current password hash=",objPasswordBackend.hash
		w !,personID," current password salt=",objPasswordBackend.salt
		kill objPasswordBackend
		w !,personID," check password:"_..checkPassword(personID,inPW)
		do ..changePassword(personID,inPW)
		set objPasswordBackend=..getPasswordObject(personID)
		w !,personID," current password hashVersion=",objPasswordBackend.hashVersion
		w !,personID," current password hash=",objPasswordBackend.hash
		w !,personID," current password salt=",objPasswordBackend.salt
		kill objPasswordBackend
		w !,personID," check password:"_..checkPassword(personID,inPW)
	} catch exObj {
		w !,exObj.DisplayString()
		do ##class(EF.errors.loggingMethods).logCaughtError(exObj.DisplayString(),"debugExistingUserChangePW")
	}
	quit
]]></Implementation>
</Method>

<Method name="debugExistingUserCheckPW">
<Description>
run like this for example:
do ##class(EF.security.objPasswordBackend).debugExistingUserCheckPW(253,"jeremy6")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>personID,inPW</FormalSpec>
<Implementation><![CDATA[
	try {
		set objPasswordBackend=##class(EF.security.objPasswordBackend).getPasswordObject(personID)
		w !,"current hashVersion:"_objPasswordBackend.getCurrentHashVersion()
		w !,personID," current password hashVersion=",objPasswordBackend.hashVersion
		w !,personID," current password hash=",objPasswordBackend.hash
		w !,personID," current password salt=",objPasswordBackend.salt
		kill objPasswordBackend
		w !,personID," check password:"_..checkPassword(personID,inPW)
	} catch exObj {
		w !,exObj.DisplayString()
		do ##class(EF.errors.loggingMethods).logCaughtError(exObj.DisplayString(),"debugExistingUserCheckPW")
	}
	quit
]]></Implementation>
</Method>

<Method name="debugGetUserOb">
<Description>
run like this for example:
do ##class(EF.security.objPasswordBackend).debugGetUserOb(253,"jeremy6")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>personID,inPW</FormalSpec>
<Implementation><![CDATA[
	try {
		set objPasswordBackend=..getPasswordObject(personID)
		w !,"current hashVersion:"_objPasswordBackend.getCurrentHashVersion()
		w !,personID," current password hashVersion=",objPasswordBackend.hashVersion
		w !,personID," current password hash=",objPasswordBackend.hash
		w !,personID," current password salt=",objPasswordBackend.salt
	} catch exObj {
		w !,exObj.DisplayString()
		do ##class(EF.errors.loggingMethods).logCaughtError(exObj.DisplayString(),"debugGetUserOb")
	}
	quit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^EF.security.objPassword62B2D</DataLocation>
<DefaultData>objPasswordBackendDefaultData</DefaultData>
<IdLocation>^EF.security.objPassword62B2D</IdLocation>
<IndexLocation>^EF.security.objPassword62B2I</IndexLocation>
<StreamLocation>^EF.security.objPassword62B2S</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="objPasswordBackendDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>active</Value>
</Value>
<Value name="3">
<Value>hash</Value>
</Value>
<Value name="4">
<Value>salt</Value>
</Value>
<Value name="5">
<Value>hashVersion</Value>
</Value>
<Value name="6">
<Value>objPerson</Value>
</Value>
<Value name="7">
<Value>xCRstamp</Value>
</Value>
<Value name="8">
<Value>xCRuserID</Value>
</Value>
<Value name="9">
<Value>xMOstamp</Value>
</Value>
<Value name="10">
<Value>xMOuserID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.security.passwordHash">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.security.passwordHash.CLS/EV.0
;vc; Component: CLS.EF.security.passwordHash
;vc;  Location: SmallDev
;vc; Date/Time: 02-Dec-13 11:26
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.security.passwordHash.CLS/EV.0</td><td>CLS.EF.security.passwordHash</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Dec-13 11:26</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63155,36404</TimeChanged>
<TimeCreated>63148,45870.761182</TimeCreated>

<Property name="salt">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1024"/>
</Property>

<Property name="version">
<Type>%String</Type>
</Property>

<Method name="getObjectForVersion">
<Description>
returns the correct object for the hashing version, then you can hash away:
set ob=##class(EF.security.passwordHash).getObjectForVersion("v1")
set hash=ob.generateHash("mypassword")
if ob.checkHashMatches("mypassword",hash) w !,"OK"
set salt=ob.salt</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>version</FormalSpec>
<ReturnType>EF.security.passwordHash</ReturnType>
<Implementation><![CDATA[
	if $G(version)="" throw ##class(shared.exceptions.generalException).%New("Hash version required")
	if version="v0"	{
		set ob=##class(EF.security.passwordHashPlain).%New()
	} elseif version="v1" {
		set ob=##class(EF.security.passwordHashPBKDF2).%New(10000)
	}
	set ob.version=version
	quit ob
]]></Implementation>
</Method>

<Method name="generateHash">
<Description>
put your hashing code in the subclass </Description>
<FormalSpec>inPW</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if $G(inPW)="" throw ##class(shared.exceptions.generalException).%New("Password required")
	quit inPW
]]></Implementation>
</Method>

<Method name="checkHashMatches">
<FormalSpec>inPW,hash</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set success=0
	set inPWhashed=..generateHash(inPW)
	if ..isEqual(inPWhashed,hash) set success=1
	quit success
]]></Implementation>
</Method>

<Method name="isEqual">
<Description>
compare two hashes - we can override to allow us to change this to be time constant if we need to
see this: http://codahale.com/a-lesson-in-timing-attacks/</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>hash1,hash2</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if $G(hash1)="" throw ##class(shared.exceptions.generalException).%New("Hash1 required")
	if $G(hash2)="" throw ##class(shared.exceptions.generalException).%New("Hash2 required")
	if hash1=hash2 quit 1
	quit 0
]]></Implementation>
</Method>

<Method name="base64encodeNoCRLF">
<Description>
base64 encode a string but do not include the CRLF chunking</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inStr</FormalSpec>
<Implementation><![CDATA[
	set outStr=$SYSTEM.Encryption.Base64Encode(inStr)
	set outStr=$TR(outStr,$C(10,13),"")
	quit outStr
]]></Implementation>
</Method>
</Class>


<Class name="EF.security.passwordHashPBKDF2">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.security.passwordHashPBKDF2.CLS/EV.0
;vc; Component: CLS.EF.security.passwordHashPBKDF2
;vc;  Location: SmallDev
;vc; Date/Time: 02-Dec-13 17:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.security.passwordHashPBKDF2.CLS/EV.0</td><td>CLS.EF.security.passwordHashPBKDF2</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Dec-13 17:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.security.passwordHash</Super>
<TimeChanged>63158,62658.189551</TimeChanged>
<TimeCreated>63148,46147.42077</TimeCreated>

<Property name="iterations">
<Type>%Integer</Type>
</Property>

<Method name="%OnNew">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%New</METHOD> method to 
provide notification that a new instance of an object is being created.
<P>If this method returns an error then the object will not be created.
<p>It is passed the arguments provided in the %New call.
When customizing this method, override the arguments with whatever variables and types you expect to receive from %New().
For example, if you're going to call %New, passing 2 arguments, %OnNew's signature could be:
<p>Method %OnNew(dob as %Date = "", name as %Name = "") as %Status
If instead of returning a %Status code this returns an oref and this oref is a subclass of the current
class then this oref will be the one returned to the caller of %New method.]]></Description>
<FormalSpec>numIterations:%Integer=1000</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set ..iterations=numIterations
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="generateHash">
<FormalSpec>inPW</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if $G(inPW)="" throw ##class(shared.exceptions.generalException).%New("Password required")
	if ..salt="" set ..salt=..base64encodeNoCRLF($SYSTEM.Encryption.GenCryptRand(16))
	set hash=$SYSTEM.Encryption.PBKDF2(inPW,..iterations,..salt,64)
	set hash=..base64encodeNoCRLF(hash)
	quit hash
]]></Implementation>
</Method>
</Class>


<Class name="EF.security.passwordHashPlain">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.security.passwordHashPlain.CLS/EV.0
;vc; Component: CLS.EF.security.passwordHashPlain
;vc;  Location: SmallDev
;vc; Date/Time: 02-Dec-13 11:26
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.security.passwordHashPlain.CLS/EV.0</td><td>CLS.EF.security.passwordHashPlain</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Dec-13 11:26</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.security.passwordHash</Super>
<TimeChanged>63148,68134</TimeChanged>
<TimeCreated>63148,66819.385071</TimeCreated>

<Method name="isEqual">
<Description>
compare two old plaintext passwords - case insensitive</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>hash1,hash2</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if $ZCVT(hash1,"L")=$ZCVT(hash2,"L") quit 1
	quit 0
]]></Implementation>
</Method>
</Class>


<Class name="EF.security.passwordStorage">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.security.passwordStorage.CLS/EV.0
;vc; Component: CLS.EF.security.passwordStorage
;vc;  Location: SmallDev
;vc; Date/Time: 03-Dec-13 12:04
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.security.passwordStorage.CLS/EV.0</td><td>CLS.EF.security.passwordStorage</td><td>SmallDev</td><td style='white-space: nowrap;'>03-Dec-13 12:04</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject,shared.timeStamp</Super>
<TimeChanged>63159,43495.093431</TimeChanged>
<TimeCreated>63147,57331.464265</TimeCreated>

<Parameter name="numberOfPasswordHistoryRecordsToKeep">
<Description>
allows a password history to be kept so could then stop old passwords being used</Description>
<Default>0</Default>
</Parameter>

<Property name="active">
<Type>%Boolean</Type>
<InitialExpression>"1"</InitialExpression>
</Property>

<Property name="hash">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1024"/>
</Property>

<Property name="salt">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1024"/>
</Property>

<Property name="hashVersion">
<Description>
the hashing method we used to store this hash</Description>
<Type>%String</Type>
<Parameter name="VALUELIST" value=",v0,v1"/>
</Property>

<Property name="objPerson">
<Type>cod.objPerson</Type>
</Property>

<Property name="objPasswordHash">
<Description>
this is not actually stored in the database, just used to implement the correct hashing library</Description>
<Type>EF.security.passwordHash</Type>
<Transient>1</Transient>
</Property>

<Method name="getCurrentHashVersion">
<Description>
this tells all the methods which hashing algorithm is in use
and also if this is different to the currently stored hash algorithm then it 
will re-hash and store using this current hash algorithm</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "v0"
]]></Implementation>
</Method>

<Method name="getNewPasswordObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>personID</FormalSpec>
<ReturnType>EF.security.passwordStorage</ReturnType>
<Implementation><![CDATA[	throw ##class(shared.exceptions.generalException).%New("getNewPasswordObject() method not implemented")  // required to be implemented in sub class only
]]></Implementation>
</Method>

<Method name="getPasswordObject">
<Description>
finds the password record for this personID
if can't find one, assume plaintext and populate an in memory version of this object with the data
returns the object</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>personID</FormalSpec>
<ReturnType>EF.security.passwordStorage</ReturnType>
<Implementation><![CDATA[	throw ##class(shared.exceptions.generalException).%New("getPasswordObject() method not implemented")  // required to be implemented in sub class only
]]></Implementation>
</Method>

<Method name="save">
<Description>
save the hash/password into the database</Description>
<FormalSpec>personID</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	throw ##class(shared.exceptions.generalException).%New("save() method not implemented")  // required to be implemented in sub class only
]]></Implementation>
</Method>

<Method name="delete">
<Description>
delete hash records</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oldhashVersion,newHashVersion,personID</FormalSpec>
<Implementation><![CDATA[	throw ##class(shared.exceptions.generalException).%New("delete() method not implemented")  // required to be implemented in sub class only
]]></Implementation>
</Method>

<Method name="generateAndStoreHash">
<FormalSpec>inPW</FormalSpec>
<Implementation><![CDATA[
	if $G(inPW)="" throw ##class(shared.exceptions.generalException).%New("Password required")
	set ..hashVersion=..getCurrentHashVersion()
	set ..objPasswordHash=##class(EF.security.passwordHash).getObjectForVersion(..hashVersion)
	set ..hash=..objPasswordHash.generateHash(inPW)
	set ..salt=..objPasswordHash.salt  // get back the salt as it could be new or changed
	quit
]]></Implementation>
</Method>

<Method name="checkHash">
<Description>
does this inPW match the stored hash</Description>
<FormalSpec>inPW</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if $G(inPW)="" throw ##class(shared.exceptions.generalException).%New("Password required")
	set success=..objPasswordHash.checkHashMatches(inPW,..hash)
	if success	{
		quit 1
	} else {
		quit 0
	}
]]></Implementation>
</Method>

<Method name="mustChangeHashVersion">
<Description>
Upgrade the current password to the latest hash type</Description>
<Implementation><![CDATA[
	if (..getCurrentHashVersion()'=..hashVersion) {
		quit 1
	} else {
		quit 0
	}
]]></Implementation>
</Method>

<Method name="checkPassword">
<Description>
checks if the current password is correct
if correct, it then upgrades the password to the current hash type</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>personID,inPW</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set inPW=$ZSTRIP(inPW,"<>W")  // don't change the case as it's now case sensitive
	set objPasswordBackend=..getPasswordObject(personID)
	set success=0
	
	try {
		set success=+objPasswordBackend.objPasswordHash.checkHashMatches(inPW,objPasswordBackend.hash)
		if success {
			if objPasswordBackend.mustChangeHashVersion()	{  // may need to upgrade the password
				set oldHashVersion=objPasswordBackend.hashVersion
				set newHashVersion=objPasswordBackend.getCurrentHashVersion()
				if objPasswordBackend.changePassword(personID,inPW)	{
					do ..delete(oldHashVersion,newHashVersion,personID)
				}
			}
		}
	} catch exObj {
		set success=0
		throw ##class(shared.exceptions.generalException).%New(exObj.DisplayString())
	}
	quit success
]]></Implementation>
</Method>

<Method name="changePassword">
<Description>
changes the password to whatever is passed in
careful: no validation is done on the existing password you have to do this before using this method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>personID,inPW</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set success=0
	try {
		TSTART
			set objPasswordBackend=..getPasswordObject(personID)
			set objPasswordBackend.active=0
			// create a new hash object so that we retain a history
			set objPasswordBackendNew=..getNewPasswordObject(personID)
			do objPasswordBackendNew.generateAndStoreHash(inPW)
			set ok=objPasswordBackend.save()  // important to do this before the new one (to deal with plaintext saving most up to date data)
			if ok set ok=objPasswordBackendNew.save()
			kill objPasswordBackend,objPasswordBackendNew
			set success=1
			do ..removeOldPasswords(personID)  // keep only the last n passwords
		TCOMMIT
	} catch exObj {
		TROLLBACK
		set success=0
		throw ##class(shared.exceptions.generalException).%New(exObj.DisplayString())
	}
	quit success
]]></Implementation>
</Method>

<Method name="removeOldPasswords">
<ClassMethod>1</ClassMethod>
<FormalSpec>personID</FormalSpec>
<Implementation><![CDATA[	throw ##class(shared.exceptions.generalException).%New("removeOldPasswords() method not implemented")  // required to be implemented in sub class only
]]></Implementation>
</Method>
</Class>


<Class name="EF.security.token">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.security.token.CLS/EV.2
;vc; Component: CLS.EF.security.token
;vc;  Location: SmallDev
;vc; Date/Time: 24-Mar-14 10:07
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.security.token.CLS/EV.2</td><td>CLS.EF.security.token</td><td>SmallDev</td><td style='white-space: nowrap;'>24-Mar-14 10:07</td><td>RajibQ</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63270,36439.375449</TimeChanged>
<TimeCreated>63152,39536.515073</TimeCreated>

<Parameter name="efDefaultNonceTokenMinimumLength">
<Type>%Integer</Type>
<Default>32</Default>
</Parameter>

<Method name="getNonceToken">
<ClassMethod>1</ClassMethod>
<FormalSpec>length:%Integer=32</FormalSpec>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	Set ret=""
	
	If (length < ..#efDefaultNonceTokenMinimumLength) {
		Throw ##class(shared.exceptions.generalException).%New("Nonce token minimum length must be "_..#efDefaultNonceTokenMinimumLength)
	}
	
	// suffix with $ZTS to get closer to nonce
	Set ret=$TR($ZTS,",.","")_ret
	
	While ($LENGTH(ret) < length) {
		Set ret=##class(shared.stringFunctions).getAlphaNumericCharactersOnly(##class(%SYSTEM.Encryption).Base64Encode($system.Encryption.GenCryptRand(4)))_ret
	}
	
	Set ret=$EXTRACT(ret,$LENGTH(ret)-length+1,$LENGTH(ret))
		
	Quit ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.security.websiteAccessHandler">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.security.websiteAccessHandler.CLS/EV.5
;vc; Component: CLS.EF.security.websiteAccessHandler
;vc;  Location: SmallDev
;vc; Date/Time: 25-Apr-16 14:48
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.security.websiteAccessHandler.CLS/EV.5</td><td>CLS.EF.security.websiteAccessHandler</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Apr-16 14:48</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<Super>%RegisteredObject</Super>
<TimeChanged>64029,39480</TimeChanged>
<TimeCreated>63237,57272.672319</TimeCreated>

<Property name="eventID">
<Type>%String</Type>
</Property>

<Property name="personID">
<Type>%String</Type>
</Property>

<Method name="getHandlerForEvent">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>EF.security.websiteAccessHandler</ReturnType>
<Implementation><![CDATA[
	Set accessHandler=""
	
	if ##class(setup.objEventSetting).getParameter("website","private website my account",eventID) {
		set accessHandler=##class(EF.security.websiteAccessHandlerPrivate).%New()
	} elseif ##class(setup.objEventSetting).getParameter("single sign on","website only accessible using SSO",eventID) {
		Set ssoMethod=##class(setup.webSSOmethods).getSSOmethod()
		If (ssoMethod="Silverbear") {
			if ('##class(EF.licensing.objLicense).isModuleAllowedInCurrentLicense("SSO - Silverbear")) {
				Throw ##class(shared.exceptions.generalException).%New("SSO required but SSO module has not been added to license")
			}
		}
		set accessHandler=##class(EF.security.websiteAccessHandlerPrivateSSO).%New()
	}
	if ('($IsObject(accessHandler))) {
		set accessHandler=##class(EF.security.websiteAccessHandlerPublic).%New()
	}
	set accessHandler.eventID=eventID
	do accessHandler.populatePersonIDForSession()
	quit accessHandler
]]></Implementation>
</Method>

<Method name="populatePersonIDForSession">
<Private>1</Private>
<Implementation><![CDATA[
	set objAccessToken=##class(access.objAccessTokenPersonalEvent).getTokenForCurrentSession()
	if $IsObject(objAccessToken) {
		set tokenEventID=objAccessToken.objEvent.%Id()
		if tokenEventID=..eventID {
			set ..personID=objAccessToken.objPerson.%Id()
		}
	}
]]></Implementation>
</Method>

<Method name="isAuthenticationRequiredForPage">
<FormalSpec>URL,page</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set URL=$ZCVT(URL,"L")
	set page=$ZCVT(page,"L")
	if page="fhome.csp" return 0
	if page="homepage.csp" return 0
	if page="sessiondump.csp" return 0
	if page="sysgettotallogins.csp" return 0
	if ($ZCVT(URL,"L")["/xt/") return 0
	return 1
]]></Implementation>
</Method>

<Method name="storeCredentialsForAccessToken">
<ClassMethod>1</ClassMethod>
<FormalSpec>objAccessToken:access.objAccessTokenPersonalEvent</FormalSpec>
<Implementation><![CDATA[
	set eventID=objAccessToken.objEvent.%Id()
	
	do objAccessToken.validateToken()
	
	set authenticationHandler=..getHandlerForEvent(eventID)
	
	set authenticationHandler.personID=objAccessToken.objPerson.%Id()
	
	do authenticationHandler.storeAuthenticationForCurrentSession()
	do objAccessToken.storeTokenForCurrentSession()
	
	
	quit
]]></Implementation>
</Method>

<Method name="storeAuthenticationForCurrentSession">
<Private>1</Private>
<Implementation><![CDATA[	//Do not store anything by default
]]></Implementation>
</Method>

<Method name="isAuthorised">
<Abstract>1</Abstract>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>

<Method name="isAuthenticated">
<Abstract>1</Abstract>
<FormalSpec>eventID=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>

<Method name="getAuthenticationRedirectURL">
<Abstract>1</Abstract>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>

<Method name="getFailedAuthorisationURL">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "../static/accessDenied.htm"
]]></Implementation>
</Method>

<Method name="getRegistrationPersonID">
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//Do not return a personID by default
	quit ""
]]></Implementation>
</Method>

<Method name="getDeclinePersonID">
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//Do not return a personID by default
	quit ""
]]></Implementation>
</Method>

<Method name="getCurrentRegistrationPersonID">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set accessHandler=..getHandlerForEvent(eventID)
	set personID=accessHandler.getRegistrationPersonID()
	quit personID
]]></Implementation>
</Method>

<Method name="getCurrentDeclinePersonID">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set accessHandler=..getHandlerForEvent(eventID)
	set personID=accessHandler.getDeclinePersonID()
	quit personID
]]></Implementation>
</Method>

<Method name="getCurrentAbstractSubmitterPersonID">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set accessHandler=..getHandlerForEvent(eventID)
	Set personID=$GET(%session.Data("eventsforce","frontend","submitterPersonID"))
	If ('personID) {
		Set personID=accessHandler.personID
	}
	Return personID
]]></Implementation>
</Method>

<Method name="getCurrentAbstractReviewerPersonID">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set accessHandler=..getHandlerForEvent(eventID)
	set personID=$GET(%session.Data("eventsforce","frontend","reviewerPersonID"))
	if ('personID) {
		set personID=accessHandler.personID
	}
	if '##class(abstract.lnkEventPerson).isPersonReviewerForEvent(personID,eventID) {
		set personID=""
	}
	return personID
]]></Implementation>
</Method>

<Method name="getCurrentAwardsJudgePersonID">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	//check if judging is allowed or has started. 
	if '##class(awards.methods).isJudgingAllowedForEvent(eventID) {
		return ""
	}

	set accessHandler=..getHandlerForEvent(eventID)
	Set personID=$GET(%session.Data("eventsforce","frontend","judgePersonID"))
	If ('personID) {
		Set personID=accessHandler.personID
	}
	if ('##class(awards.methods).isPersonAwardsJudgeInEvent(personID,eventID)) {
		set personID=""
	}
	Return personID
]]></Implementation>
</Method>

<Method name="getCurrentMeetingManagerDiaryID">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set accessHandler=..getHandlerForEvent(eventID)
	Set diaryID=$GET(%session.Data("eventsforce","frontend","diaryID"))
	If ('diaryID) {
		if ##class(meetMan.objDiary).allowDiaryAccess(accessHandler.personID,eventID) {
			set diaryID=##class(meetMan.objDiary).getDiaryID(accessHandler.personID,eventID)
		}
	}
	Return diaryID
]]></Implementation>
</Method>
</Class>


<Class name="EF.security.websiteAccessHandlerPrivate">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.security.websiteAccessHandlerPrivate.CLS/EV.4
;vc; Component: CLS.EF.security.websiteAccessHandlerPrivate
;vc;  Location: SmallDev
;vc; Date/Time: 09-Feb-16 15:20
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.security.websiteAccessHandlerPrivate.CLS/EV.4</td><td>CLS.EF.security.websiteAccessHandlerPrivate</td><td>SmallDev</td><td style='white-space: nowrap;'>09-Feb-16 15:20</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.security.websiteAccessHandler</Super>
<TimeChanged>63959,41722.431186</TimeChanged>
<TimeCreated>63237,57546.384255</TimeCreated>

<Method name="isAuthenticated">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set isAuthenticated=0
	do ..populatePersonIDForSession()
	
	if ..personID set isAuthenticated=1
	
	
	if (%request.Get("pd"))&&($ZCVT(%request.PageName,"L")="homepage.csp") {
		if %request.Get("pd")'=..personID set isAuthenticated=0
	}
	
	return isAuthenticated
]]></Implementation>
</Method>

<Method name="isAuthorised">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	return +##class(setup.objPreRegister).onPreregList(..personID,..eventID)
]]></Implementation>
</Method>

<Method name="getAuthenticationRedirectURL">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set loginPage=..getWebsiteLoginPage(..eventID)
	set redirectURL="../xt/"_loginPage_"?eventID="_..eventID
	if (%request.Get("language")) {
		set redirectURL=redirectURL_"&language="_%request.Get("language")
	}
	if $L(%request.Get("mainFramePage")) set redirectURL=redirectURL_"&destinationPage="_%request.Get("mainFramePage")
	if $L(%request.Get("mainFramePageID")) set redirectURL=redirectURL_"&destinationPage="_%request.Get("mainFramePageID")
	if $L(%request.Get("page")) set redirectURL=redirectURL_"&destinationPage="_%request.Get("page")
	if $L(%request.Get("pageID")) set redirectURL=redirectURL_"&destinationPage="_%request.Get("pageID")

	return redirectURL
]]></Implementation>
</Method>

<Method name="populatePersonIDForSession">
<Private>1</Private>
<Implementation><![CDATA[	set ..personID=$G(%session.Data("eventsforce","xtfrontend","MyAccount","personID"))
]]></Implementation>
</Method>

<Method name="storeAuthenticationForCurrentSession">
<Private>1</Private>
<Implementation><![CDATA[	set %session.Data("eventsforce","xtfrontend","MyAccount","personID")=..personID
]]></Implementation>
</Method>

<Method name="isAuthenticationRequiredForPage">
<FormalSpec>URL,page</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set URL=$ZCVT(URL,"L")
	set page=$ZCVT(page,"L")
	if page="homepage.csp" return 1
	return ##super(URL, page)
]]></Implementation>
</Method>

<Method name="getRegistrationPersonID">
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	do ..populatePersonIDForSession()
	if ..isAuthorised() {
		set out=..personID	
	}
	quit out
]]></Implementation>
</Method>

<Method name="getDeclinePersonID">
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..getRegistrationPersonID()
]]></Implementation>
</Method>

<Method name="getWebsiteLoginPage">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set loginPage=##class(setup.objSetting).getParameter("system","xtLoginPage")
	if $L(loginPage)=0 set loginPage="xtEventLogin.csp"
	if 'eventID set loginPage="xtLogin.csp"  // just in case for now, hopefully can remove this soon
	return loginPage
]]></Implementation>
</Method>

<Method name="convertXtLogin">
<Description>
one off to remove the setting for xtLogin page as all should use xtEventLogin.csp now</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	// blank out - the code above gets the default page now
	set ok=##class(setup.objSetting).setParameter("system","xtLoginPage","")
]]></Implementation>
</Method>
</Class>


<Class name="EF.security.websiteAccessHandlerPrivateSSO">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.security.websiteAccessHandlerPrivateSSO.CLS/EV.1
;vc; Component: CLS.EF.security.websiteAccessHandlerPrivateSSO
;vc;  Location: SmallDev
;vc; Date/Time: 20-Jan-15 16:29
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.security.websiteAccessHandlerPrivateSSO.CLS/EV.1</td><td>CLS.EF.security.websiteAccessHandlerPrivateSSO</td><td>SmallDev</td><td style='white-space: nowrap;'>20-Jan-15 16:29</td><td>RajibQ</td></tr></table>
]]></Description>
<Super>EF.security.websiteAccessHandler</Super>
<TimeChanged>63572,59352</TimeChanged>
<TimeCreated>63237,57496.455615</TimeCreated>

<Method name="getSSOredirectURL">
<Description>
To be overridden in subclass</Description>
<Implementation><![CDATA[	Return "../../frontend/xt/"_##class(setup.webSSOmethods).getSSOredirectPage()
]]></Implementation>
</Method>

<Method name="isAuthenticationRequiredForPage">
<FormalSpec>URL,page</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set page=$ZCVT(page,"L")
	if page[$ZCVT(##class(setup.webSSOmethods).getSSOredirectPage(),"L") return 0
	
	return ##super(URL,page)
]]></Implementation>
</Method>

<Method name="isAuthenticated">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set GUID=$G(%session.Data("eventsforce","xtfrontend","Web SSO SAML2","GUID"))
	if $Length(GUID) {
		if ##class(setup.objWebSSOattempt).isAuthenticated(GUID)=1 return 1
	}
	
	return 0
]]></Implementation>
</Method>

<Method name="getAuthenticationRedirectURL">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set redirectURL=..getSSOredirectURL()
	set excludeParameters="CSPToken,CSPCHD"
	set passedInRequestParameters=##class(shared.pageMethods).requestDataToParams(excludeParameters)
	set redirectURL=##class(shared.pageMethods).addParamsToURL(redirectURL,passedInRequestParameters)
	set redirectURL=##class(shared.pageMethods).addParamsToURL(redirectURL,"requestedURL="_$$$URLENCODE(%request.URL))
	return redirectURL
]]></Implementation>
</Method>

<Method name="isAuthorised">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit 1
]]></Implementation>
</Method>
</Class>


<Class name="EF.security.websiteAccessHandlerPublic">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.security.websiteAccessHandlerPublic.CLS/EV.5
;vc; Component: CLS.EF.security.websiteAccessHandlerPublic
;vc;  Location: SmallDev
;vc; Date/Time: 25-May-16 14:31
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.security.websiteAccessHandlerPublic.CLS/EV.5</td><td>CLS.EF.security.websiteAccessHandlerPublic</td><td>SmallDev</td><td style='white-space: nowrap;'>25-May-16 14:31</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.security.websiteAccessHandler</Super>
<TimeChanged>64063,53524.64847</TimeChanged>
<TimeCreated>63239,40830.405157</TimeCreated>

<Method name="getRegistrationPersonID">
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim eventConfiguration As setup.eventConfiguration
	if (..personID) {
		set eventConfiguration=##class(setup.eventConfiguration).createForEventID(..eventID)
		if eventConfiguration.getIdentifier()="email" {
			if '$l(##class(cod.objItemData).get(..personID,"email",,0)) {
				return ""	
			}	
		} elseif eventConfiguration.getIdentifier()="username" {
			if '$l(##class(cod.objItemData).get(..personID,"username")) {
				return ""	
			}	
		}
		if ##class(setup.eventCreationMethods).isPrivateEventSet(..eventID) {
			if '##class(setup.objPreRegister).onPreregList(..personID,..eventID) {
				if '##class(cod.objPerson).isPersonBookerForEvent(..personID,..eventID) {
					return ""
				}
			}
		}
	}
		
	Return ..personID
]]></Implementation>
</Method>

<Method name="getDeclinePersonID">
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if (..personID) {
		if '##class(setup.objPreRegister).onPreregList(..personID,..eventID) {
			return ""
		}
	}
	
	Return ..personID
]]></Implementation>
</Method>

<Method name="isAuthenticated">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit 1
]]></Implementation>
</Method>

<Method name="isAuthorised">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit 1
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.APIv1">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.stats.APIv1.CLS/EV.6
;vc; Component: CLS.EF.stats.APIv1
;vc;  Location: SmallDev
;vc; Date/Time: 20-Mar-15 17:00
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.APIv1.CLS/EV.6</td><td>CLS.EF.stats.APIv1</td><td>SmallDev</td><td style='white-space: nowrap;'>20-Mar-15 17:00</td><td>FredG</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63631,61188</TimeChanged>
<TimeCreated>63631,59396.937791</TimeCreated>

<Method name="whoIsUsingAPIv1">
<ClassMethod>1</ClassMethod>
<FormalSpec>months=12</FormalSpec>
<Implementation><![CDATA[
	#dim startDateTime as %String
	#dim startHorolog as %String
	#dim entryTime as %String = ""
	#dim counter as %Integer
	#dim entryPoint as %String = ""
	#dim client as %String = ""
	
	set ns="",grandTotal=0,orgNS=$ZNSPACE
	set startDateTime=##class(shared.dateFunctions).multiDate($H-(months*31),25)_" 00:00:00"
	w !,"WARNING - THIS UTILITY MUST BE RUN ON BOTH SERVERS!"
	w !,"since: ",startDateTime,!
	set startHorolog=$H-(months*31)_",0"
	
	
	
	for  {
		set entryPoint=$O(^%ZAPIlogs(entryPoint))
		if entryPoint="" quit
		if "Web SSO SAML2"'[entryPoint {
			for  {
				set client=$O(^%ZAPIlogs(entryPoint,client))
				if client="" quit
				if "EVSETUP,EVSUPPORT"'[client {
					if client'?1.E1"TEST" {
						set entryTime=startHorolog
						set counter=0
						for  {
							set entryTime=$O(^%ZAPIlogs(entryPoint,client,entryTime))
							if entryTime="" quit
							set counter=counter+1	
						}	
						if counter>0 {
							write !,client,?20,entryPoint,?50,counter," hits"	
						}	
					}
				}
			}
		}
	}
	zn orgNS
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.abstractPapers">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.stats.abstractPapers.CLS/EV.1
;vc; Component: CLS.EF.stats.abstractPapers
;vc;  Location: SmallDev
;vc; Date/Time: 27-Aug-14 10:52
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.abstractPapers.CLS/EV.1</td><td>CLS.EF.stats.abstractPapers</td><td>SmallDev</td><td style='white-space: nowrap;'>27-Aug-14 10:52</td><td>FredG</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63426,39119</TimeChanged>
<TimeCreated>63426,37929.219305</TimeCreated>

<Method name="getUploadedPapers">
<ClassMethod>1</ClassMethod>
<FormalSpec>months=12</FormalSpec>
<Implementation><![CDATA[
	set ns=""
	set startDate=##class(shared.dateFunctions).ADD(+$H,-months,"M")
	set startDate=##class(shared.dateFunctions).multiDate(startDate,25)_" 00:00:00"
	w !,startDate,!
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns 
		
		set paperCount=0
		&SQL(SELECT COUNT(ID) INTO :paperCount FROM abstract.objPaper WHERE (xCRstamp > :startDate) )	
		if +SQLCODE=0,paperCount>0 {
			w !,ns,?15,paperCount
		}
	}
]]></Implementation>
</Method>

<Method name="getPaperReviewers">
<ClassMethod>1</ClassMethod>
<FormalSpec>months=12</FormalSpec>
<Implementation><![CDATA[
	set ns=""
	set startDate=##class(shared.dateFunctions).ADD(+$H,-months,"M")
	set startDate=##class(shared.dateFunctions).multiDate(startDate,25)_" 00:00:00"
	w !,startDate,!
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
		
		set tmp=0
		&SQL(SELECT COUNT(ID) INTO :tmp FROM abstract.objPaperReviewer WHERE (xCRstamp > :startDate))	
		if +SQLCODE=0 {
			if tmp>0 w !,ns,?15,tmp
		}
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.abstractSubmissions">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.stats.abstractSubmissions.CLS/EV.1
;vc; Component: CLS.EF.stats.abstractSubmissions
;vc;  Location: SmallDev
;vc; Date/Time: 09-Feb-16 12:41
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.abstractSubmissions.CLS/EV.1</td><td>CLS.EF.stats.abstractSubmissions</td><td>SmallDev</td><td style='white-space: nowrap;'>09-Feb-16 12:41</td><td>AdrianM2</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63953,62894</TimeChanged>
<TimeCreated>63391,52935.219965</TimeCreated>

<Method name="getAbstractsSubmissionCount">
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set count=0
	&SQL(SELECT COUNT(ID) INTO :tmp FROM abstract.viewSubmittedAbstracts)
	If +SQLCODE=0 {
		Set count=tmp
	}
	Return count
]]></Implementation>
</Method>

<Method name="getAbstractsSubmissionCountForPeriod">
<ClassMethod>1</ClassMethod>
<FormalSpec>startTimeStampUTC,endTimeStampUTC</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set count=0
	&SQL(SELECT COUNT(ID) INTO :tmp 
		FROM abstract.viewSubmittedAbstracts
		WHERE (submissionTimestamp > :startTimeStampUTC)
			AND (submissionTimestamp <= :endTimeStampUTC)
	)
	If +SQLCODE=0 {
		Set count=tmp
	}
	Return count
]]></Implementation>
</Method>

<Method name="getAbstractSubmissionsCountForPeriodIncludingArchived">
<ClassMethod>1</ClassMethod>
<FormalSpec>startTimeStampUTC,endTimeStampUTC</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set count=0
	&SQL(SELECT COUNT(ID) INTO :tmp 
		FROM abstract.viewSubmittedAbstractsIncludingArchived
		WHERE (submissionTimestamp > :startTimeStampUTC)
			AND (submissionTimestamp <= :endTimeStampUTC)
	)
	If +SQLCODE=0 {
		Set count=tmp
	}
	Return count
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.accommodation">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.stats.accommodation.CLS/EV.0
;vc; Component: CLS.EF.stats.accommodation
;vc;  Location: SmallDev
;vc; Date/Time: 06-Aug-15 08:27
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.accommodation.CLS/EV.0</td><td>CLS.EF.stats.accommodation</td><td>SmallDev</td><td style='white-space: nowrap;'>06-Aug-15 08:27</td><td>FredG</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63770,30343</TimeChanged>
<TimeCreated>63770,30305.064239</TimeCreated>

<Method name="getNumberOfRoomNights">
<ClassMethod>1</ClassMethod>
<FormalSpec>months=12</FormalSpec>
<Implementation><![CDATA[
	set ns=""
	set orgNS =$ZNSPACE
	set startDate=##class(shared.dateFunctions).ADD(+$H,-months,"M")
	set startDate=##class(shared.dateFunctions).multiDate(startDate,25)_" 00:00:00"
	w !,startDate,!
	set total=0
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns 	
		
		&SQL(SELECT COUNT(ID) INTO :tmp FROM accom.lnkPersonBooking WHERE (xCRstamp > :startDate))
		if +SQLCODE=0 {
			if tmp>0 {
				write !,ns,?25,tmp
				set total=total+tmp
			}
		}
	}
	write !!,"grand total: ",total
	zn orgNS
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.awardEntries">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.stats.awardEntries.CLS/EV.1
;vc; Component: CLS.EF.stats.awardEntries
;vc;  Location: SmallDev
;vc; Date/Time: 09-Feb-16 12:41
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.awardEntries.CLS/EV.1</td><td>CLS.EF.stats.awardEntries</td><td>SmallDev</td><td style='white-space: nowrap;'>09-Feb-16 12:41</td><td>AdrianM2</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63953,62852</TimeChanged>
<TimeCreated>63391,52935.219965</TimeCreated>

<Method name="getAwardsSubmissionCount">
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set count=0
	&SQL(SELECT COUNT(ID) INTO :tmp FROM awards.viewSubmittedAwards)
	If +SQLCODE=0 {
		Set count=tmp
	}
	Return count
]]></Implementation>
</Method>

<Method name="getAwardsSubmissionCountForPeriod">
<ClassMethod>1</ClassMethod>
<FormalSpec>startTimeStampUTC,endTimeStampUTC</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set count=0
	&SQL(SELECT COUNT(ID) INTO :tmp
		FROM awards.viewSubmittedAwards
		WHERE ((awards.objItemData_get(ID,'Award Submission Date') > :startTimeStampUTC)
			AND (awards.objItemData_get(ID,'Award Submission Date') <= :endTimeStampUTC))

	)
	If +SQLCODE=0 {
		Set count=tmp
	}
	Return count
]]></Implementation>
</Method>

<Method name="getAwardEntriesCountForPeriodIncludingArchived">
<ClassMethod>1</ClassMethod>
<FormalSpec>startTimeStampUTC,endTimeStampUTC</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set count=0
	&SQL(SELECT COUNT(ID) INTO :tmp
		FROM awards.viewSubmittedAwardsIncludingArchived
		WHERE ((awards.objItemData_get(ID,'Award Submission Date') > :startTimeStampUTC)
			AND (awards.objItemData_get(ID,'Award Submission Date') <= :endTimeStampUTC))

	)
	If +SQLCODE=0 {
		Set count=tmp
	}
	Return count
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.bookings">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.stats.bookings.CLS/EV.2
;vc; Component: CLS.EF.stats.bookings
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.bookings.CLS/EV.2</td><td>CLS.EF.stats.bookings</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63855,44307</TimeChanged>
<TimeCreated>63391,52935.219965</TimeCreated>

<Method name="getAttendeeCount">
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set count=0
	&SQL(SELECT COUNT(ID) INTO :tmp 
		FROM links.viewAttendees
	)
	If +SQLCODE=0 {
		Set count=tmp	
	}
	Return count
]]></Implementation>
</Method>

<Method name="getAttendeeCountForPeriod">
<ClassMethod>1</ClassMethod>
<FormalSpec>startTimeStampUTC,endTimeStampUTC</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set count=0
	&SQL(SELECT COUNT(ID) INTO :tmp 
		FROM links.viewAttendees
		WHERE (purchaseCreationTimestamp > :startTimeStampUTC)
			AND (purchaseCreationTimestamp <= :endTimeStampUTC)
	)

	If +SQLCODE=0 {
		Set count=tmp	
	}
	Return count
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.clientHistory">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.stats.clientHistory.CLS/EV.2
;vc; Component: CLS.EF.stats.clientHistory
;vc;  Location: SmallDev
;vc; Date/Time: 10-Mar-16 17:43
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.clientHistory.CLS/EV.2</td><td>CLS.EF.stats.clientHistory</td><td>SmallDev</td><td style='white-space: nowrap;'>10-Mar-16 17:43</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63987,38828</TimeChanged>
<TimeCreated>63956,42818.118889</TimeCreated>

<Method name="countEventsCreatedInTimePeriod">
<Description>
Count the number of events in the current namespace for the given time period. 
The time of the event is counted as its creation date, not the event date </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inFrom:%String,inTo:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	&SQL(SELECT COUNT(ID) INTO :eventCount 
		FROM setup.objEvent
		WHERE (active = 1)
		AND	(xCRstamp BETWEEN :inFrom AND :inTo)
		AND (status IN ('live','notlive','archived')))
	
	if +SQLCODE=0 {
		return eventCount
	}
	
	return 0
]]></Implementation>
</Method>

<Method name="countAbstractEventsCreatedInTimePeriod">
<Description>
Count the number of abstract events in the current namespace for the given time period. 
The time of the event is counted as its creation date, not the event date </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inFrom:%String,inTo:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	&SQL(SELECT COUNT(ID) INTO :eventCount 
		FROM setup.viewAbstractEvents
		WHERE (xCRstamp BETWEEN :inFrom AND :inTo)
		AND (status IN ('live','notlive','archived')))
	
	if +SQLCODE=0 {
		return eventCount
	}
	
	return 0
]]></Implementation>
</Method>

<Method name="countAwardEventsCreatedInTimePeriod">
<Description>
Count the number of award events in the current namespace for the given time period. 
The time of the event is counted as its creation date, not the event date </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inFrom:%String,inTo:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	&SQL(SELECT COUNT(ID) INTO :eventCount 
		FROM setup.viewAwardsEvents
		WHERE (xCRstamp BETWEEN :inFrom AND :inTo)
		AND (status IN ('live','notlive','archived')))
	
	if +SQLCODE=0 {
		return eventCount
	}
	
	return 0
]]></Implementation>
</Method>

<Method name="countEventsStartingInPeriod">
<Description>
Get the count of events starting in this period - this doesn't exist in EF.stats.event</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inFrom:%String,inTo:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set count=0
	set rs=##class(%ResultSet).%New("EF.stats.events:qChargeableEventsForPeriod")
	set ok=rs.Execute(inFrom, inTo)
	while rs.Next()	{
		// This is not efficient but it is consistent
		set count=count+1		
	}
	quit count
]]></Implementation>
</Method>

<Method name="getNamespaceCreationDate">
<Description>
Return the creation date of the current namespace</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// We use the date the first person was created
	set obj=##class(cod.objPerson).%OpenId(1)
	return obj.xCRstamp
]]></Implementation>
</Method>

<Method name="isInternalNamespace">
<Description>
Return true if inNamespace is an internal account that should not be included in statistics</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inNamespace:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	// Sales, support, trial and other shared internal accounts. These may have a number appended.	
	if inNamespace ? 1"EVTRIAL".N {
		return 1
	} elseif inNamespace ? 1"EVDEMO".N {
		return 1
	} elseif inNamespace ? 1"EVSALES".N {
		return 1
	} elseif inNamespace ? 1"EVTRAINING".N {
		return 1
	} elseif inNamespace ? 1"EVSUPPORT".N {
		return 1
	} elseif inNamespace ? 1"EVMARKETING".N {
		return 1
	} elseif inNamespace ? 1"EVINTERNAL".N {
		return 1
	} elseif inNamespace ? 1"EVAPIEXAMPLE".N {
		return 1
	} elseif inNamespace ? 1"EVEFUSA".N {
		return 1
	} elseif inNamespace ? 1"EVABSTRACTS-TRIAL".N {
		return 1
	}
		
	// Personal internal accounts - we do an exact match here
	set internal("EVLYNDAB")=""
	set internal("EVBENB")=""
	set internal("EVJEREMYW")=""
	set internal("EV007")=""
	set internal("EVIANW")=""
	set internal("EVANTHONYV")=""
	set internal("EVHARRYP")=""
	set internal("EVKIMDV")=""
	set internal("EVOSOBLEO")=""
	set internal("EVMARCELOZ")=""
	set internal("EVJAMESW")=""	
	if $Data(internal(inNamespace)) {
		return 1
	}
		
	// Other internal accounts (all new internal accounts should be prefixed EF-)	
	if inNamespace ? 1"EF-".E {
		return 1
	}
	
	return 0
]]></Implementation>
</Method>

<Method name="isSandboxNamespace">
<Description>
Return true if inNamespace is a test or sandbox account that should not be included in statistics</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inNamespace:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if inNamespace ? .E1"-SANDBOX" {
		return 1
	} elseif inNamespace ? .E1"TEST" {
		return 1
	}
	
	return 0
]]></Implementation>
</Method>

<Method name="generateClientHistoryForCurrentNamespace">
<Description>
Generate client history for the current namespace</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inStartYear:%Integer,inEndYear:%Integer</FormalSpec>
<Implementation><![CDATA[
	write $ZNSPACE,*9
	write ..getNamespaceCreationDate(),*9
	
	// Events for each year
	for year=inStartYear:1:inEndYear {
		// Use YYYY-MM-DD HH:MM:SS format
		set yearStart = year _ "-01-01 00:00:00"
		set yearEnd = year _ "-12-31 23:59:59"
		write ..countEventsCreatedInTimePeriod(yearStart, yearEnd),*9
	}

	// Registrations for each year
	for year=inStartYear:1:inEndYear {
		// Use YYYY-MM-DD HH:MM:SS format
		set yearStart = year _ "-01-01 00:00:00"
		set yearEnd = year _ "-12-31 23:59:59"
		write ##class(EF.stats.bookings).getAttendeeCountForPeriod(yearStart, yearEnd),*9
	}
	
	// Current users
	write ##class(users).getChargeableUserCount(),*9	
	
	write !
]]></Implementation>
</Method>

<Method name="generateClientHistoryForAllNamespaces">
<Description>
Generate client history across all namespaces</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inStartYear:%Integer,inEndYear:%Integer</FormalSpec>
<Implementation><![CDATA[
	// Write a header
	write "Namespace",*9
	write "Created",*9
	for year=inStartYear:1:inEndYear {
		write year," Events",*9
	}
	for year=inStartYear:1:inEndYear {
		write year," Registrations",*9
	}
	write "Users",*9
	write !
	
	set ns="",orgNS=$ZNSPACE
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		
		if (ns="") {
			quit
		}
		
		// Ignore internal, sandbox and API accounts
		if '..isInternalNamespace(ns) && '..isSandboxNamespace(ns) && '(ns ? .E1"API")  {
			zn ns
			do ..generateClientHistoryForCurrentNamespace(inStartYear, inEndYear)
		}
	}
	zn orgNS
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.codItemStats">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.stats.codItemStats.CLS/EV.1
;vc; Component: CLS.EF.stats.codItemStats
;vc;  Location: SmallDev
;vc; Date/Time: 05-Nov-15 18:09
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.codItemStats.CLS/EV.1</td><td>CLS.EF.stats.codItemStats</td><td>SmallDev</td><td style='white-space: nowrap;'>05-Nov-15 18:09</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63861,64796</TimeChanged>
<TimeCreated>63259,38301.312869</TimeCreated>

<Method name="countItemUsage">
<ClassMethod>1</ClassMethod>
<FormalSpec>item</FormalSpec>
<Implementation><![CDATA[
	set ns=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
		
		set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		do rs.Prepare("SELECT COUNT(ID) As uses FROM cod.objItemData WHERE (objItemName->description = ?) AND (result<>'') AND (result IS NOT NULL)")	
		set ok=rs.Execute(item)
		while rs.Next() {
			set uses=rs.Get("uses")
			if uses>0 w !,ns,?20,"uses:",uses
		}
		
		do rs.Close()
		kill rs
	}
]]></Implementation>
</Method>

<Method name="whoLacksThisEventSpanningCodItem">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemName</FormalSpec>
<Implementation><![CDATA[
	set ns=""
	w !!,"The following namespaces does not have the database item called '",itemName,"'"
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
		
		set codItemNameID=##class(cod.objItemName).getIDFromDescriptionNoEvent(itemName)
		if codItemNameID="" {
			w !,ns	
		}

	}
]]></Implementation>
</Method>

<Method name="findNonDataSavingCodItemsInClients">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set currentNameSpace=$ZNSPACE
	set ns=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
		set rsAffectedCods=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	 	do rsAffectedCods.Prepare("select parent->parent as pageID, objEvent,objItemName, objItemName->description as itemDescription from sc_xModules.objCodItem where active=1 AND isDelegate<>1 AND isGuest<>1 AND isQuantityItem<>1 AND isAdditionalItem<>1")
	 	do rsAffectedCods.Execute()
	 	while (rsAffectedCods.Next()){
		 	Write "Namespace:",ns,"	Item: ",rsAffectedCods.Get("itemDescription"),"(",rsAffectedCods.Get("objItemName"),")	Page: ",rsAffectedCods.Get("pageID"),"	EventID: ",rsAffectedCods.Get("objEvent"),!
	 	}
	 	kill rsAffectedCods
	}
	zn currentNameSpace
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.discounts">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.stats.discounts.CLS/EV.2
;vc; Component: CLS.EF.stats.discounts
;vc;  Location: SmallDev
;vc; Date/Time: 07-Mar-16 07:57
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.discounts.CLS/EV.2</td><td>CLS.EF.stats.discounts</td><td>SmallDev</td><td style='white-space: nowrap;'>07-Mar-16 07:57</td><td>FredG</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63984,28504</TimeChanged>
<TimeCreated>63658,40765.507765</TimeCreated>

<Method name="whoHasThisDiscountType">
<ClassMethod>1</ClassMethod>
<FormalSpec>discountType,showEvents=0,numberOfMonths=12</FormalSpec>
<Implementation><![CDATA[
	set ns="",grandTotal=0,eventCount=0,orgNS=$ZNSPACE
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
		
		set nsCount=0
		set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		set query="SELECT * FROM setup.objEvent"
		if numberOfMonths {
			set startDate=##class(shared.dateFunctions).ADD(+$H,-numberOfMonths,"M")
			set startDate=##class(shared.dateFunctions).multiDate(startDate,1)
			set query=query_" WHERE dateFrom BETWEEN "_startDate_" AND "_+$H	
		}
		do rs.Prepare(query)	
		set ok=rs.Execute()
		while rs.Next() {
			set xEventID=rs.Get("ID")
			set controllerID=##class(setup.objEvent).getControllerID(xEventID)
			set hit=0,eventCount=eventCount+1,codItem=""

			&SQL(SELECT ID,codItem  INTO :tmp,:codItem FROM eCom.objDiscount WHERE discountType=:discountType AND objController = :controllerID and active=1)
			if +SQLCODE=0 set hit=1	


			if hit {	
				if showEvents w !,"EventID=",xEventID,?20,"event name: ",##class(setup.objEventDetails).getDetails(xEventID,1)
				set nsCount=nsCount+1
				set grandTotal=grandTotal+1
			}
		}
		if nsCount>0 w !,ns,?20,"count:",nsCount
		do rs.Close()
		kill rs
	}
	w !!,"Total ",grandTotal," out of ",eventCount," events (",$J(grandTotal/eventCount*100,".",2),"%)"
	zn orgNS
]]></Implementation>
</Method>

<Method name="whoHasThisDiscountCodOperator">
<ClassMethod>1</ClassMethod>
<FormalSpec>discountCodOperator,showEvents=0,numberOfMonths=12</FormalSpec>
<Implementation><![CDATA[
	set ns="",grandTotal=0,eventCount=0,orgNS=$ZNSPACE
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
		
		set nsCount=0
		set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		set query="SELECT * FROM setup.objEvent"
		if numberOfMonths {
			set startDate=##class(shared.dateFunctions).ADD(+$H,-numberOfMonths,"M")
			set startDate=##class(shared.dateFunctions).multiDate(startDate,1)
			set query=query_" WHERE dateFrom BETWEEN "_startDate_" AND "_+$H	
		}
		do rs.Prepare(query)	
		set ok=rs.Execute()
		while rs.Next() {
			set xEventID=rs.Get("ID")
			set controllerID=##class(setup.objEvent).getControllerID(xEventID)
			set hit=0,eventCount=eventCount+1,codItem=""

			&SQL(SELECT ID,codItem  INTO :tmp,:codItem FROM eCom.objDiscount WHERE codOperator = :discountCodOperator AND objController = :controllerID)
			if +SQLCODE=0 set hit=1	


			if hit {	
				if showEvents w !,"EventID=",xEventID,?20,"codItem = ",codItem 
				set nsCount=nsCount+1
				set grandTotal=grandTotal+1
			}
		}
		if nsCount>0 w !,ns,?20,"count:",nsCount
		do rs.Close()
		kill rs
	}
	w !!,"Total ",grandTotal," out of ",eventCount," events (",$J(grandTotal/eventCount*100,".",2),"%)"
	zn orgNS
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.events">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.stats.events.CLS/EV.15
;vc; Component: CLS.EF.stats.events
;vc;  Location: SmallDev
;vc; Date/Time: 27-Jul-16 09:47
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.events.CLS/EV.15</td><td>CLS.EF.stats.events</td><td>SmallDev</td><td style='white-space: nowrap;'>27-Jul-16 09:47</td><td>FredG</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>64126,35113</TimeChanged>
<TimeCreated>63391,52950.002542</TimeCreated>

<Method name="getTotalEventCount">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set ns="",grandTotal=0,eventCount=0,orgNS=$ZNSPACE
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns

		&SQL(SELECT COUNT(ID) INTO :tmp FROM setup.objEvent)		
		if +SQLCODE=0 {
			set eventCount=eventCount+tmp
			w !,ns,?25,tmp	
		}
		
	}
	w !!!,"total: ",eventCount
	zn orgNS
]]></Implementation>
</Method>

<Method name="getEventCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>startTimeStampUTC,endTimeStampUTC</FormalSpec>
<Implementation><![CDATA[
	set ns="",grandTotal=0,eventCount=0,orgNS=$ZNSPACE
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if (ns'?2.A1"API") && (ns'?2.A1"SANDBOX") {
			zn ns

			&SQL(SELECT COUNT(ID) INTO :tmp 
				FROM setup.objEvent
				WHERE (active = 1)
				AND	(dateFrom > (CAST(:startTimeStampUTC AS DATE)))
				AND (dateFrom <= (CAST(:endTimeStampUTC AS DATE)))
				AND (status IN ('live','notlive','archived'))
			)
			if +SQLCODE=0 set eventCount=eventCount+tmp
			
			w !,ns,": ",tmp
		}
	}
	zn orgNS
	w !!,"total: ",eventCount
]]></Implementation>
</Method>

<Method name="getEventList">
<ClassMethod>1</ClassMethod>
<FormalSpec>startTimeStampUTC,endTimeStampUTC,onlyPublic=0,onlyLive=0,minAttendeeCount=0</FormalSpec>
<Implementation><![CDATA[
	set ns="",grandTotal=0,eventCount=0,orgNS=$ZNSPACE
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if (ns'?2.A1"API") && (ns'?2.A1"SANDBOX")  && (ns'?2.A1"TEST") {
			zn ns
			set rs=##class(%ResultSet).%New()
			set query="SELECT * FROM setup.objEvent WHERE (status <>'cancelled') AND (dateFrom > (CAST(? AS DATE))) AND (dateFrom <= (CAST(? AS DATE)))"
			if onlyLive {
				set query=query_" AND (status='live')"
			}
			do rs.Prepare(query)
			do rs.Execute(startTimeStampUTC,endTimeStampUTC)
			while rs.Next() {
				set eventID=rs.Get("ID")
				set event=##class(setup.objEvent).%OpenId(eventID)
				if $IsObject(event) {
					if event.getNumberOfAttendees() > minAttendeeCount {
						set isPublic=1
						if ##class(setup.objEventSetting).getParameter("website","private website",eventID) set isPublic=0		
						if event.privateEvent=1 set isPublic=0
						if ##class(setup.objEventSetting).getParameter("single sign on","website only accessible using SSO",eventID)=1 set isPublic=0
						if ##class(setup.objEventSetting).getParameter("website","private website my account",eventID) set isPublic=0
						
						if (onlyPublic=1) && (isPublic=0) {
							//skip	
						} else {
							w !,ns,"|",eventID,"|",##class(setup.objEventDetails).getDetails(eventID,1),"|",$p(##class(setup.objEvent).getEventStartTimestampUTC(eventID)," ",1),"|",event.getNumberOfAttendees(),"|",##class(cod.objItemData).get(event.xCRuserID,"email")
							set eventCount=eventCount+1		
						}
					}
				}					
			}
			
			
		}
	}
	zn orgNS
	write !!,"Event count: ",eventCount
]]></Implementation>
</Method>

<Method name="getTotalEventIncome">
<ClassMethod>1</ClassMethod>
<FormalSpec>startTimeStampUTC,endTimeStampUTC,currencyCode="GBP"</FormalSpec>
<Implementation><![CDATA[
	set ns="",grandTotal=0,eventCount=0,orgNS=$ZNSPACE
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if (ns'?2.A1"API") && (ns'?2.A1"-SANDBOX") {
			zn ns

			&SQL(SELECT SUM(totalPrice) INTO :tmp 
				FROM eCom.objPurchase
				WHERE (xCRstamp > (:startTimeStampUTC))
				AND (xCRstamp <= (:endTimeStampUTC))
				AND (status <> 'cancelled')
				AND (objCurrency->code = :currencyCode)
			)
			if +SQLCODE=0 set eventCount=eventCount+tmp
			
			w !,ns,": ",$FN(tmp,",",2)
		}
	}
	zn orgNS
	w !!,"total: ",$FN(eventCount,",",2)
]]></Implementation>
</Method>

<Method name="getEventCountForPeriod">
<ClassMethod>1</ClassMethod>
<FormalSpec>statusList:%List,startTimeStampUTC,endTimeStampUTC</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	#dim eventCount as %Integer = 0
	

	&SQL(SELECT COUNT(ID) INTO :tmp 
		FROM setup.objEvent
		WHERE (active = 1)
		AND	(dateFrom > (CAST(:startTimeStampUTC AS DATE)))
		AND (dateFrom <= (CAST(:endTimeStampUTC AS DATE)))
		AND (status %INLIST :statusList SIZE ((10)) )
	)
	if (+SQLCODE=0) {
		set eventCount=tmp
	}
	return eventCount
]]></Implementation>
</Method>

<Method name="getAbstractEventCountForPeriod">
<ClassMethod>1</ClassMethod>
<FormalSpec>startTimeStampUTC,endTimeStampUTC</FormalSpec>
<Implementation><![CDATA[
	set count=0
	set rs=##class(%ResultSet).%New("EF.stats.events:qChargeableEventsForPeriod")
	set ok=rs.Execute(startTimeStampUTC, endTimeStampUTC)
	while rs.Next()	{
		set eventID=rs.Get("ID")
		if ##class(setup.objEventSetting).getParameter("event setup","has abstracts",eventID) {
			set count=count+1	
		}	
	}
	quit count
]]></Implementation>
</Method>

<Method name="getAwardEventCountForPeriod">
<ClassMethod>1</ClassMethod>
<FormalSpec>startTimeStampUTC,endTimeStampUTC</FormalSpec>
<Implementation><![CDATA[
	set count=0
	set rs=##class(%ResultSet).%New("EF.stats.events:qChargeableEventsForPeriod")
	set ok=rs.Execute(startTimeStampUTC, endTimeStampUTC)
	while rs.Next()	{
		set eventID=rs.Get("ID")
		if ##class(setup.objEventSetting).getParameter("system","isAwardsEvent",eventID) {
			set count=count+1	
		}	
	}
	
	quit count
]]></Implementation>
</Method>

<Method name="getMeetingManagerEventCountForPeriod">
<ClassMethod>1</ClassMethod>
<FormalSpec>startTimeStampUTC,endTimeStampUTC</FormalSpec>
<Implementation><![CDATA[
	set count=0
	set rs=##class(%ResultSet).%New("EF.stats.events:qChargeableEventsForPeriod")
	set ok=rs.Execute(startTimeStampUTC, endTimeStampUTC)
	while rs.Next()	{
		set eventID=rs.Get("ID")
		if ##class(setup.objEventSetting).getParameter("event setup","allow meeting manager",eventID) {
			set count=count+1	
		}	
	}
	quit count
]]></Implementation>
</Method>

<Method name="getEventCountWithMultiCurrency">
<ClassMethod>1</ClassMethod>
<FormalSpec>startTimeStampUTC,endTimeStampUTC</FormalSpec>
<Implementation><![CDATA[
	set ns="",grandTotal=0,eventCount=0,orgNS=$ZNSPACE
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if (ns'?2.A1"API") && (ns'?2.A1"-SANDBOX") {
			zn ns

			set rs=##class(%ResultSet).%New("EF.stats.events:qChargeableEventsForPeriod")
			do rs.Execute(startTimeStampUTC,endTimeStampUTC)
			while rs.Next()	{
				set eventID=rs.Get("ID")
				
				&SQL(SELECT COUNT(DISTINCT objCurrency) INTO :tmp FROM eCom.objPurchase WHERE (objEvent = :eventID) AND (status <> 'cancelled') )
				if +SQLCODE=0,tmp>1 {
					set eventCount=eventCount+tmp
					w !,ns,": ",ns,?20,"EventID: ",eventID
				}
			}
		}
	}
	zn orgNS
	w !!,"total: ",eventCount
]]></Implementation>
</Method>

<Method name="whoHasThisEventDateFormat">
<ClassMethod>1</ClassMethod>
<FormalSpec>dateFormat</FormalSpec>
<Implementation><![CDATA[
	set ns="",grandTotal=0,eventCount=0,orgNS=$ZNSPACE
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if (ns'?2.A1"API") && (ns'?2.A1"-SANDBOX") {
			zn ns

			set rs=##class(%ResultSet).%New()
			do rs.Prepare("SELECT * FROM setup.objEvent WHERE dateFormat = ?")
			do rs.Execute(dateFormat)
			while rs.Next()	{
				set eventID=rs.Get("ID")
				set eventCount=eventCount+1
				w !,ns,": ",ns,?20,"EventID: ",eventID
			}
		}
	}
	zn orgNS
	w !!,"total: ",eventCount
]]></Implementation>
</Method>

<Method name="getEventsByName">
<ClassMethod>1</ClassMethod>
<FormalSpec>searchText</FormalSpec>
<Implementation><![CDATA[
	
	set ns="",grandTotal=0,eventCount=0
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
		
		set nsCount=0
		set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		set query="SELECT * FROM setup.objEventDetails WHERE (objLanguage = 1) AND (description LIKE ?)"
		do rs.Prepare(query)
		do rs.Execute("%"_searchText_"%")
		while rs.Next() {
			set eventID=rs.Get("ID")
			set eventName=rs.Get("description")	
			set path=##class(shared.pageMethods).getFullPath(eventID)
			set URL=path_"/frontend/homePage.csp?eventID="_eventID

			
			w !,ns,",",eventID,",""",eventName,""",""",URL,""","
		}
	}
]]></Implementation>
</Method>

<Method name="countAbstractEventsWithSummary">
<ClassMethod>1</ClassMethod>
<FormalSpec>numberOfMonths=12</FormalSpec>
<Implementation><![CDATA[
	set ns="",grandTotal=0,eventCount=0,abstractEventCount=0,usingSummary=0,entriesWithSummary=0
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
		
		if ns'?2.E1"API" {
			set nsCount=0
			set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
			set query="SELECT * FROM setup.objEvent WHERE dateFrom BETWEEN ? AND ?"
			set startDate=##class(shared.dateFunctions).ADD(+$H,-numberOfMonths,"M")
			set startDate=##class(shared.dateFunctions).multiDate(startDate,1)
			do rs.Prepare(query)	
			set ok=rs.Execute(startDate,+$H)
			while rs.Next() {
				set xEventID=rs.Get("ID")
				set hit=0,eventCount=eventCount+1
				
				if ##class(setup.objEventSetting).getParameter("event setup","has abstracts",xEventID)=1 {
					set abstractEventCount=abstractEventCount+1
					if ##class(setup.objEventSetting).getParameter("abstracts","suppress summary field",xEventID)'=1 {
						set usingSummary=usingSummary+1	
						set rsEnt=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
						do rsEnt.Prepare("SELECT COUNT(ID) AS sumCount FROM abstract.objDocument WHERE (objTopic->objEvent = ?) AND (LEN(summary) >5 ) AND (active=1)")
						do rsEnt.Execute(xEventID)
						do rsEnt.Next()
						set count=rsEnt.Get("sumCount")
						if count {
							set entriesWithSummary=entriesWithSummary+count
							set entriesWithSummary(ns)=$G(entriesWithSummary(ns))+count
							w !,ns,?20,xEventID
						}
					}
				}
			}
		}
	}
	w !!,"Total events: ",eventCount
	w !,"Abstract events: ",abstractEventCount
	w !,"Using the summary: ",usingSummary
	w !,"Documents with summary: ",entriesWithSummary
	k (entriesWithSummary) w
]]></Implementation>
</Method>

<Method name="countAwardsEventsWithABIs">
<ClassMethod>1</ClassMethod>
<FormalSpec>startTimeStampUTC</FormalSpec>
<Implementation><![CDATA[
	set ns="",grandTotal=0,eventCount=0,orgNS=$ZNSPACE
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if (ns'?2.A1"API") && (ns'?2.A1"SANDBOX") {
			zn ns
			set rs=##class(%ResultSet).%New()
			set query="SELECT * FROM setup.viewAwardsEvents WHERE (status <>'cancelled') AND (dateFrom > (CAST(? AS DATE)))"
			do rs.Prepare(query)
			do rs.Execute(startTimeStampUTC)
			while rs.Next() {
				set eventID=rs.Get("ID")
				&SQL(SELECT COUNT(*) INTO :tmp FROM eCom.objBasketItem WHERE (objEvent = :eventID) AND (type='additional' OR type='quantityitem'))
				if +SQLCODE=0,tmp>0 {
					set event=##class(setup.objEvent).%OpenId(eventID)
						if $IsObject(event) {
						set eventCount=eventCount+1
						w !,ns,?30,"Id=",eventID,?38,$E(##class(setup.objEventDetails).getDetails(eventID,1),1,60),?100,"Count:",event.getNumberOfAttendees()	
					}
				}	
			}
		}
	}
	zn orgNS
	write !!,"Event count: ",eventCount
]]></Implementation>
</Method>

<Method name="getNumberOfEventsByAttendeeCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>financialYear:%Integer</FormalSpec>
<Implementation><![CDATA[
	set ns="",grandTotal=0,eventCount=0,orgNS=$ZNSPACE
	
	
	set startDate=##class(shared.dateFunctions).multiDate(financialYear_"/04/04",25)_" 00:00:00"
	set endDate=##class(shared.dateFunctions).multiDate((financialYear+1)_"/04/03",25)_" 23:59:59"
	
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if (ns'?2.A1"API") && (ns'?2.A1"SANDBOX") && (ns'["SUPPORT")  && (ns'["TRAINING") {
			zn ns
			set rsEvent=##class(%ResultSet).%New()	
			do rsEvent.Prepare("SELECT count(*) as attendeeCount FROM links.viewAttendees WHERE objEvent->dateFrom BETWEEN (CAST(? AS DATE)) AND (CAST(? AS DATE)) GROUP BY objevent ORDER BY attendeeCount")
			do rsEvent.Execute(startDate,endDate)
			while rsEvent.Next() {
				set attendeeCount = rsEvent.Get("attendeeCount")

				if attendeeCount>1000 {
					set x= $Increment(totals(6,"1000+"))
					
				} elseif attendeeCount>500 {
					set x= $Increment(totals(5,"500-999"))
						
				} elseif attendeeCount>250 {
					set x= $Increment(totals(4,"250-499"))
						
				} elseif attendeeCount>100 {
					set x= $Increment(totals(3,"100-249"))
						
				} elseif attendeeCount>50 {
					set x= $Increment(totals(2,"50-99"))
						
				} else {
					set x= $Increment(totals(1,"0-50"))	
				}
			}
		}
	}
	
	zn orgNS
	w !! 
	kill (totals)
	Write
]]></Implementation>
</Method>

<Query name="qChargeableEventsForPeriod">
<Type>%Library.SQLQuery</Type>
<FormalSpec>startTimeStampUTC,endTimeStampUTC</FormalSpec>
<SqlQuery><![CDATA[	SELECT ID
	FROM setup.objEvent
	WHERE (active = 1)
		AND	(dateFrom > (CAST(:startTimeStampUTC AS DATE)))
		AND (dateFrom <= (CAST(:endTimeStampUTC AS DATE)))
		AND (status IN ('live','notlive','archived')
	)]]></SqlQuery>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="ID:%String"/>
</Query>
</Class>


<Class name="EF.stats.functionStats">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.stats.functionStats.CLS/EV.0
;vc; Component: CLS.EF.stats.functionStats
;vc;  Location: SmallDev
;vc; Date/Time: 16-Feb-15 16:04
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.functionStats.CLS/EV.0</td><td>CLS.EF.stats.functionStats</td><td>SmallDev</td><td style='white-space: nowrap;'>16-Feb-15 16:04</td><td>FredG</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63596,36451</TimeChanged>
<TimeCreated>63245,40065.113952</TimeCreated>

<Method name="whoIsUsingThisFunction">
<ClassMethod>1</ClassMethod>
<FormalSpec>function</FormalSpec>
<Implementation><![CDATA[
	set ns=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
	
		set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		do rs.Prepare("SELECT objRole->description AS rolename FROM access.lnkFunctionRole WHERE objFunction->description = ?")	
		set ok=rs.Execute(function)
		while rs.Next() {
			w !,ns,?25,rs.Get("rolename")	
		}
		
	}
]]></Implementation>
</Method>

<Method name="whoGotThisFunction">
<ClassMethod>1</ClassMethod>
<FormalSpec>function</FormalSpec>
<Implementation><![CDATA[
	set ns=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
	
		set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		do rs.Prepare("SELECT * FROM access.objFunction WHERE description = ?")	
		set ok=rs.Execute(function)
		while rs.Next() {
			w !,ns
		}
		
	}
]]></Implementation>
</Method>

<Method name="getActiveUsersForFunction">
<ClassMethod>1</ClassMethod>
<FormalSpec>function</FormalSpec>
<Implementation><![CDATA[
	set ns=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
	
		set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		do rs.Prepare("SELECT objRole->description AS rolename FROM access.lnkFunctionRole WHERE objFunction->description = ?")	
		set ok=rs.Execute(function)
		while rs.Next() {
			set roleName=rs.Get("rolename")	

			set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
			do rs.Prepare("SELECT objPerson FROM access.lnkPersonRole WHERE (objRole->description = ?) ")	
			set ok=rs.Execute(roleName)
			while rs.Next() {
				set personID=rs.Get("objPerson")
				if ##class(access.lnkPersonRole).hasFunction(personID,"Eventsforce Only")=0 {
					if ##class(cod.objItemData).get(personID,"active") {	
						w !,ns,?25,##class(admin.objUser).getFullName(personID)," (",roleName,")"
					}
				}
			}
		}
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.languages">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.stats.languages.CLS/EV.3
;vc; Component: CLS.EF.stats.languages
;vc;  Location: SmallDev
;vc; Date/Time: 23-Mar-15 17:45
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.languages.CLS/EV.3</td><td>CLS.EF.stats.languages</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Mar-15 17:45</td><td>FredG</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63634,63854</TimeChanged>
<TimeCreated>63615,34595.772384</TimeCreated>

<Method name="whoHasAccessToTranslations">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set orgNS=$ZNSPACE
	set ns=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if ns'?1.E1"API" {
			zn ns
			
			&SQL(SELECT COUNT(ID) INTO :rolesWithTrans 
				FROM access.lnkFunctionRole 
				WHERE (objFunction->description = 'Translations')
				AND (objRole->description <> 'Eventsforce Support')
			)
			if (+SQLCODE=0) && (rolesWithTrans>0) {
				write !,ns,?30,"Roles with translation: ",rolesWithTrans	
			}	
		}
	}
	zn orgNS
]]></Implementation>
</Method>

<Method name="whoIsUsingWhichLanguages">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set orgNS=$ZNSPACE
	set ns=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if ns'?1.E1"API" {
			zn ns
			&SQL(SELECT count(DISTINCT objEvent) INTO :eventCountWithLanguages 
				FROM
				setup.objEventSetting 
				WHERE 
				settingGroup='frontend languages'
				AND settingValue=1
				AND setting <> 'english'	
			)
			if (+SQLCODE=0) && (eventCountWithLanguages>0) {
				w !,ns,?30,"Events with multiple languages: ",eventCountWithLanguages	
			}
		}
	}
	zn orgNS
]]></Implementation>
</Method>

<Method name="whoHasCustomTranslations">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set orgNS=$ZNSPACE
	#dim ns as %String
	#dim startDateHoro as %Integer 	= $H-365
	#dim endDateHoro as %Integer  = +$H
	#dim filename as %String = "c:\temp\customTranslations.csv"
	#dim rolesWithTrans as %Integer =0
	#dim languageID as %Integer
	#dim phrase as %String
	#dim query as %String
	#dim del as %String = $C(9)
	#dim clientName as %String
	#dim languageName as %String
	#dim translation as %String
	#dim isLanguageActive as %Boolean
	#dim lastUsed as %String
	
	set file=##class(%File).%New(filename)
	do file.Open("NRW")
	do file.WriteLine("Client Name"_del_"Language"_del_"Phrase"_del_"Translation"_del_"Language Active"_del_"Last Used")
	set ns=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if ns'?1.E1"API" {
			zn ns
			set clientName=$E(ns,3,99)
			w !,ns
			
			set rolesWithTrans=0
			&SQL(SELECT COUNT(ID) INTO :rolesWithTrans 
				FROM access.lnkFunctionRole 
				WHERE (objFunction->description = 'Translations')
				AND (objRole->description <> 'Eventsforce Support')
			)
			if rolesWithTrans = 0 {
				set rsLang=##class(%ResultSet).%New()
				do rsLang.Prepare("SELECT * FROM shared.objLanguage")
				do rsLang.Execute()
				while rsLang.Next() {
					w "."
					set languageID=rsLang.Get("ID")
					set isLanguageActive=rsLang.Get("active")
					set lastUsed=..getLastUsedEventDate(languageID)
					set languageName=##class(shared.objLanguage).getLanguageDesc(languageID)
					
					set rsTranslation=##class(%ResultSet).%New()
					if ..isStandardLanguage(languageID) {
						set query="SELECT description,objPhrase->description AS phrase FROM translations.objTranslation WHERE (objLanguage = ?) AND (updatedLocally = 1)"
					} else {
						set query="SELECT description,objPhrase->description AS phrase FROM translations.objTranslation WHERE (objLanguage = ?)"	
					}
					do rsTranslation.Prepare(query)
					do rsTranslation.Execute(languageID)		
					while rsTranslation.Next() {
						set phrase=rsTranslation.Get("phrase")
						set translation=rsTranslation.Get("description")
						set translation=##class(shared.stringFunctions).formatForCSV(translation)
						
						do file.WriteLine(clientName_del_languageName_del_phrase_del_translation_del_isLanguageActive_del_lastUsed)
					}
				}				
			} 	
		}
	}	
	do file.Close()
	zn orgNS
]]></Implementation>
</Method>

<Method name="getLastUsedEventDate">
<ClassMethod>1</ClassMethod>
<FormalSpec>languageID</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim languageName as %String = $ZCVT(##class(shared.objLanguage).getLanguageDesc(languageID),"U")
	
	&SQL(SELECT objEvent->dateFrom INTO :dateFrom FROM setup.objEventSetting WHERE (settingGroup='frontend languages')
		 AND (settingValue=1) AND (setting = :languageName)	
		ORDER BY objEvent->dateFrom DESC	 
	)
	if +SQLCODE=0 {
		return $ZD(dateFrom,2)
	} else {
		return "n/a"
	}
]]></Implementation>
</Method>

<Method name="isStandardLanguage">
<ClassMethod>1</ClassMethod>
<FormalSpec>languageID</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	#dim languageName as %String = $ZCVT(##class(shared.objLanguage).getLanguageDesc(languageID),"U")
	
	if languageName="SPANISH" return 1
	if languageName="GERMAN" return 1
	if languageName="FRENCH" return 1
	
	return 0
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.moduleStats">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.stats.moduleStats.CLS/EV.1
;vc; Component: CLS.EF.stats.moduleStats
;vc;  Location: SmallDev
;vc; Date/Time: 25-Sep-15 17:18
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.moduleStats.CLS/EV.1</td><td>CLS.EF.stats.moduleStats</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Sep-15 17:18</td><td>FredG</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63820,62301</TimeChanged>
<TimeCreated>63636,53564.687126</TimeCreated>

<Method name="whoHasThisModule">
<ClassMethod>1</ClassMethod>
<FormalSpec>moduleName</FormalSpec>
<Implementation><![CDATA[
	set orgNS=$ZNSPACE
	set ns=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if ns'?1.E1"API" {
			zn ns
			
			
			if ##class(EF.licensing.objLicense).isModuleAllowedInCurrentLicense(moduleName) {
				write !,ns
			}			

		}
	}
	zn orgNS
]]></Implementation>
</Method>

<Method name="whoHasThisCustomModule">
<ClassMethod>1</ClassMethod>
<FormalSpec>moduleName</FormalSpec>
<Implementation><![CDATA[
	set orgNS=$ZNSPACE
	set ns=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if ns'?1.E1"API" {
			zn ns
			
			&SQL(SELECT * FROM EF_licensing.objCustomPackageModules WHERE moduleIdentifier = :moduleName )
			if +SQLCODE=0 {
				write !,$E(ns,3,99)
			}			

		}
	}
	zn orgNS
]]></Implementation>
</Method>

<Method name="exportModuleUsageForAllClients">
<ClassMethod>1</ClassMethod>
<FormalSpec>filename="d:\temp\pagehits.csv"</FormalSpec>
<Implementation><![CDATA[
	quit 1 // MUST BE REWRITTEN FOR THE NEW MODULE CLASSES
	set orgNS = $ZNSPACE
	set delim=","
	k ^%xResults
	set ns=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
		w !,ns
		
		set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		do rs.Prepare("select objModule->description,objModule->comments from setup.lnkSystemTypesModules WHERE (objSystemType->description='professional') AND (objModule->active=1)")
		do rs.Execute()
		while rs.Next() {	
			set moduleName=rs.Get("description")
			if moduleName'="" {
				set ^%xResults(ns,moduleName)=""
				set modules(moduleName)=rs.Get("comments")
			}
		}
		do rs.Close()
			
	}
	
	set string="namespace"_delim
	set file=##class(%File).%New(filename)
	do file.Open("WSN")

	set module=""
	for  {
		set module=$O(modules(module))	
		if module="" quit
		
		set string=string_module_delim
	}
	do file.WriteLine(string)

	do file.WriteLine("")
	set namespace=""
	for  {
		set namespace=$O(^%xResults(namespace))
		if namespace="" quit
		
		do file.Write(namespace_delim)	
		
		set module=""
		for  {
			set module=$O(modules(module))
			if module="" quit
			
			if $D(^%xResults(namespace,module)) {
				do file.Write(1_delim)	
			} else {
				do file.Write(delim)
			}	
		}
		do file.WriteLine("")
	}
	do file.Close()
	zn orgNS
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.paymentGateways">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.stats.paymentGateways.CLS/EV.11
;vc; Component: CLS.EF.stats.paymentGateways
;vc;  Location: SmallDev
;vc; Date/Time: 08-Apr-16 16:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.paymentGateways.CLS/EV.11</td><td>CLS.EF.stats.paymentGateways</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Apr-16 16:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64016,59903</TimeChanged>
<TimeCreated>63582,61533.114028</TimeCreated>

<Method name="getGatewayUsage">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set ns="",orgNS=$ZNSPACE
	set startDateTime=##class(shared.dateFunctions).multiDate($H-(12*31),25)_" 00:00:00"
	w !,"since: ",startDateTime,!

	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if ns'?1.AN1"API" {
			zn ns
			set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
			set query="SELECT DISTINCT objPaymentMethod->internalDescription FROM links.lnkEventPaymentMethod WHERE (objPaymentMethod->creditcardType=1) and (xMOstamp>?)"
			do rs.Prepare(query)
			do rs.Execute(startDateTime)
			while rs.Next() {
				set name=rs.Get("internalDescription")
				set result(name)=$G(result(name))+1	
			}
			kill rs
		}
	}
	write !,"Number of client per gateway",!
	set name=""
	for  {
		set name=$O(result(name))
		q:name=""
		write !,name,?35,result(name)	
	}
	zn orgNS
]]></Implementation>
</Method>

<Method name="getCreditCardPurchases">
<ClassMethod>1</ClassMethod>
<FormalSpec>months=12,showResultPerClient=0,internalPaymentMethodName="all"</FormalSpec>
<Implementation><![CDATA[
	set ns="",grandTotal=0,orgNS=$ZNSPACE
	set startDateTime=##class(shared.dateFunctions).multiDate($H-(months*31),25)_" 00:00:00"
	w !,"since: ",startDateTime,!

	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if ns'?1.AN1"API" {
			zn ns
			
			
			set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
			if internalPaymentMethodName="all" {
				set query="SELECT * FROM eCom.objPaymentMethod WHERE (creditcardType=1) and (active=1)"
			} else {
				set query="SELECT * FROM eCom.objPaymentMethod WHERE (internalDescription = ?) and (active=1)"	
			}
			do rs.Prepare(query)
			do rs.Execute(internalPaymentMethodName)
			while rs.Next() {
				set paymentMethod=rs.Get("internalDescription")
				set paymentMethodID=rs.Get("ID")
				
				&SQL(SELECT COUNT(ID) INTO :tmp FROM eCom.objPurchase WHERE (objPaymentMethod = :paymentMethodID) AND (xCRstamp> :startDateTime ))
				if +SQLCODE=0 {
					set result(ns,paymentMethod)=$G(result(ns,paymentMethod))+tmp
					set gateways(paymentMethod,ns)=$G(gateways(paymentMethod,ns))+tmp
					set totals(paymentMethod)=$G(totals(paymentMethod))+tmp
				}
			}		
		}
	}
		
	if showResultPerClient {
		set (client,gw)=""
		for  {
			set gw=$O(gateways(gw))
			if gw="" quit
			
			for  {
				set client=$O(gateways(gw,client))
				if client="" quit
				if gateways(gw,client)>0 {
					write !,gw,?20,client," = ",result(client,gw)	
				}
			}
		}
	}
	kill (totals,orgNS)
	write
	zn orgNS
]]></Implementation>
</Method>

<Method name="getSagepayUsage">
<ClassMethod>1</ClassMethod>
<FormalSpec>months=6</FormalSpec>
<Implementation><![CDATA[
	set startDateTime=$SYSTEM.SQL.DATEADD("mm",-months,$ZTS)
	set uci=""
	for  {
		set uci=$O(^%ZCSPAPPS(uci))
		if uci="" quit
		ZN uci
		if ##class(setup.objSystemTypes).isModuleAllowed("Sage Pay")	{
			set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
			set query="SELECT objTransaction.accountID, objAccount.vendorName As vendorName"
			set query=query_" FROM protx.objTransaction As objTransaction JOIN protx.objAccount As objAccount"
			set query=query_" ON objAccount.ID=objTransaction.accountID"
			set query=query_" WHERE (objTransaction.status='COMPLETED')"
			set query=query_" AND (objTransaction.xCRstamp>?)"
			set query=query_" AND (objTransaction.mode='live')"
			set query=query_" GROUP BY objAccount.vendorName"
			do rs.Prepare(query)
			do rs.Execute(startDateTime)
			while rs.Next() {
				set vendorName=rs.Get("vendorName")
				set accountID=rs.Get("accountID")
				if vendorName'="colliers" {
					&SQL(SELECT COUNT(ID),xCRstamp  INTO :transCount,:latestDate
						FROM protx.objTransaction
						WHERE accountID = :accountID
						AND xCRstamp>:startDateTime
						AND mode = 'live'
					)
					if (+SQLCODE=0)&&(transCount) {
						w !,^%ZCSPAPPS(uci), ",",vendorName,",",transCount,",",latestDate
					}
				}
			}
			kill rs
		}
	}
]]></Implementation>
</Method>

<Method name="whoHasThisPaymentMethodActive">
<ClassMethod>1</ClassMethod>
<FormalSpec>paymentMethod:%String</FormalSpec>
<Implementation><![CDATA[
	set ns="",orgNS=$ZNSPACE
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if ns'?1.AN1"API" {
			zn ns
			
			&SQL(SELECT ID INTO :paymentMethodID FROM eCom.objPaymentmethod WHERE (%SQLUPPER(internalDescription) = %SQLUPPER(:paymentMethod)) and (active=1))
			if +SQLCODE=0 {
				set objPaymentMethod=##class(eCom.objPaymentMethod).%OpenId(paymentMethodID) 
				if objPaymentMethod.isMethodAllowed() {
					write !,ns			
				}
			}
		}
	}
	zn orgNS
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.performanceMonitoring">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.stats.performanceMonitoring.CLS/EV.0
;vc; Component: CLS.EF.stats.performanceMonitoring
;vc;  Location: SmallDev
;vc; Date/Time: 20-Mar-15 08:37
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.performanceMonitoring.CLS/EV.0</td><td>CLS.EF.stats.performanceMonitoring</td><td>SmallDev</td><td style='white-space: nowrap;'>20-Mar-15 08:37</td><td>FredG</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63509,62128</TimeChanged>
<TimeCreated>63509,61311.285343</TimeCreated>

<Method name="runTestIgnoringFirstRecord">
<ClassMethod>1</ClassMethod>
<FormalSpec>numberOfIterations</FormalSpec>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
	set highestPurchaseID=""
	&SQL(SELECT ID INTO :tmp FROM eCom.objPurchase order by ID desc)	
	if (+SQLCODE'=0) ! (+tmp=0) return "No records found"
	set highestPurchaseID=tmp

	set timeTaken=0
	for iteration=1:1:numberOfIterations {
		set purchaseID=$Random(highestPurchaseID)+1		
		if iteration>1 set timeTaken=timeTaken+..loadAndSaveOneRegistration(purchaseID)
	}
	return timeTaken
]]></Implementation>
</Method>

<Method name="loadAndSaveOneRegistration">
<ClassMethod>1</ClassMethod>
<FormalSpec>purchaseID</FormalSpec>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
	set startTime=$p($ZTS,",",2)
	set sessionID="fake session"
	
	set eventID=##class(eCom.objPurchase).getEventID(purchaseID)
	do ##class(eCom.objPurchase).amendPrepareSession(sessionID, purchaseID, eventID)
	
	#define newAmountPaid 0
	#define sendEmails 0
	#define markSessionComplete 1
	#define fromPaymentPortal 0
	#define updateAwardsPaymentStatus 0
	
	do ##class(eCom.tempPurchase).createPurchase(sessionID,$$$newAmountPaid,$$$sendEmails,$$$markSessionComplete,$$$fromPaymentPortal,$$$updateAwardsPaymentStatus)
	
	set timeTaken=$p($ZTS,",",2)-startTime
	return timeTaken
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.presentationMethods">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.stats.presentationMethods.CLS/EV.1
;vc; Component: CLS.EF.stats.presentationMethods
;vc;  Location: SmallDev
;vc; Date/Time: 19-Jan-16 11:15
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.presentationMethods.CLS/EV.1</td><td>CLS.EF.stats.presentationMethods</td><td>SmallDev</td><td style='white-space: nowrap;'>19-Jan-16 11:15</td><td>FredG</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63936,40476</TimeChanged>
<TimeCreated>63936,39526.272092</TimeCreated>

<Method name="findEventsWithMoreThanTen">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set ns="",grandTotal=0,eventCount=0,orgNS=$ZNSPACE
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if (ns'?2.A1"API") && (ns'?2.A1"SANDBOX") {
			zn ns
			w "."
			set rs=##class(%ResultSet).%New()
			set query="SELECT * FROM setup.objEvent WHERE (status <>'cancelled') "
			do rs.Prepare(query)
			do rs.Execute()
			while rs.Next() {
				set eventID=rs.Get("ID")
				&SQL(SELECT COUNT(ID) INTO :tmp FROM abstract.lnkPresentationMethodEvent WHERE eventID = :eventID)
				if +SQLCODE=0 {
					if tmp>9 {
						write !,ns,?25,eventID
					}
				}
			}
		}
	}
	zn orgNS
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.pricing">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.stats.pricing.CLS/EV.1
;vc; Component: CLS.EF.stats.pricing
;vc;  Location: SmallDev
;vc; Date/Time: 10-Jun-15 11:22
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.pricing.CLS/EV.1</td><td>CLS.EF.stats.pricing</td><td>SmallDev</td><td style='white-space: nowrap;'>10-Jun-15 11:22</td><td>FredG</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63713,40896</TimeChanged>
<TimeCreated>63713,39989.095903</TimeCreated>

<Method name="findEventsWithFreeDayPackages">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	w !,"List of event that have day packages with pricing by attendee category and at least one price set and one empty. List events with a start date of today minus 7 days or in the future"
	set ns="",orgNS=$ZNSPACE
	set numberOfMonths=12
	#dim eventCount as %integer =0
	#dim priceByAttendeeCategory as %Boolean
	#dim atLeastOneAttCatHasAPrice as %Boolean
	#dim atLeastOneAttCatLacksAPrice as %Boolean

	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if ns'?1.AN1"API" {
			zn ns


			set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
			set query="SELECT * FROM setup.objEvent WHERE dateFrom BETWEEN ? AND ?"
			set startDate=##class(shared.dateFunctions).ADD(+$H,-7,"D")
			set startDate=##class(shared.dateFunctions).multiDate(startDate,1)
			do rs.Prepare(query)	
			set ok=rs.Execute(startDate,+$H)
			while rs.Next() {
				set eventID=rs.Get("ID")
				set controllerID=##class(setup.objEvent).getControllerID(eventID)
				
				set rsPD=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
				do rsPD.Prepare("SELECT * FROM eCom.objPriceDescriptor WHERE (objController = ?) AND (priceType='day') AND (appliesTo = 'delegate')")
				do rsPD.Execute(controllerID)
				while rsPD.Next() {
					set descID=rsPD.Get("ID")
					set itemID=""
					set priceByAttendeeCategory=0
					
					&SQL(SELECT ID INTO :tmp FROM eCom.objBasketItem WHERE objPriceDescriptor = :descID)
					if +SQLCODE=0 {
						set basketItemID=tmp
						set itemID=##class(setup.objItem).getItemID(basketItemID)
					}
					if itemID {
						&SQL(SELECT priceByAttendeeCategory INTO :tmp FROM setup.objItem WHERE ID=:itemID)
						if +SQLCODE=0 set priceByAttendeeCategory=tmp
					}
					
					if priceByAttendeeCategory {
						
						set atLeastOneAttCatHasAPrice=0
						set atLeastOneAttCatLacksAPrice=0
						
						set rsAC=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
						do rsAC.Prepare("SELECT * FROM links.lnkCategoryItemBasketItem WHERE  (objItem=?)")
						do rsAC.Execute(itemID)
						while rsAC.Next() {
							set attCatID=rsAC.Get("objEventCategory")
							set basketItemID=rsAC.Get("objBasketItem")
							
							
							&SQL(SELECT objPrice
								FROM eCom.objPriceCurrency 
								WHERE (objPrice->objBasketItem = :basketItemID) 
								AND (objPrice->objPriceDescriptor = :descID) 
								AND (isCancellationPrice <> 1 )
							) 				
							if +SQLCODE=0 {
								set atLeastOneAttCatHasAPrice=1
							} else {
								set atLeastOneAttCatLacksAPrice=1
							}
						}
						if (atLeastOneAttCatHasAPrice) && (atLeastOneAttCatLacksAPrice) {
							if '$D(hits(eventID)) {
								w !,ns,?25,eventID,?35,##class(setup.objEventDetails).getDetails(eventID,1)
								set eventCount=eventCount+1
								s hits(eventID)=""
							}
						}
					}
				}

			}
		}
	}
	zn orgNS
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.proweb">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.stats.proweb.CLS/EV.3
;vc; Component: CLS.EF.stats.proweb
;vc;  Location: SmallDev
;vc; Date/Time: 05-Sep-16 09:48
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.proweb.CLS/EV.3</td><td>CLS.EF.stats.proweb</td><td>SmallDev</td><td style='white-space: nowrap;'>05-Sep-16 09:48</td><td>FredG</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64166,35286</TimeChanged>
<TimeCreated>63698,63271.645099</TimeCreated>

<Method name="countSCobjects">
<ClassMethod>1</ClassMethod>
<FormalSpec>className</FormalSpec>
<Implementation><![CDATA[
	#dim query as %String = "SELECT COUNT(*) AS objectCount FROM sc_xModules."_className
	#dim objectCount as %Integer
	#dim lastDate as %String
	
	set orgNS=$ZNSPACE
	set ns=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if ns'?1.E1"API" {
			zn ns
			set objectCount=0
			set lastDate=""
			set rs=##class(%ResultSet).%New()
			do rs.Prepare(query)
			do rs.Execute()
			do rs.Next()
			set objectCount=rs.Get("objectCount")
			if objectCount>0 {
				set rs2=##class(%ResultSet).%New()
				do rs2.Prepare("SELECT xCRstamp FROM sc_xModules."_className_" ORDER BY ID DESC")
				do rs2.Execute()
				do rs2.Next()
				set lastDate=$P(rs2.Get("xCRstamp")," ",1)
				kill rs2
				write !,ns,?25,objectCount,?35,lastDate
			}
			
			
			kill rs
			
		}
	}
	zn orgNS
]]></Implementation>
</Method>

<Method name="countSCDataTypes">
<ClassMethod>1</ClassMethod>
<FormalSpec>className</FormalSpec>
<Implementation><![CDATA[
	#dim query as %String = "SELECT COUNT(*) AS objectCount FROM sc.objData WHERE dataType=? AND (objEvent->status='live' OR objEvent->status='notlive')"
	#dim objectCount as %Integer
	#dim lastDate as %String
	
	set orgNS=$ZNSPACE
	set ns=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if ns'?1.E1"API" {
			zn ns
			set objectCount=0
			set lastDate=""
			set rs=##class(%ResultSet).%New()
			do rs.Prepare(query)
			do rs.Execute(className)
			do rs.Next()
			set objectCount=rs.Get("objectCount")
			if objectCount write !,ns,?25,objectCount
			kill rs
			
		}
	}
	zn orgNS
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.registrationStats">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.stats.registrationStats.CLS/EV.2
;vc; Component: CLS.EF.stats.registrationStats
;vc;  Location: SmallDev
;vc; Date/Time: 16-Feb-16 13:20
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.registrationStats.CLS/EV.2</td><td>CLS.EF.stats.registrationStats</td><td>SmallDev</td><td style='white-space: nowrap;'>16-Feb-16 13:20</td><td>FredG</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63964,47987</TimeChanged>
<TimeCreated>63284,57394.066175</TimeCreated>

<Method name="getTotalNumberOfRegistrations">
<ClassMethod>1</ClassMethod>
<FormalSpec>numberOfMonths=12</FormalSpec>
<Implementation><![CDATA[
	set ns=""
	set totalPurchaseCount=0,totalAttendeeCount=0,eventCount=0,totalSummedAmount=0
	set startDate=##class(shared.dateFunctions).ADD(+$H,-numberOfMonths,"M")
	set startDate=##class(shared.dateFunctions).multiDate(startDate,1)

	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
		write ns,"  "	
		
		set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		set query="SELECT * FROM setup.objEvent WHERE dateFrom BETWEEN ? AND ?"

		do rs.Prepare(query)	
		set ok=rs.Execute(startDate,+$H)
		while rs.Next() {
			set eventCount=eventCount+1
			set xEventID=rs.Get("ID"),purchaseCount=0,attendeeCount=0,summedAmount=0
			&SQL(SELECT COUNT(ID),SUM(totalPrice) INTO :purchaseCount,:summedAmount FROM eCom.objPurchase WHERE objEvent = :xEventID)
			&SQL(SELECT COUNT(ID) INTO :attendeeCount FROM links.lnkPersonEvent WHERE objEvent = :xEventID)
			
			
			set totalPurchaseCount=totalPurchaseCount+purchaseCount
			set totalAttendeeCount=totalAttendeeCount+attendeeCount
			set totalSummedAmount=totalSummedAmount+summedAmount
			
		}
		do rs.Close()
		kill rs
	}
	
	write !!!,"Total number of event: ",eventCount
	write !,"Total number of registrations: ",totalPurchaseCount
	write !,"Total number of attendees: ",totalAttendeeCount
	write !,"Total amount of all purchases: GBP ",$FN(totalSummedAmount,",",2)," (if they were all using GBP)"
]]></Implementation>
</Method>

<Method name="collectAnnualRegistrationStats">
<ClassMethod>1</ClassMethod>
<FormalSpec>year</FormalSpec>
<Implementation><![CDATA[
	k ^%xRegStats(year)
	set ns=""
	set totalCount=0
	set startDate=year_"-01-01"
	set startDateTime=startDate_" 00:00:00"
	set endDate=year_"-12-31"
	set endDateTime=endDate_" 23:59:59"
	set startDateHoro=##class(shared.dateFunctions).multiDate(startDate,1)
	set endDateHoro=##class(shared.dateFunctions).multiDate(endDate,1)
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
		set nsCount=0
		write ns,"  "			
		&SQL(SELECT COUNT(ID) INTO :tmp FROM links.lnkPersonPurchase WHERE (objPurchase->xCRstamp BETWEEN :startDateTime AND :endDateTime) AND (personType <> 'booker'))
		if +SQLCODE=0 {
			set nsCount=tmp
			set totalCount=totalCount+nsCount
			set ^%xRegStats(year,ns,"reg")=nsCount
		}
		
		&SQL(SELECT COUNT(ID) INTO :tmp FROM setup.objEvent WHERE (dateFrom BETWEEN :startDateHoro AND :endDateHoro) AND (status <> 'cancelled'))	
		if +SQLCODE=0 {
			set eventCount=tmp
			set ^%xRegStats(year,ns,"events")=eventCount
		}
		
	}
	w !,"total count:",totalCount
]]></Implementation>
</Method>

<Method name="exportCounts">
<ClassMethod>1</ClassMethod>
<FormalSpec>year,filename="d:\temp\registrationStats.csv"</FormalSpec>
<Implementation><![CDATA[
	set delim=","
	set file=##class(%File).%New(filename)
	do file.Open("WSN")
	do file.Write("client"_delim_"events"_delim_"Registrations in "_year)
	do file.WriteLine("")
	set (client)=""
	for  {
		set client=$O(^%xRegStats(year,client))
		if client="" quit
		do file.Write(client_delim_$G(^%xRegStats(year,client,"events"))_delim)
		do file.Write($G(^%xRegStats(year,client,"reg")))	
		do file.WriteLine("")
	}
	
	do file.Close()
]]></Implementation>
</Method>

<Method name="displayYearlyNumbers">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set (year,client,total,grandTotal)=0
	for  {
		set year=$O(^%xRegStats(year))
		if year="" quit
		set total=0
		
		for  {
			set client=$o(^%xRegStats(year,client))
			if client="" quit
			
			set total=total+$G(^%xRegStats(year,client,"reg")) 
		}
		w !,"Year: ",year,?20,"Total: ",total
		set grandTotal=grandTotal+total	

	}	
	w !!,"Grand total: ",grandTotal
]]></Implementation>
</Method>

<Method name="findAttendeeByCODitem">
<ClassMethod>1</ClassMethod>
<FormalSpec>codItemName,value</FormalSpec>
<Implementation><![CDATA[
	set ns=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
		&SQL(SELECT * FROM cod.objItemData WHERE (objItemName->description = :codItemName) AND (result = :value))
		if +SQLCODE=0 {
			w !,"Found a person with '",codItemName,"' = '",value,"' in namespace ",ns	
		}
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.sessionStats">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.stats.sessionStats.CLS/EV.7
;vc; Component: CLS.EF.stats.sessionStats
;vc;  Location: SmallDev
;vc; Date/Time: 29-Jul-15 11:37
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.sessionStats.CLS/EV.7</td><td>CLS.EF.stats.sessionStats</td><td>SmallDev</td><td style='white-space: nowrap;'>29-Jul-15 11:37</td><td>FredG</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63762,41821</TimeChanged>
<TimeCreated>63596,36938.48637</TimeCreated>

<Method name="whoIsUsingSessions">
<ClassMethod>1</ClassMethod>
<FormalSpec>showEvents=0,numberOfMonths=12,onlyCountGuestBookings=0</FormalSpec>
<Implementation><![CDATA[
	set orgNS=$ZNSPACE
	set ns=""
	#dim grandTotal as %Integer =0
	#dim eventCount as %Integer =0
	#dim clientsWithSessions as %Integer =0
	#dim clientWithBookedSessions as %Integer =0
	#dim eventsWithSessions as %Integer =0
	#dim eventsWithBookedSessions as %Integer =0
	#dim clientHasAnySessions as %Boolean=0
	#dim clientHasAnyBookedSessions as %Boolean=0
	
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if (ns'?2.E1"API") && (ns'?2.E1"SANDBOX") {
			zn ns
			w ".."
			set clientHasAnySessions=0
			set clientHasAnyBookedSessions=0
			
			set sqlStatement=##class(%SQL.Statement).%New()
			kill sqlParams
			set query="SELECT * FROM setup.objEvent"
			if numberOfMonths {
				set startDate=##class(shared.dateFunctions).ADD(+$H,-numberOfMonths,"M")
				set startDate=##class(shared.dateFunctions).multiDate(startDate,1)
				set query=query_" WHERE dateFrom BETWEEN ? AND ?"
				set sqlParams($I(sqlParams))=startDate
				set sqlParams($I(sqlParams))=+$H
			}
			Set ok=sqlStatement.%Prepare(query)	
			set rs=sqlStatement.%Execute(sqlParams...)
			while rs.%Next() {
				set eventID=rs.%Get("ID")
				set hit=0,grandTotal=grandTotal+1
				
				if onlyCountGuestBookings {
					set sessionCount=..getGuestSessionCount(eventID)
					set bookedSessions=..getBookedGuestSessionCount(eventID)
				} else {
					set sessionCount=..getSessionCount(eventID)
					set bookedSessions=..getBookedSessionCount(eventID)
				}
				
				if sessionCount>0 {
					if showEvents {
						w !,"EventID=",eventID,?25,"Number of Sessions Items in use: ",sessionCount
					}
					set eventCount=eventCount+1	
					set clientHasAnySessions=1
					set eventsWithSessions=eventsWithSessions+1
					if bookedSessions >5 {
						set clientHasAnyBookedSessions=1
						set eventsWithBookedSessions=eventsWithBookedSessions+1	
						if showEvents {
							w ", Number of session bookings: ",bookedSessions
						}
					}
				}
			}
			if clientHasAnySessions {
				write !,ns,?20,"Has sessions configured"
				if clientHasAnyBookedSessions {
					write " and has session bookings"	
				}
			}
			do rs.%Close()
			kill rs
		}
	}
	zn orgNS
	w !!,"Total ",eventCount," out of ",grandTotal," events (",$J(eventCount/grandTotal*100,".",2),"%) have sessions configured"
]]></Implementation>
</Method>

<Method name="getSessionCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	&SQL(SELECT COUNT (ID) INTO :sessionCount FROM setup.objItem WHERE (objEvent=:eventID) AND (active=1))
	return sessionCount
]]></Implementation>
</Method>

<Method name="getGuestSessionCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	&SQL(SELECT COUNT (ID) INTO :sessionCount FROM setup.objItem WHERE (objEvent=:eventID) AND (active=1) AND (guestCanBook=1))
	return sessionCount
]]></Implementation>
</Method>

<Method name="getBookedSessionCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	&SQL(SELECT COUNT (ID) INTO :bookedSessions FROM links.lnkItemPerson WHERE (objItem->objEvent = :eventID))
	return bookedSessions
]]></Implementation>
</Method>

<Method name="getBookedGuestSessionCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	&SQL(SELECT COUNT (link.ID) INTO :bookedSessions 
		FROM links.lnkItemPerson AS link
		JOIN links.lnkPersonPurchase AS lpp ON (lpp.objPerson = link.objPerson)
		WHERE (link.objItem->objEvent = :eventID)
		AND (link.objItem->guestCanBook = 1)
		AND (lpp.objPurchase->objEvent = :eventID)
	)
	return bookedSessions
]]></Implementation>
</Method>

<Method name="listEventsWithIncorrectPresentationOrder">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	#dim eventCount as %integer =0
	#dim presentationOrder as %String
	#dim documentID as %Integer
	#dim sessionID as %Integer
	#dim arrayOfPresentationOrder
	#dim eventID as %Integer
	#dim stringOfPresentationOrder as %String
	
	w !,"List events (Today-7 and future) that have abstract assigned to session with missing or duplicate presentation order number"
	set ns="",orgNS=$ZNSPACE
	set startDate=##class(shared.dateFunctions).ADD(+$H,-7,"D")
	set startDate=##class(shared.dateFunctions).multiDate(startDate,1)
			
	

	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if ns'?1.AN1"API" {
			zn ns
		
			set rs=##class(%ResultSet).%New()
			do rs.Prepare("SELECT DISTINCT objItem AS sessionID,objTopic->objEvent as eventID FROM abstract.objDocument WHERE (NOT objItem IS NULL) ")
			do rs.Execute(startDate)
			while rs.Next() {
				set sessionID=rs.Get("sessionID")
				set eventID=rs.Get("eventID")
				if eventID {
					set event=##class(setup.objEvent).%OpenId(eventID)
					if ##class(shared.dateFunctions).multiDate(event.dateFrom,1)>($H-7) {
					
						kill arrayOfPresentationOrder
						
						set rs2=##class(%ResultSet).%New()
						do rs2.Prepare("SELECT * FROM abstract.objDocument WHERE objItem = ? ORDER BY ID")
						do rs2.Execute(sessionID)
						while rs2.Next() {
							set documentID=rs2.Get("ID")
							set presentationOrder=##class(abstract.objItemData).getFromDocumentIDAndDescription(documentID,"Session Order")	
							if presentationOrder {
								if $D(arrayOfPresentationOrder(presentationOrder)) {
									write !,"Duplicate: ",ns,?25,eventID,?35,##class(setup.objItemDetails).getDetails(sessionID,1)
									if 
								}
								set arrayOfPresentationOrder(presentationOrder)=""
							} else {
								write !,"Missing: ",ns,?25,eventID,?35,##class(setup.objItemDetails).getDetails(sessionID,1)
							}
						}
						
						set lastPresentationOrder= $Order(arrayOfPresentationOrder(""),-1)
						for i=1:1:lastPresentationOrder {
							if '$data(arrayOfPresentationOrder(i)) {
								write !,"Has gaps: ",ns,?25,eventID,?35,##class(setup.objItemDetails).getDetails(sessionID,1)	
							}	
						}
					}
					kill event
				}
			}
			
			
		}
	}
	zn orgNS
]]></Implementation>
</Method>

<Method name="findSpecialInstructions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set orgNS=$ZNSPACE
	set ns=""
	
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if (ns'?2.E1"API") && (ns'?2.E1"SANDBOX") {
			zn ns
			w "."
			&SQL(SELECT COUNT(ID) INTO :tmp  FROm setup.objItemDetails WHERE (objItem->active=1) AND (NOT specialInstructions IS NULL) AND (objItem->xCRstamp > '2015-01-01 11:49:09' ))
			if +SQLCODE=0 && tmp>0 {
				write !,ns,?25,tmp
				set rs=##class(%ResultSet).%New()
				do rs.Prepare("SELECT *,objItem->objEvent as eventID,objItem->objEvent->dateFrom as dateFrom  FROm setup.objItemDetails WHERE (objItem->active=1) AND (NOT specialInstructions IS NULL) AND (objItem->xCRstamp > '2015-01-01 11:49:09')" )
				do rs.Execute()
				while rs.Next() {
					w !?5,"Event: ",rs.Get("eventID"),?15,rs.Get("description"),?40,$ZD(rs.Get("dateFrom"),2)
				}
			}
		}
	}
	zn orgNS
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.settingsStats">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.stats.settingsStats.CLS/EV.8
;vc; Component: CLS.EF.stats.settingsStats
;vc;  Location: SmallDev
;vc; Date/Time: 23-Mar-16 11:58
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.settingsStats.CLS/EV.8</td><td>CLS.EF.stats.settingsStats</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Mar-16 11:58</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64000,42731</TimeChanged>
<TimeCreated>63259,34500.831765</TimeCreated>

<Method name="whoHasThisEventSetting">
<ClassMethod>1</ClassMethod>
<FormalSpec>part1,part2,showEvents=0,numberOfMonths="",requiredValue="",onlyGroupBookingEvents=0</FormalSpec>
<Implementation><![CDATA[
	set ns="",grandTotal=0,eventCount=0
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
		
		set nsCount=0
		set sqlStatement=##class(%SQL.Statement).%New()
		kill sqlParams
		set query="SELECT * FROM setup.objEvent"
		if numberOfMonths {
			set startDate=##class(shared.dateFunctions).ADD(+$H,-numberOfMonths,"M")
			set startDate=##class(shared.dateFunctions).multiDate(startDate,1)
			set query=query_" WHERE dateFrom BETWEEN ? AND ?"
			set sqlParams($I(sqlParams))=startDate
			set sqlParams($I(sqlParams))=+$H+365
		}
		Set sc=sqlStatement.%Prepare(query)	
		set rs=sqlStatement.%Execute(sqlParams...)
		while rs.%Next() {
			set xEventID=rs.%Get("ID")
			if (onlyGroupBookingEvents) & (+##class(setup.objEventSetting).getParameter("bookings","allow group bookings",xEventID)=0) {
				// ingore this event
			}	else {
				set hit=0,eventCount=eventCount+1
				if $L(requiredValue) {
					if $ZCVT(##class(setup.objEventSetting).getParameter(part1,part2,xEventID),"L")=$ZCVT(requiredValue,"L") set hit=1
				} else {
					if ##class(setup.objEventSetting).getParameter(part1,part2,xEventID)'="" set hit=1
				}
				if hit {	
					if showEvents w !,"EventID=",xEventID,?20,"value=",##class(setup.objEventSetting).getParameter(part1,part2,xEventID)
					set nsCount=nsCount+1
					set grandTotal=grandTotal+1
				}
			}
		}
		if nsCount>0 w !,ns,?20,"count:",nsCount
		do rs.%Close()
		kill rs
	}
	w !!,"Total ",grandTotal," out of ",eventCount," events (",$J(grandTotal/eventCount*100,".",2),"%)"
]]></Implementation>
</Method>

<Method name="whoHasThisSystemSetting">
<ClassMethod>1</ClassMethod>
<FormalSpec>part1,part2,requiredValue,setNewValue=""</FormalSpec>
<Implementation><![CDATA[
	set ns=""
	set nsCount=0
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
		if $D(requiredValue) {
			if ##class(setup.objSetting).getParameter(part1,part2)=requiredValue {
				w !,ns
				set nsCount=nsCount+1
				if setNewValue'="" {
					write " - ARE YOU REALLY SURE THAT YOU WANT TO CHANGE THIS TO '",setNewValue,"'? <N>" read ans
					if $ZCVT(ans,"U")?1"Y".E {
						do ##class(setup.objSetting).setParameter(part1,part2,setNewValue)
						write "   *Updated*"
					}
				}
			}
			
		} else {
			if ##class(setup.objSetting).getParameter(part1,part2)'="" {
				w !,ns
				set nsCount=nsCount+1
			}
		}
	}
	w !,"Total count:",nsCount
]]></Implementation>
</Method>

<Method name="whoIsUsingWhatDateFormats">
<ClassMethod>1</ClassMethod>
<FormalSpec>numberOfMonths="",detailedView=0</FormalSpec>
<Implementation><![CDATA[
	set ns=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
		
		set nsCount=0
		set sqlStatement=##class(%SQL.Statement).%New()
		kill sqlParams
		set query="SELECT * FROM setup.objEvent"
		if numberOfMonths {
			set startDate=##class(shared.dateFunctions).ADD(+$H,-numberOfMonths,"M")
			set startDate=##class(shared.dateFunctions).multiDate(startDate,1)
			set query=query_" WHERE dateFrom BETWEEN ? AND ?"
			set sqlParams($I(sqlParams))=startDate
			set sqlParams($I(sqlParams))=+$H
		}
		Set sc=sqlStatement.%Prepare(query)	
		set rs=sqlStatement.%Execute(sqlParams...)
		while rs.%Next() {
			set dateFormat=rs.%Get("dateFormat")
			set results(dateFormat)=$G(results(dateFormat))+1
			set results(dateFormat,ns)=$G(results(dateFormat,ns))+1
		}
		do rs.%Close()
		kill rs
	}
	w !,"ID",?5,"EXAMPLE",?30,"COUNT"
	w !,"==",?5,"=======",?30,"====="
	for dateFormat=1:1:44 {
		if +$G(results(dateFormat)) {
			w !,dateFormat,?5,##class(shared.dateFunctions).datePattern(dateFormat),?30,+$G(results(dateFormat))
			if detailedView {
				set ns=""
				for  {
					set ns=$O(results(dateFormat,ns))
					if ns="" quit
					w !,?7,ns,?30,+$G(results(dateFormat,ns))
				}	
			}
		}
	}
]]></Implementation>
</Method>

<Method name="whoHasTheHigestEventProperty">
<ClassMethod>1</ClassMethod>
<FormalSpec>propertyName,numberOfMonths=""</FormalSpec>
<Implementation><![CDATA[
	set ns="",highest=0,resultClient="",resultEventID=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
		
		set nsCount=0
		set sqlStatement=##class(%SQL.Statement).%New()
		kill sqlParams
		set query="SELECT * FROM setup.objEvent"
		if numberOfMonths {
			set startDate=##class(shared.dateFunctions).ADD(+$H,-numberOfMonths,"M")
			set startDate=##class(shared.dateFunctions).multiDate(startDate,1)
			set query=query_" WHERE dateFrom BETWEEN ? AND ?"
			set sqlParams($I(sqlParams))=startDate
			set sqlParams($I(sqlParams))=+$H
		}
		Set sc=sqlStatement.%Prepare(query)	
		set rs=sqlStatement.%Execute(sqlParams...)
		while rs.%Next() {
			set eventID=rs.%Get("ID")
			set event = ##class(setup.objEvent).%OpenId(eventID)
			if $Property(event,propertyName) > highest {
				set highest = $Property(event,propertyName)	
				set resultClient = ns
				set resultEventID = eventID
			}
		}
	}
	w !,"Client: ",resultClient
	w !,"EventID: ",resultEventID
	w !,"Value: ",highest
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.surveys">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.stats.surveys.CLS/EV.1
;vc; Component: CLS.EF.stats.surveys
;vc;  Location: SmallDev
;vc; Date/Time: 11-May-16 13:20
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.surveys.CLS/EV.1</td><td>CLS.EF.stats.surveys</td><td>SmallDev</td><td style='white-space: nowrap;'>11-May-16 13:20</td><td>FredG</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64049,48011</TimeChanged>
<TimeCreated>64049,47463.027303</TimeCreated>

<Method name="whoIsUsingSurveys">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	#dim numberOfMonths as %Integer = 3
	
	set ns="",grandTotal=0,eventCount=0,orgNS=$ZNSPACE
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if (ns'?2.A1"API") && (ns'?2.A1"SANDBOX") {
			zn ns
			w "."
			set rs=##class(%ResultSet).%New()
			set query="SELECT * FROM sc_xModules.objForm WHERE dateFrom BETWEEN ? AND ?"
			set startDate=##class(shared.dateFunctions).ADD(+$H,-numberOfMonths,"M")
			set startDate=##class(shared.dateFunctions).multiDate(startDate,1)
			do rs.Prepare(query)
			do rs.Execute(startDate,$H+180)
			while rs.Next() {
				set surveyID=rs.Get("ID")
				set listOfPages=""
				set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
				do rs.Prepare("SELECT ID FROM sc_xModules.objPage WHERE (active=1 AND parent = ?) ")
				do rs.Execute(surveyID)
				while rs.Next() {
					set listOfPages=listOfPages_$S($L(listOfPages):",",1:"")_+rs.Get("ID")
				}
				
				set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
				do rs.Prepare("SELECT COUNT(DISTINCT objPerson) AS resultCount FROM cod.objItemData WHERE (pageID %INLIST ? SIZE ((1)))")
				do rs.Execute($LISTFROMSTRING(listOfPages,","))
				while rs.Next() {
					set resultCount = rs.Get("resultCount")
				}
				if resultCount {
					write !,ns,?30,"SurveyID: ",surveyID," - Results: ",resultCount	
				}
				
			}
		}
	}
	zn orgNS
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.templates">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.stats.templates.CLS/EV.5
;vc; Component: CLS.EF.stats.templates
;vc;  Location: SmallDev
;vc; Date/Time: 12-May-16 17:14
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.templates.CLS/EV.5</td><td>CLS.EF.stats.templates</td><td>SmallDev</td><td style='white-space: nowrap;'>12-May-16 17:14</td><td>FredG</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64050,62069</TimeChanged>
<TimeCreated>63557,30177.91606</TimeCreated>

<Method name="templateUsageAcrossAllClients">
<ClassMethod>1</ClassMethod>
<FormalSpec>numberOfMonths=12</FormalSpec>
<Implementation><![CDATA[
	set ns="",eventCount=0
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns

		set sqlStatement=##class(%SQL.Statement).%New()
		kill sqlParams
		set query="SELECT * FROM setup.objEvent"
		if numberOfMonths {
			set startDate=##class(shared.dateFunctions).ADD(+$H,-numberOfMonths,"M")
			set startDate=##class(shared.dateFunctions).multiDate(startDate,1)
			set query=query_" WHERE dateFrom BETWEEN ? AND ?"
			set sqlParams($I(sqlParams))=startDate
			set sqlParams($I(sqlParams))=+$H
		}
		Set sc=sqlStatement.%Prepare(query)	
		set rs=sqlStatement.%Execute(sqlParams...)
		while rs.%Next() {
			set xEventID=rs.%Get("ID")
			set eventCount=eventCount+1
			
			set templateID=##class(layout.objTemplate).getLayoutForEvent(xEventID)
			set templateName=##class(layout.objTemplate).getIntDesc(templateID)
			
			set totals(templateName)=$I(totals(templateName))
			set clientStats(ns,templateName)=$I(clientStats(ns,templateName))
		}
	}
	write
]]></Implementation>
</Method>

<Method name="whoIsUsingBlankDesign">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set ns="",grandTotal=0,eventCount=0,orgNS=$ZNSPACE
	set numberOfMonths=1
	
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		if (ns'?2.A1"API") && (ns'?2.A1"SANDBOX") {
			zn ns
			w "."	
			&SQL(SELECT COUNT(*) INTO :evcount FROM setup.objEvent WHERE  (status IN ('live','notlive')))
			set grandTotal=grandTotal+evcount
			set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
			set query="SELECT * FROM setup.objEvent WHERE  (status IN ('live','notlive')) AND (layoutObjTemplate->description %STARTSWITH 'Blank')"
			set startDate=##class(shared.dateFunctions).ADD(+$H,-numberOfMonths,"M")
			set startDate=##class(shared.dateFunctions).multiDate(startDate,1)
			do rs.Prepare(query)	
			set ok=rs.Execute(startDate,+$H+180)
			while rs.Next() {
				set xEventID=rs.Get("ID")			
				w !,ns,?30,"EventID: ",xEventID,?45,##class(setup.objEventDetails).getDetails(xEventID,1)
				set eventCount=eventCount+1				
			}
		}
	}
	zn orgNS
	w !!!,"Blank design found in ",eventCount," events out of ",grandTotal
]]></Implementation>
</Method>
</Class>


<Class name="EF.stats.userStats">
<Description><![CDATA[
a collection of noddys for getting usage stats
<!-- ;vc;
;vc;    Object: EF.stats.userStats.CLS/EV.4
;vc; Component: CLS.EF.stats.userStats
;vc;  Location: SmallDev
;vc; Date/Time: 26-Jul-16 16:13
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.userStats.CLS/EV.4</td><td>CLS.EF.stats.userStats</td><td>SmallDev</td><td style='white-space: nowrap;'>26-Jul-16 16:13</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>64125,59355.494878</TimeChanged>
<TimeCreated>63224,59823.013279</TimeCreated>

<Method name="collectPageHits">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	kill ^%xPagehits
	set ^%xPagehits=99999999
	set ns=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
		w ns,"   "
		set (date,time,sessionID,counter)=""
		for  {
			set date=$o(^xPage(date))
			if date="" quit
			
			set previousSunday=date-(date#7+4)
			if previousSunday<^%xPagehits set ^%xPagehits=previousSunday
			for  {
				set sessionID=$O(^xPage(date,sessionID))
				if sessionID="" quit	
				
				for  {
					set time=$O(^xPage(date,sessionID,time))	
					if time="" quit
					
					for  {
						set counter=$O(^xPage(date,sessionID,time,counter))	
						if counter="" quit
						
						set url=$piece($G(^xPage(date,sessionID,time,counter)),"|",2)
						set url=$piece(url,"/",3,99)
						set url=$zconvert(url,"L")
						if url'="" {
							set ^%xPagehits(url,previousSunday)=$G(^%xPagehits(url,previousSunday))+1			
						} else {
						}
					}
				}
			}	
		}	
	}
]]></Implementation>
</Method>

<Method name="collectPeakPageHitsPerMinute">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	kill ^%xPagehits
	set ^%xPagehits=99999999
	set ns=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
		
		set (date,time,sessionID,counter)=""
		for  {
			set date=$o(^xPage(date))
			if date="" quit
			
			for  {
				set sessionID=$O(^xPage(date,sessionID))
				if sessionID="" quit	
				
				for  {
					set time=$O(^xPage(date,sessionID,time))	
					if time="" quit
					
					set minute=time\60
					
					for  {
						set counter=$O(^xPage(date,sessionID,time,counter))	
						if counter="" quit
						
						set url=$piece($G(^xPage(date,sessionID,time,counter)),"|",2)
						set url=$piece(url,"/",3,99)
						if url'="" {
							set ^%xPagehits(date,minute)=$G(^%xPagehits(date,minute))+1			
						}
					}
				}
			}	
		}	
	}
]]></Implementation>
</Method>

<Method name="exportPageHits">
<ClassMethod>1</ClassMethod>
<FormalSpec>filename="d:\temp\pagehits.csv"</FormalSpec>
<Implementation><![CDATA[
	set delim=","
	set firstSunday=^%xPagehits
	set file=##class(%File).%New(filename)
	do file.Open("WSN")
	do file.Write("page"_delim)
	for date=^%xPagehits:7:+$H {
		do file.Write($ZD(date,4)_delim)
	}
	do file.WriteLine("")
	set (url,date)=""
	for  {
		set url=$O(^%xPagehits(url))
		if url="" quit
		do file.Write(url_delim)
		for date=^%xPagehits:7:+$H {
			do file.Write($G(^%xPagehits(url,date))_delim)	
		}
		do file.WriteLine("")
	}
	
	do file.Close()
]]></Implementation>
</Method>

<Method name="exportPeakPageHitsPerMinute">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set (date,time)=""
	for  {
		set date=$O(^%xPagehits(date))
		if date="" quit
		
		for  {
			set time=$O(^%xPagehits(date,time))	
			if time="" quit
			
			set hitCount=^%xPagehits(date,time)
			set hitCounts(hitCount)=date_","_time
						
		}
	}
	
	w !!,"Top ten:"
	set hitCount=""
	for i=1:1:10 {
		set hitCount=$O(hitCounts(hitCount),-1)	
		set date=$P(hitCounts(hitCount),",",1)
		set time=$P(hitCounts(hitCount),",",2)
		w !,$ZD(date,3)," ",$ZT(time,2),?20,hitCount
	}
]]></Implementation>
</Method>

<Method name="collectPageStatsPerPage">
<ClassMethod>1</ClassMethod>
<FormalSpec>pagename=""</FormalSpec>
<Implementation><![CDATA[
	if pagename="" {
		set pagenames("bulkEditLoad.csp")=""
		set pagenames("xtTsurveyPage.csp")=""
		set pagenames("tMeetManDiaryManager.csp")=""
		set pagenames("attendanceSession.csp")=""
		set pagenames("tAccomChooseDates.csp")=""
		set pagenames("evManTaskList.csp")=""
		set pagenames("evManEventManagers.csp")=""
		set pagenames("profitAndLoss1.csp")=""
		set pagenames("codPersonDeDupeSelectFields.csp")=""
		set pagenames("seoEventSettings.csp")=""
	} else {
		set pagenames(pagename)=""	
	}

	kill ^%xPagehits
	set total=0
	set ns=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
		w !,ns
		
		set (date,time,sessionID,counter)=""
		for  {
			set date=$o(^xPage(date))
			if date="" quit
			
			for  {
				set sessionID=$O(^xPage(date,sessionID))
				if sessionID="" quit	
				
				for  {
					set time=$O(^xPage(date,sessionID,time))	
					if time="" quit
					
					for  {
						set counter=$O(^xPage(date,sessionID,time,counter))	
						if counter="" quit
						
						set page=$piece($G(^xPage(date,sessionID,time,counter)),"|",3)
						if page'="" {
							if $d(pagenames(page)) {
								set ^%xPagehits(page,ns)=$G(^%xPagehits(page,ns))+1			
								set total=total+1
							}
						}
					}
				}
			}	
		}	
	}
	w !!
	set page="",ns=""
	for  {
		set page=$O(^%xPagehits(page)) 
		if page="" quit
		for  {
			set ns=$O(^%xPagehits(page,ns))
			if ns="" quit
			
			set hits=^%xPagehits(page,ns)
			if hits>0 {
				w !,page,",",ns,",",hits	
			}
		}
	}
]]></Implementation>
</Method>

<Method name="CalculateChurn">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[

	do ..CalculateChurnScores()
	do ..CountLoginsPerWeek()
]]></Implementation>
</Method>

<Method name="CountLoginsPerWeek">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set namespace = ""

	write !,"Calculating logins per week"
	write !,"==========================="

	set myFile=##class(%File).%New("d:\uploads\loginstats.csv")
	do myFile.Open("WUN")
	do myFile.WriteLine("Week Ending,Namespace,Logins")					
	
	for  
	{
		set namespace=$O(^%ZCSPAPPS(namespace))
		if namespace="" quit
		
		if ..IncludeNamespace( namespace )
		{
			write !,namespace
			
			// Calculate a Sunday three years ago
			set day=+$H - (+$H # 7) - 4 - (156*7) 

			for week=1:1:156 
			{
				set endDay = day + (week*7)
				set logins = ..CountLoginsInPeriod( namespace, endDay-7, endDay )
				
				if logins > 0 
				{
					do myFile.WriteLine($ZD(endDay,3)_","_..ConvertNamespaceToAccount(namespace)_","_logins)									
				}
			}
		}
	}
	
	do myFile.Close()
]]></Implementation>
</Method>

<Method name="CalculateChurnScores">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set namespace = ""
	
	write !,"Calculating churn scores"
	write !,"========================"

	set myFile=##class(%File).%New("d:\uploads\churnstats.csv")
	do myFile.Open("WUN")
	do myFile.WriteLine("Client,26 Week Avg.,13 Week Avg.,Usage Score,Status")					
	
	for  
	{
		set namespace=$O(^%ZCSPAPPS(namespace))
		if namespace="" quit
		
		if ..IncludeNamespace( namespace )
		{
			// Calculate the day that was the last Sunday
			set day=+$H - (+$H # 7) - 4

			// Calculate 26 week stats (182 days) and 13 week stats (91 days)
			set logins26Weeks = ..CountLoginsInPeriod( namespace, day-182, day ) / 26
			set logins13Weeks = ..CountLoginsInPeriod( namespace, day-91, day ) / 13
			
			if (logins26Weeks > 0) && (logins13Weeks > 0)
			{
				set growth = (logins13Weeks / logins26Weeks) - 1
				
				set status = "Unknown"				
				if (logins13Weeks < 1) || (growth <= -0.2)
				{
					set status = "Churn risk"
				}
				elseif growth > 0.2 && growth <= 0.1
				{
					set status = "Downscale risk"
				}
				elseif growth > 0.1
				{
					set status = "Upsell opportunity"
				}
				
				set line = ..ConvertNamespaceToAccount(namespace)_","_$FNUMBER(logins26Weeks,"",2)_","_$FNUMBER(logins13Weeks,"",2)_","_$FNUMBER(growth,"",2)_","_status
				write !,line
				do myFile.WriteLine( line )
			}
		}
	}
	
	do myFile.Close()
]]></Implementation>
</Method>

<Method name="CountLoginsInPeriod">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace,startDay,endDay</FormalSpec>
<Implementation><![CDATA[
	zn namespace
	set startTime=$ZD(startDay,3)_" 00:00:00"
	set endTime=$ZD(endDay,3)_" 23:59:59"
	set count=##class(access.objLoginAttempt).countLoginsForPeriodAndStatus(startTime,endTime,"ok")
	quit count
]]></Implementation>
</Method>

<Method name="ConvertNamespaceToAccount">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace</FormalSpec>
<Implementation><![CDATA[
	set accountName = $EXTRACT( namespace, 3, * )
	quit accountName
]]></Implementation>
</Method>

<Method name="IncludeNamespace">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace</FormalSpec>
<Implementation><![CDATA[
	if namespace ? 1"EVTRIAL".E
	{
		quit 0
	}
	
	if namespace ? 1"EVDEMO".E
	{
		quit 0
	}
	
	if namespace ? 1"EVSALES".E
	{
		quit 0
	}
	
	if namespace ? 1"EVTRAINING".E
	{
		quit 0
	}
	
	if namespace ? 1"EVSUPPORT".E
	{
		quit 0
	}
	
	if namespace ? 1"EVMARKETING".E
	{
		quit 0
	}
	
	if namespace ? 1"EVINTERNAL".E
	{
		quit 0
	}
	
	if namespace ? 1"EVAPIEXAMPLE".E
	{
		quit 0
	}
	
	if namespace ? 1"EVEFUSA".E
	{
		quit 0
	}
	
	if namespace ? .E1"TEST"
	{
		quit 0
	}
	
	quit 1
]]></Implementation>
</Method>

<Method name="findStartEndDateLessEvents">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set ns=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
		w !,ns,!	
		
		set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		do rs.Prepare("SELECT ID FROM setup.objEvent WHERE ((dateFrom IS NULL) OR (len(dateFrom)=0) OR (dateTo IS NULL) OR (len(dateTo)=0))")
		do rs.Execute()
		while rs.Next() {
			write rs.Get("ID"),!
		}
		do rs.Close()
	}
	w !!
]]></Implementation>
</Method>

<Method name="whoIsUsingBulkEdit">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	#dim orgNs = $ZNSPACE
	#dim fromDateHoro as %String
	
	set fromDateHoro=##class(shared.dateFunctions).ADD(+$H,-12,"M")_",00000"
	set ns=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		zn ns
		set first=$o(^xBulkEdit(fromDateHoro))
		if first'="" {
			w !,ns,?25,##class(shared.dateFunctions).multiDate(+first,3)
		}
		
	}
	zn orgNs
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^EF.stats.userStatsD</DataLocation>
<DefaultData>userStatsDefaultData</DefaultData>
<IdLocation>^EF.stats.userStatsD</IdLocation>
<IndexLocation>^EF.stats.userStatsI</IndexLocation>
<StreamLocation>^EF.stats.userStatsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="userStatsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.stats.users">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.stats.users.CLS/EV.0
;vc; Component: CLS.EF.stats.users
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:35
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.stats.users.CLS/EV.0</td><td>CLS.EF.stats.users</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:35</td><td>ShahadatH</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63392,59868</TimeChanged>
<TimeCreated>63391,52955.916596</TimeCreated>

<Method name="getChargeableUserCount">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set count=0
	set rs=##class(%ResultSet).%New("admin.objUser:qGetBackendPersonIDs")
	set ok=rs.Execute()
	while rs.Next()	{
		set personID=rs.Get("objPerson")
		set include=1
		if ##class(admin.objUser).isEFuser(personID) {
			set include=0
		}
		if '##class(cod.objPerson).isActive(personID) {
			set include=0	
		}
		if '##class(cod.objItemData).get(personID,"active") {
			set include=0	
		}
		if ##class(admin.objUser).avivaIsStakeholder(personID) {
			set include=0	
		}
		if include {
			set count=count+1	
		}
	}
	quit count
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.abstractReviewsBase">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.abstractReviewsBase.CLS/EV.1
;vc; Component: CLS.EF.tags.abstractReviewsBase
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.abstractReviewsBase.CLS/EV.1</td><td>CLS.EF.tags.abstractReviewsBase</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<Super>EF.tags.base</Super>
<TimeChanged>64119,62731</TimeChanged>
<TimeCreated>64089,44817.398063</TimeCreated>

<Parameter name="tagName">
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Parameter name="showGrade">
</Parameter>

<Parameter name="isPaper">
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set documentID=..tagProcessor.getAbstractDocumentID()
	set showGrade=..#showGrade
	set isPaper=..#isPaper
	set xLangID=..tagProcessor.getLanguageID()
	set xDateFormat=..tagProcessor.getDateFormat()
	set LF=..getLineFeedCharacter()
	
	
	set eventID=##class(abstract.objDocument).getEventIDFromDocumentID(documentID)
	set timeFormat=##class(setup.objEventSetting).getParameter("system","time format",eventID)
	set showReviewer='##class(setup.objEventSetting).getParameter("abstracts","hide reviewer details from submitters",eventID)
	if '##class(setup.objEventSetting).getParameter("abstracts","let reviewers score",eventID) {
		set showGrade=0	
	}
	
	set out=""
	set prevPersonID=""
	set useCriteria=##class(abstract.objCriteria).isEventUsingReviewingCriteria(eventID)
	if isPaper {
		set useCriteria=0	
	}
	if useCriteria {
		set query="SELECT ID,isReviewOfPaper FROM abstract.objReview WHERE objDocument = ? AND isComplete = 1 AND objCriteria->active=1 GROUP BY objPerson ORDER BY xMOstamp DESC"
	} else {
		set query="SELECT ID,isReviewOfPaper FROM abstract.objReview WHERE objDocument = ? AND isComplete = 1 AND ((objCriteria IS NULL) OR (objCriteria = '')) AND ((overallReviewType='') OR (overallReviewType IS NULL)) ORDER BY xMOstamp DESC"
	}
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare(query)
	do rs.Execute(documentID)
	while rs.Next() {
		set reviewID=rs.Data("ID")
		if +rs.Data("isReviewOfPaper")=isPaper {
			set objReview=##class(abstract.objReview).%OpenId(reviewID)
			set reviewerPersonID=objReview.objPerson.%Id()
			if showReviewer {
				set out=out_##class(shared.pCSP).out("Reviewer:")_" "_objReview.getReviewersName()_LF
			}
			set out=out_##class(shared.pCSP).out("Review date:")_" "_objReview.getReviewTimeStampFormatted(xDateFormat,timeFormat)_LF
			set out=out_LF
			if (useCriteria) {
				set out=out_..getReviewsDetailsByCriteria(documentID, reviewerPersonID, showGrade, xLangID, LF)
			} else {
				set out=out_..getReviewDetails(reviewID,showGrade,xLangID,LF)	
			}
		}
	}
	return out
]]></Implementation>
</Method>

<Method name="getReviewsDetailsByCriteria">
<ClassMethod>1</ClassMethod>
<FormalSpec>documentID,reviewerPersonID,showGrade,xLangID,LF</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set eventID=##class(abstract.objDocument).getEventIDFromDocumentID(documentID)
	set isSingleCommentPerAbstractOn=##class(setup.objEventSetting).getParameter("abstracts","single comment per abstract review",eventID)	
	
	set query="SELECT ID,objCriteria FROM abstract.objReview WHERE objDocument = ? AND objPerson=? AND isComplete = 1 AND objCriteria->active=1 ORDER BY objCriteria->displayOrder"
	set rs2=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs2.Prepare(query)
	do rs2.Execute(documentID,reviewerPersonID)
	while rs2.Next() {
		set reviewID=rs2.Data("ID")
		set out=out_..getReviewDetails(reviewID,showGrade,xLangID,LF)
	}
	if (isSingleCommentPerAbstractOn) {
		set showGrade=0
		set overallReviewID= ##class(abstract.objReview).getAbstractOverallReviewCommentIDForReviewerWhenCriteriaExist(documentID,reviewerPersonID)
		if overallReviewID {
			set out=out_..getReviewDetails(overallReviewID,showGrade,xLangID,LF)
		}
	}
	
	quit out
]]></Implementation>
</Method>

<Method name="getReviewDetails">
<ClassMethod>1</ClassMethod>
<FormalSpec>reviewID,showGrade,xLangID,LF</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set objReview=##class(abstract.objReview).%OpenId(reviewID)
	set criteriaDesc=objReview.getCriteriaDescription()
	if $l(criteriaDesc) {
		set out=out_##class(shared.pCSP).out("Criteria:")_" "_objReview.getCriteriaDescription()_LF
	}
	
	if showGrade {
		set out=out_##class(shared.pCSP).out("Grade:")_" "_objReview.grade_LF
	}
	set out=out_##class(shared.pCSP).out("Comments:")_" "_objReview.description_LF
	set out=out_LF
	quit out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.base">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.base.CLS/EV.0
;vc; Component: CLS.EF.tags.base
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.base.CLS/EV.0</td><td>CLS.EF.tags.base</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<Super>%RegisteredObject</Super>
<TimeChanged>64089,51496</TimeChanged>
<TimeCreated>64083,58856.14318</TimeCreated>

<Property name="tagProcessor">
<Type>EF.tags.tagProcessor</Type>
</Property>

<Property name="tagParameters">
<Type>%String</Type>
</Property>

<Property name="urlEncodeOutput">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Parameter name="isForAbstractDocument">
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>

<Parameter name="tagNames">
</Parameter>

<Method name="dispatchTag">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>tagDefinition:%String,tagProcessor:EF.tags.tagProcessor</FormalSpec>
<ReturnType>EF.tags.base</ReturnType>
<Implementation><![CDATA[
	#dim arrayOfTags As %ArrayOfObjects = ..getArrayOfTags()
	set tagName=$P($ZCVT(tagDefinition,"U"),":")
	
	if arrayOfTags.IsDefined(tagName) {
		set tagObject=arrayOfTags.GetAt(tagName)
		set tagObject.tagProcessor=tagProcessor
		set tagObject.tagParameters=$P($ZCVT(tagDefinition,"U"),":",2,*)
		if $p(tagObject.tagParameters,":",*)="URLENCODE" {
			set tagObject.urlEncodeOutput=1
			set tagObject.tagParameters=$p(tagObject.tagParameters,":",1,*-1)	
		}
		return tagObject
	}
	return ""
]]></Implementation>
</Method>

<Method name="getArrayOfTags">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<ReturnType>%ArrayOfObjects</ReturnType>
<Implementation><![CDATA[
	set arrayOfTags=##class(%ArrayOfObjects).%New()
	set query="SELECT Name FROM %Dictionary.ClassDefinition WHERE Name['EF.tags.tagDefinitions.'"
	set sqlStatement=##class(%SQL.Statement).%New()
	set sc=sqlStatement.%Prepare(query)
	set rs=sqlStatement.%Execute() 
	while rs.%Next() {
		set className=rs.%Get("Name")
		set isTag=0
		try {
			set tagObject=$ClassMethod(className,"%New")
			if tagObject.%IsA("EF.tags.base") {
				set isTag=1	
			}
		} catch errObj {
			
		}
		if isTag {
			set tagList=tagObject.getTagNameList()
			for count=1:1:$ListLength(tagList) {
				set tagName=$ZCVT($ListGet(tagList,count),"U")
				if arrayOfTags.IsDefined(tagName) {
					throw ##class(shared.exceptions.generalException).%New(tagName_" is already defined")
				}
				do arrayOfTags.SetAt(tagObject,tagName)
			}
		}
	}
	return arrayOfTags
]]></Implementation>
</Method>

<Method name="getArrayOfAbstractTags">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<ReturnType>%ArrayOfObjects</ReturnType>
<Implementation><![CDATA[
	set abstractTags=##class(%ArrayOfObjects).%New()
	set allTags=..getArrayOfTags()
	set key=""
	for {
		set tagObject=allTags.GetNext(.key)
		if key="" quit	
		if tagObject.#isForAbstractDocument {
			do abstractTags.SetAt(tagObject,key)
		}
	}
	return abstractTags
]]></Implementation>
</Method>

<Method name="getTagNameList">
<Final>1</Final>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tagNameList=$LB(..#tagName)
	if $l(..getAlternativeTagNames()) {
		set tagNameList=tagNameList_..getAlternativeTagNames()
	}
	return tagNameList
]]></Implementation>
</Method>

<Method name="getAlternativeTagNames">
<Description>
Can be used for adding alternative tag names</Description>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[	return ""
]]></Implementation>
</Method>

<Method name="getTagReplacementForHTML">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ..getTagReplacement()
]]></Implementation>
</Method>

<Method name="getTagReplacementForText">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ..getTagReplacement()
]]></Implementation>
</Method>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>

<Method name="getLineFeedCharacter">
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	return $CASE(..tagProcessor.getMode(),
		"html":"<br>",
		"text":$C(13,10),
		:""
	)
]]></Implementation>
</Method>

<Method name="translatePhrase">
<FormalSpec>phrase:%String,vars...</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ##class(translations.objPhraseWebsite).translatePhrase(phrase,..tagProcessor.getLanguageID(),,vars...)
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractAllAuthorsAndCompanies">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractAllAuthorsAndCompanies.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractAllAuthorsAndCompanies
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractAllAuthorsAndCompanies.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractAllAuthorsAndCompanies</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,45690</TimeChanged>
<TimeCreated>64089,45596.412175</TimeCreated>

<Parameter name="tagName">
<Default>abstractAllAuthorsAndCompanies</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set documentID=..tagProcessor.getAbstractDocumentID()
	set eventID=..tagProcessor.getEventID()
	Set ISMESpecial=0
	If ($ZNSPACE="EVISME") Set ISMESpecial=1
	// get main authors
	kill companies
	&SQL(SELECT authorID INTO :authorID FROM abstract.objDocument WHERE ID = :documentID)
	if +SQLCODE=0 {
		set mainAuthor=##class(cod.objItemData).get(authorID,"firstname")_" "_##class(cod.objItemData).get(authorID,"lastname")
		if ##class(setup.objEventSetting).getParameter("abstracts","use salutation",eventID),$l(##class(cod.objItemData).get(authorID,"salutation")) {			
			set mainAuthor=##class(cod.objItemData).get(authorID,"salutation")_" "_mainAuthor
		}
		set mainAuthorCompany=##class(cod.objItemData).get(authorID,"company")
		if ISMESpecial {
			Set mainAuthorCountry=##class(cod.objItemData).get(authorID,"country")
			If $L($ZSTRIP(mainAuthorCountry,"<>W")) set mainAuthorCompany=mainAuthorCompany_",&nbsp;"_mainAuthorCountry
		}
		set companies(1)=mainAuthorCompany

		// get co authors
		kill coAuthors
		set rs2=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		do rs2.Prepare("SELECT * FROM abstract.objCoAuthor WHERE objDocument=? ORDER BY displayOrder")
		do rs2.Execute(documentID)
		set coCount=0
		while rs2.Next() {
			set coCount=coCount+1	
			set coAuthorID=rs2.Get("objPerson")
			set coAuthor(coCount,"name")=##class(cod.objItemData).get(coAuthorID,"firstname")_" "_##class(cod.objItemData).get(coAuthorID,"lastname")
			if ##class(setup.objEventSetting).getParameter("abstracts","use salutation",eventID),$l(##class(cod.objItemData).get(coAuthorID,"salutation")) {			
				set coAuthor(coCount,"name")=##class(cod.objItemData).get(coAuthorID,"salutation")_" "_coAuthor(coCount,"name")
			}
			set coAuthorCompany=##class(cod.objItemData).get(coAuthorID,"company")
			if ISMESpecial {
				Set coAuthorCountry=##class(cod.objItemData).get(coAuthorID,"country")
				If $L($ZSTRIP(coAuthorCountry,"<>W")) set coAuthorCompany=coAuthorCompany_",&nbsp;"_coAuthorCountry
			}
			set found=0
			for i=1:1 {
				if '$D(companies(i)) quit
				if companies(i)=coAuthorCompany  {
					set coAuthor(coCount,"company")=i
					set found=1
				}
			}
			if 'found {
				set companies(i)=coAuthorCompany
				set coAuthor(coCount,"company")=i
			}
		}		

		// do wh have multi companies, if so use superscripted number to indicate
		set multiCompany=0
		if $O(companies(""),-1)>1 set multiCompany=1
		
		// print the main author
		set out=out_"<br>"_mainAuthor
		if multiCompany set out=out_"<sup>1</sup>"
		
		// print the co authors
		for i=1:1:coCount {
			set out=out_", "_coAuthor(i,"name")
			if multiCompany set out=out_"<sup>"_coAuthor(i,"company")_"</sup>"
		}
		
		
		// print the companies
		set out=out_"<BR><I>"
		if multiCompany {
			for i=1:1 {
				if '$D(companies(i)) quit
				if i>1 set out=out_",&nbsp;"
				set out=out_"<sup>"_i_"</sup>"_companies(i)
			}
		} else {
			set out=out_mainAuthorCompany
		}
	 set out=out_"</I>"
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractAssignedPresentationMethod">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractAssignedPresentationMethod.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractAssignedPresentationMethod
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractAssignedPresentationMethod.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractAssignedPresentationMethod</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,43743</TimeChanged>
<TimeCreated>64089,43379.566968</TimeCreated>

<Parameter name="tagName">
<Default>abstractAssPresMethod</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim objDocument As abstract.objDocument=..tagProcessor.getAbstractDocument()
	set out=""
	if $IsObject(objDocument.objAssignedPresentationMethod) {
		set out=##class(abstract.objPresentationMethodDescription).getDescription(objDocument.objAssignedPresentationMethod.%Id(),..tagProcessor.getLanguageID())
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractAuthor">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractAuthor.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractAuthor
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractAuthor.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractAuthor</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,45442</TimeChanged>
<TimeCreated>64089,45397.284744</TimeCreated>

<Parameter name="tagName">
<Default>abstractAuthor</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set objDocument=..tagProcessor.getAbstractDocument()
	set personID=objDocument.authorID
	if personID {
		set out=##class(cod.objItemData).get(personID,"firstname")_" "_##class(cod.objItemData).get(personID,"lastname")
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractAuthorCompany">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractAuthorCompany.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractAuthorCompany
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractAuthorCompany.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractAuthorCompany</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,45478</TimeChanged>
<TimeCreated>64089,45453.075513</TimeCreated>

<Parameter name="tagName">
<Default>abstractAuthorCompany</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set objDocument=..tagProcessor.getAbstractDocument()
	set personID=objDocument.authorID
	if personID {
		set out=##class(cod.objItemData).get(personID,"company")
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractCoAuthors">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractCoAuthors.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractCoAuthors
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractCoAuthors.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractCoAuthors</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,45562</TimeChanged>
<TimeCreated>64089,45503.8931</TimeCreated>

<Parameter name="tagName">
<Default>abstractCoAuthors</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set documentID=..tagProcessor.getAbstractDocumentID()
	set LF=..getLineFeedCharacter()
	set query="SELECT * FROM abstract.objCoAuthor WHERE objDocument=? ORDER BY displayOrder"
	set rs=##class(%Library.ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare(query)
	do rs.Execute(documentID)
	while rs.Next() {
		set coAuthorID=rs.Get("objPerson")
		set salutation=##class(cod.objItemData).get(coAuthorID,"salutation")
		if $l(salutation) set out=out_salutation_" "
		set out=out_##class(cod.objItemData).get(coAuthorID,"firstname")_" "_##class(cod.objItemData).get(coAuthorID,"lastname")_LF

	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractContent">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractContent.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractContent
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractContent.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractContent</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,45385</TimeChanged>
<TimeCreated>64089,45320.909809</TimeCreated>

<Parameter name="tagName">
<Default>abstractContent</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set documentID=..tagProcessor.getAbstractDocumentID()
	return ##class(abstract.outputHTMLMethods).getAbstractHTMLWithHeaders(documentID)
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractCorrespondingAuthor">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractCorrespondingAuthor.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractCorrespondingAuthor
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractCorrespondingAuthor.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractCorrespondingAuthor</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,43984</TimeChanged>
<TimeCreated>64089,43590.889114</TimeCreated>

<Parameter name="tagName">
<Default>abstractCorrespondingAuthor</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set documentID=..tagProcessor.getAbstractDocumentID()
	set tmpCodItemID=##class(cod.objItemName).getIDFromDescriptionNoEvent("Corresponding Author ID")
	set authorID=##class(abstract.objItemData).get(documentID,tmpCodItemID)
	if authorID {
		set out=##class(cod.objItemData).get(authorID,"firstname")_" "_##class(cod.objItemData).get(authorID,"lastname")	
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractID">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractID.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractID
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractID.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractID</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,45308</TimeChanged>
<TimeCreated>64089,45275.544335</TimeCreated>

<Parameter name="tagName">
<Default>abstractID</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ..tagProcessor.getAbstractDocumentID()
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractKeywords">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractKeywords.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractKeywords
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractKeywords.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractKeywords</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,43746</TimeChanged>
<TimeCreated>64089,42726.653021</TimeCreated>

<Parameter name="tagName">
<Default>abstractKeywords</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim objDocument As abstract.objDocument=..tagProcessor.getAbstractDocument()
	set out=objDocument.keywords
	kill objDocument
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractNumber">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractNumber.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractNumber
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractNumber.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractNumber</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,43907</TimeChanged>
<TimeCreated>64089,42151.995327</TimeCreated>

<Parameter name="tagName">
<Default>abstractNumber</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim objDocument As abstract.objDocument=..tagProcessor.getAbstractDocument()
	set out=objDocument.getAbstractNumber()
	kill objDocument
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractOtherReviewComments">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractOtherReviewComments.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractOtherReviewComments
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractOtherReviewComments.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractOtherReviewComments</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,46388</TimeChanged>
<TimeCreated>64089,46329.958198</TimeCreated>

<Parameter name="tagName">
<Default>absOtherReviewComments</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set documentID=..tagProcessor.getAbstractDocumentID()
	set eventID=..tagProcessor.getEventID()
	set dateFormat=..tagProcessor.getDateFormat()
	set reviewerID=##class(EF.security.websiteAccessHandler).getCurrentAbstractReviewerPersonID(eventID)
	set LF=..getLineFeedCharacter()
	set out=""
	set prevPersonID=""
	set query="SELECT *, objCriteria->description as criteriaDesc  FROM  abstract.objReview WHERE (objDocument=?) AND (objPerson<>?) ORDER BY objPerson, criteriaDesc, ID"
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare(query)
	do rs.Execute(documentID,reviewerID)
	while rs.Next() {
		set personID=rs.Get("objPerson")
		set reviewer=##class(cod.objItemData).get(personID,"firstname")_" "_##class(cod.objItemData).get(personID,"lastname")
		set dateTime=rs.Get("xCRstamp")
		set date=$p(dateTime," ",1)
		set date=##class(shared.dateFunctions).multiDate(date,dateFormat)
		set time=$p(dateTime," ",2)
		set criteriaDesc=rs.Get("criteriaDesc")
		if personID'=prevPersonID {
			set out=out_##class(shared.pCSP).out("Reviewer:")_" "_reviewer_LF
		}
	
		if $l(criteriaDesc) {
			set out=out_##class(shared.pCSP).out("Criteria:")_" "_criteriaDesc_LF
		}
		set out=out_date_" "_time_LF
		if ##class(setup.objEventSetting).getParameter("abstracts","let reviewers score",eventID) {
			set out=out_##class(shared.pCSP).out("Grade")_" "_rs.Get("grade")_LF
		}
		set out=out_rs.Get("description")_LF
		set prevPersonID=personID
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractPaperReviewComments">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractPaperReviewComments.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractPaperReviewComments
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractPaperReviewComments.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractPaperReviewComments</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.abstractReviewsBase</Super>
<TimeChanged>64089,47695</TimeChanged>
<TimeCreated>64089,45231.452296</TimeCreated>

<Parameter name="tagName">
<Default>Abstract Paper Review Comments</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Parameter name="showGrade">
<Default>0</Default>
</Parameter>

<Parameter name="isPaper">
<Default>1</Default>
</Parameter>
</Class>


<Class name="EF.tags.tagDefinitions.abstractPaperReviews">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractPaperReviews.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractPaperReviews
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractPaperReviews.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractPaperReviews</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.abstractReviewsBase</Super>
<TimeChanged>64089,47706</TimeChanged>
<TimeCreated>64089,45206.187361</TimeCreated>

<Parameter name="tagName">
<Default>Abstract Paper Reviews</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Parameter name="showGrade">
<Default>1</Default>
</Parameter>

<Parameter name="isPaper">
<Default>1</Default>
</Parameter>
</Class>


<Class name="EF.tags.tagDefinitions.abstractPreferredPresentationMethod">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractPreferredPresentationMethod.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractPreferredPresentationMethod
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractPreferredPresentationMethod.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractPreferredPresentationMethod</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,43754</TimeChanged>
<TimeCreated>64089,43361.712647</TimeCreated>

<Parameter name="tagName">
<Default>abstractPrefPresMethod</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim objDocument As abstract.objDocument=..tagProcessor.getAbstractDocument()
	set out=""
	if $IsObject(objDocument.objPreferredPresentationMethod) {
		set out=##class(abstract.objPresentationMethodDescription).getDescription(objDocument.objPreferredPresentationMethod.%Id(),..tagProcessor.getLanguageID())
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractPresentationDuration">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractPresentationDuration.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractPresentationDuration
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractPresentationDuration.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractPresentationDuration</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,43758</TimeChanged>
<TimeCreated>64089,42486.477427</TimeCreated>

<Parameter name="tagName">
<Default>absPresentationDuration</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set documentID=..tagProcessor.getAbstractDocumentID()
	set (abstractStart,abstractEnd)=""
	&SQL(SELECT ID INTO :codItemID FROM cod.objitemName WHERE description = 'Abstract Start Time')
	if +SQLCODE=0 {
		set abstractStart=##class(abstract.objItemData).get(documentID,codItemID)
	}
	if abstractStart set abstractStart=$ZT(abstractStart,2)
	
	&SQL(SELECT ID INTO :codItemID FROM cod.objitemName WHERE description = 'Abstract End Time')
	if +SQLCODE=0 {
		set abstractEnd=##class(abstract.objItemData).get(documentID,codItemID)
	}
	if abstractEnd set abstractEnd=$ZT(abstractEnd,2)
	
	if abstractStart set out=abstractStart_" - "_abstractEnd
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractPresentationMethod">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractPresentationMethod.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractPresentationMethod
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractPresentationMethod.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractPresentationMethod</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,43886</TimeChanged>
<TimeCreated>64089,42778.965311</TimeCreated>

<Parameter name="tagName">
<Default>abstractPresentationMethod</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim objDocument As abstract.objDocument=..tagProcessor.getAbstractDocument()
	set out=""
	if $IsObject(objDocument.objAssignedPresentationMethod) {
		set out=##class(abstract.objPresentationMethodDescription).getDescription(objDocument.objAssignedPresentationMethod.%Id(),..tagProcessor.getLanguageID())
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractPresentationOrder">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractPresentationOrder.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractPresentationOrder
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractPresentationOrder.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractPresentationOrder</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,43766</TimeChanged>
<TimeCreated>64089,42115.240637</TimeCreated>

<Parameter name="tagName">
<Default>absPresentationOrder</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim objDocument As abstract.objDocument=..tagProcessor.getAbstractDocument()
	set out=objDocument.presentationOrder
	kill objDocument
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractPresentingAuthor">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractPresentingAuthor.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractPresentingAuthor
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractPresentingAuthor.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractPresentingAuthor</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,44010</TimeChanged>
<TimeCreated>64089,43496.37</TimeCreated>

<Parameter name="tagName">
<Default>abstractPresentingAuthor</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set documentID=..tagProcessor.getAbstractDocumentID()
	set tmpCodItemID=##class(cod.objItemName).getIDFromDescriptionNoEvent("Presenting Author ID")
	set authorID=##class(abstract.objItemData).get(documentID,tmpCodItemID)
	if authorID {
		set out=##class(cod.objItemData).get(authorID,"firstname")_" "_##class(cod.objItemData).get(authorID,"lastname")	
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractReviewComments">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractReviewComments.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractReviewComments
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractReviewComments.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractReviewComments</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.abstractReviewsBase</Super>
<TimeChanged>64089,48240</TimeChanged>
<TimeCreated>64089,48129.243186</TimeCreated>

<Parameter name="tagName">
<Default>Abstract Review Comments</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Parameter name="showGrade">
<Default>0</Default>
</Parameter>

<Parameter name="isPaper">
<Default>0</Default>
</Parameter>

<Method name="getAlternativeTagNames">
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[	return $LB("ABSREVIEWCOMMENTS")
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractReviewersComments">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractReviewersComments.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractReviewersComments
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractReviewersComments.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractReviewersComments</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,46426</TimeChanged>
<TimeCreated>64089,46162.289483</TimeCreated>

<Parameter name="tagName">
<Default>absReviewersComments</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set documentID=..tagProcessor.getAbstractDocumentID()
	set eventID=..tagProcessor.getEventID()
	set dateFormat=..tagProcessor.getDateFormat()
	set reviewerID=##class(EF.security.websiteAccessHandler).getCurrentAbstractReviewerPersonID(eventID)
	set LF=..getLineFeedCharacter()
	set out=""
	set prevPersonID=""
	set query="SELECT *, objCriteria->description as criteriaDesc  FROM  abstract.objReview WHERE (objDocument=?) AND (objPerson=?) ORDER BY criteriaDesc,ID"
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare(query)
	do rs.Execute(documentID,reviewerID)
	while rs.Next() {
		set dateTime=rs.Get("xCRstamp")
		set date=$p(dateTime," ",1)
		set date=##class(shared.dateFunctions).multiDate(date,dateFormat)
		set time=$p(dateTime," ",2)
		set criteriaDesc=rs.Get("criteriaDesc")
		if $l(criteriaDesc) {
			set out=out_##class(shared.pCSP).out("Criteria:")_" "_criteriaDesc_LF
		}
		set out=out_date_" "_time_LF
		if ##class(setup.objEventSetting).getParameter("abstracts","let reviewers score",eventID) {
			set out=out_##class(shared.pCSP).out("Grade")_" "_rs.Get("grade")_LF
		}
		set out=out_rs.Get("description")_LF
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractReviews">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractReviews.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractReviews
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractReviews.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractReviews</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.abstractReviewsBase</Super>
<TimeChanged>64089,47727</TimeChanged>
<TimeCreated>64089,45119.917053</TimeCreated>

<Parameter name="tagName">
<Default>Abstract Reviews</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Parameter name="showGrade">
<Default>1</Default>
</Parameter>

<Parameter name="isPaper">
<Default>0</Default>
</Parameter>
</Class>


<Class name="EF.tags.tagDefinitions.abstractSessionDate">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractSessionDate.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractSessionDate
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractSessionDate.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractSessionDate</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,43777</TimeChanged>
<TimeCreated>64089,41531.121414</TimeCreated>

<Parameter name="tagName">
<Default>abstractSessionDate</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim itemID As %Integer = ..tagProcessor.getItemIDFromAbstractDocument()
	return ##class(setup.objItem).getItemDate(itemID,1)
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractSessionLocation">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractSessionLocation.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractSessionLocation
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractSessionLocation.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractSessionLocation</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,43781</TimeChanged>
<TimeCreated>64089,41651.165972</TimeCreated>

<Parameter name="tagName">
<Default>abstractSessionLocation</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim objDocument As abstract.objDocument = ..tagProcessor.getAbstractDocument()
	set eventID=..tagProcessor.getEventID()
	set out=""
	if $IsObject(objDocument.objItem) {
		if $IsObject(objDocument.objItem.objLocation) {
			set out=##class(setup.objLocationDetails).getDetails(objDocument.objItem.objLocation.%Id(),..tagProcessor.getLanguageID())
		}
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractSessionName">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractSessionName.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractSessionName
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractSessionName.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractSessionName</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,43785</TimeChanged>
<TimeCreated>64089,41455.683342</TimeCreated>

<Parameter name="tagName">
<Default>abstractSessionName</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim itemID As %Integer = ..tagProcessor.getItemIDFromAbstractDocument()
	return ##class(setup.objItemDetails).getDetails(itemID,..tagProcessor.getLanguageID())
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractSessionOrder">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractSessionOrder.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractSessionOrder
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractSessionOrder.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractSessionOrder</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,43789</TimeChanged>
<TimeCreated>64089,41811.674184</TimeCreated>

<Parameter name="tagName">
<Default>abstractSessionOrder</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim itemID As %Integer = ..tagProcessor.getItemIDFromAbstractDocument()
	return ##class(setup.objItemDetails).getDetails(itemID,..tagProcessor.getLanguageID())
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractSessionSummary">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractSessionSummary.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractSessionSummary
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractSessionSummary.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractSessionSummary</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,48015</TimeChanged>
<TimeCreated>64089,45737.347078</TimeCreated>

<Parameter name="tagName">
<Default>abstractSessionSummary</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set itemID=..tagProcessor.getItemIDFromAbstractDocument()
	set dateFormat=..tagProcessor.getDateFormat()
	set languageID=..tagProcessor.getLanguageID()
	if itemID {
	 	set timeFrom=##class(setup.objItem).getStartTimeHoro(itemID)
		set sessionDate=##class(setup.objItem).getItemDate(itemID,dateFormat)
		set sessionTime=$ZT(timeFrom,2)
		set sessionName=##class(setup.objItemDetails).getDetails(itemID,languageID)
		set out=out_sessionDate_" - "_sessionTime_" - "_sessionName
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractSessionTime">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractSessionTime.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractSessionTime
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractSessionTime.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractSessionTime</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,43795</TimeChanged>
<TimeCreated>64089,41568.800507</TimeCreated>

<Parameter name="tagName">
<Default>abstractSessionTime</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim itemID As %Integer = ..tagProcessor.getItemIDFromAbstractDocument()
	set eventID=..tagProcessor.getEventID()
	set out=""
	if itemID {
		set timeFrom=##class(setup.objItem).getStartTimeHoro(itemID)
		set timeTo=##class(setup.objItem).getEndTimeHoro(itemID)
		set out=##class(setup.objEvent).formatTime(timeFrom,eventID)_"-"_##class(setup.objEvent).formatTime(timeTo,eventID)
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractSummary">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractSummary.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractSummary
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractSummary.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractSummary</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,43800</TimeChanged>
<TimeCreated>64089,42698.213411</TimeCreated>

<Parameter name="tagName">
<Default>abstractSummary</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim objDocument As abstract.objDocument=..tagProcessor.getAbstractDocument()
	set out=objDocument.summary
	kill objDocument
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractTitle">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractTitle.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractTitle
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractTitle.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractTitle</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,43805</TimeChanged>
<TimeCreated>64089,40998.645593</TimeCreated>

<Parameter name="tagName">
<Default>abstractTitle</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim objDocument As abstract.objDocument=..tagProcessor.getAbstractDocument()
	set out=objDocument.description
	kill objDocument
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.abstractTopic">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.abstractTopic.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.abstractTopic
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.abstractTopic.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.abstractTopic</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,43811</TimeChanged>
<TimeCreated>64089,42630.38044</TimeCreated>

<Parameter name="tagName">
<Default>abstractTopic</Default>
</Parameter>

<Parameter name="isForAbstractDocument">
<Default>1</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim objDocument As abstract.objDocument=..tagProcessor.getAbstractDocument()
	set out=##class(abstract.objTopicDescription).getDescription(objDocument.objTopic.%Id(),..tagProcessor.getLanguageID())
	kill objDocument
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.accomLastChanges">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.accomLastChanges.CLS/EV.1
;vc; Component: CLS.EF.tags.tagDefinitions.accomLastChanges
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.accomLastChanges.CLS/EV.1</td><td>CLS.EF.tags.tagDefinitions.accomLastChanges</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,62245</TimeChanged>
<TimeCreated>64085,46619.709252</TimeCreated>

<Parameter name="tagName">
<Default>accomLastChanges</Default>
</Parameter>

<Method name="getTagReplacementForHTML">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set eventID=..tagProcessor.getEventID()
	set dateFormat=..tagProcessor.getDateFormat()
	set LF=..getLineFeedCharacter()
	set showNames=1
	
	// get start time from audit trail
	set tmp="",starttimestamp="",tmp2=""
	&SQL(SELECT description INTO :tmp FROM eCom.objPurchaseAudit WHERE (objPurchase=:purchaseID) AND (description [ 'Transaction update started') ORDER BY xMOstamp DESC)
	if +SQLCODE=0 set starttimestamp=$p(tmp,": ",2)
	set tmp="",amendtimestamp=""
	&SQL(SELECT xMOstamp,objEvent INTO :tmp,:tmp2 FROM eCom.objPurchase WHERE ID=:purchaseID)
	if +SQLCODE=0 set amendtimestamp=tmp,eventID=tmp2
	
	set showNames=##class(setup.objEventSetting).getParameter("bookings","allow group bookings",eventID)
	
	// just in case we don't pick up a start time
	if starttimestamp="" set starttimestamp=amendtimestamp
	
	if $L(amendtimestamp)	{
		
		// add 5 seconds each side of the last change
		set fromTimeStamp=$SYSTEM.SQL.DATEADD("ss",-5,starttimestamp)
		set toTimeStamp=$SYSTEM.SQL.DATEADD("ss",5,amendtimestamp)
		
		
		kill changes
		
		set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		set sqltext="SELECT * FROM accom.objChange  WHERE (xCRstamp>?) AND (xCRstamp<?) AND (objPurchase=?)"
		do rs.Prepare(sqltext)
		do rs.Execute(fromTimeStamp,toTimeStamp,purchaseID)
		while rs.Next()	{
			set changesID=rs.Data("ID")
			set personID=rs.Data("objPerson")
			set type=rs.Data("type")
			if (rs.Get("checkinDateNew")'=rs.Get("checkinDateOld"))!(rs.Get("checkoutDateNew")'=rs.Get("checkoutDateOld")) {
				set changes(personID,type,changesID)=""
			}
		}
		if $D(changes) {
			set out=out_"<table border='0' cellspacing='0' cellpadding='1' bgcolor='#FFFFFF'>"
			set out=out_" <tr>"
			set out=out_"  <td>"
			set out=out_"  <table width='100%' border=0 cellpadding=3 cellspacing=0 bgcolor='#FFFFFF'>"
			set out=out_"  <tr>"
			set a=..translatePhrase("this is a test")
			if showNames {
				set out=out_"   <td width=100><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("First Name")_"</b></font></td>"
				set out=out_"   <td width=100><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Last Name")_"</b></font></td>"
			}
			set out=out_"   <td width=200><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Hotel")_"</b></font></td>"
			set out=out_"   <td width=100><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Room Type")_"</b></font></td>"
			set out=out_"   <td width=100><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Action")_"</b></font></td>"
			set out=out_"   <td width=100><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Check-in date: Old")_"</b></font></td>"
			set out=out_"   <td width=100><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Check-out date: Old")_"</b></font></td>"
			set out=out_"   <td width=100><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Check-in date: New")_"</b></font></td>"
			set out=out_"   <td width=100><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Check-in date: New")_"</b></font></td>"

			set out=out_"  </tr>"
			set (personID,changesID)="",count=0
			for {
				set personID=$O(changes(personID))
				if personID="" quit
				for type="cancel","new","amend" {
					for {
						set changesID=$O(changes(personID,type,changesID))
						if changesID="" quit
					
						&SQL(SELECT checkinDateOld,checkoutDateOld,checkinDateNew,checkoutDateNew,objEventHotel->objVenue,objRoomType->description INTO :tmp,:tmp2,:tmp3,:tmp4,:tmp5,:tmp6
							FROM accom.objChange
							WHERE ID=:changesID
						)
						if +SQLCODE=0 {
							set action=""
							set firstname=##class(cod.objItemData).get(personID,"firstname")
							set lastname=##class(cod.objItemData).get(personID,"lastname")
							if type="cancel" set action=..translatePhrase("Cancelled")
							if type="new" set action=..translatePhrase("Booked")
							if type="amend" set action=..translatePhrase("Amended")
							set checkinDateOld=##class(shared.dateFunctions).multiDate(tmp,xDateFormat)
							// RQ 18-Jul-2011 PBUG00003950 - Need to +1 the check-out dates
							set checkoutDateOld=##class(shared.dateFunctions).multiDate(tmp2+1,xDateFormat)
							if (tmp3) {
								set checkinDateNew=##class(shared.dateFunctions).multiDate(tmp3,xDateFormat)
							} else {
								set checkinDateNew=""
							}
							if (tmp4) {
								set checkoutDateNew=##class(shared.dateFunctions).multiDate(tmp4+1,xDateFormat)
							} else {
								set checkoutDateNew=""
							}
							set venueDesc=##class(accom.objVenueItemData).get(tmp5,"description")
							set roomType=tmp6
							set out=out_"   <tr>"
							if showNames {
								set out=out_"    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_firstname_"</font></td>"
								set out=out_"    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_lastname_"</font></td>"
							}
							set out=out_"    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_venueDesc_"</font></td>"
							set out=out_"    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_roomType_"</font></td>"
							set out=out_"    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_action_"</font></td>"
							set out=out_"    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_checkinDateOld_"</font></td>"
							set out=out_"    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_checkoutDateOld_"</font></td>"
							set out=out_"    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_checkinDateNew_"</font></td>"
							set out=out_"    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_checkoutDateNew_"</font></td>"
						 	set out=out_"   </tr>"
						}
					}
				}
			}
			set out=out_"			</table>"
			set out=out_"		</td>"
			set out=out_"	</tr>"
			set out=out_"</table>"
		}
	}
	return out
]]></Implementation>
</Method>

<Method name="getTagReplacementForText">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tag=##class(EF.tags.base).dispatchTag("accomLastChangesText",..tagProcessor)
	return tag.getTagReplacementForText()
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.accomLastChangesText">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.accomLastChangesText.CLS/EV.1
;vc; Component: CLS.EF.tags.tagDefinitions.accomLastChangesText
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.accomLastChangesText.CLS/EV.1</td><td>CLS.EF.tags.tagDefinitions.accomLastChangesText</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,62936</TimeChanged>
<TimeCreated>64085,43522.168256</TimeCreated>

<Parameter name="tagName">
<Default>accomLastChangesText</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set dateFormat=..tagProcessor.getDateFormat()
	set LF=..getLineFeedCharacter()
	set showNames=1
	
	// get start time from audit trail
	set tmp="",starttimestamp="",tmp2=""
	&SQL(SELECT description INTO :tmp FROM eCom.objPurchaseAudit WHERE (objPurchase=:purchaseID) AND (description [ 'Transaction update started') ORDER BY xMOstamp DESC)
	if +SQLCODE=0 set starttimestamp=$p(tmp,": ",2)
	set tmp="",amendtimestamp=""
	&SQL(SELECT xMOstamp,objEvent INTO :tmp,:tmp2 FROM eCom.objPurchase WHERE ID=:purchaseID)
	if +SQLCODE=0 set amendtimestamp=tmp,eventID=tmp2
	
	set showNames=##class(setup.objEventSetting).getParameter("bookings","allow group bookings",eventID)
	
	// just in case we don't pick up a start time
	if starttimestamp="" set starttimestamp=amendtimestamp
	
	if $L(amendtimestamp)	{
		
		// add 5 seconds each side of the last change
		set fromTimeStamp=$SYSTEM.SQL.DATEADD("ss",-5,starttimestamp)
		set toTimeStamp=$SYSTEM.SQL.DATEADD("ss",5,amendtimestamp)
		
		
		kill changes
		
		set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		set sqltext="SELECT * FROM accom.objChange WHERE (xCRstamp>?) AND (xCRstamp<?) AND (objPurchase=?)"
		do rs.Prepare(sqltext)
		do rs.Execute(fromTimeStamp,toTimeStamp,purchaseID)
		while rs.Next()	{
			set changesID=rs.Data("ID")
			set personID=rs.Data("objPerson")
			set type=rs.Data("type")
			if (rs.Get("checkinDateNew")'=rs.Get("checkinDateOld"))!(rs.Get("checkoutDateNew")'=rs.Get("checkoutDateOld")) {
				set changes(personID,type,changesID)=""
			}
		}
		if $D(changes) {
			if showNames {
				set out=out_..translatePhrase("First name")_", "_..translatePhrase("Last name")_"      "
			}
			set out=out_..translatePhrase("Hotel")_"      "_..translatePhrase("Room Type")_"      "_..translatePhrase("Action")_"      "_..translatePhrase("Check-in Date Old")_"      "_..translatePhrase("Check-out Date Old")_"      "_..translatePhrase("Check-in Date New")_"      "_..translatePhrase("Check-out Date New")_LF
			
			set (personID,changesID)="",count=0
			for {
				set personID=$O(changes(personID))
				if personID="" quit
				for type="cancel","new","amend" {
					for {
						set changesID=$O(changes(personID,type,changesID))
						if changesID="" quit
					
						&SQL(SELECT checkinDateOld,checkoutDateOld,checkinDateNew,checkoutDateNew,objEventHotel->objVenue,objRoomType->description INTO :tmp,:tmp2,:tmp3,:tmp4,:tmp5,:tmp6
							FROM accom.objChange
							WHERE ID=:changesID
						)
						if +SQLCODE=0 {
							set action=""
							set firstname=##class(cod.objItemData).get(personID,"firstname")
							set lastname=##class(cod.objItemData).get(personID,"lastname")
							if type="cancel" set action=..translatePhrase("Cancelled")
							if type="new" set action=..translatePhrase("Booked")
							if type="amend" set action=..translatePhrase("Amended")
							set checkinDateOld=##class(shared.dateFunctions).multiDate(tmp,dateFormat)
							// RQ 18-Jul-2011 PBUG00003950 - Need to +1 the check-out dates
							set checkoutDateOld=##class(shared.dateFunctions).multiDate(tmp2+1,dateFormat)
							if (tmp3) {
								set checkinDateNew=##class(shared.dateFunctions).multiDate(tmp3,dateFormat)
							} else {
								set checkinDateNew=""
							}
							if (tmp4) {
								set checkoutDateNew=##class(shared.dateFunctions).multiDate(tmp4+1,dateFormat)
							} else {
								set checkoutDateNew=""
							}
							set venueDesc=##class(accom.objVenueItemData).get(tmp5,"description")
							set roomType=tmp6
							if showNames {
								set out=out_firstname_","_lastname_"      "
							}
							set out=out_venueDesc_"      "_roomType_"      "_action_"      "_checkinDateOld_"      "_checkoutDateOld_"      "_checkinDateNew_"      "_checkoutDateNew_LF
						}
					}
				}
			}
		}
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.accomList">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.accomList.CLS/EV.1
;vc; Component: CLS.EF.tags.tagDefinitions.accomList
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.accomList.CLS/EV.1</td><td>CLS.EF.tags.tagDefinitions.accomList</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,62275</TimeChanged>
<TimeCreated>64085,41878.087663</TimeCreated>

<Parameter name="tagName">
<Default>accomList</Default>
</Parameter>

<Method name="getTagReplacementForHTML">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set eventID=..tagProcessor.getEventID()
	set dateFormat=..tagProcessor.getDateFormat()
	set LF=..getLineFeedCharacter()
	set getGuestNames=##class(setup.objEventSetting).getParameter("accommodation","get guest names",eventID)
	set sqltext="SELECT *,lnkPersonBooking->objPerson,objRoomTypeInstance->objEventHotel->objVenue,objRoomTypeInstance->objRoomType->description As roomTypeDesc FROM accom.lnkRoomTypeBooking "
	set sqltext=sqltext_" WHERE (lnkPersonBooking->objPurchase=?) "
	set sqltext=sqltext_" GROUP BY lnkPersonBooking"
	set sqltext=sqltext_" ORDER BY objRoomTypeInstance->objEventHotel->objVenue,lnkPersonBooking->objPerson"
	set out=out_"<table border='0' cellspacing='0' cellpadding='1' bgcolor='#FFFFFF'>"
	set out=out_" <tr>"
	set out=out_"  <td>"
	set out=out_"  <table width='100%' border=0 cellpadding=3 cellspacing=0 bgcolor='#FFFFFF'>"
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare(sqltext)
	do rs.Execute(purchaseID)
	set lastVenueID="",lastPersonID=""
	while rs.Next()	{
		set lnkPersonBookingID=rs.Data("lnkPersonBooking")
		set venueID=rs.Data("objVenue")
		if venueID'=lastVenueID	{
			// NEW HOTEL, do page break, new title etc.
			set lastVenueID=venueID
			set lastPersonID=""  // reset name so we always get a name for a new hotel page
			set venueDescription=##class(accom.objVenueItemData).get(venueID,"description")
			set out=out_"<tr>"
			set out=out_"<td colspan=""5""><font face='Verdana,Geneva,Arial,sans-serif' size='2'><b>"_venueDescription_"</b></font></td>"
			set out=out_"</tr>"
			set out=out_"  <tr>"
			if 'getGuestNames {
				set out=out_"   <td width=100><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Last name")_"</b></font></td>"
				set out=out_"   <td width=100><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("First name")_"</b></font></td>"
			}
			set out=out_"   <td width=200><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Room Type")_"</b></font></td>"
			set out=out_"   <td width=100 align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Arrival")_"</b></font></td>"
			set out=out_"   <td width=100 align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Departure")_"</b></font></td>"
			set out=out_"  </tr>"
		}
		set personID=rs.Data("objPerson")
		if personID'=lastPersonID	{
			// new person, write out name
			set lastPersonID=personID
			set name=##class(cod.objItemData).get(personID,"lastname")_", "_##class(cod.objItemData).get(personID,"firstname")
			set organisation=##class(cod.objItemData).get(personID,"company")
		}
		// get the rooms for this booking to work out the date range
		set rs2=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		do rs2.Prepare("SELECT *,objRoomTypeInstance->roomDate,objRoomTypeInstance->objEventHotel FROM accom.lnkRoomTypeBooking WHERE lnkPersonBooking=?")
		do rs2.Execute(lnkPersonBookingID)
		set startDate="",endDate=""
		while rs2.Next()	{
			// find the date range for this booking
			set roomDate=rs2.Data("roomDate")
			set roomTypeInstanceID=rs2.Data("objRoomTypeInstance")  // only need this once
			set eventHotelID=rs2.Data("objEventHotel")  // only need this once
			set lnkPersonBooking=rs2.Data("lnkPersonBooking")  // only need this once
			if startDate=""!(startDate>roomDate) set startDate=roomDate
			if endDate=""!(roomDate>endDate) set endDate=roomDate
		}
		set roomTypeDesc=rs.Data("roomTypeDesc")
		set startDate=##class(shared.dateFunctions).multiDate(startDate,dateFormat)
		set endDate=##class(shared.dateFunctions).multiDate(endDate+1,dateFormat)
		set guestfirstname=##class(cod.objItemData).get(personID,"firstname")
		set guestlastname=##class(cod.objItemData).get(personID,"lastname")
		set guestorganisation=##class(cod.objItemData).get(personID,"company")
		
	 	set out=out_"   <tr>"
	 	if 'getGuestNames {
			set out=out_"    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_guestlastname_"</font></td>"
			set out=out_"    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_guestfirstname_"</font></td>"
	 	}
		set out=out_"    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_roomTypeDesc_"</font></td>"
		set out=out_"    <td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_startDate_"</font></td>"
		set out=out_"    <td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_endDate_"</font></td>"
	 	set out=out_"   </tr>"
	 	if getGuestNames {
			// get the guest names
			set guestNo=0
			set rsRoomGuests=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
			do rsRoomGuests.Prepare("SELECT objPerson FROM accom.objRoomGuest WHERE lnkPersonBooking=?")
			do rsRoomGuests.Execute(lnkPersonBookingID)
			while rsRoomGuests.Next()	{
				set guestNo=guestNo+1
				set roomGuestID=rsRoomGuests.Get("objPerson")
				set guestfirstname=##class(cod.objItemData).get(roomGuestID,"firstname")
				set guestlastname=##class(cod.objItemData).get(roomGuestID,"lastname")
				set out=out_"   <tr>"
				set out=out_"       <td colspan=3><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"
				set out=out_"&nbsp;&nbsp;&nbsp;&nbsp;"_..translatePhrase("Guest No.")_" "_guestNo_": "_guestlastname_","_guestfirstname_LF
				set out=out_"       </font></td>"
				set out=out_"   </tr>"
			}
		}
	}
	
	set out=out_"			</table>"
	set out=out_"		</td>"
	set out=out_"	</tr>"
	set out=out_"</table>"
	return out
]]></Implementation>
</Method>

<Method name="getTagReplacementForText">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tag=##class(EF.tags.base).dispatchTag("accomListText",..tagProcessor)
	return tag.getTagReplacementForText()
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.accomListText">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.accomListText.CLS/EV.1
;vc; Component: CLS.EF.tags.tagDefinitions.accomListText
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.accomListText.CLS/EV.1</td><td>CLS.EF.tags.tagDefinitions.accomListText</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,62954</TimeChanged>
<TimeCreated>64085,42146.137827</TimeCreated>

<Parameter name="tagName">
<Default>accomListText</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set eventID=..tagProcessor.getEventID()
	set LF=..getLineFeedCharacter()
	set sqltext="SELECT *,lnkPersonBooking->objPerson,objRoomTypeInstance->objEventHotel->objVenue,objRoomTypeInstance->objRoomType->description As roomTypeDesc FROM accom.lnkRoomTypeBooking "
	set sqltext=sqltext_" WHERE (lnkPersonBooking->objPurchase=?) "
	set sqltext=sqltext_" GROUP BY lnkPersonBooking"
	set sqltext=sqltext_" ORDER BY objRoomTypeInstance->objEventHotel->objVenue,lnkPersonBooking->objPerson"
	set getGuestNames=##class(setup.objEventSetting).getParameter("accommodation","get guest names",eventID)
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare(sqltext)
	do rs.Execute(purchaseID)
	set lastVenueID="",lastPersonID=""
	while rs.Next()	{
		set lnkPersonBookingID=rs.Data("lnkPersonBooking")
		set venueID=rs.Data("objVenue")
		if venueID'=lastVenueID	{
			// NEW HOTEL, do page break, new title etc.
			set lastVenueID=venueID
			set lastPersonID=""  // reset name so we always get a name for a new hotel page
			set venueDescription=##class(accom.objVenueItemData).get(venueID,"description")
			set out=out_venueDescription_LF
			if getGuestNames {
				set out=out_..translatePhrase("Room Type")_"   "_..translatePhrase("Arrival")_" - "_..translatePhrase("Departure")_LF
			} else {
				set out=out_..translatePhrase("Last name")_","_..translatePhrase("First name")_"   "_..translatePhrase("Room Type")_"   "_..translatePhrase("Arrival")_" - "_..translatePhrase("Departure")_LF
			}
		}
		set personID=rs.Data("objPerson")
		if personID'=lastPersonID	{
			// new person, write out name
			set lastPersonID=personID
			set name=##class(cod.objItemData).get(personID,"lastname")_", "_##class(cod.objItemData).get(personID,"firstname")
			set organisation=##class(cod.objItemData).get(personID,"company")
		}
		// get the rooms for this booking to work out the date range
		set rs2=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		do rs2.Prepare("SELECT *,objRoomTypeInstance->roomDate,objRoomTypeInstance->objEventHotel FROM accom.lnkRoomTypeBooking WHERE lnkPersonBooking=?")
		do rs2.Execute(lnkPersonBookingID)
		set startDate="",endDate=""
		while rs2.Next()	{
			// find the date range for this booking
			set roomDate=rs2.Data("roomDate")
			set roomTypeInstanceID=rs2.Data("objRoomTypeInstance")  // only need this once
			set eventHotelID=rs2.Data("objEventHotel")  // only need this once
			set lnkPersonBooking=rs2.Data("lnkPersonBooking")  // only need this once
			if startDate=""!(startDate>roomDate) set startDate=roomDate
			if endDate=""!(roomDate>endDate) set endDate=roomDate
		}
		set roomTypeDesc=rs.Data("roomTypeDesc")
		set startDate=##class(shared.dateFunctions).multiDate(startDate,..tagProcessor.getDateFormat())
		set endDate=##class(shared.dateFunctions).multiDate(endDate+1,..tagProcessor.getDateFormat())
		if getGuestNames {
			// get the guest names
			set out=out_roomTypeDesc_"   "_startDate_" - "_endDate
			set out=out_LF
			set guestNo=0
			set rsRoomGuests=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
			do rsRoomGuests.Prepare("SELECT objPerson FROM accom.objRoomGuest WHERE lnkPersonBooking=?")
			do rsRoomGuests.Execute(lnkPersonBookingID)
			while rsRoomGuests.Next()	{
				set guestNo=guestNo+1
				set roomGuestID=rsRoomGuests.Get("objPerson")
				set guestfirstname=##class(cod.objItemData).get(roomGuestID,"firstname")
				set guestlastname=##class(cod.objItemData).get(roomGuestID,"lastname")
				set out=out_"    "_"Guest No. "_guestNo_": "_guestlastname_","_guestfirstname_LF
			}
		} else {
			set guestfirstname=##class(cod.objItemData).get(personID,"firstname")
			set guestlastname=##class(cod.objItemData).get(personID,"lastname")
		
			set out=out_guestlastname_","_guestfirstname_"   "_roomTypeDesc_"   "_startDate_" - "_endDate
	 		set out=out_LF
		}
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.allABIData">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.allABIData.CLS/EV.2
;vc; Component: CLS.EF.tags.tagDefinitions.allABIData
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.allABIData.CLS/EV.2</td><td>CLS.EF.tags.tagDefinitions.allABIData</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64097,40607</TimeChanged>
<TimeCreated>64085,58949.021446</TimeCreated>

<Parameter name="tagName">
<Default>allABIData</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set eventID=..tagProcessor.getEventID()
	set LF=..getLineFeedCharacter()
	set languageID=..tagProcessor.getLanguageID()
	set controllerID=##class(setup.objEvent).getControllerID(eventID)
	if (##class(setup.objEventSetting).getParameter("system","isAwardsEvent",eventID)=1) {
		return ""	
	}
	set isGroupBookings=+##class(setup.objEventSetting).getParameter("bookings","allow group bookings",eventID)
	set useCategoryDesc=##class(setup.lnkCategoryEvent).useCategoryDesc(eventID,languageID)
	set defaultCategoryDesc=$P(useCategoryDesc,"|",2)

	if ..tagProcessor.getMode()="html" {
		set defaultCategoryDesc=##class(EF.encoders.html).encodeHTMLContent(defaultCategoryDesc)
	}
	// first the bookes details in case of group bookings
	if isGroupBookings {
		set bookerPageID=##class(setup.objEventSetting).getParameter("bookings","bookerRegPageID",eventID)
		set bookerID=##class(eCom.objPurchase).getBookerID(purchaseID)
		set tmpName=##class(cod.objItemData).get(bookerID,"salutation")_" "_##class(cod.objItemData).get(bookerID,"firstname")_" "_##class(cod.objItemData).get(bookerID,"lastname")
		set out=out_..translatePhrase("  Registration Contact's Details")_":"_LF
		set out=out_" "_tmpName_LF
		set rs1=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		set ok=rs1.Prepare("SELECT * FROM sc_xModules.objCODitem WHERE (isAdditionalItem=1) AND (active=1) AND (backendOnly IS NULL OR backendOnly=0) AND (parent->parent=?) ORDER BY displayOrder")
		do rs1.Execute(bookerPageID)
		while rs1.Next() {
			set itemName=##class(cod.objItemName).getDescFromID(rs1.Get("objItemName"))
			set skip=0
			if $ZCVT(itemName,"U")="SALUTATION" set skip=1
			if $ZCVT(itemName,"U")="FIRSTNAME" set skip=1
			if $ZCVT(itemName,"U")="LASTNAME" set skip=1
			if $ZCVT(itemName,"U")="PASSWORD" set skip=1
			if $ZCVT(itemName,"U")="PASSWORD RE-TYPED" set skip=1
			
			set isItemConcealed = ##class(cod.objItemName).isConcealed(itemName)
			if 'skip {
				if 'isItemConcealed {
					set out=out_"    "_itemName_" = "_##class(cod.objItemData).get(bookerID,itemName,controllerID)_LF		
				} else {
					set out=out_"    "_itemName_" = *****"_LF		
				}
			} 
		}
	}
	kill rs1
	set out=out_LF
	
	// now loop on the delgates' pages
	set rs1=##class(%ResultSet).%New("links.lnkPersonPurchase:qPersonsByType")	
	do rs1.Execute(purchaseID,"delegate")
	set delCount=0
	kill categoryCount
	while rs1.Next() {
		set delCount=delCount+1
		set delegateID=rs1.Data("objPerson")
		
		// AJM 15186-3865 21/7/2011 pass the purchase/delegate ID so we don't get dependent questions
		set ok=##class(setup.lnkCategoryEvent).getAllRegPages(eventID,languageID,1,.allRegPages,.allRegPageIDs,.allReg,,,purchaseID,delegateID)
		set tmpEventCategory=rs1.Data("objEventCategory")
		set categoryDescription=allRegPages(tmpEventCategory)
		set categoryDescription=$ZCVT($E(categoryDescription,1),"U")_$ZCVT($E(categoryDescription,2,$L(categoryDescription)),"L")
		set categoryCount(tmpEventCategory)=$I(categoryCount(tmpEventCategory))
		set tmpPageID="",pageCount=0
		for  {
			set tmpPageID=$O(allRegPageIDs(tmpEventCategory,tmpPageID))
			if tmpPageID="" quit
			set pageCount=pageCount+1
			if pageCount=1 {
				if isGroupBookings {
					if useCategoryDesc {
						set out=out_"  "_categoryDescription_" "_categoryCount(tmpEventCategory)_":"_LF
					} else {
						set out=out_"  "_defaultCategoryDesc_" "_delCount_":"_LF
					}
					set tmpName=##class(cod.objItemData).get(delegateID,"salutation")_" "_##class(cod.objItemData).get(delegateID,"firstname")_" "_##class(cod.objItemData).get(delegateID,"lastname")
					set out=out_" "_tmpName_LF
				}
			}
			set rs2=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
			do rs2.Prepare("SELECT * FROM sc_xModules.objCODitem WHERE (isAdditionalItem=1) AND (active=1 AND isGuest=0 AND isDelegate=1 AND (backendOnly IS NULL OR backendOnly=0) AND parent->parent=?) ORDER BY displayOrder")
			do rs2.Execute(tmpPageID)
			while rs2.Next() {
				set itemName=##class(cod.objItemName).getDescFromID(rs2.Get("objItemName"))
				set skip=0
				if $ZCVT(itemName,"U")="SALUTATION" set skip=1
				if $ZCVT(itemName,"U")="FIRSTNAME" set skip=1
				if $ZCVT(itemName,"U")="LASTNAME" set skip=1
				if $ZCVT(itemName,"U")="PASSWORD" set skip=1		
				if $ZCVT(itemName,"U")="PASSWORD RE-TYPED" set skip=1
		
				set isItemConcealed = ##class(cod.objItemName).isConcealed(itemName)
				if 'skip {
					if 'isItemConcealed {
						set out=out_"    "_itemName_" = "_##class(cod.objItemData).get(delegateID,itemName,controllerID)_LF		
					} else {
						set out=out_"    "_itemName_" = ****"_LF			
					}
				}
			}
			kill rs2	
			// and now guests
			set rs3=##class(%ResultSet).%New("cod.objItemData:qGetGuests")	
			do rs3.Execute(delegateID,controllerID)
			set guestCount=0
			while rs3.Next() {
				set guestCount=guestCount+1
				set guestID=rs3.Get("objPerson")
				
				set rs4=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
				do rs4.Prepare("SELECT * FROM sc_xModules.objCODitem WHERE (isAdditionalItem=1) AND (active=1 AND isGuest=1 AND isDelegate=0 AND (backendOnly IS NULL OR backendOnly=0) AND parent->parent=?) ORDER BY displayOrder")
				do rs4.Execute(tmpPageID)
				// RQ 10-Oct-2011 - PBUG00004894 - Only output guest details when on correct page
				set doGuestDetailsHeader=1
				while rs4.Next() {
					if doGuestDetailsHeader {
						set doGuestDetailsHeader=0
						set out=out_"      "_..translatePhrase("Guest No.")_" "_guestCount_":"_LF
					}
	
					set itemName=##class(cod.objItemName).getDescFromID(rs4.Get("objItemName"))
					set out=out_"        "_itemName_" = "_##class(cod.objItemData).get(guestID,itemName,controllerID)_LF		
				}
				kill rs4
			}
			kill rs3
		}
		
		set out=out_LF 
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.allRegData">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.allRegData.CLS/EV.2
;vc; Component: CLS.EF.tags.tagDefinitions.allRegData
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.allRegData.CLS/EV.2</td><td>CLS.EF.tags.tagDefinitions.allRegData</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64097,40625</TimeChanged>
<TimeCreated>64085,54467.481081</TimeCreated>

<Parameter name="tagName">
<Default>allRegData</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set eventID=..tagProcessor.getEventID()
	set LF=..getLineFeedCharacter()
	set languageID=..tagProcessor.getLanguageID()
	set controllerID=##class(setup.objEvent).getControllerID(eventID)
	if (##class(setup.objEventSetting).getParameter("system","isAwardsEvent",eventID)=1) {
		return ""	
	}

	Set queryFilterBackEnd = "" 
	if ..tagParameters["SHOWBACKENDONLY" {
		Set queryFilterBackEnd = "OR backendOnly = 1" 
	}
	
	set bookerID=##class(eCom.objPurchase).getBookerID(purchaseID)
	set tmpName=##class(cod.objItemData).get(bookerID,"firstname")_" "_##class(cod.objItemData).get(bookerID,"lastname")
	set out=out_"  "_..translatePhrase("Registration contact's name:")_LF
	set out=out_" "_tmpName_LF
	set isGroupBookings=+##class(setup.objEventSetting).getParameter("bookings","allow group bookings",eventID)
	set useCategoryDesc=##class(setup.lnkCategoryEvent).useCategoryDesc(eventID,languageID)
	set defaultCategoryDesc=$P(useCategoryDesc,"|",2)
	if ..tagProcessor.getMode()="html" {
		set defaultCategoryDesc=##class(EF.encoders.html).encodeHTMLContent(defaultCategoryDesc)
	}
	// first the bookes details in case of group bookings
	if isGroupBookings {
		set bookerPageID=##class(setup.objEventSetting).getParameter("bookings","bookerRegPageID",eventID)
		set bookerID=##class(eCom.objPurchase).getBookerID(purchaseID)
		set tmpName=##class(cod.objItemData).get(bookerID,"salutation")_" "_##class(cod.objItemData).get(bookerID,"firstname")_" "_##class(cod.objItemData).get(bookerID,"lastname")
		set out=out_..translatePhrase("Registration Contact's Details")_":"_LF
		set out=out_" "_tmpName_LF
		set rs1=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		set ok=rs1.Prepare("SELECT * FROM sc_xModules.objCODitem WHERE (active=1 AND (backendOnly IS NULL OR backendOnly=0 "_##class(EF.encoders.sql).doNotEncodeString(queryFilterBackEnd)_") AND parent->parent=?) ORDER BY displayOrder")
		do rs1.Execute(bookerPageID)
		while rs1.Next() {
			set itemName=##class(cod.objItemName).getDescFromID(rs1.Get("objItemName"))
			set skip=0
			if $ZCVT(itemName,"U")="SALUTATION" set skip=1
			if $ZCVT(itemName,"U")="FIRSTNAME" set skip=1
			if $ZCVT(itemName,"U")="LASTNAME" set skip=1
			if $ZCVT(itemName,"U")="PASSWORD" set skip=1
			if $ZCVT(itemName,"U")="PASSWORD RE-TYPED" set skip=1
			// AJM 15186-3865 21/7/2011  skip if it's a dependent question which isn't switched on
			set dependsOnPrompt =rs1.Get("dependsOnPrompt")
			set dependsOnAlternative=rs1.Get("dependsOnAlternative")
			if $l(dependsOnAlternative),$l(dependsOnPrompt) { 
				// Get the actual cod details
				set (dependsOnPromptDesc,depPageID,depDescription)=""
				&SQL(SELECT objItemName->description,parent->parent INTO :tmp,:tmp2 FROM sc_xModules.objCODitem WHERE ID = :dependsOnPrompt)
				if +SQLCODE=0 set dependsOnPromptDesc=tmp,depPageID=tmp2
				&SQL(SELECT description  INTO :tmp FROM cod.objItemAlternatives WHERE ID = :dependsOnAlternative)
				if +SQLCODE=0 set depDescription=tmp
				
				if depPageID=bookerPageID {
					if ##class(cod.objItemData).get(bookerID,dependsOnPromptDesc,controllerID)'=depDescription {
						set skip=1
					}
				}
				
			}
			//extra lines added to show 'Yes' for checkbox value True and 'No' for false. SHAHADAT
			set data = ##class(cod.objItemData).get(bookerID,itemName,controllerID)
			set isItemConcealed = ##class(cod.objItemName).isConcealed(itemName)
			set itemType = rs1.Get("type")
			if itemType = "checkbox" set data = ##class(cod.methods).formatCheckboxDataForOuput(data)
			if ..tagParameters["HIDEBLANK", data="" set skip = 1
			if 'skip {
				if 'isItemConcealed {
					set out=out_"    "_itemName_" = "_data_LF		
				} else {
					set out=out_"    "_itemName_" = *****"_LF
				}
			}
		}
	}
	kill rs1
	set out=out_LF
	
	// now loop on the delgates' pages
	set rs1=##class(%ResultSet).%New("links.lnkPersonPurchase:qPersonsByType")	
	do rs1.Execute(purchaseID,"delegate")
	set delCount=0
	kill categoryCount
	while rs1.Next() {
		set delCount=delCount+1
		set delegateID=rs1.Data("objPerson")
		
		// AJM 15186-3865 21/7/2011 pass the purchase/delegate ID so we don't get dependent questions
		set ok=##class(setup.lnkCategoryEvent).getAllRegPages(eventID,languageID,1,.allRegPages,.allRegPageIDs,.allReg,,,purchaseID,delegateID)
		set tmpEventCategory=rs1.Data("objEventCategory")
		set categoryDescription=allRegPages(tmpEventCategory)
		set categoryDescription=$ZCVT($E(categoryDescription,1),"U")_$ZCVT($E(categoryDescription,2,$L(categoryDescription)),"L")
		set categoryCount(tmpEventCategory)=$I(categoryCount(tmpEventCategory))
		set tmpPageID="",pageCount=0
		for  {
			set tmpPageID=$O(allRegPageIDs(tmpEventCategory,tmpPageID))
			if tmpPageID="" quit
			set pageCount=pageCount+1
			if pageCount=1 {
				if isGroupBookings {
					if useCategoryDesc {
						set out=out_"  "_categoryDescription_" "_categoryCount(tmpEventCategory)_":"_LF
					} else {
						set out=out_"  "_defaultCategoryDesc_" "_delCount_":"_LF
					}
					set tmpName=##class(cod.objItemData).get(delegateID,"salutation")_" "_##class(cod.objItemData).get(delegateID,"firstname")_" "_##class(cod.objItemData).get(delegateID,"lastname")
					set out=out_" "_tmpName_LF
					// AJM 9/8/2010 Include the email for delegates if they use the delegate UID page otherwise there is no way of showing them
					if '##class(setup.objEventSetting).getParameter("bookings","do not show delegateUID page",eventID) {
						set data=##class(cod.objItemData).get(delegateID,"email")
						set out=out_"    "_..translatePhrase("Email")_" = "_data_LF
					}
				}
			}
			if (##class(setup.objEventSetting).getParameter("system","isAwardsEvent",eventID)=1) {
				set tmpPageID = ##class(setup.objEventSetting).getParameter("awards","awardClientPageID",eventID)
			}
			set rs2=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
			do rs2.Prepare("SELECT * FROM sc_xModules.objCODitem WHERE (active=1 AND isGuest=0 AND isDelegate=1 AND (backendOnly IS NULL OR backendOnly=0 "_##class(EF.encoders.sql).doNotEncodeString(queryFilterBackEnd)_") AND parent->parent = ?) ORDER BY displayOrder")
			do rs2.Execute(tmpPageID)
			while rs2.Next() {
				set itemName=##class(cod.objItemName).getDescFromID(rs2.Get("objItemName"))
				set skip=0
				if $ZCVT(itemName,"U")="SALUTATION" set skip=1
				if $ZCVT(itemName,"U")="FIRSTNAME" set skip=1
				if $ZCVT(itemName,"U")="LASTNAME" set skip=1
				if $ZCVT(itemName,"U")="PASSWORD" set skip=1
				if $ZCVT(itemName,"U")="PASSWORD RE-TYPED" set skip=1
				// AJM 15186-3865 21/7/2011  skip if it's a dependent question which isn't switched on
				set dependsOnPrompt =rs2.Get("dependsOnPrompt")
				set dependsOnAlternative=rs2.Get("dependsOnAlternative")
				if $l(dependsOnAlternative),$l(dependsOnPrompt) { 
					// Get the actual cod details
					set (dependsOnPromptDesc,depPageID,depDescription)=""
					&SQL(SELECT objItemName->description,parent->parent INTO :tmp,:tmp2 FROM sc_xModules.objCODitem WHERE ID = :dependsOnPrompt)
					if +SQLCODE=0 set dependsOnPromptDesc=tmp,depPageID=tmp2
					&SQL(SELECT description  INTO :tmp FROM cod.objItemAlternatives WHERE ID = :dependsOnAlternative)
					if +SQLCODE=0 set depDescription=tmp
					
					set dependInBookerPage=0
					if isGroupBookings,depPageID=bookerPageID {
						set dependInBookerPage=1
					}
					
					// If it is in the booker page then check with the booker data
					if dependInBookerPage {
						if ##class(cod.objItemData).get(bookerID,dependsOnPromptDesc,controllerID)'=depDescription {
							set skip=1
						}
					} else {
						if ##class(cod.objItemData).get(delegateID,dependsOnPromptDesc,controllerID)'=depDescription {
							set skip=1
						}
					}
					
				}
				if (+##class(links.lnkEventCategoryData).allow(tmpEventCategory,rs2.Get("ID"))=0) set skip=1  //check if this question is allowed to be displayed in this category.
				//if 'skip set out=out_"    "_itemName_" = "_##class(cod.objItemData).get(delegateID,itemName,controllerID)_LF		
				set data = ##class(cod.objItemData).get(delegateID,itemName,controllerID)
				set isItemConcealed = ##class(cod.objItemName).isConcealed(itemName)
				set itemType = rs2.Get("type")
				if itemType = "checkbox" set data = ##class(cod.methods).formatCheckboxDataForOuput(data)
				if ..tagParameters["HIDEBLANK", data="" set skip = 1
				if 'skip {
					if 'isItemConcealed {
						set out=out_"    "_itemName_" = "_data_LF		
					} else {
						set out=out_"    "_itemName_" = *****"_LF		
					}
				}
			
			}
			kill rs2
			// and now guests
			set rs3=##class(%ResultSet).%New("cod.objItemData:qGetGuests")	
			do rs3.Execute(delegateID,controllerID)
			set guestCount=0
			while rs3.Next() {
				set guestCount=guestCount+1
				set guestID=rs3.Get("objPerson")
				
				set rs4=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
				do rs4.Prepare("SELECT * FROM sc_xModules.objCODitem WHERE (active=1 AND isGuest=1 AND isDelegate=0 AND (backendOnly IS NULL OR backendOnly=0 "_##class(EF.encoders.sql).doNotEncodeString(queryFilterBackEnd)_") AND parent->parent=?) ORDER BY displayOrder")
				do rs4.Execute(tmpPageID)
				// RQ 10-Oct-2011 - PBUG00004894 - Only output guest details when on correct page
				set doGuestDetailsHeader=1
				while rs4.Next() {
					if doGuestDetailsHeader {
						set doGuestDetailsHeader=0
						set out=out_"      "_..translatePhrase("Guest No.")_" "_guestCount_":"_LF
					}
					set skip = 0
					set itemName=##class(cod.objItemName).getDescFromID(rs4.Get("objItemName"))
					//set out=out_"        "_itemName_" = "_##class(cod.objItemData).get(guestID,itemName,controllerID)_LF		
					//extra lines added to show 'Yes' for checkbox value True and 'No' for false. SHAHADAT
					set itemType = rs4.Get("type")
					set data = ##class(cod.objItemData).get(guestID,itemName,controllerID)
					set isItemConcealed = ##class(cod.objItemName).isConcealed(itemName)
					set itemType = rs4.Get("type")
					if itemType = "checkbox" set data = ##class(cod.methods).formatCheckboxDataForOuput(data)
					if ..tagParameters["HIDEBLANK", data="" set skip = 1
					if 'skip {
						if 'isItemConcealed	{
							set out=out_"    "_itemName_" = "_data_LF
						} else {
							set out=out_"    "_itemName_" = *****"_LF
						}
					}
					
				}
				kill rs4
			}
			kill rs3
		}
		
		set out=out_LF 
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.allRegDataTable">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.allRegDataTable.CLS/EV.2
;vc; Component: CLS.EF.tags.tagDefinitions.allRegDataTable
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.allRegDataTable.CLS/EV.2</td><td>CLS.EF.tags.tagDefinitions.allRegDataTable</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64097,40610</TimeChanged>
<TimeCreated>64085,55806.002962</TimeCreated>

<Parameter name="tagName">
<Default>allRegDataTable</Default>
</Parameter>

<Method name="getTagReplacementForHTML">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set eventID=..tagProcessor.getEventID()
	set LF=..getLineFeedCharacter()
	set languageID=..tagProcessor.getLanguageID()
	set controllerID=##class(setup.objEvent).getControllerID(eventID)
	if (##class(setup.objEventSetting).getParameter("system","isAwardsEvent",eventID)=1) {
		return ""	
	}

	Set queryFilterBackEnd = "" 
	if ..tagParameters["SHOWBACKENDONLY" {
		Set queryFilterBackEnd = "OR backendOnly = 1" 
	}
	
	set bookerID=##class(eCom.objPurchase).getBookerID(purchaseID)
	set isGroupBookings=+##class(setup.objEventSetting).getParameter("bookings","allow group bookings",eventID)
	set useCategoryDesc=##class(setup.lnkCategoryEvent).useCategoryDesc(eventID,languageID)
	set defaultCategoryDesc=$P(useCategoryDesc,"|",2)
	if ..tagProcessor.getMode()="html" {
		set defaultCategoryDesc=##class(EF.encoders.html).encodeHTMLContent(defaultCategoryDesc)
	}
	
	set out=out_"<table border='0' cellspacing='0' cellpadding='1' bgcolor='#000000'>"
	set out=out_"<tr>"
	set out=out_" <td>"
	set out=out_"  <table width='100%' border=0 cellpadding=2 cellspacing=0 bgcolor='#FFFFFF'>"
	// Only show in non-group booking mode as otherwise it is shown again
	if 'isGroupBookings {
		set out=out_" <tr>"
		set out=out_"  <td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_..translatePhrase("Registration contact's name")_"</font></td>"
		set tmpName=##class(cod.objItemData).get(bookerID,"firstname")_" "_##class(cod.objItemData).get(bookerID,"lastname")
		set out=out_"  <td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_tmpName_"</font></td>"
		set out=out_" </tr>"
	}
	// first the bookes details in case of group bookings
	if isGroupBookings {
		set bookerPageID=##class(setup.objEventSetting).getParameter("bookings","bookerRegPageID",eventID)
		set bookerID=##class(eCom.objPurchase).getBookerID(purchaseID)
		set out=out_" <tr>"
		set out=out_"  <td width=""100""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b>"_..translatePhrase("Registration Contact's details")_"</b></font></td>"
		set out=out_"  <td width=""10"">&nbsp;</td>"
		set tmpName=##class(cod.objItemData).get(bookerID,"salutation")_" "_##class(cod.objItemData).get(bookerID,"firstname")_" "_##class(cod.objItemData).get(bookerID,"lastname")
		set out=out_"  <td colspan=""3""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b>"_tmpName_"</b></font></td>"
		set out=out_" </tr>"
		//set itemName=##class(cod.objItemName).getDescFromID()
		set rs1=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		set ok=rs1.Prepare("SELECT * FROM sc_xModules.objCODitem WHERE (active=1 AND (backendOnly IS NULL OR backendOnly=0 "_##class(EF.encoders.sql).doNotEncodeString(queryFilterBackEnd)_") AND parent->parent=?) ORDER BY displayOrder")
		do rs1.Execute(bookerPageID)
		while rs1.Next() {
			set itemName=##class(cod.objItemName).getDescFromID(rs1.Get("objItemName"))
			set skip=0
			if $ZCVT(itemName,"U")="SALUTATION" set skip=1
			if $ZCVT(itemName,"U")="FIRSTNAME" set skip=1
			if $ZCVT(itemName,"U")="LASTNAME" set skip=1
			if $ZCVT(itemName,"U")="PASSWORD" set skip=1
			if $ZCVT(itemName,"U")="PASSWORD RE-TYPED" set skip=1
			// AJM 15186-3865 21/7/2011  skip if it's a dependent question which isn't switched on
			set dependsOnPrompt =rs1.Get("dependsOnPrompt")
			set dependsOnAlternative=rs1.Get("dependsOnAlternative")
			if $l(dependsOnAlternative),$l(dependsOnPrompt) { 
				// Get the actual cod details
				set (dependsOnPromptDesc,depPageID,depDescription)=""
				&SQL(SELECT objItemName->description,parent->parent INTO :tmp,:tmp2 FROM sc_xModules.objCODitem WHERE ID = :dependsOnPrompt)
				if +SQLCODE=0 set dependsOnPromptDesc=tmp,depPageID=tmp2
				&SQL(SELECT description  INTO :tmp FROM cod.objItemAlternatives WHERE ID = :dependsOnAlternative)
				if +SQLCODE=0 set depDescription=tmp
				
				if depPageID=bookerPageID {
					if ##class(cod.objItemData).get(bookerID,dependsOnPromptDesc,controllerID)'=depDescription {
						set skip=1
					}
				}
				
			}
			
			set data=##class(cod.objItemData).get(bookerID,itemName,controllerID)
			set isItemConcealed = ##class(cod.objItemName).isConcealed(itemName)
			set itemType = rs1.Get("type")
			if itemType = "checkbox" {
				set data = ##class(cod.methods).formatCheckboxDataForOuput(data)
			}
			
			// hide item if parameter says so and the data is blank
			if ..tagParameters["HIDEBLANK",data="" set skip=1
			
			if skip=0	{
				set out=out_"<tr>"
				set out=out_"<td width=""15"">&nbsp;</td>"
				set out=out_"<td width=""10"">&nbsp;</td>"
				set out=out_"<td width=""10"">&nbsp;</td>"
				set out=out_"<td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_itemName_"</font></td>"
				if 'isItemConcealed {
					set out=out_"<td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_data_"&nbsp;</font></td>"
				} else {
					set out=out_"<td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">*****"_"&nbsp;</font></td>"
				} 
				set out=out_"</tr>"
			}
		}
		set out=out_"<tr><td colspan=""5"">&nbsp;</td></tr>"
		
	}
	kill rs1
	
	// now loop on the delgates' pages
	
	set rs1=##class(%ResultSet).%New("links.lnkPersonPurchase:qPersonsByType")	
	do rs1.Execute(purchaseID,"delegate")
	kill categoryCount
	set delCount=0
	while rs1.Next() {
		set delCount=delCount+1
		set delegateID=rs1.Get("objPerson")
		
		// AJM 15186-3865 21/7/2011 pass the purchase/delegate ID so we don't get dependent questions
		set ok=##class(setup.lnkCategoryEvent).getAllRegPages(eventID,languageID,1,.allRegPages,.allRegPageIDs,.allReg,,,purchaseID,delegateID)
		set tmpEventCategory=rs1.Data("objEventCategory")
		set categoryDescription=allRegPages(tmpEventCategory)
		set categoryDescription=$ZCVT($E(categoryDescription,1),"U")_$ZCVT($E(categoryDescription,2,$L(categoryDescription)),"L")
		set categoryCount(tmpEventCategory)=$I(categoryCount(tmpEventCategory))
		set tmpPageID="",pageCount=0
		for  {
			set tmpPageID=$O(allRegPageIDs(tmpEventCategory,tmpPageID))
			if tmpPageID="" quit
			set pageCount=pageCount+1
			if pageCount=1 {
				if isGroupBookings {
					set out=out_" <tr>"
					if useCategoryDesc {
						set out=out_"  <td width=""100""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b>"_categoryDescription_" "_categoryCount(tmpEventCategory)_":</b></font></td>"
					} else {
						set out=out_"  <td width=""100""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b>"_defaultCategoryDesc_" "_delCount_":</b></font></td>"
					}
					set out=out_"  <td width=""10"">&nbsp;</td>"
					set tmpName=##class(cod.objItemData).get(delegateID,"salutation")_" "_##class(cod.objItemData).get(delegateID,"firstname")_" "_##class(cod.objItemData).get(delegateID,"lastname")
					set out=out_"  <td colspan=""3""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b>"_tmpName_"</b></font></td>"
					set out=out_" </tr>"
					// AJM 9/8/2010 Include the email for delegates if they use the delegate UID page otherwise there is no way of showing them
					if '##class(setup.objEventSetting).getParameter("bookings","do not show delegateUID page",eventID) {
						set data=##class(cod.objItemData).get(delegateID,"email")
						set out=out_"<tr>"
						set out=out_"<td width=""15"">&nbsp;</td>"
						set out=out_"<td width=""10"">&nbsp;</td>"
						set out=out_"<td width=""10"">&nbsp;</td>"
						set out=out_"<td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_..translatePhrase("Email")_"</font></td>"
						set out=out_"<td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_data_"&nbsp;</font></td>"
						set out=out_"</tr>"
					}
				}
			}
			//set out=out_"  "_categoryDescription_" "_categoryCount(tmpEventCategory)_":"_LF
			if (##class(setup.objEventSetting).getParameter("system","isAwardsEvent",eventID)=1) {
				set tmpPageID = ##class(setup.objEventSetting).getParameter("awards","awardClientPageID",eventID)
			}
			set rs2=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
			do rs2.Prepare("SELECT * FROM sc_xModules.objCODitem WHERE (active=1 AND isGuest=0 AND isDelegate=1 AND (backendOnly IS NULL OR backendOnly=0 "_##class(EF.encoders.sql).doNotEncodeString(queryFilterBackEnd)_") AND parent->parent=?) ORDER BY displayOrder")
			do rs2.Execute(tmpPageID)
			while rs2.Next() {
				set itemName=##class(cod.objItemName).getDescFromID(rs2.Get("objItemName"))
				set skip=0
				if $ZCVT(itemName,"U")="SALUTATION" set skip=1
				if $ZCVT(itemName,"U")="FIRSTNAME" set skip=1
				if $ZCVT(itemName,"U")="LASTNAME" set skip=1
				if $ZCVT(itemName,"U")="PASSWORD" set skip=1
				if $ZCVT(itemName,"U")="PASSWORD RE-TYPED" set skip=1
				// AJM 15186-3865 21/7/2011  skip if it's a dependent question which isn't switched on
				set dependsOnPrompt =rs2.Get("dependsOnPrompt")
				set dependsOnAlternative=rs2.Get("dependsOnAlternative")
				if $l(dependsOnAlternative),$l(dependsOnPrompt) { 
					// Get the actual cod details
					set (dependsOnPromptDesc,depPageID,depDescription)=""
					&SQL(SELECT objItemName->description,parent->parent INTO :tmp,:tmp2 FROM sc_xModules.objCODitem WHERE ID = :dependsOnPrompt)
					if +SQLCODE=0 set dependsOnPromptDesc=tmp,depPageID=tmp2
					&SQL(SELECT description  INTO :tmp FROM cod.objItemAlternatives WHERE ID = :dependsOnAlternative)
					if +SQLCODE=0 set depDescription=tmp
					
					set dependInBookerPage=0
					if isGroupBookings,depPageID=bookerPageID {
						set dependInBookerPage=1
					}
					
					// If it is in the booker page then check with the booker data
					if dependInBookerPage {
						if ##class(cod.objItemData).get(bookerID,dependsOnPromptDesc,controllerID)'=depDescription {
							set skip=1
						}
					} else {
						if ##class(cod.objItemData).get(delegateID,dependsOnPromptDesc,controllerID)'=depDescription {
							set skip=1
						}
					}
					
				}
				if (+##class(links.lnkEventCategoryData).allow(tmpEventCategory,rs2.Get("ID"))=0) set skip=1  //check if this question is allowed to be displayed in this category.
				//set out=out_"    "_itemName_" = "_##class(cod.objItemData).get(delegateID,itemName)_LF		
				// hide item if parameter says so and the data is blank
				set data=##class(cod.objItemData).get(delegateID,itemName,controllerID)
				set isItemConcealed = ##class(cod.objItemName).isConcealed(itemName)
				set itemType = rs2.Get("type")
				if itemType = "checkbox" {
					set data = ##class(cod.methods).formatCheckboxDataForOuput(data)
				}
				if ..tagParameters["HIDEBLANK",data="" set skip=1
				if skip=0	{
					set out=out_"<tr>"
					if isGroupBookings {
						set out=out_"<td width=""15"">&nbsp;</td>"
						set out=out_"<td width=""10"">&nbsp;</td>"
						set out=out_"<td width=""10"">&nbsp;</td>"
					}
					set out=out_"<td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_itemName_"</font></td>"
					if 'isItemConcealed {
						set out=out_"<td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_data_"&nbsp;</font></td>"
					} else {
						set out=out_"<td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">*****"_"&nbsp;</font></td>"	
					}
					set out=out_"</tr>"
				}
			}
			kill rs2	
			
			// and now guests
			set rs3=##class(%ResultSet).%New("cod.objItemData:qGetGuests")	
			do rs3.Execute(delegateID,controllerID)
			set guestCount=0
			while rs3.Next() {
				set guestCount=guestCount+1
				set guestID=rs3.Get("objPerson")
				
	
				set rs4=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
				do rs4.Prepare("SELECT * FROM sc_xModules.objCODitem WHERE (active=1 AND isGuest=1 AND isDelegate=0 AND (backendOnly IS NULL OR backendOnly=0 "_##class(EF.encoders.sql).doNotEncodeString(queryFilterBackEnd)_") AND parent->parent=?) ORDER BY displayOrder")
				do rs4.Execute(tmpPageID)
				// RQ 10-Oct-2011 - PBUG00004894 - Only output guest details when on correct page
				set doGuestDetailsHeader=1
				while rs4.Next() {
					if doGuestDetailsHeader {
						set doGuestDetailsHeader=0
						set out=out_" <tr>"
						if isGroupBookings {
							set out=out_"  <td width=""100""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b>"_..translatePhrase("Guest No.")_" "_guestCount_":</b></font></td>"
							set out=out_"  <td width=""10"">&nbsp;</td>"
							set tmpName=##class(cod.objItemData).get(guestID,"salutation")_" "_##class(cod.objItemData).get(guestID,"firstname")_" "_##class(cod.objItemData).get(guestID,"lastname")
							set out=out_"  <td colspan=""3""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b>"_tmpName_"</b></font></td>"
						} else {
							set tmpName=##class(cod.objItemData).get(guestID,"salutation")_" "_##class(cod.objItemData).get(guestID,"firstname")_" "_##class(cod.objItemData).get(guestID,"lastname")
							set out=out_"  <td colspan=3><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b>"_..translatePhrase("Guest No.")_" "_guestCount_":&nbsp;&nbsp;&nbsp;"_tmpName_"</b></font></td>"
						}
						set out=out_" </tr>"
					}
					set itemName=##class(cod.objItemName).getDescFromID(rs4.Get("objItemName"))
					//set out=out_"        "_itemName_" = "_##class(cod.objItemData).get(guestID,itemName,controllerID)_LF		
					set skip=0
					if $ZCVT(itemName,"U")="SALUTATION" set skip=1
					if $ZCVT(itemName,"U")="FIRSTNAME" set skip=1
					if $ZCVT(itemName,"U")="LASTNAME" set skip=1
					if $ZCVT(itemName,"U")="PASSWORD" set skip=1
					if $ZCVT(itemName,"U")="PASSWORD RE-TYPED" set skip=1
					// hide item if parameter says so and the data is blank
					set data=##class(cod.objItemData).get(guestID,itemName,controllerID)
					set isItemConcealed = ##class(cod.objItemName).isConcealed(itemName)
					set itemType = rs4.Get("type")
					if itemType = "checkbox" {
						set data = ##class(cod.methods).formatCheckboxDataForOuput(data)
					}
					
					if ..tagParameters["HIDEBLANK",data="" set skip=1
					if skip=0	{
						set out=out_"<tr>"
						if isGroupBookings {
							set out=out_"<td width=""15"">&nbsp;</td>"
							set out=out_"<td width=""10"">&nbsp;</td>"
							set out=out_"<td width=""10"">&nbsp;</td>"
						}
						set out=out_"<td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_itemName_"</font></td>"
						if 'isItemConcealed { 
							set out=out_"<td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_data_"&nbsp;</font></td>"
						} else {
							set out=out_"<td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">*****"_"&nbsp;</font></td>"	
						}
						set out=out_"</tr>"
					}
				}
				kill rs4
			}
			kill rs3
			set out=out_"<tr><td colspan=""5"">&nbsp;</td></tr>"
		}
	}	
	set out=out_"			</table>"
	set out=out_"		</td>"
	set out=out_"	</tr>"
	set out=out_"</table>"
	return out
]]></Implementation>
</Method>

<Method name="getTagReplacementForText">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tag=##class(EF.tags.base).dispatchTag("allRegData",..tagProcessor)
	return tag.getTagReplacementForText()
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.attendeeAccomList">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.attendeeAccomList.CLS/EV.1
;vc; Component: CLS.EF.tags.tagDefinitions.attendeeAccomList
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.attendeeAccomList.CLS/EV.1</td><td>CLS.EF.tags.tagDefinitions.attendeeAccomList</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,62320</TimeChanged>
<TimeCreated>64085,43092.405085</TimeCreated>

<Parameter name="tagName">
<Default>attendeeAccomList</Default>
</Parameter>

<Method name="getTagReplacementForHTML">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set eventID=..tagProcessor.getEventID()
	set delegateID=..tagProcessor.getPersonID()
	set dateFormat=..tagProcessor.getDateFormat()
	set LF=..getLineFeedCharacter()
	set getGuestNames=##class(setup.objEventSetting).getParameter("accommodation","get guest names",eventID)
	set sqltext="SELECT *,lnkPersonBooking->objPerson,objRoomTypeInstance->objEventHotel->objVenue,objRoomTypeInstance->objRoomType->description As roomTypeDesc FROM accom.lnkRoomTypeBooking "
	set sqltext=sqltext_" WHERE (lnkPersonBooking->objPurchase=?) AND (lnkPersonBooking->objPerson=?)"
	set sqltext=sqltext_" GROUP BY lnkPersonBooking"
	set sqltext=sqltext_" ORDER BY objRoomTypeInstance->objEventHotel->objVenue,lnkPersonBooking->objPerson"
	set out=out_"<table border='0' cellspacing='0' cellpadding='1' bgcolor='#FFFFFF'>"
	set out=out_" <tr>"
	set out=out_"  <td>"
	set out=out_"  <table width='100%' border=0 cellpadding=3 cellspacing=0 bgcolor='#FFFFFF'>"
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare(sqltext)
	do rs.Execute(purchaseID,delegateID)
	set lastVenueID="",lastPersonID=""
	while rs.Next()	{
		set lnkPersonBookingID=rs.Data("lnkPersonBooking")
		set venueID=rs.Data("objVenue")
		if venueID'=lastVenueID	{
			// NEW HOTEL, do page break, new title etc.
			set lastVenueID=venueID
			set lastPersonID=""  // reset name so we always get a name for a new hotel page
			set venueDescription=##class(accom.objVenueItemData).get(venueID,"description")
			set out=out_"<tr>"
			set out=out_"<td colspan=""5""><font face='Verdana,Geneva,Arial,sans-serif' size='2'><b>"_venueDescription_"</b></font></td>"
			set out=out_"</tr>"
			set out=out_"  <tr>"
			set out=out_"   <td width=200><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Room Type")_"</b></font></td>"
			set out=out_"   <td width=100 align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Arrival")_"</b></font></td>"
			set out=out_"   <td width=100 align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Departure")_"</b></font></td>"
			set out=out_"  </tr>"
		}
		
		// get the rooms for this booking to work out the date range
		set rs2=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		do rs2.Prepare("SELECT *,objRoomTypeInstance->roomDate,objRoomTypeInstance->objEventHotel FROM accom.lnkRoomTypeBooking WHERE lnkPersonBooking=?")
		do rs2.Execute(lnkPersonBookingID)
		set startDate="",endDate=""
		while rs2.Next()	{
			// find the date range for this booking
			set roomDate=rs2.Data("roomDate")
			set roomTypeInstanceID=rs2.Data("objRoomTypeInstance")  // only need this once
			set eventHotelID=rs2.Data("objEventHotel")  // only need this once
			set lnkPersonBooking=rs2.Data("lnkPersonBooking")  // only need this once
			if startDate=""!(startDate>roomDate) set startDate=roomDate
			if endDate=""!(roomDate>endDate) set endDate=roomDate
		}
		set roomTypeDesc=rs.Data("roomTypeDesc")
		set startDate=##class(shared.dateFunctions).multiDate(startDate,dateFormat)
		set endDate=##class(shared.dateFunctions).multiDate(endDate+1,dateFormat)
		
	 	set out=out_"   <tr>"
		set out=out_"    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_roomTypeDesc_"</font></td>"
		set out=out_"    <td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_startDate_"</font></td>"
		set out=out_"    <td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_endDate_"</font></td>"
	 	set out=out_"   </tr>"
	 	if getGuestNames {
			// get the guest names
			set guestNo=0
			set rsRoomGuests=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
			do rsRoomGuests.Prepare("SELECT objPerson FROM accom.objRoomGuest WHERE lnkPersonBooking=?")
			do rsRoomGuests.Execute(lnkPersonBookingID)
			while rsRoomGuests.Next()	{
				set guestNo=guestNo+1
				set roomGuestID=rsRoomGuests.Get("objPerson")
				set guestfirstname=##class(cod.objItemData).get(roomGuestID,"firstname")
				set guestlastname=##class(cod.objItemData).get(roomGuestID,"lastname")
				set out=out_"   <tr>"
				set out=out_"       <td colspan=3><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"
				set out=out_"&nbsp;&nbsp;&nbsp;&nbsp;"_..translatePhrase("Guest No.")_" "_guestNo_": "_guestlastname_","_guestfirstname_LF
				set out=out_"       </font></td>"
				set out=out_"   </tr>"
			}
		}
	}
	
	set out=out_"			</table>"
	set out=out_"		</td>"
	set out=out_"	</tr>"
	set out=out_"</table>"
	return out
]]></Implementation>
</Method>

<Method name="getTagReplacementForText">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tag=##class(EF.tags.base).dispatchTag("attendeeAccomListText",..tagProcessor)
	return tag.getTagReplacementForText()
]]></Implementation>
</Method>

<Method name="getAlternativeTagNames">
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[	return $LB("DELEGATEACCOMLIST")
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.attendeeAccomListText">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.attendeeAccomListText.CLS/EV.1
;vc; Component: CLS.EF.tags.tagDefinitions.attendeeAccomListText
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.attendeeAccomListText.CLS/EV.1</td><td>CLS.EF.tags.tagDefinitions.attendeeAccomListText</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,63084</TimeChanged>
<TimeCreated>64085,43296.204591</TimeCreated>

<Parameter name="tagName">
<Default>attendeeAccomListText</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set eventID=..tagProcessor.getEventID()
	set delegateID=..tagProcessor.getPersonID()
	set dateFormat=..tagProcessor.getDateFormat()
	set LF=..getLineFeedCharacter()
	set sqltext="SELECT *,lnkPersonBooking->objPerson,objRoomTypeInstance->objEventHotel->objVenue,objRoomTypeInstance->objRoomType->description As roomTypeDesc FROM accom.lnkRoomTypeBooking "
	set sqltext=sqltext_" WHERE (lnkPersonBooking->objPurchase=?) AND (lnkPersonBooking->objPerson=?)"
	set sqltext=sqltext_" GROUP BY lnkPersonBooking"
	set sqltext=sqltext_" ORDER BY objRoomTypeInstance->objEventHotel->objVenue,lnkPersonBooking->objPerson"
	set getGuestNames=##class(setup.objEventSetting).getParameter("accommodation","get guest names",eventID)
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare(sqltext)
	do rs.Execute(purchaseID,delegateID)
	set lastVenueID="",lastPersonID=""
	while rs.Next()	{
		set lnkPersonBookingID=rs.Data("lnkPersonBooking")
		set venueID=rs.Data("objVenue")
		if venueID'=lastVenueID	{
			// NEW HOTEL, do page break, new title etc.
			set lastVenueID=venueID
			set lastPersonID=""  // reset name so we always get a name for a new hotel page
			set venueDescription=##class(accom.objVenueItemData).get(venueID,"description")
			set out=out_venueDescription_LF
			if getGuestNames {
				set out=out_..translatePhrase("Room Type")_"   "_..translatePhrase("Arrival")_" - "_..translatePhrase("Departure")_LF
			} else {
				set out=out_..translatePhrase("Last name")_","_..translatePhrase("First name")_"   "_..translatePhrase("Room Type")_"   "_..translatePhrase("Arrival")_" - "_..translatePhrase("Departure")_LF
			}
		}
	
		// get the rooms for this booking to work out the date range
		set rs2=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		do rs2.Prepare("SELECT *,objRoomTypeInstance->roomDate,objRoomTypeInstance->objEventHotel FROM accom.lnkRoomTypeBooking WHERE lnkPersonBooking=?")
		do rs2.Execute(lnkPersonBookingID)
		set startDate="",endDate=""
		while rs2.Next()	{
			// find the date range for this booking
			set roomDate=rs2.Data("roomDate")
			set roomTypeInstanceID=rs2.Data("objRoomTypeInstance")  // only need this once
			set eventHotelID=rs2.Data("objEventHotel")  // only need this once
			set lnkPersonBooking=rs2.Data("lnkPersonBooking")  // only need this once
			if startDate=""!(startDate>roomDate) set startDate=roomDate
			if endDate=""!(roomDate>endDate) set endDate=roomDate
		}
		set roomTypeDesc=rs.Data("roomTypeDesc")
		set startDate=##class(shared.dateFunctions).multiDate(startDate,dateFormat)
		set endDate=##class(shared.dateFunctions).multiDate(endDate+1,dateFormat)
		if getGuestNames {
			// get the guest names
			set out=out_roomTypeDesc_"   "_startDate_" - "_endDate
			set out=out_LF
			set guestNo=0
			set rsRoomGuests=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
			do rsRoomGuests.Prepare("SELECT objPerson FROM accom.objRoomGuest WHERE lnkPersonBooking=?")
			do rsRoomGuests.Execute(lnkPersonBookingID)
			while rsRoomGuests.Next()	{
				set guestNo=guestNo+1
				set roomGuestID=rsRoomGuests.Get("objPerson")
				set guestfirstname=##class(cod.objItemData).get(roomGuestID,"firstname")
				set guestlastname=##class(cod.objItemData).get(roomGuestID,"lastname")
				set out=out_"    "_"Guest No. "_guestNo_": "_guestlastname_","_guestfirstname_LF
			}
		}
	}
	return out
]]></Implementation>
</Method>

<Method name="getAlternativeTagNames">
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[	return $LB("DELEGATEACCOMLISTTEXT")
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.attendeeItinerary">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.attendeeItinerary.CLS/EV.1
;vc; Component: CLS.EF.tags.tagDefinitions.attendeeItinerary
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.attendeeItinerary.CLS/EV.1</td><td>CLS.EF.tags.tagDefinitions.attendeeItinerary</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,63018</TimeChanged>
<TimeCreated>64085,60200.523204</TimeCreated>

<Parameter name="tagName">
<Default>attendeeItinerary</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set eventID=..tagProcessor.getEventID()
	set languageID=..tagProcessor.getLanguageID()
	set delegateID=..tagProcessor.getPersonID()
	set dateFormat=..tagProcessor.getDateFormat()
	set LF=..getLineFeedCharacter()
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare("SELECT objPurchasedItem->objBasketItem FROM links.lnkPersonPurchasedItem WHERE (objPerson=?) AND (objPurchasedItem->objPurchase=?) AND (objPurchasedItem->isCancelled = 0)")
	do rs.Execute(delegateID,purchaseID)
	while rs.Next() {
	set basketItemID=rs.Get("objBasketItem")
	set itemID=##class(setup.objItem).getItemID(basketItemID)
		
	if itemID { // sessions
		set description=##class(setup.objItemDetails).getDetails(itemID,languageID)
		set date=##class(setup.objItem).getItemDate(itemID,1)
		set hdate=##class(setup.objItem).getItemDate(itemID)
		set objItem=##class(setup.objItem).%OpenId(itemID)
		set eventID=objItem.objEvent.%Id()
		// check it's not the event item as it's not really a session
		if objItem.objSessionType.isSystem=0	{  // JAW 31AUG2005 - stop day packages and event items and day items etc.
			set htimeFrom=##class(setup.objItem).getData(itemID,"timeFrom")
			set htimeTo=##class(setup.objItem).getData(itemID,"timeTo")
			set typeDesc=##class(shared.pCSPmanage).out(objItem.objSessionType.description)
			set location=""
			set locationID=##class(setup.objItem).getLocationID(itemID)
			if locationID {
				set location=##class(setup.objLocation).getDetails(locationID,languageID)
			}
			set itinerary(hdate,htimeFrom,"Session",itemID)=description_"|"_location_"|"_htimeTo_"|"_typeDesc
		}
	 }
	}

	set typeDesc=..translatePhrase("Meeting")
	set rsMeetings=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	set query="SELECT objMeeting FROM meetMan.lnkMeetingDiary WHERE (active = 1) AND (status = 'Meeting Booked') AND (objDiary->objPerson=?) AND (objDiary->objEvent=?)"
	do rsMeetings.Prepare(query)
	do rsMeetings.Execute(delegateID,eventID)
	while rsMeetings.Next() {
	set meetingID=rsMeetings.Get("objMeeting")
	set data=##class(meetMan.objMeeting).getMeetingDetails(meetingID,eventID)
	set hdate=$p(data,"|",1)
	set htimeFrom=$p(data,"|",2)
	set htimeTo=$p(data,"|",3)
	set people=$p(data,"|",4)
	set statuses=$p(data,"|",5)
	set description="",attendeeCount=0
	for i=1:1 {
	 	set tmpPersonID=$p(people,",",i)
	 	if tmpPersonID="" quit
	 	set attendeeStatus=$p(statuses,",",i)
	 	if tmpPersonID'=delegateID,attendeeStatus="Meeting Booked" {
		 	set attendeeCount=attendeeCount+1
		 	set firstname=##class(cod.objItemData).get(tmpPersonID,"firstname")
			set lastname=##class(cod.objItemData).get(tmpPersonID,"lastname")
			set company=##class(cod.objItemData).get(tmpPersonID,"company")
			if $l(description) {
				set description=description_"; "
			}
			set description=description_firstname_" "_lastname_", "_company
	 	}
	}
	set description=..translatePhrase("Meeting with ")_description
	set locationName=##class(meetMan.objMeeting).getLocationName(meetingID,languageID)
	set locationDetails=##class(meetMan.objMeeting).getLocationDetails(meetingID)

	set location=""
	if ($LENGTH(locationName)) {
		set location=locationName
	}

	if $LENGTH(locationDetails) {
	 	if $l(location) {
		 	set location=location_" - "
	 	}
	 	set location=location_locationDetails
	}
	set notes=##class(meetMan.objMeetingItemData).getLatestData(meetingID,"notes")
	if attendeeCount {
	 	set itinerary(hdate,htimeFrom,"Meeting",meetingID)=description_"|"_location_"|"_htimeTo_"|"_typeDesc
	}
	}
	if $d(itinerary) {
	set out=out_"<table border='0' cellspacing='0' cellpadding='1' bgcolor='#000000'>"
	set out=out_"	<tr>"
	set out=out_"		<td>"
	set out=out_"			<table border=0 cellpadding=3 cellspacing=0 bgcolor='#FFFFFF'>"
	set out=out_"				<tr>"
	set out=out_"					<td width=100 nowrap><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Date")_"</b></font></td>"
	set out=out_"					<td width=150 align='left'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Time")_"</b></font></td>"
	set out=out_"					<td width=100 align='left'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Type")_"</b></font></td>"
	set out=out_"					<td width=250 align='left'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Description")_"</b></font></td>"
	set out=out_"					<td width=250 align='left'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Location")_"</b></font></td>"
	if $G(P1)'="NOLINK" {
		set out=out_"					<td width=250 align='left'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Microsoft Outlook link")_"</b></font></td>"
	}
	set out=out_"				</tr>"
	set linkDesc=..translatePhrase("Click to export to Microsoft Outlook")
	set cspApp=$G(^%ZCSPAPPS($ZNSPACE))
	set (hdate,htimeFrom,type,objID)=""
	for  {
		set hdate=$O(itinerary(hdate))
		if hdate="" quit
		for  {
			set htimeFrom=$O(itinerary(hdate,htimeFrom))
			if htimeFrom="" quit
			for  {
				set type=$O(itinerary(hdate,htimeFrom,type))
				if type="" quit
				for  { 
					set objID=$O(itinerary(hdate,htimeFrom,type,objID))
					if objID="" quit
					set description=$p(itinerary(hdate,htimeFrom,type,objID),"|",1)
					set location=$p(itinerary(hdate,htimeFrom,type,objID),"|",2)
					set htimeTo=$p(itinerary(hdate,htimeFrom,type,objID),"|",3)
					set typeDesc=$p(itinerary(hdate,htimeFrom,type,objID),"|",4)
					set date=##class(shared.dateFunctions).multiDate(hdate,dateFormat)
					set time=##class(setup.objEvent).formatTime(htimeFrom,eventID)_"-"_##class(setup.objEvent).formatTime(htimeTo,eventID)
					set linkURL=""
					if type="Session" {
						// Fred Jan2012 - replace with call to method
						//set linkURL="http://"_domain_"/"_cspApp_"/frontend/xt/sessionGetVcard.csp?eventID="_eventID_"&itemID="_objID
						set linkURL=##class(shared.pageMethods).getFullPathVCard(eventID)_"/frontend/xt/sessionGetVcard.csp?eventID="_eventID_"&itemID="_objID
					} elseif type="Meeting" {
						//set linkURL="http://"_domain_"/"_cspApp_"/frontend/xt/meetingGetVcard.csp?eventID="_eventID_"&meetingID="_objID_"&personID="_delegateID
						set linkURL=##class(shared.pageMethods).getFullPathVCard(eventID)_"/frontend/xt/meetingGetVcard.csp?eventID="_eventID_"&meetingID="_objID_"&personID="_delegateID
					}
					set out=out_"				<tr>"
					set out=out_"					<td nowrap><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_date_"</font></td>"
					set out=out_"					<td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_time_"</font></td>"
					set out=out_"					<td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_typeDesc_"</font></td>"
					set out=out_"					<td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_description_"</font></td>"
					set out=out_"					<td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_location_"</font></td>"
					if $l(linkURL),$G(P1)'="NOLINK" {
						set out=out_"					<td><font face='Verdana,Geneva,Arial,sans-serif' size='1'><a href='"_linkURL_"'>"_linkDesc_"</a></font></td>"
					}
					set out=out_"				</tr>"
	 			}
			}
		}
	}
	set out=out_"			</table>"
	set out=out_"		</td>"
	set out=out_"	</tr>"
	set out=out_"</table>"
	}
	return out
]]></Implementation>
</Method>

<Method name="getAlternativeTagNames">
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[	return $LB("DELEGATEITINERARY")
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.attendeeSummary">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.attendeeSummary.CLS/EV.1
;vc; Component: CLS.EF.tags.tagDefinitions.attendeeSummary
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.attendeeSummary.CLS/EV.1</td><td>CLS.EF.tags.tagDefinitions.attendeeSummary</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,62338</TimeChanged>
<TimeCreated>64085,59414.491126</TimeCreated>

<Parameter name="tagName">
<Default>attendeeSummary</Default>
</Parameter>

<Method name="getTagReplacementForHTML">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set eventID=..tagProcessor.getEventID()
	set languageID=..tagProcessor.getLanguageID()
	set rs1=##class(%ResultSet).%New("links.lnkPersonPurchase:qPersonsByType")	
	do rs1.Execute(purchaseID,"delegate")
	while rs1.Next() {
		kill arrayDelegateDetails
		set personID=rs1.Data("objPerson")
		set fullName=##class(cod.objItemData).get(personID,"firstname")_" "_##class(cod.objItemData).get(personID,"lastname")
		set out=out_fullName
		do ##class(eCom.objPurchase).getDelegatePurchaseDetails(personID,purchaseID,eventID,languageID,.arrayDelegateDetails)
		set eventCategoryID="",description="",index=""
		while ($o(arrayDelegateDetails(eventCategoryID))'="")	{
			set eventCategoryID=$o(arrayDelegateDetails(eventCategoryID))
			set categoryDescription=##class(setup.objEventCategory).getDescription(eventCategoryID,languageID)
			if categoryDescription="" set categoryDescription=..translatePhrase("Attendee") 
			set out=out_"<table border=""0"" cellspacing=""0"" cellpadding=""0"" width=""100%"">"
			set out=out_"<tr>"
			set out=out_"	<td>"
			set out=out_"		<table cellpadding=""5"" cellspacing=""0"" border=""0"" width=""100%"">"
			set out=out_"		<tr>"
			set out=out_"			<td align=""left"" height=""20"" width=""90%""><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_categoryDescription_" Registration Details</b></font></td>"
			set out=out_"			<td height=""20"" align=""left"" width=""10%""><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Quantity</b></font></td>"
			set out=out_"		</tr>"
			while $L($O(arrayDelegateDetails(eventCategoryID,description)))	{
				set description=$O(arrayDelegateDetails(eventCategoryID,description))
				set fullDesc=arrayDelegateDetails(eventCategoryID,description)
				set index=""
				while $L($O(arrayDelegateDetails(eventCategoryID,description,index)))	{
					set index=$O(arrayDelegateDetails(eventCategoryID,description,index))
					set quantity=arrayDelegateDetails(eventCategoryID,description,index)
					set out=out_"		<tr>"
					set out=out_"			<td valign=""top""><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"
					set out=out_fullDesc
					set out=out_"			</font></td>"
					set out=out_"			<td valign=""top"" align=""center""><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"
					set out=out_quantity
					set out=out_"			</font></td>"
					set out=out_"		</tr>"
				}
			}
			set out=out_"				</tr>"
			set out=out_"			</table>"
			set out=out_"		</td>"
			set out=out_"	</table>"
		}
	}
	return out
]]></Implementation>
</Method>

<Method name="getTagReplacementForText">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tag=##class(EF.tags.base).dispatchTag("attendeeSummaryText",..tagProcessor)
	return tag.getTagReplacementForText()
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.attendeeSummaryText">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.attendeeSummaryText.CLS/EV.1
;vc; Component: CLS.EF.tags.tagDefinitions.attendeeSummaryText
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.attendeeSummaryText.CLS/EV.1</td><td>CLS.EF.tags.tagDefinitions.attendeeSummaryText</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,63098</TimeChanged>
<TimeCreated>64085,59557.454706</TimeCreated>

<Parameter name="tagName">
<Default>attendeeSummaryText</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set eventID=..tagProcessor.getEventID()
	set languageID=..tagProcessor.getLanguageID()
	set LF=..getLineFeedCharacter()
	set rs1=##class(%ResultSet).%New("links.lnkPersonPurchase:qPersonsByType")	
	do rs1.Execute(purchaseID,"delegate")
	while rs1.Next() {
		kill arrayDelegateDetails
		set personID=rs1.Data("objPerson")
		set fullName=##class(cod.objItemData).get(personID,"firstname")_" "_##class(cod.objItemData).get(personID,"lastname")
		set out=out_fullName_LF
		do ##class(eCom.objPurchase).getDelegatePurchaseDetails(personID,purchaseID,eventID,languageID,.arrayDelegateDetails)
		set eventCategoryID="",description="",index=""
		while ($o(arrayDelegateDetails(eventCategoryID))'="")	{
			set eventCategoryID=$o(arrayDelegateDetails(eventCategoryID))
			set categoryDescription=##class(setup.objEventCategory).getDescription(eventCategoryID,languageID)
			if categoryDescription="" set categoryDescription=..translatePhrase("Attendee")
			set out=out_categoryDescription_" "_..translatePhrase("Registration Details")_","_..translatePhrase("Quantity")_LF
			while $L($O(arrayDelegateDetails(eventCategoryID,description)))	{
				set description=$O(arrayDelegateDetails(eventCategoryID,description))
				set fullDesc=arrayDelegateDetails(eventCategoryID,description)
				set index=""
				while $L($O(arrayDelegateDetails(eventCategoryID,description,index)))	{
					set index=$O(arrayDelegateDetails(eventCategoryID,description,index))
					set quantity=arrayDelegateDetails(eventCategoryID,description,index)
					set out=out_fullDesc_","_quantity_LF
				}
			}
		}
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.attendeesAndGuests">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.attendeesAndGuests.CLS/EV.2
;vc; Component: CLS.EF.tags.tagDefinitions.attendeesAndGuests
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.attendeesAndGuests.CLS/EV.2</td><td>CLS.EF.tags.tagDefinitions.attendeesAndGuests</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64097,40393</TimeChanged>
<TimeCreated>64085,53919.587143</TimeCreated>

<Parameter name="tagName">
<Default>attendeesAndGuests</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set eventID=..tagProcessor.getEventID()
	set languageID=..tagProcessor.getLanguageID()
	set controllerID=##class(setup.objEvent).getControllerID(eventID)
	set LF=..getLineFeedCharacter()
	set isGroupBookings=+##class(setup.objEventSetting).getParameter("bookings","allow group bookings",eventID)
	set useCategoryDesc=##class(setup.lnkCategoryEvent).useCategoryDesc(eventID,languageID)
	set defaultCategoryDesc=$P(useCategoryDesc,"|",2)
	if ..tagProcessor.getMode()="html" {
		set defaultCategoryDesc=##class(EF.encoders.html).encodeHTMLContent(defaultCategoryDesc)
	}
	set anyGuests=0
	
	kill allRegPages,allRegPageIDs,allReg
	set ok=##class(setup.lnkCategoryEvent).getAllRegPages(eventID,languageID,1,.allRegPages,.allRegPageIDs,.allReg)
	kill categoryCount
	set rs1=##class(%ResultSet).%New("links.lnkPersonPurchase:qPersonsByType")	
	do rs1.Execute(purchaseID,"delegate")
	set delCount=0
	while rs1.Next() {
		set delCount=delCount+1
		set delegateID=rs1.Get("objPerson")
		set tmpEventCategory=rs1.Data("objEventCategory")
		set categoryDescription=allRegPages(tmpEventCategory)
		// pjc 2012-05-21 Do not amend case, doesn't make sense for category names such as "Category C2". Parature #15186-7916
		// set categoryDescription=$ZCVT($E(categoryDescription,1),"U")_$ZCVT($E(categoryDescription,2,$L(categoryDescription)),"L")
		set categoryCount(tmpEventCategory)=$I(categoryCount(tmpEventCategory))
		set fullName=##class(cod.objItemData).get(delegateID,"firstname")_" "_##class(cod.objItemData).get(delegateID,"lastname")
		if isGroupBookings {
			if useCategoryDesc {
				set out=out_"  "_categoryDescription_" "_categoryCount(tmpEventCategory)_":"
			} else {
				set out=out_"  "_defaultCategoryDesc_" "_delCount_":"
			}
		}
		set out=out_" "_fullName_LF
		
		set rs2=##class(%ResultSet).%New("cod.objItemData:qGetGuests")	
		do rs2.Execute(delegateID,controllerID)
		set guestCount=0
		while rs2.Next() {
			set guestCount=guestCount+1
			set guestID=rs2.Get("objPerson")
			set fullName=##class(cod.objItemData).get(guestID,"firstname")_" "_##class(cod.objItemData).get(guestID,"lastname")
			set out=out_"          "_..translatePhrase("Guest No.")_" "_guestCount_": "_fullName_LF
		}
		if guestCount set anyGuests=1
		kill rs2
	}
	// insert the title now we know if we have any guests
	if isGroupBookings&anyGuests {
		set out=..translatePhrase("All attendees and their guest(s):")_LF_out
	} elseif isGroupBookings&'anyGuests {
		set out=..translatePhrase("Attendees:")_LF_out
	} elseif 'isGroupBookings&anyGuests {
		set out=..translatePhrase("Attendee and their guest(s):")_":"_LF_out
	} elseif 'isGroupBookings&'anyGuests {
		set out=..translatePhrase("Attendee:")_LF_out
	}
	return out
]]></Implementation>
</Method>

<Method name="getAlternativeTagNames">
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[	return $LB("DELEGATESANDGUESTS")
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.bookedAttendeeSessions">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.bookedAttendeeSessions.CLS/EV.1
;vc; Component: CLS.EF.tags.tagDefinitions.bookedAttendeeSessions
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.bookedAttendeeSessions.CLS/EV.1</td><td>CLS.EF.tags.tagDefinitions.bookedAttendeeSessions</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,62808</TimeChanged>
<TimeCreated>64086,37027.763061</TimeCreated>

<Parameter name="tagName">
<Default>bookedAttendeeSessions</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set delegateID=..tagProcessor.getPersonID()
	set eventID=..tagProcessor.getEventID()
	set controllerID=##class(setup.objEvent).getControllerID(eventID)
	set languageID=..tagProcessor.getLanguageID()
	set LF=..getLineFeedCharacter()

	
	kill sessionsForPerson
	set title=..translatePhrase("Booked sessions:")
	
	set out=out_LF

	set linkDesc=..translatePhrase("Add to calendar")
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare("SELECT objPurchasedItem->objBasketItem FROM links.lnkPersonPurchasedItem WHERE (objPerson=?) AND (objPurchasedItem->objPurchase=?) AND (objPurchasedItem->isCancelled = 0 )")
	do rs.Execute(delegateID,purchaseID)
	while rs.Next() {
	set basketItemID=rs.Get("objBasketItem")
	set itemID=##class(setup.objItem).getItemID(basketItemID)
		
	if itemID { // sessions
		set desc=##class(setup.objItemDetails).getDetails(itemID,languageID)
		set date=##class(setup.objItem).getItemDate(itemID,1)
		set hdate=##class(setup.objItem).getItemDate(itemID)
		set objItem=##class(setup.objItem).%OpenId(itemID)
		set eventID=objItem.objEvent.%Id()
		// check it's not the event item as it's not really a session
		if objItem.objSessionType.isSystem=0	{  // JAW 31AUG2005 - stop day packages and event items and day items etc.
			set htime=##class(setup.objItem).getData(itemID,"timeFrom")
			set time=##class(setup.objEvent).formatTime(htime,eventID)
			set hEndTime=##class(setup.objItem).getData(itemID,"timeTo"), endTime="" //added by Shahadat, feb 2009 SF case 7589
			if $L(hEndTime) set endTime=##class(setup.objEvent).formatTime(hEndTime,eventID)
			set location=""
			if objItem.objLocation'="" set location=##class(setup.objLocation).getDetails(objItem.objLocation.%Id(),languageID)
			if location'="" set location=", "_location
			do objItem.%Close()
			set itemKey=$E(hdate_" "_htime_" "_desc_" "_itemID,1,200)
			set linkURL=##class(shared.pageMethods).getFullPathVCard(eventID)_"/frontend/xt/sessionGetVcard.csp?eventID="_eventID_"&itemID="_itemID
			
			set sessionsForPerson(itemKey)=desc_location_", "_date_" "_time_$S($l(endTime):"- "_endTime,1:"")_$s($G(P1)'="NOLINK":", <a href='"_linkURL_"'>"_linkDesc_"</a>",1:".")
		}
	 }
	}
	set itemKey=""
	for  {
		set itemKey=$O(sessionsForPerson(itemKey))
		if itemKey="" quit
				
		set out=out_"  "_sessionsForPerson(itemKey)_LF
	}
	return out
]]></Implementation>
</Method>

<Method name="getAlternativeTagNames">
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[	return $LB("BOOKEDDELEGATESESSIONS")
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.bookedSessions">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.bookedSessions.CLS/EV.2
;vc; Component: CLS.EF.tags.tagDefinitions.bookedSessions
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.bookedSessions.CLS/EV.2</td><td>CLS.EF.tags.tagDefinitions.bookedSessions</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64097,40603</TimeChanged>
<TimeCreated>64086,35139.529984</TimeCreated>

<Parameter name="tagName">
<Default>bookedSessions</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set delegateID=..tagProcessor.getPersonID()
	set eventID=..tagProcessor.getEventID()
	set languageID=..tagProcessor.getLanguageID()
	set LF=..getLineFeedCharacter()
	set controllerID=##class(setup.objEvent).getControllerID(eventID)
	
	set useCategoryDesc=##class(setup.lnkCategoryEvent).useCategoryDesc(eventID,languageID)
	set defaultCategoryDesc=$P(useCategoryDesc,"|",2)
	if ..tagProcessor.getMode()="html" {
		set defaultCategoryDesc=##class(EF.encoders.html).encodeHTMLContent(defaultCategoryDesc)
	}
	set isGroupBookings=+##class(setup.objEventSetting).getParameter("bookings","allow group bookings",eventID)
	set title=..translatePhrase("Booked sessions:")

	set out=out_LF
 
 	set linkDesc=..translatePhrase("Add to calendar")
 	
	kill allRegPages,allRegPageIDs,allReg
 	set ok=##class(setup.lnkCategoryEvent).getAllRegPages(eventID,languageID,1,.allRegPages,.allRegPageIDs,.allReg)
	set rs1=##class(%ResultSet).%New("links.lnkPersonPurchase:qPersonsByType")	
	do rs1.Execute(purchaseID,"delegate")
	set delCount=0
	kill categoryCount
	while rs1.Next() {
		set delCount=delCount+1
		set delegateID=rs1.Get("objPerson")
		set tmpEventCategory=rs1.Data("objEventCategory")
		set categoryDescription=allRegPages(tmpEventCategory)
		set categoryDescription=$ZCVT($E(categoryDescription,1),"U")_$ZCVT($E(categoryDescription,2,$L(categoryDescription)),"L")
		set categoryCount(tmpEventCategory)=$I(categoryCount(tmpEventCategory))
	
		set fullName=##class(cod.objItemData).get(delegateID,"firstname")_" "_##class(cod.objItemData).get(delegateID,"lastname")
		if isGroupBookings {
			if useCategoryDesc {
				set out=out_"  "_categoryDescription_" "_categoryCount(tmpEventCategory)_":"
			} else {
				set out=out_"  "_defaultCategoryDesc_" "_delCount_":"
			}
		}
		set out=out_" "_fullName_LF
	 	
		kill sessionsForPerson
	 	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	 	do rs.Prepare("SELECT objPurchasedItem->objBasketItem FROM links.lnkPersonPurchasedItem WHERE (objPerson=?) AND (objPurchasedItem->objPurchase=?) AND (objPurchasedItem->isCancelled = 0 )")
	 	do rs.Execute(delegateID,purchaseID)
	 	while rs.Next() {
		 	set basketItemID=rs.Get("objBasketItem")
	 		set itemID=##class(setup.objItem).getItemID(basketItemID)
	 		
	 		if itemID { // sessions
				set desc=##class(setup.objItemDetails).getDetails(itemID,languageID)
				set date=##class(setup.objItem).getItemDate(itemID,1)
				set hdate=##class(setup.objItem).getItemDate(itemID)
				set objItem=##class(setup.objItem).%OpenId(itemID)
				set eventID=objItem.objEvent.%Id()
				if objItem.objSessionType.isSystem=0	{  // JAW 31AUG2005 - stop day packages and event items and day items etc.
					set htime=##class(setup.objItem).getData(itemID,"timeFrom")
					set time=##class(setup.objEvent).formatTime(htime,eventID)
					set hEndTime=##class(setup.objItem).getData(itemID,"timeTo"), endTime=""
					if $L(hEndTime) set endTime=##class(setup.objEvent).formatTime(hEndTime,eventID)					
					set location=""
					if objItem.objLocation'="" set location=##class(setup.objLocation).getDetails(objItem.objLocation.%Id(),languageID)
					if location'="" set location=", "_location
					set descloc=desc_location
					do objItem.%Close()
					// RQ 15-Mar-2012 PBUG000070002 - limit the length of this to 200 chars, to avoid subscript errors
					// set itemKey=hdate_" "_htime_" "_desc_" "_itemID
					set itemKey=$E(hdate_" "_htime_" "_desc_" "_itemID,1,200)
					set linkURL=##class(shared.pageMethods).getFullPathVCard(eventID)_"/frontend/xt/sessionGetVcard.csp?eventID="_eventID_"&itemID="_itemID
					
					set sessionsForPerson(itemKey)=descloc_", "_date_" "_time_$S($L(endTime):" - "_endTime,1:"")_$S($G(P1)'="NOLINK":", <a href='"_linkURL_"'>"_linkDesc_"</a>",1:".")
				}
		 	}
		}
		set itemKey=""
		for  {
			set itemKey=$O(sessionsForPerson(itemKey))
			if itemKey="" quit
			
			set out=out_"  "_sessionsForPerson(itemKey)_LF
		}
		// and now guests
		set rs3=##class(%ResultSet).%New("cod.objItemData:qGetGuests")	
		do rs3.Execute(delegateID,controllerID)
		set guestCount=0
		while rs3.Next() {
			kill sessionsForPerson
			set guestCount=guestCount+1
			set guestID=rs3.Get("objPerson")
			set fullName=##class(cod.objItemData).get(guestID,"firstname")_" "_##class(cod.objItemData).get(guestID,"lastname")
			set out=out_"      "_..translatePhrase("Guest No.")_" "_guestCount_": "_fullName_LF
		
		 	set rs4=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		 	do rs4.Prepare("SELECT objPurchasedItem->objBasketItem FROM links.lnkPersonPurchasedItem WHERE (objPerson=?) AND (objPurchasedItem->objPurchase=?) AND (objPurchasedItem->isCancelled = 0 )")
		 	do rs4.Execute(guestID,purchaseID)
		 	while rs4.Next() {
			 	set basketItemID=rs4.Get("objBasketItem")
		 		set itemID=##class(setup.objItem).getItemID(basketItemID)
		 		
		 		if itemID { // sessions
					set desc=##class(setup.objItemDetails).getDetails(itemID,languageID)
					set date=##class(setup.objItem).getItemDate(itemID,1)
					set hdate=##class(setup.objItem).getItemDate(itemID)
					set objItem=##class(setup.objItem).%OpenId(itemID)
					set eventID=objItem.objEvent.%Id()
					// check it's not the event item as it's not really a session
					if objItem.objSessionType.isSystem=0	{  // JAW 31AUG2005 - stop day packages and event items and day items etc.
						set htime=##class(setup.objItem).getData(itemID,"timeFrom")
						set time=##class(setup.objEvent).formatTime(htime,eventID)
						set hEndTime=##class(setup.objItem).getData(itemID,"timeTo"), endTime=""
						if $L(hEndTime) set endTime=##class(setup.objEvent).formatTime(hEndTime,eventID)
						set location=""
						if objItem.objLocation'="" set location=##class(setup.objLocation).getDetails(objItem.objLocation.%Id(),languageID)
						if location'="" set location=", "_location
						set descloc=desc_location
						do objItem.%Close()
						set itemKey=$E(hdate_" "_htime_" "_desc_" "_itemID,1,200)
						set linkURL=##class(shared.pageMethods).getFullPathVCard(eventID)_"/frontend/xt/sessionGetVcard.csp?eventID="_eventID_"&itemID="_itemID
						
						set sessionsForPerson(itemKey)=descloc_", "_date_" "_time_$S($L(endTime):" - "_endTime,1:"")_$S($G(P1)'="NOLINK":", <a href='"_linkURL_"'>"_linkDesc_"</a>",1:".")
					}
			 	} 
		 	}
			kill rs4
			set itemKey=""
			for  {
				set itemKey=$O(sessionsForPerson(itemKey))
				if itemKey="" quit
				
				set out=out_"        "_sessionsForPerson(itemKey)_LF
			}
		}
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.bookedSessionsTableView">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.bookedSessionsTableView.CLS/EV.2
;vc; Component: CLS.EF.tags.tagDefinitions.bookedSessionsTableView
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.bookedSessionsTableView.CLS/EV.2</td><td>CLS.EF.tags.tagDefinitions.bookedSessionsTableView</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64097,44821</TimeChanged>
<TimeCreated>64086,36303.42558</TimeCreated>

<Parameter name="tagName">
<Default>bookedSessionsTableView</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set delegateID=..tagProcessor.getPersonID()
	set eventID=..tagProcessor.getEventID()
	set controllerID=##class(setup.objEvent).getControllerID(eventID)
	set languageID=..tagProcessor.getLanguageID()
	set LF=..getLineFeedCharacter()
	set useCategoryDesc=##class(setup.lnkCategoryEvent).useCategoryDesc(eventID,languageID)
	set defaultCategoryDesc=$P(useCategoryDesc,"|",2)
	if ..tagProcessor.getMode()="html" {
		set defaultCategoryDesc=##class(EF.encoders.html).encodeHTMLContent(defaultCategoryDesc)
	}
	set isGroupBookings=+##class(setup.objEventSetting).getParameter("bookings","allow group bookings",eventID)
	set out=out_"<table>"
	set title=..translatePhrase("Booked sessions:")
	set linkDesc=..translatePhrase("Add to calendar")
 	
	kill allRegPages,allRegPageIDs,allReg
	set ok=##class(setup.lnkCategoryEvent).getAllRegPages(eventID,languageID,1,.allRegPages,.allRegPageIDs,.allReg)
	set rs1=##class(%ResultSet).%New("links.lnkPersonPurchase:qPersonsByType")	
	do rs1.Execute(purchaseID,"delegate")
	set delCount=0
	kill categoryCount
	while rs1.Next() {
		set delCount=delCount+1
		set delegateID=rs1.Get("objPerson")
		set tmpEventCategory=rs1.Data("objEventCategory")
		set categoryDescription=allRegPages(tmpEventCategory)
		set categoryDescription=$ZCVT($E(categoryDescription,1),"U")_$ZCVT($E(categoryDescription,2,$L(categoryDescription)),"L")
		set categoryCount(tmpEventCategory)=$I(categoryCount(tmpEventCategory))
	
		set fullName=##class(cod.objItemData).get(delegateID,"firstname")_" "_##class(cod.objItemData).get(delegateID,"lastname")
		set companyName = ##class(cod.objItemData).get(delegateID,"company")
		if companyName'="" set fullName = fullName _ LF _ companyName
		if isGroupBookings {
			if useCategoryDesc {
				set out=out_"<tr><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_categoryDescription_" "_categoryCount(tmpEventCategory)_":&nbsp;</font></td>"
			} else {
				set out=out_"<tr><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_defaultCategoryDesc_" "_delCount_":&nbsp;</font></td>"
			}
		}
		set out=out_"<td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_fullName_"&nbsp;</font></td></tr>" //first row of the table finished here..
	 	set out=out_"<tr><td>&nbsp;</td><td>&nbsp;</td></tr>"
	 	kill sessionsForPerson
	 	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	 	do rs.Prepare("SELECT objPurchasedItem->objBasketItem FROM links.lnkPersonPurchasedItem WHERE (objPerson=?) AND (objPurchasedItem->objPurchase=?) AND (objPurchasedItem->isCancelled = 0 )")
	 	do rs.Execute(delegateID,purchaseID)
	 	while rs.Next() {
		 	set basketItemID=rs.Get("objBasketItem")
	 		set itemID=##class(setup.objItem).getItemID(basketItemID)
	 		
	 		if itemID { // sessions
	 			set desc= ##class(setup.objItemDetails).getDetails(itemID,languageID)
				set date=##class(setup.objItem).getItemDate(itemID,1)
				set hdate=##class(setup.objItem).getItemDate(itemID)
				set objItem=##class(setup.objItem).%OpenId(itemID)
				set eventID=objItem.objEvent.%Id()
				// check it's not the event item as it's not really a session
				if objItem.objSessionType.isSystem=0	{  //  stop day packages and event items and day items etc.
					set htimeFrom=##class(setup.objItem).getData(itemID,"timeFrom")
					set timeFrom=##class(setup.objEvent).formatTime(htimeFrom,eventID)
					set htimeTo=##class(setup.objItem).getData(itemID,"timeTo")
					set timeTo=##class(setup.objEvent).formatTime(htimeTo,eventID)
					set location=""
					if objItem.objLocation'="" set location=##class(setup.objLocation).getDetails(objItem.objLocation.%Id(),languageID)
					set descloc="<tr><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"
					set descloc=descloc_..translatePhrase("Date")_":&nbsp;</font></td><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_date_"&nbsp;</font></td></tr><tr><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"
					set descloc=descloc_..translatePhrase("Time")_":&nbsp;</font></td><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_timeFrom_$S(timeTo'="":" - "_timeTo,1:"")_"&nbsp;</font></td></tr><tr><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"
					set descloc=descloc_..translatePhrase("Name")_":&nbsp;</font></td><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_desc_"&nbsp;</font></td></tr><tr><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"
					set descloc=descloc_..translatePhrase("Location")_":&nbsp;</font></td><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_location_"&nbsp;</font></td></tr>"
					
					set linkURL=##class(shared.pageMethods).getFullPathVCard(eventID)_"/frontend/xt/sessionGetVcard.csp?eventID="_eventID_"&itemID="_itemID
					
					set descloc=descloc_"<tr><td>&nbsp;"_$s($G(P1)'="NOLINK":"<font face='Verdana,Geneva,Arial,sans-serif' size='1'><a href='"_linkURL_"'>"_linkDesc_"</a>", 1:"")
					do objItem.%Close()
					set itemKey=$E(hdate_" "_htimeFrom_" "_desc_" "_itemID,1,200)
					set sessionsForPerson(itemKey)=descloc
				}
		 	}
		}
		set itemKey=""
		for  {
			set itemKey=$O(sessionsForPerson(itemKey))
			if itemKey="" quit
			
			set out=out_sessionsForPerson(itemKey)
			set out=out_"<tr><td>&nbsp;</td><td>&nbsp;</td></tr>"
		}
		
		// and now guests
		set rs3=##class(%ResultSet).%New("cod.objItemData:qGetGuests")	
		do rs3.Execute(delegateID,controllerID)
		set guestCount=0
		while rs3.Next() {
			kill sessionsForPerson
			set guestCount=guestCount+1
			set guestID=rs3.Get("objPerson")
			set fullName=##class(cod.objItemData).get(guestID,"firstname")_" "_##class(cod.objItemData).get(guestID,"lastname")
			set companyName = ##class(cod.objItemData).get(guestID,"company")
			if companyName'="" set fullName = fullName _ LF _ companyName
			set out=out_"<tr><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_..translatePhrase("Guest No.")_" "_guestCount_":&nbsp;</font></td><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_fullName_"</font></td></tr>"
			set out=out_"<tr><td>&nbsp;</td><td>&nbsp;</td></tr>"_LF
		 	set rs4=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		 	do rs4.Prepare("SELECT objPurchasedItem->objBasketItem FROM links.lnkPersonPurchasedItem WHERE (objPerson=?) AND (objPurchasedItem->objPurchase=?) AND (objPurchasedItem->isCancelled = 0 )")
		 	do rs4.Execute(guestID,purchaseID)
		 	while rs4.Next() {
			 	set basketItemID=rs4.Get("objBasketItem")
		 		set itemID=##class(setup.objItem).getItemID(basketItemID)
		 		
		 		if itemID { // sessions
					set desc=##class(setup.objItemDetails).getDetails(itemID,languageID)
					set date=##class(setup.objItem).getItemDate(itemID,1)
					set hdate=##class(setup.objItem).getItemDate(itemID)
					set objItem=##class(setup.objItem).%OpenId(itemID)
					set eventID=objItem.objEvent.%Id()
					// check it's not the event item as it's not really a session
					if objItem.objSessionType.isSystem=0	{  //  stop day packages and event items and day items etc.
						set htimeFrom=##class(setup.objItem).getData(itemID,"timeFrom")
						set timeFrom=##class(setup.objEvent).formatTime(htimeFrom,eventID)
						set htimeTo=##class(setup.objItem).getData(itemID,"timeTo")
						set timeTo=##class(setup.objEvent).formatTime(htimeTo,eventID)
						set location=""
						if objItem.objLocation'="" set location=##class(setup.objLocation).getDetails(objItem.objLocation.%Id(),languageID)
						set descloc="<tr><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"
						set descloc=descloc_..translatePhrase("Date")_":&nbsp;</font></td><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_date_"&nbsp;</font></td></tr><tr><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"
						set descloc=descloc_..translatePhrase("Time")_":&nbsp;</font></td><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_timeFrom_$S(timeTo'="":" - "_timeTo,1:"")_"&nbsp;</font></td></tr>"
						set descloc=descloc_"<tr><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_..translatePhrase("Name")_":&nbsp;</font></td><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_desc_"&nbsp;</font></td></tr>"
						set descloc=descloc_"<tr><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_..translatePhrase("Location")_":&nbsp;</font></td><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_location_"&nbsp;</font></td></tr>"
						do objItem.%Close()
						set itemKey=$E(hdate_" "_htimeFrom_" "_desc_" "_itemID,1,200)
						set sessionsForPerson(itemKey)=descloc
					}
			 	} 
		 	}
			kill rs4
			set itemKey=""
			for  {
				set itemKey=$O(sessionsForPerson(itemKey))
				if itemKey="" quit
				
				set out=out_sessionsForPerson(itemKey)
				set out=out_"<tr><td>&nbsp;</td><td>&nbsp;</td></tr>"
			}
		}
		
	}
	set out=out_"</table>"

 
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.dayRegistrations">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.dayRegistrations.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.dayRegistrations
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.dayRegistrations.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.dayRegistrations</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64128,50424</TimeChanged>
<TimeCreated>64086,40674.621398</TimeCreated>

<Parameter name="tagName">
<Default>dayRegistrations</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim eventDay As setup.eventDay = ..tagProcessor.getEventDay()
	return eventDay.bookingLevel.getCompleted()
]]></Implementation>
</Method>

<Method name="getAlternativeTagNames">
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[	return $listbuild("DAYBOOKINGS")
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.guestList">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.guestList.CLS/EV.2
;vc; Component: CLS.EF.tags.tagDefinitions.guestList
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.guestList.CLS/EV.2</td><td>CLS.EF.tags.tagDefinitions.guestList</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64097,40599</TimeChanged>
<TimeCreated>64085,53410.430695</TimeCreated>

<Parameter name="tagName">
<Default>guestList</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set eventID=..tagProcessor.getEventID()
	set LF=..getLineFeedCharacter()
	set languageID=..tagProcessor.getLanguageID()
	set isGroupBookings=+##class(setup.objEventSetting).getParameter("bookings","allow group bookings",eventID)
	set useCategoryDesc=##class(setup.lnkCategoryEvent).useCategoryDesc(eventID,languageID)
	set defaultCategoryDesc=$P(useCategoryDesc,"|",2)
	if ..tagProcessor.getMode()="html" {
		set defaultCategoryDesc=##class(EF.encoders.html).encodeHTMLContent(defaultCategoryDesc)
	}
	set anyGuests=0
	
	kill allRegPages,allRegPageIDs,allReg
	set ok=##class(setup.lnkCategoryEvent).getAllRegPages(eventID,languageID,1,.allRegPages,.allRegPageIDs,.allReg)
	kill categoryCount
	set rs1=##class(%ResultSet).%New("links.lnkPersonPurchase:qPersonsByType")	
	do rs1.Execute(purchaseID,"delegate")
	set delCount=0
	while rs1.Next() {
		set delCount=delCount+1
		set delegateID=rs1.Get("objPerson")
		set tmpEventCategory=rs1.Data("objEventCategory")
		set categoryDescription=allRegPages(tmpEventCategory)
		set categoryDescription=$ZCVT($E(categoryDescription,1),"U")_$ZCVT($E(categoryDescription,2,$L(categoryDescription)),"L")
		set categoryCount(tmpEventCategory)=$I(categoryCount(tmpEventCategory))
		set fullName=##class(cod.objItemData).get(delegateID,"firstname")_" "_##class(cod.objItemData).get(delegateID,"lastname")
		if isGroupBookings {
			if useCategoryDesc {
				set out=out_"  "_categoryDescription_" "_categoryCount(tmpEventCategory)_": "_fullName_LF
			} else {
				set out=out_"  "_defaultCategoryDesc_" "_delCount_": "_fullName_LF
			}
		}
		
		set rs2=##class(%ResultSet).%New("links.lnkPersonPurchase:qPersonsByType")	
		do rs2.Execute(purchaseID,"guest")
		set guestCount=0
		while rs2.Next() {
			set guestCount=guestCount+1
			set guestID=rs2.Get("objPerson")
			set fullName=##class(cod.objItemData).get(guestID,"firstname")_" "_##class(cod.objItemData).get(guestID,"lastname")
			if isGroupBookings set out=out_"          "
			set out=out_..translatePhrase("Guest No.")_" "_guestCount_": "_fullName_LF
		}
		if guestCount set anyGuests=1
	}
	// insert the title now we know if we have any guests
	if isGroupBookings&anyGuests {
		set out=..translatePhrase("All attendees and their guest(s):")_LF_out
	} elseif isGroupBookings&'anyGuests {
		set out=..translatePhrase("All attendees:")_LF_out
	} elseif 'isGroupBookings&anyGuests {
		set out=..translatePhrase("Guest(s):")_LF_out
	} elseif 'isGroupBookings&'anyGuests {
		// out will be blank so do not put a title
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.invAddress">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.invAddress.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.invAddress
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.invAddress.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.invAddress</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64085,39899</TimeChanged>
<TimeCreated>64085,39698.039429</TimeCreated>

<Parameter name="tagName">
<Default>invAddress</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set invoiceID=..tagProcessor.getInvoiceID()
	set LF=..getLineFeedCharacter()
	set P1=..tagParameters
	set out=""
	&SQL(SELECT addressLine1,addressLine2,addressLine3,city,town,postcode,country,company,county,purchaseID INTO :addressLine1,:addressLine2,:addressLine3,:city,:town,:postcode,:country,:company,:county,:purchaseID FROM eCom.objInvoice WHERE ID=:invoiceID)
	if +SQLCODE=0 {
		//SHAHADAT:CASE00019901 get the purchase's language and get country name using that language.
		&SQL(SELECT result INTO :xPrefLangID FROM ecom.objPurchaseData WHERE objPurchase=:purchaseID AND objPurchaseDataName->description='xPrefLangID')
		if +SQLCODE=0 {
			set tmpItemNameID=##class(cod.objItemName).getIDFromDescriptionNoEvent("Country")
			set country = ##class(cod.objItemAlternativeDetails).getFrontendTranslation(tmpItemNameID,country,xPrefLangID)
		}
		//if $L(company) set out=out_LF_company
		if $L(addressLine1) set out=out_$S($L(out):LF,1:"")_addressLine1
		if $L(addressLine2) set out=out_$S($L(out):LF,1:"")_addressLine2
		if $L(addressLine3) set out=out_$S($L(out):LF,1:"")_addressLine3
		if P1="POSTCODEBEFORETOWN" { // fred mar 2010 - added for our european friends
			if $L(postcode) set out=out_$S($L(out):LF,1:"")_postcode
			if $L(city) set out=out_$S($L(postcode):" ",$L(out):LF,1:"")_city
			if $L(town) set out=out_$S($L(postcode):" ",$L(out):LF,1:"")_town
			if $L(county) set out=out_$S($L(out):LF,1:"")_county
		} else {
			if $L(city) set out=out_$S($L(out):LF,1:"")_city
			if $L(town) set out=out_$S($L(out):LF,1:"")_town
			if $L(county) set out=out_$S($L(out):LF,1:"")_county
			if $L(postcode) set out=out_$S($L(out):LF,1:"")_postcode
		}
		if $L(country) set out=out_$S($L(out):LF,1:"")_country
	}
	
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.invAddressDetails">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.invAddressDetails.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.invAddressDetails
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.invAddressDetails.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.invAddressDetails</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64085,39890</TimeChanged>
<TimeCreated>64085,39845.19003</TimeCreated>

<Parameter name="tagName">
<Default>invAddressDetails</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set invoiceID=..tagProcessor.getInvoiceID()
	set LF=..getLineFeedCharacter()
	set P1=..tagParameters
	set out=""
	&SQL(SELECT firstname,lastname,company,addressLine1,addressLine2,addressLine3,city,town,postcode,country,company,county,purchaseID INTO :firstname,:lastname,:company,:addressLine1,:addressLine2,:addressLine3,:city,:town,:postcode,:country,:company,:county,:purchaseID FROM eCom.objInvoice WHERE ID=:invoiceID)
	if +SQLCODE=0 {
		//if $L(company) set out=out_LF_company
		if $L(firstname) set out=firstname
		if $L(lastname) set out=out_$S($L(out):" ",1:"")_lastname
		if $L(company) set out=out_$S($L(out):LF,1:"")_company
		if $L(addressLine1) set out=out_$S($L(out):LF,1:"")_addressLine1
		if $L(addressLine2) set out=out_$S($L(out):LF,1:"")_addressLine2
		if $L(addressLine3) set out=out_$S($L(out):LF,1:"")_addressLine3
		if P1="POSTCODEBEFORETOWN" { // fred mar 2010 - added for our european friends
			if $L(postcode) set out=out_$S($L(out):LF,1:"")_postcode
			if $L(city) set out=out_$S($L(postcode):" ",$L(out):LF,1:"")_city
			if $L(town) set out=out_$S($L(postcode):" ",$L(out):LF,1:"")_town
			if $L(county) set out=out_$S($L(out):LF,1:"")_county
		} else {
			if $L(city) set out=out_$S($L(out):LF,1:"")_city
			if $L(town) set out=out_$S($L(out):LF,1:"")_town
			if $L(county) set out=out_$S($L(out):LF,1:"")_county
			if $L(postcode) set out=out_$S($L(out):LF,1:"")_postcode
		}
		//SHAHADAT:CASE00019901 get the purchase's language and get country name using that language.
		&SQL(SELECT result INTO :xPrefLangID FROM ecom.objPurchaseData WHERE objPurchase=:purchaseID AND objPurchaseDataName->description='xPrefLangID')
		if +SQLCODE=0 {
			set tmpItemNameID=##class(cod.objItemName).getIDFromDescriptionNoEvent("Country")
			set country = ##class(cod.objItemAlternativeDetails).getFrontendTranslation(tmpItemNameID,country,xPrefLangID)
		}
		if $L(country) set out=out_$S($L(out):LF,1:"")_country
	}
	
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.invAmount">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.invAmount.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.invAmount
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.invAmount.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.invAmount</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64085,40108</TimeChanged>
<TimeCreated>64085,40043.49981</TimeCreated>

<Parameter name="tagName">
<Default>invAmount</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set objInvoice=##class(eCom.objInvoice).%OpenId(..tagProcessor.getInvoiceID())
	do objInvoice.%Reload()
	set currencyCode=objInvoice.currencyCode
	
	set out=currencyCode_" "_$FN(objInvoice.totalPrice,",",2)
	kill objInvoice
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.invAttendeeList">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.invAttendeeList.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.invAttendeeList
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.invAttendeeList.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.invAttendeeList</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64085,39976</TimeChanged>
<TimeCreated>64085,39948.94539</TimeCreated>

<Parameter name="tagName">
<Default>invAttendeeList</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set objInvoice=##class(eCom.objInvoice).%OpenId(..tagProcessor.getInvoiceID())
	do objInvoice.%Reload()
	set out=objInvoice.attendeeList
	kill objInvoice
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.invCompany">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.invCompany.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.invCompany
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.invCompany.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.invCompany</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64085,39627</TimeChanged>
<TimeCreated>64085,39614.553943</TimeCreated>

<Parameter name="tagName">
<Default>invCompany</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set objInvoice=##class(eCom.objInvoice).%OpenId(..tagProcessor.getInvoiceID())
	do objInvoice.%Reload()
	set out=objInvoice.company
	kill objInvoice
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.invCurCode">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.invCurCode.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.invCurCode
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.invCurCode.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.invCurCode</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64085,39958</TimeChanged>
<TimeCreated>64085,39918.293807</TimeCreated>

<Parameter name="tagName">
<Default>invCurCode</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set objInvoice=##class(eCom.objInvoice).%OpenId(..tagProcessor.getInvoiceID())
	do objInvoice.%Reload()
	set out=objInvoice.currencyCode
	kill objInvoice
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.invDate">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.invDate.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.invDate
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.invDate.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.invDate</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64084,63836</TimeChanged>
<TimeCreated>64084,54487.759802</TimeCreated>

<Parameter name="tagName">
<Default>invDate</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set invoiceID=..tagProcessor.getInvoiceID()
	set out=""
	&SQL(SELECT xCRstamp,eventID INTO :origInvDateUTC,:eventID FROM eCom.objInvoice WHERE ID=:invoiceID)
	if +SQLCODE=0 {
		set origInvDate=##class(setup.objEvent).getTimestampLocalFromUTC(eventID,origInvDateUTC) 
		set out=##class(shared.dateFunctions).multiDate($P(##class(shared.dateFunctions).timestampToHorolog(origInvDate),",",1),..tagProcessor.getDateFormat())
			
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.invDescCaps">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.invDescCaps.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.invDescCaps
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.invDescCaps.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.invDescCaps</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64084,65167</TimeChanged>
<TimeCreated>64084,54392.265589</TimeCreated>

<Parameter name="tagName">
<Default>invDescCaps</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tagObject=##class(EF.tags.base).dispatchTag("invDescMixed",..tagProcessor)
	return $ZCVT(tagObject.getTagReplacement(),"U")
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.invDescMixed">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.invDescMixed.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.invDescMixed
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.invDescMixed.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.invDescMixed</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64084,54538</TimeChanged>
<TimeCreated>64084,54013.158226</TimeCreated>

<Parameter name="tagName">
<Default>invDescMixed</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set invoiceID=..tagProcessor.getInvoiceID()
	set out=..translatePhrase("Invoice")
	if ##class(eCom.objInvoice).isCreditNote(invoiceID) set out=..translatePhrase("Credit note")
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.invExternalCustomerAccount">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.invExternalCustomerAccount.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.invExternalCustomerAccount
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.invExternalCustomerAccount.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.invExternalCustomerAccount</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64085,62054</TimeChanged>
<TimeCreated>64085,39647.310154</TimeCreated>

<Parameter name="tagName">
<Default>invExtCustAcct</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set objInvoice=##class(eCom.objInvoice).%OpenId(..tagProcessor.getInvoiceID())
	do objInvoice.%Reload()
	set out=objInvoice.externalcustomeraccount
	kill objInvoice
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.invFirstName">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.invFirstName.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.invFirstName
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.invFirstName.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.invFirstName</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64085,39482</TimeChanged>
<TimeCreated>64085,39096.594081</TimeCreated>

<Parameter name="tagName">
<Default>invFirstName</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set objInvoice=##class(eCom.objInvoice).%OpenId(..tagProcessor.getInvoiceID())
	do objInvoice.%Reload()
	set out=objInvoice.firstname
	kill objInvoice
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.invFirstPrintRunDate">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.invFirstPrintRunDate.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.invFirstPrintRunDate
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.invFirstPrintRunDate.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.invFirstPrintRunDate</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64085,40208</TimeChanged>
<TimeCreated>64085,40139.473794</TimeCreated>

<Parameter name="tagName">
<Default>invFirstPrintRunDate</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set invoiceID=..tagProcessor.getInvoiceID()
	&SQL(SELECT firstPrintRunDate INTO :tmp FROM eCom.objInvoice WHERE ID=:invoiceID)
	if +SQLCODE=0 {
		if $l(tmp) {
			// convert from "2007-08-30 15:04:23" to "30 Aug 2007"
			
			// RQ 16-Mar-2011 - PBUG00002140 - use library function instead of hardcoding
			// set out=$ZD(##class(shared.dateFunctions).multiDate(tmp),2)
			set out=##class(shared.dateFunctions).multiDate(tmp,..tagProcessor.getDateFormat(),,3)
		} else {
			// When run for the first time, this will not yet have been populated
			
			// RQ 16-Mar-2011 - PBUG00002140 - use library function instead of hardcoding
			// set out=$ZD(+$H,2)
			set out=##class(shared.dateFunctions).multiDate($P(+$H,",",1),..tagProcessor.getDateFormat())
		}
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.invLastName">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.invLastName.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.invLastName
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.invLastName.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.invLastName</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64085,39582</TimeChanged>
<TimeCreated>64085,39125.858844</TimeCreated>

<Parameter name="tagName">
<Default>invLastName</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set objInvoice=##class(eCom.objInvoice).%OpenId(..tagProcessor.getInvoiceID())
	do objInvoice.%Reload()
	set out=objInvoice.lastname
	kill objInvoice
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.invNumber">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.invNumber.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.invNumber
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.invNumber.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.invNumber</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64085,39443</TimeChanged>
<TimeCreated>64084,54686.512372</TimeCreated>

<Parameter name="tagName">
<Default>invNumber</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set objInvoice=##class(eCom.objInvoice).%OpenId(..tagProcessor.getInvoiceID())
	do objInvoice.%Reload()
	set out=objInvoice.invoiceNumber
	kill objInvoice
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.invOrigDate">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.invOrigDate.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.invOrigDate
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.invOrigDate.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.invOrigDate</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64085,38871</TimeChanged>
<TimeCreated>64084,54847.337925</TimeCreated>

<Parameter name="tagName">
<Default>invOrigDate</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set invoiceID=..tagProcessor.getInvoiceID()
	set out=""
	&SQL(SELECT originalInvoiceNumber,eventID INTO :origInv,:eventID FROM eCom.objInvoice WHERE ID=:invoiceID)
	if +SQLCODE=0	{
		&SQL(SELECT xCRstamp INTO :origInvDateUTC FROM eCom.objInvoice WHERE ID=:origInv)
		if +SQLCODE=0 {
			set origInvDate=##class(setup.objEvent).getTimestampLocalFromUTC(eventID,origInvDateUTC) 
			set out=##class(shared.dateFunctions).multiDate($P(##class(shared.dateFunctions).timestampToHorolog(origInvDate),",",1),..tagProcessor.getDateFormat())
		}
		
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.invOrigNumber">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.invOrigNumber.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.invOrigNumber
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.invOrigNumber.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.invOrigNumber</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64085,39405</TimeChanged>
<TimeCreated>64084,54700.957579</TimeCreated>

<Parameter name="tagName">
<Default>invOrigNumber</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set objInvoice=##class(eCom.objInvoice).%OpenId(..tagProcessor.getInvoiceID())
	if $IsObject(objInvoice) {
		do objInvoice.%Reload()
		set out=objInvoice.originalInvoiceNumber
	}
	kill objInvoice
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.invPONumber">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.invPONumber.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.invPONumber
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.invPONumber.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.invPONumber</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64085,39356</TimeChanged>
<TimeCreated>64084,54875.407667</TimeCreated>

<Parameter name="tagName">
<Default>invPONumber</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set objInvoice=##class(eCom.objInvoice).%OpenId(..tagProcessor.getInvoiceID())
	do objInvoice.%Reload()
	set out=objInvoice.customerPOnumber
	kill objInvoice
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.invPurchaseStatus">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.invPurchaseStatus.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.invPurchaseStatus
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.invPurchaseStatus.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.invPurchaseStatus</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64085,41196</TimeChanged>
<TimeCreated>64085,40229.991409</TimeCreated>

<Parameter name="tagName">
<Default>invPurchaseStatus</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set objInvoice=##class(eCom.objInvoice).%OpenId(..tagProcessor.getInvoiceID())
	do objInvoice.%Reload()
	set out=objInvoice.purchaseStatus
	kill objInvoice
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.invRegDate">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.invRegDate.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.invRegDate
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.invRegDate.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.invRegDate</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64084,54658</TimeChanged>
<TimeCreated>64084,54605.888342</TimeCreated>

<Parameter name="tagName">
<Default>invRegDate</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set invoiceID=..tagProcessor.getInvoiceID()
	&SQL(SELECT purchaseCreated,eventID INTO :purchaseCreatedUTC,:eventID FROM eCom.objInvoice WHERE ID=:invoiceID)
	if +SQLCODE=0 {
		set purchaseCreated=##class(setup.objEvent).getTimestampLocalFromUTC(eventID,purchaseCreatedUTC) 
		set out=##class(shared.dateFunctions).multiDate($P(##class(shared.dateFunctions).timestampToHorolog(purchaseCreated),",",1),..tagProcessor.getDateFormat())
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.invRegistrationRef">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.invRegistrationRef.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.invRegistrationRef
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.invRegistrationRef.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.invRegistrationRef</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64085,61968</TimeChanged>
<TimeCreated>64084,54898.112486</TimeCreated>

<Parameter name="tagName">
<Default>invRegistrationRef</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set objInvoice=##class(eCom.objInvoice).%OpenId(..tagProcessor.getInvoiceID())
	do objInvoice.%Reload()
	set out=objInvoice.bookingReference
	kill objInvoice
	return out
]]></Implementation>
</Method>

<Method name="getAlternativeTagNames">
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[	return $LB("INVBOOKINGREF")
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.invoice">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.invoice.CLS/EV.1
;vc; Component: CLS.EF.tags.tagDefinitions.invoice
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.invoice.CLS/EV.1</td><td>CLS.EF.tags.tagDefinitions.invoice</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,62620</TimeChanged>
<TimeCreated>64084,52794.132223</TimeCreated>

<Parameter name="tagName">
<Default>invoice</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	// get the last most recent invoice for this purchase
	&SQL(SELECT ID,invoiceNumber,xCRstamp,totalPrice,firstname,lastname,addressLine1,addressLine2,addressLine3,city,postcode,country,company,email,telephone 
	 	INTO 
		:invoiceID,:invoiceNumber,:xCRstamp,:totalPrice,:firstname,:lastname,:addressLine1,:addressLine2,:addressLine3,:city,:postcode,:country,:company,:email,:telephone
		FROM eCom.objInvoice WHERE objPurchase=:purchaseID ORDER BY ID DESC
	)
	//SHAHADAT:CASE00019901 get the purchase's language and get country name using that language.
	&SQL(SELECT result INTO :xPrefLangID FROM ecom.objPurchaseData WHERE objPurchase=:purchaseID AND objPurchaseDataName->description='xPrefLangID')
	if +SQLCODE=0 {
		set tmpItemNameID=##class(cod.objItemName).getIDFromDescriptionNoEvent("Country")
		set country = ##class(cod.objItemAlternativeDetails).getFrontendTranslation(tmpItemNameID,country,xPrefLangID)
	}

	// if no value for this invoice then do not output
	if totalPrice=0	{
		set showInvoice=0
		set out="Nothing to show"
	} elseif totalPrice>0 {
		set showInvoice=1
		set invoiceOrCreditnote="INVOICE"
	} else {
		set showInvoice=1
		set invoiceOrCreditnote="CREDIT NOTE"
	}
		
	if showInvoice	{
		set out=out_"<table width=""600"" cellspacing=""0"" cellpadding=""0"" border=""1"">"
		set out=out_"<tr>"
		set out=out_"    <td align=""center"">"_invoiceOrCreditnote_"</td>"
		set out=out_"</tr>"
		set out=out_"</table>"
		
		set out=out_"<table width=""600"" cellspacing=""0"" cellpadding=""0"" border=""1"">"
		set out=out_"<tr>"
		set out=out_"    <td width=""300"">"_firstname_" "_lastname_"</td>"
		set out=out_"    <td width=""300"">"_..translatePhrase("Invoice number: {{{VAR01}}}",invoiceNumber)_"</td>"
		set out=out_"</tr>"
		set out=out_"<tr>"
		set out=out_"    <td>"_company_"</td>"
		set out=out_"    <td>"_..translatePhrase("Invoice date: {{{VAR01}}}",xCRstamp)_"</td>"
		set out=out_"</tr>"
		set out=out_"<tr>"
		set out=out_"    <td>"_addressLine1_"</td>"
		set out=out_"    <td>"_..translatePhrase("Payment terms:")_"</td>"
		set out=out_"</tr>"
		set out=out_"<tr>"
		set out=out_"    <td>"_addressLine2_"</td>"
		set out=out_"    <td>&nbsp;</td>"
		set out=out_"</tr>"
		set out=out_"<tr>"
		set out=out_"    <td>"_addressLine3_"</td>"
		set out=out_"    <td>email:</td>"
		set out=out_"</tr>"
		set out=out_"<tr>"
		set out=out_"    <td>"_city_"</td>"
		set out=out_"    <td>"_email_"</td>"
		set out=out_"</tr>"
		set out=out_"<tr>"
		set out=out_"    <td>"_postcode_"</td>"
		set out=out_"    <td>phone:"_telephone_"</td>"
		set out=out_"</tr>"
		set out=out_"<tr>"
		set out=out_"    <td>"_country_"</td>"
		set out=out_"    <td>&nbsp;</td>"
		set out=out_"</tr>"
		set out=out_"</table>"
		set out=out_"<p>&nbsp;<br>&nbsp;</p>"
	
	
		// start the invoice items table
		set out=out_"<table width=""600"" cellspacing=""0"" cellpadding=""0"" border=""1"">"
		set out=out_"<tr>"
		set out=out_"    <td width=""300"">"_..translatePhrase("Description")_"</td>"
		set out=out_"    <td width=""100"" align=""center"">"_..translatePhrase("Quantity")_"</td>"
		set out=out_"    <td width=""100"" align=""right"">"_..translatePhrase("Unit price")_"</td>"
		set out=out_"    <td width=""100"" align=""right"">"_..translatePhrase("Total")_"</td>"
		set out=out_"</tr>"
		set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		do rs.Prepare("SELECT * FROM eCom.objInvoiceItem WHERE objInvoice=? ORDER BY ID")
		do rs.Execute(invoiceID)
		while rs.Next()	{
			set itemType=rs.Data("type")
			set normalItem=1
			if (itemType="subTotal")!(itemType="vat")!(itemType="grandTotal") set normalItem=0
			if normalItem	{
				set out=out_"<tr>"
				set out=out_"    <td>"_rs.Data("description")_"</td>"
				set out=out_"    <td align=""center"">"_rs.Data("quantity")_"</td>"
				set out=out_"    <td align=""right"">"_rs.Data("unitPrice")_"</td>"
				set out=out_"    <td align=""right"">"_rs.Data("amount")_"</td>"
				set out=out_"</tr>"
			} else {  // put the subTotal,vat,grandTotal to the right
				set out=out_"<tr>"
				set out=out_"    <td colspan=""3"" align=""right"">"_rs.Data("description")_"</td>"
				set out=out_"    <td align=""right"">"_rs.Data("amount")_"</td>"
				set out=out_"</tr>"
			}
		}
		set out=out_"</table>"
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.lastInvoicePDF">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.lastInvoicePDF.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.lastInvoicePDF
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.lastInvoicePDF.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.lastInvoicePDF</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64091,34666</TimeChanged>
<TimeCreated>64090,54853.57845</TimeCreated>

<Parameter name="tagName">
<Default>lastInvoicePDF</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set eventID=..tagProcessor.getEventID()
	set purchaseID=..tagProcessor.getPurchaseID()
	
	set invoiceID="",totalPrice=0,url=""
	&SQL(SELECT invoiceNumber,totalPrice INTO :tmp,:tmp2 FROM eCom.objInvoice WHERE (objPurchase = :purchaseID ) ORDER BY xCRstamp DESC)
	if +SQLCODE=0 set invoiceID=tmp,totalPrice=tmp2
	
	if invoiceID {
		if totalPrice>0 {
			set lnkContentDefinitionID=##class(setup.objEventSetting).getParameter("invoicing","default invoice template",eventID)
		} else {
			set lnkContentDefinitionID=##class(setup.objEventSetting).getParameter("invoicing","default credit note template",eventID)
		}
		set pdfDownloadID=##class(mail.objPDFDownload).createDownload(lnkContentDefinitionID,..tagProcessor.mailMergeParams,.identifier, invoiceID)
		if pdfDownloadID {
			set ..tagProcessor.pdfDownloads(pdfDownloadID)=""
		}
		
	 	set url=##class(shared.pageMethods).getFullPath(eventID)_"/frontend/xt/pdfDownload.csp?identifier="_identifier_"&eventID="_eventID
	}	
 	
 	return url
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.latestInvoiceNumber">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.latestInvoiceNumber.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.latestInvoiceNumber
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.latestInvoiceNumber.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.latestInvoiceNumber</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64085,40965</TimeChanged>
<TimeCreated>64085,40886.152652</TimeCreated>

<Parameter name="tagName">
<Default>latestInvoiceNumber</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	&SQL(SELECT invoiceNumber INTO :tmp FROM eCom.objInvoice WHERE (objPurchase = :purchaseID ) ORDER BY xCRstamp DESC)
 	if +SQLCODE=0 {
	 	set out=tmp
 	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.originalInvoiceNumber">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.originalInvoiceNumber.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.originalInvoiceNumber
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.originalInvoiceNumber.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.originalInvoiceNumber</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64085,41134</TimeChanged>
<TimeCreated>64085,40995.880828</TimeCreated>

<Parameter name="tagName">
<Default>originalInvoiceNumber</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set inv="",origInv=""
	set purchaseID=..tagProcessor.getPurchaseID()
	&SQL(SELECT invoiceNumber,originalInvoiceNumber INTO :tmp,:tmp2 FROM eCom.objInvoice WHERE (objPurchase = :purchaseID ) ORDER BY ID DESC)
 	if +SQLCODE=0 {
	 	set inv=tmp,origInv=tmp2
 	}
	if 'origInv {
		set origInv=inv   // if there is no originalInvoiceNumber then it is the first one
	}
	return origInv
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.pdfDownload">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.pdfDownload.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.pdfDownload
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.pdfDownload.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.pdfDownload</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64091,34676</TimeChanged>
<TimeCreated>64090,54085.268434</TimeCreated>

<Parameter name="tagName">
<Default>pdfDownload</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set personID=..tagProcessor.getPersonID()
	set eventID=..tagProcessor.getEventID()
	set lnkContentDefinitionID=..tagParameters
	set mailMergeParams=..tagProcessor.mailMergeParams
	
	if (personID)&&(eventID) {
		if ##class(abstract.objCoAuthor).isPersonCoAuthorForEvent(personID,eventID) {
			set personID=##class(abstract.methods).getRegisteredPersonIDForAbstractPersonAndEvent(personID,eventID)
			if personID {
				set params=##class(mail.methods).updateEmailParameter(mailMergeParams,"cod.objPerson",personID)
			}
		}	
	}
	
 	set pdfDownloadID=##class(mail.objPDFDownload).createDownload(lnkContentDefinitionID,mailMergeParams,.identifier)
 	if pdfDownloadID {
		set ..tagProcessor.pdfDownloads(pdfDownloadID)=""
 	}
 	set url=##class(shared.pageMethods).getFullPath(eventID)_"/frontend/xt/pdfDownload.csp?identifier="_identifier_"&eventID="_eventID
 	
 	return url
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.purchaseList">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.purchaseList.CLS/EV.1
;vc; Component: CLS.EF.tags.tagDefinitions.purchaseList
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.purchaseList.CLS/EV.1</td><td>CLS.EF.tags.tagDefinitions.purchaseList</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,62358</TimeChanged>
<TimeCreated>64085,59984.696919</TimeCreated>

<Parameter name="tagName">
<Default>purchaseList</Default>
</Parameter>

<Method name="getTagReplacementForHTML">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set eventID=..tagProcessor.getEventID()
	set LF=..getLineFeedCharacter()
	set hasPassedTotal=0
 	if (..tagParameters'="") { //if anything is passed in, zero value items will not be displayed. Otherwise, they will be displayed [default behaviour].
		set showZeroFlag=0
	 } else {
		 set showZeroFlag=1
	 }
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare("SELECT * FROM eCom.objReceiptLine WHERE objPurchase=? ORDER BY displayOrder")
	do rs.Execute(purchaseID)
	set hasPassedTotal=0	
	set out=out_"<table border='0' cellspacing='0' cellpadding='1' bgcolor='#000000'>"
	set out=out_"	<tr>"
	set out=out_"		<td>"
	set out=out_"			<table width='100%' border=0 cellpadding=3 cellspacing=0 bgcolor='#FFFFFF'>"
	set out=out_"				<tr>"
	set out=out_"					<td width=250><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Description")_"</b></font></td>"
	set out=out_"					<td width=100 align='center'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Quantity")_"</b></font></td>"
	set out=out_"					<td width=100 align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Unit price")_"</b></font></td>"
	set out=out_"					<td width=100 align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Total")_"&nbsp;&nbsp;</b></font></td>"
	set out=out_"				</tr>"
	
	 while rs.Next() {
		 
		if rs.Get("type")="item" {
			if (showZeroFlag=0), (+$E(rs.Get("amount"),2,99)=0) {
				//do not show this item.	
				
			} else {
			 	set out=out_"				<tr>"
				set out=out_"					<td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_rs.Get("description")
				if ##class(setup.objEventSetting).getParameter("bookings","allow accommodation bookings",eventID),$l(rs.Get("unitDate")) {
					set out=out_" "_rs.Get("unitDate")
				}
				set out=out_"</font></td>"
				set out=out_"					<td align='center'><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_rs.Get("quantity")_"</font></td>"
				set out=out_"					<td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_rs.Get("unitPrice")_"</font></td>"
				set out=out_"					<td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_rs.Get("amount")_"</font></td>"
			 	set out=out_"				</tr>"
			}
		} elseif (rs.Get("type")="discount")&(hasPassedTotal=0) {
		 	set out=out_"				<tr>"
		 	set out=out_"					<td><font face='Verdana,Geneva,Arial,sans-serif' size='1'><em>"_rs.Get("description")_"</em></font></td>"
		 	set out=out_"					<td align='center'><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_rs.Get("quantity")_"</font></td>"
		 	set out=out_"					<td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'>"_rs.Get("unitPrice")_"</font></td>"
		 	set out=out_"					<td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><em>"_rs.Get("amount")_"</em></font></td>"
		 	set out=out_"				</tr>"
		 	set out=out_""
		} elseif rs.Get("type")="subTotal" {
			set hasPassedTotal=1
		 	set out=out_"				<tr>"
		 	set out=out_"					<td colspan=2>&nbsp;</td>"
		 	set out=out_"					<td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Total:")_"</b></font></td>"
		 	set out=out_"					<td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_rs.Get("amount")_"</b></font></td>"
		 	set out=out_"				</tr>"
		} elseif (rs.Get("type")="discount")&(hasPassedTotal=1) { // basket discounts
		 	set out=out_"				<tr>"
		 	set out=out_"					<td>&nbsp;</td>"
		 	set out=out_"					<td align='right' colspan=2 align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><em>"_rs.Get("description")_"</em></font></td>"
		 	set out=out_"					<td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><em>"_rs.Get("amount")_"</em></font></td>"
		 	set out=out_"				</tr>"
		} elseif rs.Get("type")="vat" {
		 	set out=out_"				<tr>"
		 	set out=out_"					<td colspan=2>&nbsp;</td>"
		 	set out=out_"					<td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_rs.Get("description")_"</b></font></td>"
		 	set out=out_"					<td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_rs.Get("amount")_"</b></font></td>"
		 	set out=out_"				</tr>"
		} elseif rs.Get("type")="grandTotal" {
		 	set out=out_"				<tr>"
		 	set out=out_"					<td colspan=2>&nbsp;</td>"
		 	set out=out_"					<td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Grand total:")_"</b></font></td>"
		 	set out=out_"					<td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_rs.Get("amount")_"</b></font></td>"
		} elseif rs.Get("type")="override" {
		 	set out=out_"				<tr>"
		 	set out=out_"					<td>&nbsp;</td>"
		 	set out=out_"					<td colspan=2 align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_..translatePhrase("Overriding price:")_"</b></font></td>"
		 	set out=out_"					<td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>"_rs.Get("amount")_"</b></font></td>"
 	 		set out=out_"				</tr>"
		}
	 }
	 
	 set out=out_"			</table>"
	 set out=out_"		</td>"
	 set out=out_"	</tr>"
	 set out=out_"</table>"
	return out
]]></Implementation>
</Method>

<Method name="getTagReplacementForText">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tag=##class(EF.tags.base).dispatchTag("purchaseListText",..tagProcessor)
	return tag.getTagReplacementForText()
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.purchaseListText">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.purchaseListText.CLS/EV.1
;vc; Component: CLS.EF.tags.tagDefinitions.purchaseListText
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.purchaseListText.CLS/EV.1</td><td>CLS.EF.tags.tagDefinitions.purchaseListText</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,62759</TimeChanged>
<TimeCreated>64085,59725.324993</TimeCreated>

<Parameter name="tagName">
<Default>purchaseListText</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set eventID=..tagProcessor.getEventID()
	set languageID=..tagProcessor.getLanguageID()
	set LF=..getLineFeedCharacter()
	set hasPassedTotal=0
 	if (..tagParameters'="") { //if anything is passed in, zero value items will not be displayed. Otherwise, they will be displayed [default behaviour].
		set showZeroFlag=0
	 } else {
		 set showZeroFlag=1
	 }
	 set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	 do rs.Prepare("SELECT * FROM eCom.objReceiptLine WHERE objPurchase=? ORDER BY displayOrder")
	 do rs.Execute(purchaseID)
	 while rs.Next() {
		set type=rs.Get("type")		 
		if type="item" {
			if ('showZeroFlag), (+$E(rs.Get("amount"),2,99)=0) {
				//do not show this item.	
			} else {
				set out=out_rs.Get("quantity")_" x "_rs.Get("description")
				if ##class(setup.objEventSetting).getParameter("bookings","allow accommodation bookings",eventID),$l(rs.Get("unitDate")) {
					set out=out_" "_rs.Get("unitDate")
				}
				set out=out_" @ "_rs.Get("unitPrice")_" = "_rs.Get("amount")_LF
			}
	 	} elseif (type="discount")&(hasPassedTotal=0) {
		 	set out=out_rs.Get("description")_" "
		 	set out=out_"@"_rs.Get("unitPrice")_rs.Get("amount")_LF
		} elseif type="subTotal" {
			set hasPassedTotal=1
		 	set out=out_rs.Get("description")
		 	set out=out_"  "_rs.Get("amount")_LF
		} elseif (type="discount")&(hasPassedTotal=1) { // basket discounts
		 	set out=out_rs.Get("description")
		 	set out=out_" @ "_rs.Get("unitPrice")_ " "_rs.Get("amount")_LF
		} elseif type="vat" {
		 	set out=out_rs.Get("description")
		 	set out=out_" = "_rs.Get("amount")_LF
		} elseif type="grandTotal" {
			set out=out_"-------------------------------------------"_LF
		 	set out=out_" Grand total: "
		 	set out=out_" "_rs.Get("amount")_LF
		} elseif type="override" {
		 	set out=out_"Overriding Price: "
		 	set out=out_"  "_rs.Get("amount")_LF
		} else {
			set out=out_" "_LF //this is not possible.	
		}
	 }
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.questPromptData">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.questPromptData.CLS/EV.2
;vc; Component: CLS.EF.tags.tagDefinitions.questPromptData
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.questPromptData.CLS/EV.2</td><td>CLS.EF.tags.tagDefinitions.questPromptData</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64097,40617</TimeChanged>
<TimeCreated>64085,57518.300912</TimeCreated>

<Parameter name="tagName">
<Default>questPromptData</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set eventID=..tagProcessor.getEventID()
	set LF=..getLineFeedCharacter()
	set languageID=..tagProcessor.getLanguageID()
	set controllerID=##class(setup.objEvent).getControllerID(eventID)
	if (##class(setup.objEventSetting).getParameter("system","isAwardsEvent",eventID)=1) {
		return ""	
	}

	set multiLingualAlts=0
	if ##class(setup.objSystemTypes).isModuleAllowed("Multi Lingual Frontend"),##class(setup.objSystemTypes).isModuleAllowed("Multi Lingual Alternatives") {
		set multiLingualAlts=1	
	}

	set bookerID=##class(eCom.objPurchase).getBookerID(purchaseID)
	set tmpName=##class(cod.objItemData).get(bookerID,"firstname")_" "_##class(cod.objItemData).get(bookerID,"lastname")
	set out=out_"  "_..translatePhrase("Registration contact's name:")_LF
	set out=out_" "_tmpName_LF
	
	set isGroupBookings=+##class(setup.objEventSetting).getParameter("bookings","allow group bookings",eventID)
	set useCategoryDesc=##class(setup.lnkCategoryEvent).useCategoryDesc(eventID,languageID)
	set defaultCategoryDesc=$P(useCategoryDesc,"|",2)
	if ..tagProcessor.getMode()="html" {
		set defaultCategoryDesc=##class(EF.encoders.html).encodeHTMLContent(defaultCategoryDesc)
	}
	
	Set queryFilterBackEnd = "" 
	if ..tagParameters["SHOWBACKENDONLY" {
		Set queryFilterBackEnd = "OR backendOnly = 1" 
	}
	
	// first the bookes details in case of group bookings
	if isGroupBookings {
		set extraBit=""
		if languageID,languageID'=1 set extraBit=" - "_##class(shared.objLanguage).getLanguageDesc(languageID)
		set bookerPageID=##class(setup.objEventSetting).getParameter("bookings","bookerRegPageID"_extraBit,eventID)

		set bookerID=##class(eCom.objPurchase).getBookerID(purchaseID)
		set tmpName=##class(cod.objItemData).get(bookerID,"salutation")_" "_##class(cod.objItemData).get(bookerID,"firstname")_" "_##class(cod.objItemData).get(bookerID,"lastname")
		set out=out_..translatePhrase("Registration Contact's Details")_":"_LF
		set out=out_" "_tmpName_LF
		set rs1=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		set ok=rs1.Prepare("SELECT * FROM sc_xModules.objCODitem WHERE (active=1 AND (backendOnly IS NULL OR backendOnly=0 "_##class(EF.encoders.sql).doNotEncodeString(queryFilterBackEnd)_") AND parent->parent=?) ORDER BY displayOrder")
		do rs1.Execute(bookerPageID)
		while rs1.Next() {
			set itemName=##class(cod.objItemName).getDescFromID(rs1.Get("objItemName"))
			set itemQuestPrompt=##class(sc.xModules.objCODitem).getQuestPrompt(rs1.Get("ID"),languageID)
			if itemQuestPrompt="" set itemQuestPrompt=itemName
			set skip=0
			if $ZCVT(itemName,"U")="SALUTATION" set skip=1
			if $ZCVT(itemName,"U")="FIRSTNAME" set skip=1
			if $ZCVT(itemName,"U")="LASTNAME" set skip=1
			if $ZCVT(itemName,"U")="PASSWORD" set skip=1
			if $ZCVT(itemName,"U")="PASSWORD RE-TYPED" set skip=1
			// AJM 15186-3865 21/7/2011  skip if it's a dependent question which isn't switched on
			set dependsOnPrompt =rs1.Get("dependsOnPrompt")
			set dependsOnAlternative=rs1.Get("dependsOnAlternative")
			if $l(dependsOnAlternative),$l(dependsOnPrompt) { 
				// Get the actual cod details
				set (dependsOnPromptDesc,depPageID,depDescription)=""
				&SQL(SELECT objItemName->description,parent->parent INTO :tmp,:tmp2 FROM sc_xModules.objCODitem WHERE ID = :dependsOnPrompt)
				if +SQLCODE=0 set dependsOnPromptDesc=tmp,depPageID=tmp2
				&SQL(SELECT description  INTO :tmp FROM cod.objItemAlternatives WHERE ID = :dependsOnAlternative)
				if +SQLCODE=0 set depDescription=tmp
				
				if depPageID=bookerPageID {
					if ##class(cod.objItemData).get(bookerID,dependsOnPromptDesc,controllerID)'=depDescription {
						set skip=1
					}
				}
				
			}
			//extra lines added to show 'Yes' for checkbox value True and 'No' for false. SHAHADAT
			set data = ##class(cod.objItemData).get(bookerID,itemName,controllerID)
			set isItemConcealed = ##class(cod.objItemName).isConcealed(itemName)
			set itemType = rs1.Get("type")
			if itemType = "checkbox" set data = ##class(cod.methods).formatCheckboxDataForOuput(data)
			if multiLingualAlts {
				if (itemType="radiobutton")!(itemType="dropdown")!(itemType="multibox") {
					set data=##class(cod.objItemAlternativeDetails).getFrontendTranslation(rs1.Get("objItemName"),data,languageID)
				}
			}
			if ..tagParameters["HIDEBLANK", data="" set skip = 1
			if 'skip {
				if 'isItemConcealed {
					set out=out_"    "_itemQuestPrompt_" = "_data_LF		
				} else {
					set out=out_"    "_itemQuestPrompt_" = *****"_LF		
				}
			}
		}
	}
	kill rs1
	set out=out_LF
	
	// now loop on the delgates' pages
	
	set rs1=##class(%ResultSet).%New("links.lnkPersonPurchase:qPersonsByType")	
	do rs1.Execute(purchaseID,"delegate")
	set delCount=0
	kill categoryCount
	while rs1.Next() {
		set delCount=delCount+1
		set delegateID=rs1.Data("objPerson")
		// AJM 15186-3865 21/7/2011 pass the purchase/delegate ID so we don't get dependent questions
		set ok=##class(setup.lnkCategoryEvent).getAllRegPages(eventID,languageID,1,.allRegPages,.allRegPageIDs,.allReg,,,purchaseID,delegateID)
		set tmpEventCategory=rs1.Data("objEventCategory")
		set categoryDescription=allRegPages(tmpEventCategory)
		set categoryDescription=$ZCVT($E(categoryDescription,1),"U")_$ZCVT($E(categoryDescription,2,$L(categoryDescription)),"L")
		set categoryCount(tmpEventCategory)=$I(categoryCount(tmpEventCategory))
		set tmpPageOrder="",tmpPageID="",pageCount=0
		for  {
			set tmpPageOrder=$O(allRegPages(tmpEventCategory,tmpPageOrder))
			if tmpPageOrder="" quit
			set tmpPageID=allRegPages(tmpEventCategory,tmpPageOrder)
			set pageCount=pageCount+1
			if pageCount=1 {
				if isGroupBookings {
					if useCategoryDesc {
						set out=out_"  "_categoryDescription_" "_categoryCount(tmpEventCategory)_":"_LF
					} else {
						
						set out=out_"  "_defaultCategoryDesc_" "_delCount_":"_LF
					}
					set tmpName=##class(cod.objItemData).get(delegateID,"salutation")_" "_##class(cod.objItemData).get(delegateID,"firstname")_" "_##class(cod.objItemData).get(delegateID,"lastname")
					set out=out_" "_tmpName_LF
				}
			}
			if (##class(setup.objEventSetting).getParameter("system","isAwardsEvent",eventID)=1) {
				set tmpPageID = ##class(setup.objEventSetting).getParameter("awards","awardClientPageID",eventID)
			}
			set rs2=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
			do rs2.Prepare("SELECT * FROM sc_xModules.objCODitem WHERE (active=1 AND isGuest=0 AND isDelegate=1 AND (backendOnly IS NULL OR backendOnly=0 "_##class(EF.encoders.sql).doNotEncodeString(queryFilterBackEnd)_") AND parent->parent=?) ORDER BY displayOrder")
			do rs2.Execute(tmpPageID)
			while rs2.Next() {
				set itemName=##class(cod.objItemName).getDescFromID(rs2.Get("objItemName"))
				set itemQuestPrompt=##class(sc.xModules.objCODitem).getQuestPrompt(rs2.Get("ID"),languageID)
				if itemQuestPrompt="" set itemQuestPrompt=itemName
		
				set skip=0
				if $ZCVT(itemName,"U")="SALUTATION" set skip=1
				if $ZCVT(itemName,"U")="FIRSTNAME" set skip=1
				if $ZCVT(itemName,"U")="LASTNAME" set skip=1
				if $ZCVT(itemName,"U")="PASSWORD" set skip=1
				if $ZCVT(itemName,"U")="PASSWORD RE-TYPED" set skip=1
				// AJM 15186-3865 21/7/2011  skip if it's a dependent question which isn't switched on
				set dependsOnPrompt =rs2.Get("dependsOnPrompt")
				set dependsOnAlternative=rs2.Get("dependsOnAlternative")
				if $l(dependsOnAlternative),$l(dependsOnPrompt) { 
					// Get the actual cod details
					set (dependsOnPromptDesc,depPageID,depDescription)=""
					&SQL(SELECT objItemName->description,parent->parent INTO :tmp,:tmp2 FROM sc_xModules.objCODitem WHERE ID = :dependsOnPrompt)
					if +SQLCODE=0 set dependsOnPromptDesc=tmp,depPageID=tmp2
					&SQL(SELECT description  INTO :tmp FROM cod.objItemAlternatives WHERE ID = :dependsOnAlternative)
					if +SQLCODE=0 set depDescription=tmp
					
					set dependInBookerPage=0
					if isGroupBookings,depPageID=bookerPageID {
						set dependInBookerPage=1
					}
					
					// If it is in the booker page then check with the booker data
					if dependInBookerPage {
						if ##class(cod.objItemData).get(bookerID,dependsOnPromptDesc,controllerID)'=depDescription {
							set skip=1
						}
					} else {
						if ##class(cod.objItemData).get(delegateID,dependsOnPromptDesc,controllerID)'=depDescription {
							set skip=1
						}
					}
					
				}
				if (+##class(links.lnkEventCategoryData).allow(tmpEventCategory,rs2.Get("ID"))=0) set skip=1  //check if this question is allowed to be displayed in this category.
				//extra lines added to show 'Yes' for checkbox value True and 'No' for false. SHAHADAT
				set data = ##class(cod.objItemData).get(delegateID,itemName,controllerID)
				set isItemConcealed = ##class(cod.objItemName).isConcealed(itemName)
				set itemType = rs2.Get("type")
				if itemType = "checkbox" set data = ##class(cod.methods).formatCheckboxDataForOuput(data)
				if multiLingualAlts {
					if (itemType="radiobutton")!(itemType="dropdown")!(itemType="multibox") {
						set data=##class(cod.objItemAlternativeDetails).getFrontendTranslation(rs2.Get("objItemName"),data,languageID)
					}
				}

				if ..tagParameters["HIDEBLANK", data="" set skip = 1
				if 'skip {
					if 'isItemConcealed {
						set out=out_"    "_itemQuestPrompt_" = "_data_LF		
					} else {
						set out=out_"    "_itemQuestPrompt_" = *****"_LF		
					}
				}
					//if 'skip set out=out_"    "_itemQuestPrompt_" = "_##class(cod.objItemData).get(delegateID,itemName,controllerID)_LF		
			}
			kill rs2	
			// and now guests
			set rs3=##class(%ResultSet).%New("cod.objItemData:qGetGuests")	
			do rs3.Execute(delegateID,controllerID)
			set guestCount=0
			while rs3.Next() {
				set guestCount=guestCount+1
				set guestID=rs3.Get("objPerson")
				
				set rs4=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
				do rs4.Prepare("SELECT * FROM sc_xModules.objCODitem WHERE (active=1 AND isGuest=1 AND isDelegate=0 AND (backendOnly IS NULL OR backendOnly=0 "_##class(EF.encoders.sql).doNotEncodeString(queryFilterBackEnd)_") AND parent->parent=?) ORDER BY displayOrder")
				do rs4.Execute(tmpPageID)
				// RQ 10-Oct-2011 - PBUG00004894 - Only output guest details when on correct page
				set doGuestDetailsHeader=1 
				while rs4.Next() {
					if doGuestDetailsHeader {
						set doGuestDetailsHeader=0
						set out=out_"      "_..translatePhrase("Guest No.")_" "_guestCount_":"_LF
					}
					set skip=0
					set itemName=##class(cod.objItemName).getDescFromID(rs4.Get("objItemName"))
					set itemQuestPrompt=##class(sc.xModules.objCODitem).getQuestPrompt(rs4.Get("ID"),languageID)
					if itemQuestPrompt="" set itemQuestPrompt=itemName
					//extra lines added to show 'Yes' for checkbox value True and 'No' for false. SHAHADAT
					set itemType = rs4.Get("type")
					set data = ##class(cod.objItemData).get(guestID,itemName,controllerID)
					set isItemConcealed = ##class(cod.objItemName).isConcealed(itemName)
					set itemType = rs4.Get("type")
					if itemType = "checkbox" set data = ##class(cod.methods).formatCheckboxDataForOuput(data)
					if multiLingualAlts {
						if (itemType="radiobutton")!(itemType="dropdown")!(itemType="multibox") {
							set data=##class(cod.objItemAlternativeDetails).getFrontendTranslation(rs4.Get("objItemName"),data,languageID)
						}
					}

					if ..tagParameters["HIDEBLANK", data="" set skip = 1
					if 'skip {
						if 'isItemConcealed {
							set out=out_"        "_itemQuestPrompt_" = "_data_LF		
						} else {
							set out=out_"        "_itemQuestPrompt_" = *****"_LF		
						}
					}
				}
				kill rs4
			}
			kill rs3
		}
		
		set out=out_LF 
	}	
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.questPromptDataTable">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.questPromptDataTable.CLS/EV.2
;vc; Component: CLS.EF.tags.tagDefinitions.questPromptDataTable
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.questPromptDataTable.CLS/EV.2</td><td>CLS.EF.tags.tagDefinitions.questPromptDataTable</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64097,40594</TimeChanged>
<TimeCreated>64085,57950.809182</TimeCreated>

<Parameter name="tagName">
<Default>questPromptDataTable</Default>
</Parameter>

<Method name="getTagReplacementForHTML">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set eventID=..tagProcessor.getEventID()
	set LF=..getLineFeedCharacter()
	set languageID=..tagProcessor.getLanguageID()
	set controllerID=##class(setup.objEvent).getControllerID(eventID)
	if (##class(setup.objEventSetting).getParameter("system","isAwardsEvent",eventID)=1) {
		return ""	
	}

	Set queryFilterBackEnd = "" 
	if ..tagParameters["SHOWBACKENDONLY" {
		Set queryFilterBackEnd = "OR backendOnly = 1" 
	}
	
	set multiLingualAlts=0
	if ##class(setup.objSystemTypes).isModuleAllowed("Multi Lingual Frontend"),##class(setup.objSystemTypes).isModuleAllowed("Multi Lingual Alternatives") {
		set multiLingualAlts=1	
	}
	
	set bookerID=##class(eCom.objPurchase).getBookerID(purchaseID)
	set isGroupBookings=+##class(setup.objEventSetting).getParameter("bookings","allow group bookings",eventID)
	set useCategoryDesc=##class(setup.lnkCategoryEvent).useCategoryDesc(eventID,languageID)
	set defaultCategoryDesc=$P(useCategoryDesc,"|",2)
	if ..tagProcessor.getMode()="html" {
		set defaultCategoryDesc=##class(EF.encoders.html).encodeHTMLContent(defaultCategoryDesc)
	}
	
	set out=out_"<table border='0' cellspacing='0' cellpadding='1' bgcolor='#000000'>"
	set out=out_"<tr>"
	set out=out_" <td>"
	set out=out_"  <table width='100%' border=0 cellpadding=2 cellspacing=0 bgcolor='#FFFFFF'>"
	// RQ 06-Oct-2011 PBUG00004870 - Add a blank row of 0 height to fix formatting issues in Outlook/Word
	set out=out_"<tr height=0><td colspan=""5""></td></tr>"
	// Only show in non-group booking mode as otherwise it is shown again
	if 'isGroupBookings {
		set out=out_" <tr>"
		set out=out_"  <td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_..translatePhrase("Registration contact's name")_"</font></td>"
		set tmpName=##class(cod.objItemData).get(bookerID,"firstname")_" "_##class(cod.objItemData).get(bookerID,"lastname")
		set out=out_"  <td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_tmpName_"</font></td>"
		set out=out_" </tr>"
	}
	// first the bookes details in case of group bookings
	if isGroupBookings {
		set extraBit=""
		if languageID,languageID'=1 set extraBit=" - "_##class(shared.objLanguage).getLanguageDesc(languageID)
		set bookerPageID=##class(setup.objEventSetting).getParameter("bookings","bookerRegPageID"_extraBit,eventID)

		set bookerID=##class(eCom.objPurchase).getBookerID(purchaseID)
		set out=out_" <tr>"
		set out=out_"  <td width=""100""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b>"_..translatePhrase("Registration Contact's Details")_"</b></font></td>"
		set out=out_"  <td width=""10"">&nbsp;</td>"
		set tmpName=##class(cod.objItemData).get(bookerID,"salutation")_" "_##class(cod.objItemData).get(bookerID,"firstname")_" "_##class(cod.objItemData).get(bookerID,"lastname")
		set out=out_"  <td colspan=""3""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b>"_tmpName_"</b></font></td>"
		set out=out_" </tr>"
		//set itemName=##class(cod.objItemName).getDescFromID()
		set rs1=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		set ok=rs1.Prepare("SELECT * FROM sc_xModules.objCODitem WHERE (active=1 AND (backendOnly IS NULL OR backendOnly=0 "_##class(EF.encoders.sql).doNotEncodeString(queryFilterBackEnd)_") AND parent->parent=?) ORDER BY displayOrder")
		do rs1.Execute(bookerPageID)
		while rs1.Next() {
			set itemName=##class(cod.objItemName).getDescFromID(rs1.Get("objItemName"))
			set itemQuestPrompt=##class(sc.xModules.objCODitem).getQuestPrompt(rs1.Get("ID"),languageID)
			if itemQuestPrompt="" set itemQuestPrompt=itemName
			set skip=0
			if $ZCVT(itemName,"U")="SALUTATION" set skip=1
			if $ZCVT(itemName,"U")="FIRSTNAME" set skip=1
			if $ZCVT(itemName,"U")="LASTNAME" set skip=1
			if $ZCVT(itemName,"U")="PASSWORD" set skip=1
			if $ZCVT(itemName,"U")="PASSWORD RE-TYPED" set skip=1
			
			// AJM 15186-3865 21/7/2011  skip if it's a dependent question which isn't switched on
			set dependsOnPrompt =rs1.Get("dependsOnPrompt")
			set dependsOnAlternative=rs1.Get("dependsOnAlternative")
			if $l(dependsOnAlternative),$l(dependsOnPrompt) { 
				// Get the actual cod details
				set (dependsOnPromptDesc,depPageID,depDescription)=""
				&SQL(SELECT objItemName->description,parent->parent INTO :tmp,:tmp2 FROM sc_xModules.objCODitem WHERE ID = :dependsOnPrompt)
				if +SQLCODE=0 set dependsOnPromptDesc=tmp,depPageID=tmp2
				&SQL(SELECT description  INTO :tmp FROM cod.objItemAlternatives WHERE ID = :dependsOnAlternative)
				if +SQLCODE=0 set depDescription=tmp
				
				if depPageID=bookerPageID {
					if ##class(cod.objItemData).get(bookerID,dependsOnPromptDesc,controllerID)'=depDescription {
						set skip=1
					}
				}
				
			}

			set data=##class(cod.objItemData).get(bookerID,itemName,controllerID)
			set isItemConcealed = ##class(cod.objItemName).isConcealed(itemName)
			set itemType = rs1.Get("type")
			if itemType = "checkbox" {
				if $zcvt(data, "l")="true" {
					set data=..translatePhrase("Yes")
				} else {
					set data=..translatePhrase("No")		
				}
			}
			if multiLingualAlts {
				if (itemType="radiobutton")!(itemType="dropdown")!(itemType="multibox") {
					set data=##class(cod.objItemAlternativeDetails).getFrontendTranslation(rs1.Get("objItemName"),data,languageID)
				}
			}			
			// hide item if parameter says so and the data is blank
			if ..tagParameters["HIDEBLANK",data="" set skip=1
			if skip=0	{
				set out=out_"<tr>"
				set out=out_"<td width=""15"">&nbsp;</td>"
				set out=out_"<td width=""10"">&nbsp;</td>"
				set out=out_"<td width=""10"">&nbsp;</td>"
				set out=out_"<td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_itemQuestPrompt_"</font></td>"
				if 'isItemConcealed {
					set out=out_"<td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_data_"&nbsp;</font></td>"
				} else {
					set out=out_"<td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">*****"_"&nbsp;</font></td>"	
				}
				set out=out_"</tr>"
			}
		}
		set out=out_"<tr><td colspan=""5"">&nbsp;</td></tr>"
		
	}
	kill rs1
	
	set rs1=##class(%ResultSet).%New("links.lnkPersonPurchase:qPersonsByType")	
	do rs1.Execute(purchaseID,"delegate")
	kill categoryCount
	set delCount=0
	while rs1.Next() {
		set delCount=delCount+1
		set delegateID=rs1.Get("objPerson")
		// AJM 15186-3865 21/7/2011 pass the purchase/delegate ID so we don't get dependent questions
		set ok=##class(setup.lnkCategoryEvent).getAllRegPages(eventID,languageID,1,.allRegPages,.allRegPageIDs,.allReg,,,purchaseID,delegateID)
		set tmpEventCategory=rs1.Data("objEventCategory")
		set categoryDescription=allRegPages(tmpEventCategory)
		set categoryDescription=$ZCVT($E(categoryDescription,1),"U")_$ZCVT($E(categoryDescription,2,$L(categoryDescription)),"L")
		set categoryCount(tmpEventCategory)=$I(categoryCount(tmpEventCategory))
		set tmpPageOrder="",tmpPageID="",pageCount=0
		for  {
			set tmpPageOrder=$O(allRegPages(tmpEventCategory,tmpPageOrder))
			if tmpPageOrder="" quit
			set tmpPageID=allRegPages(tmpEventCategory,tmpPageOrder)
			set pageCount=pageCount+1
			if pageCount=1 {
				if isGroupBookings {
					set out=out_" <tr>"
					if useCategoryDesc {
						set out=out_"  <td width=""100""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b>"_categoryDescription_" "_categoryCount(tmpEventCategory)_":</b></font></td>"
					} else {
						set out=out_"  <td width=""100""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b>"_defaultCategoryDesc_" "_delCount_":</b></font></td>"
					}
					set out=out_"  <td width=""10"">&nbsp;</td>"
					set tmpName=##class(cod.objItemData).get(delegateID,"salutation")_" "_##class(cod.objItemData).get(delegateID,"firstname")_" "_##class(cod.objItemData).get(delegateID,"lastname")
					set out=out_"  <td colspan=""3""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b>"_tmpName_"</b></font></td>"
					set out=out_" </tr>"
				}
			}
			//set out=out_"  "_categoryDescription_" "_categoryCount(tmpEventCategory)_":"_LF
			if (##class(setup.objEventSetting).getParameter("system","isAwardsEvent",eventID)=1) {
				set tmpPageID = ##class(setup.objEventSetting).getParameter("awards","awardClientPageID",eventID)
			}
			set rs2=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
			do rs2.Prepare("SELECT * FROM sc_xModules.objCODitem WHERE (active=1 AND isGuest=0 AND isDelegate=1 AND (backendOnly IS NULL OR backendOnly=0 "_##class(EF.encoders.sql).doNotEncodeString(queryFilterBackEnd)_") AND parent->parent=?) ORDER BY displayOrder")
			do rs2.Execute(tmpPageID)
			while rs2.Next() {
				set itemName=##class(cod.objItemName).getDescFromID(rs2.Get("objItemName"))	
				set itemQuestPrompt=##class(sc.xModules.objCODitem).getQuestPrompt(rs2.Get("ID"),languageID)
				if itemQuestPrompt="" set itemQuestPrompt=itemName			
				set skip=0
				if $ZCVT(itemName,"U")="SALUTATION" set skip=1
				if $ZCVT(itemName,"U")="FIRSTNAME" set skip=1
				if $ZCVT(itemName,"U")="LASTNAME" set skip=1
				if $ZCVT(itemName,"U")="PASSWORD" set skip=1
				if $ZCVT(itemName,"U")="PASSWORD RE-TYPED" set skip=1
					
				// AJM 15186-3865 21/7/2011  skip if it's a dependent question which isn't switched on
				set dependsOnPrompt =rs2.Get("dependsOnPrompt")
				set dependsOnAlternative=rs2.Get("dependsOnAlternative")
				if $l(dependsOnAlternative),$l(dependsOnPrompt) { 
					// Get the actual cod details
					set (dependsOnPromptDesc,depPageID,depDescription)=""
					&SQL(SELECT objItemName->description,parent->parent INTO :tmp,:tmp2 FROM sc_xModules.objCODitem WHERE ID = :dependsOnPrompt)
					if +SQLCODE=0 set dependsOnPromptDesc=tmp,depPageID=tmp2
					&SQL(SELECT description  INTO :tmp FROM cod.objItemAlternatives WHERE ID = :dependsOnAlternative)
					if +SQLCODE=0 set depDescription=tmp
					
					set dependInBookerPage=0
					if isGroupBookings,depPageID=bookerPageID {
						set dependInBookerPage=1
					}
					
					// If it is in the booker page then check with the booker data
					if dependInBookerPage {
						if ##class(cod.objItemData).get(bookerID,dependsOnPromptDesc,controllerID)'=depDescription {
							set skip=1
						}
					} else {
						if ##class(cod.objItemData).get(delegateID,dependsOnPromptDesc,controllerID)'=depDescription {
							set skip=1
						}
					}
					
				}

				if (+##class(links.lnkEventCategoryData).allow(tmpEventCategory,rs2.Get("ID"))=0) set skip=1  //check if this question is allowed to be displayed in this category.
				//set out=out_"    "_itemName_" = "_##class(cod.objItemData).get(delegateID,itemName)_LF		
				// hide item if parameter says so and the data is blank
				set data=##class(cod.objItemData).get(delegateID,itemName,controllerID)
				set isItemConcealed = ##class(cod.objItemName).isConcealed(itemName)
				set itemType = rs2.Get("type")
				if itemType = "checkbox" {
					if $zcvt(data, "l")="true" {
						set data=..translatePhrase("Yes")
					} else {
						set data=..translatePhrase("No")		
					}
				}
				if multiLingualAlts {
					if (itemType="radiobutton")!(itemType="dropdown")!(itemType="multibox") {
						set data=##class(cod.objItemAlternativeDetails).getFrontendTranslation(rs2.Get("objItemName"),data,languageID)
					}
				}
				
				if ..tagParameters["HIDEBLANK",data="" set skip=1
				if skip=0	{
					set out=out_"<tr>"
					if isGroupBookings {
						set out=out_"<td width=""15"">&nbsp;</td>"
						set out=out_"<td width=""10"">&nbsp;</td>"
						set out=out_"<td width=""10"">&nbsp;</td>"
					}
					set out=out_"<td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_itemQuestPrompt_"</font></td>"
					if 'isItemConcealed {
						set out=out_"<td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_data_"&nbsp;</font></td>"
					} else {
						set out=out_"<td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">*****"_"&nbsp;</font></td>"
					}
					set out=out_"</tr>"
				}
			}
			kill rs2	
			
			// and now guests
			set rs3=##class(%ResultSet).%New("cod.objItemData:qGetGuests")	
			do rs3.Execute(delegateID,controllerID)
			set guestCount=0
			while rs3.Next() {
				set guestCount=guestCount+1
				set guestID=rs3.Get("objPerson")
	
				set rs4=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
				do rs4.Prepare("SELECT * FROM sc_xModules.objCODitem WHERE (active=1 AND isGuest=1 AND isDelegate=0 AND (backendOnly IS NULL OR backendOnly=0 "_##class(EF.encoders.sql).doNotEncodeString(queryFilterBackEnd)_") AND parent->parent=?) ORDER BY displayOrder")
				do rs4.Execute(tmpPageID)
				// RQ 10-Oct-2011 - PBUG00004894 - Only output guest details when on correct page
				set doGuestDetailsHeader=1
				while rs4.Next() {
					if doGuestDetailsHeader {
						set doGuestDetailsHeader=0	
						//set out=out_"      "_..translatePhrase("Guest No.")_" "_guestCount_":"_LF
						set out=out_" <tr>"
						if isGroupBookings {
							set out=out_"  <td width=""100""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b>"_..translatePhrase("Guest")_" "_guestCount_":</b></font></td>"
							set out=out_"  <td width=""10"">&nbsp;</td>"
							set tmpName=##class(cod.objItemData).get(guestID,"salutation")_" "_##class(cod.objItemData).get(guestID,"firstname")_" "_##class(cod.objItemData).get(guestID,"lastname")
							set out=out_"  <td colspan=""3""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_tmpName_"</font></td>"
						} else {
							set tmpName=##class(cod.objItemData).get(guestID,"salutation")_" "_##class(cod.objItemData).get(guestID,"firstname")_" "_##class(cod.objItemData).get(guestID,"lastname")
							set out=out_"  <td colspan=3><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b>"_..translatePhrase("Guest")_" "_guestCount_":&nbsp;&nbsp;&nbsp;"_tmpName_"</b></font></td>"
						}
						set out=out_" </tr>"
					}
					set itemName=##class(cod.objItemName).getDescFromID(rs4.Get("objItemName"))
					set itemQuestPrompt=##class(sc.xModules.objCODitem).getQuestPrompt(rs4.Get("ID"),languageID)
					if itemQuestPrompt="" set itemQuestPrompt=itemName						
					set skip=0
					if $ZCVT(itemName,"U")="SALUTATION" set skip=1
					if $ZCVT(itemName,"U")="FIRSTNAME" set skip=1
					if $ZCVT(itemName,"U")="LASTNAME" set skip=1
					if $ZCVT(itemName,"U")="PASSWORD" set skip=1
					if $ZCVT(itemName,"U")="PASSWORD RE-TYPED" set skip=1
					

					// hide item if parameter says so and the data is blank
					set data=##class(cod.objItemData).get(guestID,itemName,controllerID)
					set isItemConcealed = ##class(cod.objItemName).isConcealed(itemName)
					set itemType = rs4.Get("type")
					if itemType = "checkbox" {
						set data = ##class(cod.methods).formatCheckboxDataForOuput(data)
					}
					if multiLingualAlts {
						if (itemType="radiobutton")!(itemType="dropdown")!(itemType="multibox") {
							set data=##class(cod.objItemAlternativeDetails).getFrontendTranslation(rs4.Get("objItemName"),data,languageID)
						}
					}
					
					if ..tagParameters["HIDEBLANK",data="" set skip=1
					if skip=0	{
						set out=out_"<tr>"
						if isGroupBookings {
							set out=out_"<td width=""15"">&nbsp;</td>"
							set out=out_"<td width=""10"">&nbsp;</td>"
							set out=out_"<td width=""10"">&nbsp;</td>"
						}
						set out=out_"<td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_itemQuestPrompt_"</font></td>"
						if 'isItemConcealed {
							set out=out_"<td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_data_"&nbsp;</font></td>"
						} else {
							set out=out_"<td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">*****"_"&nbsp;</font></td>"
						}
						set out=out_"</tr>"
					}
				}
				kill rs4
			}
			kill rs3
			set out=out_"<tr><td colspan=""5"">&nbsp;</td></tr>"
		}
	}	
	set out=out_"			</table>"
	set out=out_"		</td>"
	set out=out_"	</tr>"
	set out=out_"</table>"
	return out
]]></Implementation>
</Method>

<Method name="getTagReplacementForText">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tag=##class(EF.tags.base).dispatchTag("questPromptData",..tagProcessor)
	return tag.getTagReplacementForText()
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.registeredDays">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.registeredDays.CLS/EV.2
;vc; Component: CLS.EF.tags.tagDefinitions.registeredDays
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.registeredDays.CLS/EV.2</td><td>CLS.EF.tags.tagDefinitions.registeredDays</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64097,40590</TimeChanged>
<TimeCreated>64086,40674.621398</TimeCreated>

<Parameter name="tagName">
<Default>registeredDays</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set eventID=..tagProcessor.getEventID()
	set languageID=..tagProcessor.getLanguageID()
	set LF=..getLineFeedCharacter()
	set useCategoryDesc=##class(setup.lnkCategoryEvent).useCategoryDesc(eventID,languageID)
	set defaultCategoryDesc=$P(useCategoryDesc,"|",2)
	if ..tagProcessor.getMode()="html" {
		set defaultCategoryDesc=##class(EF.encoders.html).encodeHTMLContent(defaultCategoryDesc)
	}
	set isGroupBookings=+##class(setup.objEventSetting).getParameter("bookings","allow group bookings",eventID)
	
 	kill allRegPages,allRegPageIDs,allReg
	set ok=##class(setup.lnkCategoryEvent).getAllRegPages(eventID,languageID,1,.allRegPages,.allRegPageIDs,.allReg)
	set rs1=##class(%ResultSet).%New("links.lnkPersonPurchase:qPersonsByType")	
	do rs1.Execute(purchaseID,"delegate")
	set delCount=0
	kill categoryCount
	while rs1.Next() {
		set delCount=delCount+1
		set delegateID=rs1.Get("objPerson")
		set tmpEventCategory=rs1.Data("objEventCategory")
		set categoryDescription=allRegPages(tmpEventCategory)
		set categoryDescription=$ZCVT($E(categoryDescription,1),"U")_$ZCVT($E(categoryDescription,2,$L(categoryDescription)),"L")
		set categoryCount(tmpEventCategory)=$I(categoryCount(tmpEventCategory))
	
		set fullName=##class(cod.objItemData).get(delegateID,"firstname")_" "_##class(cod.objItemData).get(delegateID,"lastname")
		if isGroupBookings {
			if useCategoryDesc {
				set out=out_"  "_categoryDescription_" "_categoryCount(tmpEventCategory)_":"
			} else {
				set out=out_"  "_defaultCategoryDesc_" "_delCount_":"
			}
		}
		set out=out_" "_fullName_LF
		set rs=##class(%Library.ResultSet).%New("%Library.DynamicQuery:SQL")
	 	do rs.Prepare("SELECT * FROM links.lnkItemPerson WHERE (objPerson=?) AND (objItem->code = 'xEventDay') AND (objItem->objEvent=?)") 	
		do rs.Execute(delegateID,eventID)
			while rs.Next() {
			set out=out_##class(setup.objItemDetails).getDetails(rs.Get("objItem"),languageID)_LF
		}
		set out=out_LF
	}
	
	return out
]]></Implementation>
</Method>

<Method name="getAlternativeTagNames">
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[	return $LB("BOOKEDDAYS")
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.tableHostAndGuests">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.tableHostAndGuests.CLS/EV.1
;vc; Component: CLS.EF.tags.tagDefinitions.tableHostAndGuests
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.tableHostAndGuests.CLS/EV.1</td><td>CLS.EF.tags.tagDefinitions.tableHostAndGuests</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64089,62412</TimeChanged>
<TimeCreated>64083,60854.633508</TimeCreated>

<Parameter name="tagName">
<Default>tableHostAndGuests</Default>
</Parameter>

<Method name="getTagReplacementForHTML">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set eventID=..tagProcessor.getEventID()
	// first check if group booking is turned on.
	set isGroupBookings=+##class(setup.objEventSetting).getParameter("bookings","allow group bookings",eventID)
	if isGroupBookings {
		set guestCount=0
		set bookerID=##class(eCom.objPurchase).getBookerID(purchaseID)
		&SQL(SELECT id INTO :lnkHostID FROM links.lnkPersonPurchase WHERE objPurchase=:purchaseID AND objPerson=:bookerID) 	
		if +SQLCODE=0 {
			set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
			do rs.Prepare("SELECT *,objTable,objTable->description As tableDesc,occupiedBy->objPerson,objTable->bookedBy AS tableBookedBy FROM setup.objSeat WHERE bookedBy=?")
			do rs.Execute(lnkHostID)
			while rs.Next() {
				set guestID=rs.Get("objPerson")
				if guestID {
					set tableID=rs.Get("objTable")
					set tableDesc=rs.Get("tableDesc")
					set isSeat=1
					if rs.Get("tableBookedBy") {
						set isSeat=0
					}
					if isSeat {
						set tableDesc="SEAT"
						set tableID=0
					}
					set tableDescInd=$E(tableDesc,1,150)
					set tableGuests(isSeat,tableDescInd,tableID,guestID)=""
					set tableGuests(isSeat,tableDescInd,tableID)=tableDesc
				}
			}
			set out=out_"  <table width='100%' border=0 cellpadding=2 cellspacing=0 bgcolor='#FFFFFF'>"
			set (tableDescInd,tableID,guestID,isSeat)=""
			for {
				set isSeat=$o(tableGuests(isSeat))
				if isSeat="" quit
				for {
					set tableDescInd=$o(tableGuests(isSeat,tableDescInd))
					if tableDescInd="" quit
					for {
						set tableID=$o(tableGuests(isSeat,tableDescInd,tableID))
						if tableID="" quit
						set tableDesc=tableGuests(isSeat,tableDescInd,tableID)
						set out=out_" <tr>"
						if isSeat {
							set desc=..translatePhrase("Individual Seats")
						} else {
							set desc=..translatePhrase("Table")_": "_tableDesc
						}
						set out=out_"  <td colspan=4 height=25><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_desc_"</font></td>"
						set out=out_"</tr>"
						set out=out_" <tr>"
						set out=out_"<td width=""60"" style=""border-bottom: 1px solid Black;"">&nbsp;</td>"
						set out=out_"  <td width="""" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_..translatePhrase("First name")_"</font></td>"
						set out=out_"  <td width="""" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_..translatePhrase("Last name")_"</font></td>"
						set out=out_"  <td width="""" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_..translatePhrase("Company")_"</font></td>"
						set out=out_"</tr>"
						set guestCount=0
						for {
							set guestID=$o(tableGuests(isSeat,tableDescInd,tableID,guestID))
							if guestID="" quit
							set guestCount = $I(guestCount)
							set out=out_" <tr>"
							// Check whether person is the host
							set isHost=0
							if $ZCVT(##class(cod.objItemData).get(guestID,"firstname"),"L")=$ZCVT(##class(cod.objItemData).get(bookerID,"firstname"),"L") {
								if $ZCVT(##class(cod.objItemData).get(guestID,"lastname"),"L")=$ZCVT(##class(cod.objItemData).get(bookerID,"lastname"),"L") {
									set isHost=1
								}
							}
							set out=out_"  <td ><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_guestCount_" "_$S(isHost:..translatePhrase("Registration contact"),1:"")_"</font></td>"
							set out=out_"  <td width="""" ><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_##class(cod.objItemData).get(guestID,"firstname")_"</font></td>"
							set out=out_"  <td width="""" ><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_##class(cod.objItemData).get(guestID,"lastname")_"</font></td>"
							set out=out_"  <td width="""" ><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">"_##class(cod.objItemData).get(guestID,"company")_"</font></td>"
							set out=out_"</tr>"
						}
					}
				}
			}
			set out=out_"</table>"	
		}
	}
	return out
]]></Implementation>
</Method>

<Method name="getTagReplacementForText">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tag=##class(EF.tags.base).dispatchTag("tableHostAndGuestsText",..tagProcessor)
	return tag.getTagReplacementForText()
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagDefinitions.tableHostAndGuestsText">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagDefinitions.tableHostAndGuestsText.CLS/EV.0
;vc; Component: CLS.EF.tags.tagDefinitions.tableHostAndGuestsText
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagDefinitions.tableHostAndGuestsText.CLS/EV.0</td><td>CLS.EF.tags.tagDefinitions.tableHostAndGuestsText</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.base</Super>
<TimeChanged>64085,38429</TimeChanged>
<TimeCreated>64083,62304.015194</TimeCreated>

<Parameter name="tagName">
<Default>tableHostAndGuestsText</Default>
</Parameter>

<Method name="getTagReplacement">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=""
	set purchaseID=..tagProcessor.getPurchaseID()
	set eventID=..tagProcessor.getEventID()
	set LF=..getLineFeedCharacter()
	// first check if group booking is turned on.
	set isGroupBookings=+##class(setup.objEventSetting).getParameter("bookings","allow group bookings",eventID)
	if isGroupBookings {
		set bookerID=##class(eCom.objPurchase).getBookerID(purchaseID)
		&SQL(SELECT id INTO :lnkHostID FROM links.lnkPersonPurchase WHERE objPurchase=:purchaseID AND objPerson=:bookerID) 	
		if +SQLCODE=0 {
			set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
			do rs.Prepare("SELECT *,objTable,objTable->description As tableDesc,occupiedBy->objPerson,objTable->bookedBy AS tableBookedBy FROM setup.objSeat WHERE bookedBy=?")
			do rs.Execute(lnkHostID)
			while rs.Next() {
				set guestID=rs.Get("objPerson")
				if guestID {
					set tableID=rs.Get("objTable")
					set tableDesc=rs.Get("tableDesc")
					set isSeat=1
					if rs.Get("tableBookedBy") {
						set isSeat=0
					}
					if isSeat {
						set tableDesc="SEAT"
						set tableID=0
					}
					set tableDescInd=$E(tableDesc,1,150)
					set tableGuests(isSeat,tableDescInd,tableID,guestID)=""
					set tableGuests(isSeat,tableDescInd,tableID)=tableDesc
				}
			}
			set (tableDescInd,tableID,guestID,isSeat)=""
			for {
				set isSeat=$o(tableGuests(isSeat))
				if isSeat="" quit
				for {
					set tableDescInd=$o(tableGuests(isSeat,tableDescInd))
					if tableDescInd="" quit
					for {
						set tableID=$o(tableGuests(isSeat,tableDescInd,tableID))
						if tableID="" quit
						if isSeat {
							set out=out_..translatePhrase("Individual Seats")
						} else {
							set out=out_..translatePhrase("Table")_": "_tableDesc
						}
						set out=out_LF
						set guestCount=0
						for {
							set guestID=$o(tableGuests(isSeat,tableDescInd,tableID,guestID))
							if guestID="" quit
							set out = out_$I(guestCount)
							// Check whether person is the host
							if $ZCVT(##class(cod.objItemData).get(guestID,"firstname"),"L")=$ZCVT(##class(cod.objItemData).get(bookerID,"firstname"),"L") {
								if $ZCVT(##class(cod.objItemData).get(guestID,"lastname"),"L")=$ZCVT(##class(cod.objItemData).get(bookerID,"lastname"),"L") {
									set out=out_" "_..translatePhrase("(Registration contact)")
								}
							}
							set out=out_" : "_##class(cod.objItemData).get(guestID,"firstname")_" "_##class(cod.objItemData).get(guestID,"lastname")
							if ##class(cod.objItemData).get(guestID,"company")'="" {
								set out = out_" "_..translatePhrase("of company:")_" "_##class(cod.objItemData).get(guestID,"company")
							}
							set out=out_LF
						}
					}
				}
				
			}
		}
	}
	return out
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagProcessor">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagProcessor.CLS/EV.7
;vc; Component: CLS.EF.tags.tagProcessor
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagProcessor.CLS/EV.7</td><td>CLS.EF.tags.tagProcessor</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<Super>%RegisteredObject</Super>
<TimeChanged>64138,38299</TimeChanged>
<TimeCreated>64076,56280.405234</TimeCreated>

<Property name="mailMergeParams">
<Type>%String</Type>
</Property>

<Property name="mailBuilder">
<Type>mail.mailBuilder</Type>
</Property>

<Property name="originalString">
<Type>%String</Type>
</Property>

<Property name="pdfDownloads">
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="languageID">
<Type>%Integer</Type>
</Property>

<Property name="tagFound">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="eventConfiguration">
<Type>setup.eventConfiguration</Type>
</Property>

<Parameter name="mode">
</Parameter>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>inString:%String,languageID:%Integer,params:%String,mailBuilder:mail.mailBuilder=""</FormalSpec>
<ReturnType>EF.tags.tagProcessor</ReturnType>
<Implementation><![CDATA[
	set tagProcessor=..%New()
	set tagProcessor.mailMergeParams=params
	set tagProcessor.originalString=inString
	set tagProcessor.languageID=languageID
	if $IsObject(mailBuilder) {
		set tagProcessor.mailBuilder=mailBuilder
	}
	return tagProcessor
]]></Implementation>
</Method>

<Method name="getStringWithReplacedTags">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set inStream=##class(%Stream.GlobalCharacter).%New()
	do inStream.Rewind()
	do inStream.Write(..originalString)
	set outStream=##class(%Stream.GlobalCharacter).%New()
	set dependentStream=##class(%Stream.GlobalCharacter).%New()
	
	set string=""
	set startDelim="{{",endDelim="}}"
	set delim1Len=$l(startDelim),delim2Len=$l(endDelim)
	set len=30000
	set maxTagLen=100
	
	// Flag marking whether we write to the stream
	set write=1
	set eventID = ..getEventID()
	for {
		if inStream.AtEnd {
			if write do outStream.Write(string)
			quit
		}
		set string=string_inStream.Read(len)
		set stringLen=$l(string)
		set position=1
		set carryOver=delim1Len-1
		for {
			set delimPos=$F(string,startDelim,position)
			if 'delimPos {
				quit
			}
			set endDelimPos=$F(string,endDelim,delimPos)
			if 'endDelimPos {
				if delimPos>(stringLen-maxTagLen) set carryOver=stringLen-(delimPos-delim1Len)
				quit
			}
			set nextDelimPos=$F(string,startDelim,delimPos)
			if endDelimPos,('nextDelimPos)!(endDelimPos<nextDelimPos) {	
				if write do outStream.Write($e(string,position,delimPos-delim1Len-1))
				set tag=$e(string,delimPos-delim1Len,endDelimPos-1)
				if $P($p($ZCVT(tag,"U"),":",1),"{{",2)="DEPENDENTBLOCK" {
					set write=..showDependentBlock(tag)
				} elseif $p($p($ZCVT(tag,"U"),"{{",2),"}}",1)="/DEPENDENTBLOCK" {
					set write=1
				} else {
					// tag replacement
					set tagName=$p($p(tag,"{{",2),"}}",1)
					if write {
						do outStream.Write(..getTagReplacement(tagName))
					}
				}
				// tag replacement end
				set position=endDelimPos
			} else {
				set position=delimPos
			}
			if position>(stringLen-delim1Len) set carryOver=stringLen-position
		}
		// we need to keep end of string in case delimeter goes over end of string
		if write do outStream.Write($e(string,position,stringLen-carryOver))
		set string=$e(string,stringLen-(carryOver-1),stringLen)
	}
	return outStream.Read(outStream.Size)
]]></Implementation>
</Method>

<Method name="showDependentBlock">
<FormalSpec>inTag</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	
	//strip the delimieters off
	set tagMixed=$p($p(inTag,"{{",2),"}}",1)
 	set tag=$ZCVT(tagMixed,"U") 
	
	set xControllerID=##class(setup.objEvent).getControllerID(..getEventID())
	set showTag=1
	
	if $p(tag,":")="DEPENDENTBLOCK" {
		set codItem=$p($p(tag,":",2),"=",1)
		set result=$p($p($p(tag,":",2),"=",2),"|%|NEWFORMATTAG",1) // pjc 2012-02-28 PADH00002332 - |^|newFormatTag suffix identifies dep blocks added after the changes covered by this change request
		set personID=$p($p($p(..mailMergeParams,"cod.objPerson",2),"*$*",1),"*=*",2)
		set tmpResult=##class(shared.pCSP).EscapeHTML(##class(cod.objItemData).get(personID,codItem,xControllerID))
		/// RQ 05-Dec-2011 PBUG00005538 - need to escape additional characters which are escaped in moxie, e.g. "£"
		set tmpResult=##class(shared.stringFunctions).EscapeHTMLExtra(tmpResult)
		if $ZCVT(tmpResult,"U")'=##class(shared.stringFunctions).EscapeHTMLExtra(result) set showTag=0
	}
	quit showTag
]]></Implementation>
</Method>

<Method name="getTagReplacement">
<FormalSpec>tag</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tagReplacement=""
	try {
		set tagObject=##class(EF.tags.base).dispatchTag(tag,$this)
		if $IsObject(tagObject) {
			if ..getMode()="html" {
				set tagReplacement=tagObject.getTagReplacementForHTML()
			} else {
				set tagReplacement=tagObject.getTagReplacementForText()	
			}
			set ..tagFound=1
		} else {
			
			
			set tagReplacement=..getLegacyTagReplacement(tag)
			
		}
	} catch errObj {
		set tagReplacement=..handleTagError(errObj.DisplayString(),tag)
	}
	
	return tagReplacement
]]></Implementation>
</Method>

<Method name="getLegacyTagReplacement">
<FormalSpec>tag</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set urlEncodeOuput=0
	if $ZCVT($p(tag,":",*),"U")="URLENCODE" {
		set urlEncodeOuput=1
		set tag=$p(tag,":",1,*-1)
	}
	set outString=..getLegacyTag(tag)
	
	if urlEncodeOuput {
		set outString=##class(EF.htmlGenerator).encodeForURL(outString)	 
	}
	return $p(outString,"*$*",2)
]]></Implementation>
</Method>

<Method name="getLegacyTag">
<FormalSpec>tag</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tagName=$ZCVT($p(tag,":",1),"U")
	set p1Mixed=$P(tag,":",2,99)
	set p1=$ZCVT(p1Mixed,"U")
	set params=..mailMergeParams
	set xEventID=..getEventID()
	set xLangID=..getLanguageID()
	set xDateFormat=..getDateFormat()
	set xControllerID=""
	if xEventID {
		set xControllerID=##class(setup.objEvent).getControllerID(xEventID)
	}
	set mode=..getMode()
	set LF=$S(mode="html":"<br>",1:$C(13,10))
	
	// To be removed
	if tagName="ADDITIONALITEMNAME" {
	  set out=##class(mail.tags.personal).ADDITIONALITEMNAME(params,xLangID)
	 } elseif tagName="ALTCODE" {
	  set out=##class(mail.tags.personal).ALTCODE(params,p1,xControllerID)
	 } elseif tagName="AMOUNT" {
	  set out=##class(mail.tags.purchaseFinancial).AMOUNT(params,mode)
	 } elseif tagName="AMOUNTOUTSTANDING" {
	  set out=##class(mail.tags.purchaseFinancial).AMOUNTOUTSTANDING(params,mode)
	 } elseif tagName="AMOUNTPAID" {
	  set out=##class(mail.tags.purchaseFinancial).AMOUNTPAID(params,mode)
	 } elseif tagName="ATTENDEECATEGORY" {
	  set out=##class(mail.tags.personal).ATTENDEECATEGORY(params,xLangID)
	 } elseif tagName="ATTENDEECOSTA1" {
	  set out=##class(mail.tags.purchaseFinancial).ATTENDEECOSTA1(params)
	 } elseif tagName="ATTENDEECOSTA2" {
	  set out=##class(mail.tags.purchaseFinancial).ATTENDEECOSTA2(params)
	 } elseif tagName="ATTENDEECOSTA3" {
	  set out=##class(mail.tags.purchaseFinancial).ATTENDEECOSTA3(params)
	 } elseif tagName="AUDITTRAIL" {
	  set out=##class(mail.tags.purchase).AUDITTRAIL(params,LF)
	 } elseif tagName="AUTHTRANSID" {
	  set out=##class(mail.tags.purchaseFinancial).PaymentGatewayTransactionID(params)
	 } elseif tagName="AWARDSCATEGORY" {
	  set out=##class(mail.tags.awards).AWARDSCATEGORY(params)
	 } elseif tagName="AWARDSENTRY" {
	  set out=##class(mail.tags.awards).AWARDSENTRY(params,p1)
	 } elseif tagName="AWARDSSECTION" {
	  set out=##class(mail.tags.awards).AWARDSSECTION(params)
	 } elseif tagName="AWARDSJUDGESLOGINLINK" {
	  set out=##class(mail.tags.event).AwardsJudgesLoginLink(params,xEventID,xLangID)
	 } elseif tagName="BOOKEDATTENDEESESSIONS" {
	  set out=##class(mail.tags.sessions).BOOKEDATTENDEESESSIONS(params,p1)
	 } elseif tagName="BOOKEDATTENDEESESSIONSCODES" {
	  set out=##class(mail.tags.sessions).BOOKEDATTENDEESESSIONSCODES(params)
	 } elseif tagName="BOOKEDDAYS" {
	  set out=##class(mail.tags.days).REGISTEREDDAYS(params)
	 } elseif tagName="BOOKEDDELEGATEDAYS" {
	  set out=##class(mail.tags.days).REGISTEREDATTENDEEDAYS(params,xLangID,xEventID)
	 } elseif tagName="BOOKEDDELEGATESESSIONS" {
	  set out=##class(mail.tags.sessions).BOOKEDATTENDEESESSIONS(params,p1)
	 } elseif tagName="BOOKEDDELEGATESESSIONSCODES" {
	  set out=##class(mail.tags.sessions).BOOKEDATTENDEESESSIONSCODES(params)
	 } elseif tagName="BOOKEDSESSIONNAMESLIST" {
	  set out=##class(mail.tags.sessions).BOOKEDSESSIONNAMESLIST(params,p1,LF,xLangID)
	 } elseif tagName="BOOKEDSESSIONS" {
	  set out=##class(mail.tags.sessions).BOOKEDSESSIONS(params,p1)
	 } elseif tagName="BOOKEDSESSIONSTABLEVIEW" {
	  set out=##class(mail.tags.sessions).BOOKEDSESSIONSTABLEVIEW(params,p1)
	 } elseif tagName="BOOKEDSESSIONTIMESLOCATIONSLIST" {
	  set out=##class(mail.tags.sessions).BOOKEDSESSIONTIMESLOCATIONSLIST(params,p1,LF,xLangID)
	 } elseif tagName="BOOKERSNAME" {
	  set out=##class(mail.tags.purchase).REGISTRATIONCONTACTSNAME(params,xEventID)
	 } elseif tagName="BOOKINGREF" {
	  set out=##class(mail.tags.purchase).REGISTRATIONREF(params,xEventID)
	 } elseif tagName="CANCELPRICE" {
	  set out=##class(mail.tags.purchaseFinancial).CANCELPRICE(params)
	 } elseif tagName="COD" {
	  set out=##class(mail.tags.personal).COD(params,p1,xControllerID,xLangID,LF)
	 } elseif tagName="CODLASTCHANGES" {
	  set out=##class(mail.tags.personal).CODLASTCHANGES(params,p1,mode,LF)
	 } elseif tagName="CODLASTCHANGESADMIN" {
	  set out=##class(mail.tags.personal).CODLASTCHANGESADMIN(params,p1,mode,LF)
	 } elseif tagName="CREDITCARDDETAILS" {
	  set out=##class(mail.tags.purchaseFinancial).CREDITCARDDETAILS(params)
	 } elseif tagName="CALENDARLINK" {
	  set out=##class(mail.tags.event).CalendarLink(params,xEventID,xLangID)
	 } elseif tagName="CUSTOMEVENTFIELD" {
	  set out=##class(mail.tags.event).CustomEventField(params,p1,xEventID)
	 } elseif tagName="DAYCAPACITY" {
	  set out=##class(mail.tags.days).DAYCAPACITY(params)
	 } elseif tagName="DAYNAME" {
	  set out=##class(mail.tags.days).DAYNAME(params,xLangID)
	 } elseif tagName="DAYNUMBER" {
	  set out=##class(mail.tags.days).DAYNUMBER(params)
	 } elseif tagName="DAYSTOEVENT" {
	  set out=##class(mail.tags.event).DAYSTOEVENT(params,xEventID)
	 } elseif tagName="DCTRANSID" {
	  set out=##class(mail.tags.purchaseFinancial).PaymentGatewayTransactionID(params)
	 } elseif tagName="DELEGATECOSTA1" {
	  set out=##class(mail.tags.purchaseFinancial).ATTENDEECOSTA1(params)
	 } elseif tagName="DELEGATECOSTA2" {
	  set out=##class(mail.tags.purchaseFinancial).ATTENDEECOSTA2(params)
	 } elseif tagName="DELEGATECOSTA3" {
	  set out=##class(mail.tags.purchaseFinancial).ATTENDEECOSTA3(params)
	 } elseif tagName="ENTRYLIST" {
	  set out=##class(mail.tags.awards).ENTRYLIST(params,p1,mode,xLangID,xEventID,LF)
	 } elseif tagName="ENTRYLISTTEXT" {
	  set out=##class(mail.tags.awards).ENTRYLISTTEXT(params,p1,mode,xLangID,xEventID,LF)
	 } elseif tagName="EVENTDATE" {
	  set out=##class(mail.tags.event).EVENTDATE(params,xEventID,p1Mixed)
	 } elseif tagName="EVENTDESC" {
	  set out=##class(mail.tags.event).EVENTDESC(params,xEventID)
	 } elseif tagName="EVENTENDDATE" {
	  set out=##class(mail.tags.event).EVENTENDDATE(params,xEventID,p1Mixed)
	 } elseif tagName="EVENTLINK" {
	  set out=##class(mail.tags.event).EVENTLINK(params,p1)
	 } elseif tagName="EVENTPAGELINK" {
	  set out=##class(mail.tags.event).EVENTPAGELINK(params,p1)
	 } elseif tagName="EVENTPIN" {
	  set out=##class(mail.tags.personal).EVENTPIN(params)
	 } elseif tagName="EVENTSTARTDATE" {
	  set out=##class(mail.tags.event).EVENTSTARTDATE(params,xEventID,p1Mixed)
	 } elseif tagName="EVMANTASKDESC" {
	  set out=##class(mail.tags.evMan).EVMANTASKDESC(params)
	 } elseif tagName="EVMANTASKDUEDATE" {
	  set out=##class(mail.tags.evMan).EVMANTASKDUEDATE(params,xDateFormat)
	 } elseif tagName="EVMANTASKDURATION" {
	  set out=##class(mail.tags.evMan).EVMANTASKDURATION(params)
	 } elseif tagName="EVMANTASKSTATUS" {
	  set out=##class(mail.tags.evMan).EVMANTASKSTATUS(params)
	 } elseif tagName="EVMANTASKTYPE" {
	  set out=##class(mail.tags.evMan).EVMANTASKTYPE(params)
	 } elseif tagName="EVENTENDTIME" {
	  set out=##class(mail.tags.event).eventEndTime(xEventID)
	 } elseif tagName="EVENTSTARTTIME" {
	  set out=##class(mail.tags.event).eventStartTime(xEventID)
	 } elseif tagName="FULLADDRESS" {
	  set out=##class(mail.tags.personal).FULLADDRESS(params,LF,p1)
	 } elseif tagName="FULLNAME" {
	  set out=##class(mail.tags.personal).FULLNAME(params)
	 } elseif tagName="LASTAMOUNTPAID" {
	  set out=##class(mail.tags.purchaseFinancial).LASTAMOUNTPAID(params,mode)
	 } elseif tagName="LASTPAYMENTDETAILS" {
	  set out=##class(mail.tags.purchaseFinancial).LASTPAYMENTDETAILS(params,xLangID,mode)
	 } elseif tagName="LOCATION" {
	  set out=##class(mail.tags.sessions).LOCATION(params,xLangID)
	 } elseif tagName="MEETINGATTENDEES" {
	  set out=##class(mail.tags.meetMan).MEETINGATTENDEES(params,xLangID,xEventID,mode)
	 } elseif tagName="MEETINGDATA" {
	  set out=##class(mail.tags.meetMan).MEETINGDATA(params,p1,mode)
	 } elseif tagName="MEETINGDATAALL" {
	  set out=##class(mail.tags.meetMan).MEETINGDATAALL(params,p1,xDateFormat,mode)
	 } elseif tagName="MEETINGDATE" {
	  set out=##class(mail.tags.meetMan).MEETINGDATE(params,xEventID,xDateFormat,mode)
	 } elseif tagName="MEETINGDESCRIPTION" {
	  set out=##class(mail.tags.meetMan).MEETINGDESCRIPTION(params,xLangID,xEventID,mode)
	 } elseif tagName="MEETINGLIST" {
	  set out=##class(mail.tags.meetMan).MEETINGLIST(params,mode)
	 } elseif tagName="MEETINGLOCATION" {
	  set out=##class(mail.tags.meetMan).MEETINGLOCATION(params,xLangID,mode)
	 } elseif tagName="MEETINGNAME" {
	  set out=##class(mail.tags.meetMan).MEETINGNAME(params,mode)
	 } elseif tagName="MEETINGORGANISER" {
	  set out=##class(mail.tags.meetMan).MEETINGORGANISER(params,mode)
	 } elseif tagName="MEETINGSTATUS" {
	  set out=##class(mail.tags.meetMan).MEETINGSTATUS(params,mode)
	 } elseif tagName="MEETINGTIME" {
	  set out=##class(mail.tags.meetMan).MEETINGTIME(params,xEventID,mode)
	 } elseif tagName="MEETINGTYPE" {
	  set out=##class(mail.tags.meetMan).MEETINGTYPE(params,xLangID,mode)
	 } elseif tagName="MEETINGDIARYLOGINLINK" {
	  set out=##class(mail.tags.event).MeetingDiaryLoginLink(params,xEventID,xLangID)
	 } elseif tagName="NBTRANSID" {
	  set out=##class(mail.tags.purchaseFinancial).PaymentGatewayTransactionID(params)
	 } elseif tagName="NOW" {
	  set out=##class(mail.tags.general).NOW(xEventID)
	 } elseif tagName="OGONETRANSID" {
	  set out=##class(mail.tags.purchaseFinancial).PaymentGatewayTransactionID(params)
	 } elseif tagName="PASSWORD" {
	  set out=##class(mail.tags.personal).PASSWORD(params)
	 } elseif tagName="PAYMENTTYPE" {
	  set out=##class(mail.tags.purchase).PAYMENTTYPE(params,xLangID)
	 } elseif tagName="PAYPALTRANSID" {
	  set out=##class(mail.tags.purchaseFinancial).PaymentGatewayTransactionID(params)
	 } elseif tagName="PERSONID" {
	  set out=##class(mail.tags.personal).PERSONID(params)
	 } elseif tagName="PICTURE" {
	  set out=##class(mail.tags.personal).PICTURE(params,p1,xEventID,xControllerID)
	 } elseif tagName="PROTXTRANSID" {
	  set out=##class(mail.tags.purchaseFinancial).PaymentGatewayTransactionID(params)
	 } elseif tagName="PURCHASEDATE" {
	  set out=##class(mail.tags.purchase).PURCHASEDATE(params)
	 } elseif tagName="PAYMENTGATEWAYTRANSACTIONID" {
	  set out=##class(mail.tags.purchaseFinancial).PaymentGatewayTransactionID(params)
	 } elseif tagName="PERSONALABSTRACTREVIEWERLINK" {
	  set out=##class(mail.tags.event).PersonalAbstractReviewerLink(params,xEventID,xLangID)
	 } elseif tagName="PERSONALABSTRACTSUBMISSIONLINK" {
	  set out=##class(mail.tags.event).PersonalAbstractSubmissionLink(params,xEventID,xLangID)
	 } elseif tagName="PERSONALAMENDMENTLINK" {
	  set out=##class(mail.tags.event).PersonalAmendmentLink(params,xEventID,xLangID)
	 } elseif tagName="PERSONALAWARDSJUDGELINK" {
	  set out=##class(mail.tags.event).PersonalAwardsJudgeLink(params,xEventID,xLangID)
	 } elseif tagName="PERSONALDECLINELINK" {
	  set out=##class(mail.tags.event).PersonalDeclineLink(params,xEventID,xLangID)
	 } elseif tagName="PERSONALDIARYLINK" {
	  set out=##class(mail.tags.event).PersonalDiaryLink(params,xEventID,xLangID)
	 } elseif tagName="PERSONALEVENTLINK" {
	  set out=##class(mail.tags.event).PersonalEventLink(params,xEventID,xLangID)
	 } elseif tagName="PERSONALREGISTRATIONLINK" {
	  set out=##class(mail.tags.event).PersonalRegistrationLink(params,xEventID,xLangID)
	 } elseif tagName="QUANTITYITEMNAME" {
	  set out=##class(mail.tags.personal).QUANTITYITEMNAME(params)
	 } elseif tagName="REGISTEREDATTENDEEDAYS" {
	  set out=##class(mail.tags.days).REGISTEREDATTENDEEDAYS(params,xLangID,xEventID)
	 } elseif tagName="REGISTEREDDAYS" {
	  set out=##class(mail.tags.days).REGISTEREDDAYS(params)
	 } elseif tagName="REGISTRATIONCONTACTSNAME" {
	  set out=##class(mail.tags.purchase).REGISTRATIONCONTACTSNAME(params,xEventID)
	 } elseif tagName="REGISTRATIONREF" {
	  set out=##class(mail.tags.purchase).REGISTRATIONREF(params,xEventID)
	 } elseif tagName="SAGEPAYTRANSID" {
	  set out=##class(mail.tags.purchaseFinancial).PaymentGatewayTransactionID(params)
	 } elseif tagName="SESSIONBOOKINGS" {
	  set out=##class(mail.tags.sessions).SESSIONREGISTRATIONS(params)
	 } elseif tagName="SESSIONCAPACITY" {
	  set out=##class(mail.tags.sessions).SESSIONCAPACITY(params)
	 } elseif tagName="SESSIONDATE" {
	  set out=##class(mail.tags.sessions).SESSIONDATE(params)
	 } elseif tagName="SESSIONDATETIME" {
	  set out=##class(mail.tags.sessions).SESSIONDATETIME(params)
	 } elseif tagName="SESSIONNAME" {
	  set out=##class(mail.tags.sessions).SESSIONNAME(params,xLangID)
	 } elseif tagName="SESSIONREGISTRATIONS" {
	  set out=##class(mail.tags.sessions).SESSIONREGISTRATIONS(params)
	 } elseif tagName="SESSIONTIME" {
	  set out=##class(mail.tags.sessions).SESSIONTIME(params)
	 } elseif tagName="SOFTEVENTPROMPT" {
	  set out=##class(mail.tags.event).SOFTEVENTPROMPT(params,p1,xEventID)
	 } elseif tagName="SPECIALINSTRUCTIONS" {
	  set out=##class(mail.tags.sessions).SPECIALINSTRUCTIONS(params,xLangID,LF)
	 } elseif tagName="TODAY" {
	  set out=##class(mail.tags.general).TODAY(xEventID)
	 } elseif tagName="URL" {
	  set out=##class(mail.tags.general).URL(params)
	 } elseif tagName="VENUENAME" {
	  set out=##class(mail.tags.event).VENUENAME(xEventID)
	 } elseif tagName="WPTRANSID" {
	  set out=##class(mail.tags.purchaseFinancial).PaymentGatewayTransactionID(params)
	 } else { 
	  throw ##class(shared.exceptions.generalException).%New("tag not found")
	 }
	 return out
]]></Implementation>
</Method>

<Method name="getPurchaseID">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	return $p($p($p(..mailMergeParams,"eCom.objPurchase",2),"*$*",1),"*=*",2)
]]></Implementation>
</Method>

<Method name="getPersonID">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	return $p($p($p(..mailMergeParams,"cod.objPerson",2),"*$*",1),"*=*",2)
]]></Implementation>
</Method>

<Method name="getInvoiceID">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	return $p($p($p(..mailMergeParams,"eCom.objInvoice",2),"*$*",1),"*=*",2)
]]></Implementation>
</Method>

<Method name="getPreRegisterID">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	return $p($p($p(..mailMergeParams,"setup.objPreRegister",2),"*$*",1),"*=*",2)
]]></Implementation>
</Method>

<Method name="getSessionItemID">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	return $p($p($p(..mailMergeParams,"setup.objItem",2),"*$*",1),"*=*",2)
]]></Implementation>
</Method>

<Method name="getDayItemID">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	return $p($p($p(..mailMergeParams,"setup.objItem",2),"*$*",1),"*=*",2)
]]></Implementation>
</Method>

<Method name="getAbstractDocumentID">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	return ..getAbstractDocument().%Id()
]]></Implementation>
</Method>

<Method name="getAbstractDocument">
<ReturnType>abstract.objDocument</ReturnType>
<Implementation><![CDATA[
	set documentID=$p($p($p(..mailMergeParams,"abstract.objDocument",2),"*$*",1),"*=*",2)
	if documentID="" {
		throw ##class(shared.exceptions.generalException).%New("abstract.objDocument param is not defined for tag")
	}
	set objDocument=##class(abstract.objDocument).%OpenId(documentID)
	if '$IsObject(objDocument) {
		throw ##class(shared.exceptions.generalException).%New("abstract.objDocument param is not valid")
	}
	
	return objDocument
]]></Implementation>
</Method>

<Method name="getItemIDFromAbstractDocument">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	#dim objDocument As abstract.objDocument = ..getAbstractDocument()
	if $IsObject(objDocument.objItem) {
		return objDocument.objItem.%Id()
	}
	return ""
]]></Implementation>
</Method>

<Method name="getEventID">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	return ..findEventIDFromMailMergeParams(..mailMergeParams)
]]></Implementation>
</Method>

<Method name="getEventConfiguration">
<ReturnType>setup.eventConfiguration</ReturnType>
<Implementation><![CDATA[
	if '$IsObject(..eventConfiguration) {
		set ..eventConfiguration=##class(setup.eventConfiguration).createForEventID(..getEventID())
	}
	return ..eventConfiguration
]]></Implementation>
</Method>

<Method name="getEventDay">
<ReturnType>setup.eventDay</ReturnType>
<Implementation><![CDATA[
	set dayItemID=..getDayItemID()
	if dayItemID {
		set dayNumber=##class(setup.objItem).getDayNumber(dayItemID)
		return ..getEventConfiguration().getEventDays().getEventDay(dayNumber)	
	}
	return ""
]]></Implementation>
</Method>

<Method name="findEventIDFromMailMergeParams">
<ClassMethod>1</ClassMethod>
<FormalSpec>mailMergeParams:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set eventID=""
	if '$L(mailMergeParams) return eventID
	
	for i=1:1:$L(mailMergeParams,"*$*") {
		set nameValuePair=$P(mailMergeParams,"*$*",i)
		set param=$p(nameValuePair,"*=*",1)
		set value=$p(nameValuePair,"*=*",2)
		if param="setup.objEvent" {
			set eventID=value
		}
		if 'eventID {
			if param="eCom.objPurchase" {
				&SQL(SELECT objEvent INTO :tmp FROM eCom.objPurchase WHERE ID = :value)	
				if +SQLCODE=0 set eventID=tmp
			}
			if param="setup.objItem" {
				&SQL(SELECT objEvent INTO :tmp FROM setup.objitem WHERE ID = :value)	
				if +SQLCODE=0 set eventID=tmp
			}
			if param="meetMan.objMeeting" {
				&SQL(SELECT objDiary->objEvent INTO :tmp FROM meetMan.lnkMeetingDiary WHERE objMeeting = :value)	
				if +SQLCODE=0 set eventID=tmp
			}
			if param="setup.objPreRegister" {
				&SQL(SELECT objEvent INTO :tmp FROM setup.objPreRegister WHERE ID = :value)	
				if +SQLCODE=0 set eventID=tmp
			}
			//This is a new addition.
			if param="abstract.objDocument" {
				&SQL(SELECT objTopic->objEvent INTO :tmp FROM abstract.objDocument WHERE ID = :value)	
				if +SQLCODE=0 set eventID=tmp
			}

		}
	}
	return eventID
]]></Implementation>
</Method>

<Method name="getDateFormat">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set eventID=..getEventID()
	set dateFormat=##class(setup.objSetting).getParameter("system","defaultDateFormat")
	if eventID {
		set dateFormat=##class(setup.objEvent).getDateFormat(eventID)
	}
	return dateFormat
]]></Implementation>
</Method>

<Method name="getLanguageID">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	return ..languageID
]]></Implementation>
</Method>

<Method name="getMode">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ..#mode
]]></Implementation>
</Method>

<Method name="handleTagError">
<FormalSpec>error:%String,tag:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	if (($IsObject(..mailBuilder)) && (..mailBuilder.passErrorBack)) {
		do ..mailBuilder.addTagError(tag)
		if ($data(%session)){
			set %session.Data("eventsforce","backend","tagErrors",tag)=error_"*"_..mailMergeParams
		}
	} else {
		set ^tagErrors("ERROR",$I(^tagErrors("ERROR")),+$h,$ZT($p($h,",",2),2))=error_"*"_tag_"*"_..mailMergeParams	
	}
 	return ""
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagProcessorForEmailHtml">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagProcessorForEmailHtml.CLS/EV.0
;vc; Component: CLS.EF.tags.tagProcessorForEmailHtml
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagProcessorForEmailHtml.CLS/EV.0</td><td>CLS.EF.tags.tagProcessorForEmailHtml</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.tagProcessor</Super>
<TimeChanged>64076,56458</TimeChanged>
<TimeCreated>64076,56401.706431</TimeCreated>

<Parameter name="mode">
<Default>html</Default>
</Parameter>
</Class>


<Class name="EF.tags.tagProcessorForEmailText">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagProcessorForEmailText.CLS/EV.0
;vc; Component: CLS.EF.tags.tagProcessorForEmailText
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagProcessorForEmailText.CLS/EV.0</td><td>CLS.EF.tags.tagProcessorForEmailText</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.tagProcessor</Super>
<TimeChanged>64076,56447</TimeChanged>
<TimeCreated>64076,56342.002991</TimeCreated>

<Parameter name="mode">
<Default>text</Default>
</Parameter>
</Class>


<Class name="EF.tags.tagProcessorForLetterHtml">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagProcessorForLetterHtml.CLS/EV.0
;vc; Component: CLS.EF.tags.tagProcessorForLetterHtml
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagProcessorForLetterHtml.CLS/EV.0</td><td>CLS.EF.tags.tagProcessorForLetterHtml</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.tagProcessor</Super>
<TimeChanged>64086,62792</TimeChanged>
<TimeCreated>64076,56470.605668</TimeCreated>

<Parameter name="mode">
<Default>html</Default>
</Parameter>
</Class>


<Class name="EF.tags.tagProcessorForPDF">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagProcessorForPDF.CLS/EV.0
;vc; Component: CLS.EF.tags.tagProcessorForPDF
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagProcessorForPDF.CLS/EV.0</td><td>CLS.EF.tags.tagProcessorForPDF</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.tagProcessor</Super>
<TimeChanged>64086,53091</TimeChanged>
<TimeCreated>64076,56470.605668</TimeCreated>

<Parameter name="mode">
<Default>text</Default>
</Parameter>
</Class>


<Class name="EF.tags.tagProcessorForWordHtml">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagProcessorForWordHtml.CLS/EV.0
;vc; Component: CLS.EF.tags.tagProcessorForWordHtml
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagProcessorForWordHtml.CLS/EV.0</td><td>CLS.EF.tags.tagProcessorForWordHtml</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.tags.tagProcessor</Super>
<TimeChanged>64086,53611</TimeChanged>
<TimeCreated>64076,56470.605668</TimeCreated>

<Parameter name="mode">
<Default>html</Default>
</Parameter>
</Class>


<Class name="EF.tags.tagProcessorTest">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagProcessorTest.CLS/EV.5
;vc; Component: CLS.EF.tags.tagProcessorTest
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagProcessorTest.CLS/EV.5</td><td>CLS.EF.tags.tagProcessorTest</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>64139,37465</TimeChanged>
<TimeCreated>64077,65388.271101</TimeCreated>

<Parameter name="isIntegrationTest">
<Type>%Boolean</Type>
<Default>1</Default>
</Parameter>

<Method name="TestGroupBookings">
<Implementation><![CDATA[
	#define replaceTagEmailHTML(%tagName) ..getWithReplacedTagsForSingleTagEmailHTML(%tagName,mailMergeParams,eventID,.tagResults)
	#define replaceTagEmailText(%tagName) ..getWithReplacedTagsForSingleTagEmailText(%tagName,mailMergeParams,eventID,.tagResults)
	#define assertTagMatchEmailHTML(%tagName,%expectedResult) $$$AssertEquals($$$replaceTagEmailHTML(%tagName),%expectedResult,%tagName_" - html"),..logExpectedResult(%tagName,"html",%expectedResult,.tagResults)
	#define assertTagMatchEmailStream(%tagName,%expectedResult) $$$AssertEquals($$$replaceTagEmailHTML(%tagName).Read(100000),%expectedResult,%tagName_" - html"),..logExpectedResult(%tagName,"html",%expectedResult,.tagResults)
	#define assertTagMatchEmailText(%tagName,%expectedResult) $$$AssertEquals($$$replaceTagEmailText(%tagName),%expectedResult,%tagName_" - text"),..logExpectedResult(%tagName,"text",%expectedResult,.tagResults)
	#define assertTagMatchEmailHTMLURLEncode(%tagName,%expectedResult) $$$AssertEquals($$$replaceTagEmailText(%tagName_":URLEncode"),##class(EF.htmlGenerator).encodeForURL(%expectedResult),%tagName_":URLENCODE - html"),..logExpectedResult(%tagName_":URLEncode",##class(EF.htmlGenerator).encodeForURL(%expectedResult),"html",.tagResults)
	TSTART
	try {
		#dim tagProcessor As EF.tags.tagProcessorForEmailHtml
		#define paymentMethodID 1
		#define newAmountPaid ""
		#define sendEmails 0 
		#define markSessionComplete 1
		#define fromPaymentPortal 0
		#define updateAwardsPaymentStatus 0
		set langID=1
		set eventID=..createEventForGroupBookingEmailTesting()
		set controllerID=##class(setup.objEvent).getControllerID(eventID)
		
		set objSessionItem=##class(EF.utils.populate.sessions).createSessionForEvent(eventID,"Session in group","GBCODE","Session in group additional details")
		set sessionItemID=objSessionItem.%Id()
		
		set sessionID="EF-testGroupBookings"_$ZTS
		set tempPurchaseID=##class(EF.utils.populate.tempPurchase).createTempPurchase(sessionID,eventID)
		set tempPersonID=##class(EF.utils.populate.tempPurchase).createTempPerson(eventID,tempPurchaseID,1,1,0,"test booker firstname","test booker lastname","test.booker@xxx.xxx")
		do ##class(eCom.tempCodData).set(tempPersonID,"Address Line 1","test booker address line 1")
		do ##class(eCom.tempCodData).set(tempPersonID,"Address Line 2","test booker address line 2")
		do ##class(EF.utils.populate.tempPurchase).bookSession(tempPersonID,sessionItemID,eventID)
		do ##class(EF.utils.populate.tempPurchase).createTempPerson(eventID,tempPurchaseID,0,1,0,"test attendee firstname","test attendee lastname","test.attendee@xxx.xxx")
		do ##class(EF.utils.populate.tempPurchase).updateTempPurchase(tempPurchaseID)
		set purchaseID=##class(eCom.tempPurchase).createPurchase(sessionID,$$$newAmountPaid,$$$sendEmails,$$$markSessionComplete,$$$fromPaymentPortal,$$$updateAwardsPaymentStatus)
		
		do ##class(eCom.objPurchaseData).set(purchaseID,"xPrefLangID",langID)
	} catch errObj {
		TROLLBACK
		throw errObj	
	}
	set personID=##class(eCom.objPurchase).getBookerID(purchaseID)
	set preRegID=##class(setup.objPreRegister).addPersonToInvitationList(personID, eventID)
	set bookingRef=##class(eCom.objPurchaseData).get(purchaseID,"booking reference")
	set mailMergeParams="cod.objPerson*=*"_personID_"*$*eCom.objPurchase*=*"_purchaseID_"*$*setup.objEvent*=*"_eventID_"*$*mail.objMailShot*=*888"_"*$*setup.objPreRegister*=*"_preRegID
	
	set dateFormat=##class(setup.objEvent).getDateFormat(eventID)
	set vCardLinkURL=##class(shared.pageMethods).getFullPathVCard(eventID)_"/frontend/xt/sessionGetVcard.csp?eventID="_eventID_"&itemID="_sessionItemID
	set bookingRef=##class(eCom.objPurchaseData).get(purchaseID,"booking reference")
	
	// Event Links
	do $$$assertTagMatchEmailHTML("PersonalAmendmentLink",##class(access.objAccessTokenPersonalRegistrationAmend).getLatestTokenForPersonEvent(personID,eventID).getLinkURL())
	do $$$assertTagMatchEmailHTML("PersonalAwardsJudgeLink",##class(access.objAccessTokenPersonalAwardsJudge).getLatestTokenForPersonEvent(personID,eventID).getLinkURL())
	do $$$assertTagMatchEmailHTML("PersonalDeclineLink",##class(access.objAccessTokenPersonalDecline).getLatestTokenForPersonEvent(personID,eventID).getLinkURL())
	do $$$assertTagMatchEmailHTML("PersonalDiaryLink",##class(access.objAccessTokenPersonalMeetingManager).getLatestTokenForPersonEvent(personID,eventID).getLinkURL())
	do $$$assertTagMatchEmailHTML("PersonalEventLink",##class(access.objAccessTokenPersonalEvent).getLatestTokenForPersonEvent(personID,eventID).getLinkURL())
	do $$$assertTagMatchEmailHTML("PersonalRegistrationLink",##class(access.objAccessTokenPersonalRegistration).getLatestTokenForPersonEvent(personID,eventID).getLinkURL())
	do $$$assertTagMatchEmailHTML("PersonalAbstractReviewerLink",##class(access.objAccessTokenPersonalAbstractReviewer).getLatestTokenForPersonEvent(personID,eventID).getLinkURL())
	do $$$assertTagMatchEmailHTML("PersonalAbstractSubmissionLink",##class(access.objAccessTokenPersonalAbstractSubmission).getLatestTokenForPersonEvent(personID,eventID).getLinkURL())
	do $$$assertTagMatchEmailHTML("MeetingDiaryLoginLink",##class(shared.pageMethods).getFullPath(eventID)_"/frontend/reg/homepage.csp?pd="_personID_"&msID=888&eventID="_eventID_"&pageID="_##class(setup.objEventSetting).getParameter("meeting manager pages","Login PageID",eventID))
	do $$$assertTagMatchEmailHTML("EVENTLINK:"_eventID_"|REGISTER",##class(shared.pageMethods).getFullPath(eventID)_"/frontend/reg/homepage.csp?pd="_personID_"&msID=888&eventID="_eventID_"&page=registerNew.csp")
	do $$$assertTagMatchEmailHTML("EVENTPAGELINK:"_eventID_"|AMEND",##class(shared.pageMethods).getFullPath(eventID)_"/frontend/reg/homepage.csp?pd="_personID_"&msID=888&eventID="_eventID_"&page=registerAmend.csp")
	do $$$assertTagMatchEmailHTML("AwardsJudgesLoginLink",##class(shared.pageMethods).getFullPath(eventID)_"/frontend/reg/homepage.csp?pd="_personID_"&msID=888&eventID="_eventID_"&page=awardsJudgeLogin.csp")

	do $$$assertTagMatchEmailHTMLURLEncode("PersonalAmendmentLink",##class(access.objAccessTokenPersonalRegistrationAmend).getLatestTokenForPersonEvent(personID,eventID).getLinkURL())
	do $$$assertTagMatchEmailHTMLURLEncode("PersonalAwardsJudgeLink",##class(access.objAccessTokenPersonalAwardsJudge).getLatestTokenForPersonEvent(personID,eventID).getLinkURL())
	do $$$assertTagMatchEmailHTMLURLEncode("PersonalDeclineLink",##class(access.objAccessTokenPersonalDecline).getLatestTokenForPersonEvent(personID,eventID).getLinkURL())
	do $$$assertTagMatchEmailHTMLURLEncode("PersonalDiaryLink",##class(access.objAccessTokenPersonalMeetingManager).getLatestTokenForPersonEvent(personID,eventID).getLinkURL())
	do $$$assertTagMatchEmailHTMLURLEncode("PersonalEventLink",##class(access.objAccessTokenPersonalEvent).getLatestTokenForPersonEvent(personID,eventID).getLinkURL())
	do $$$assertTagMatchEmailHTMLURLEncode("PersonalRegistrationLink",##class(access.objAccessTokenPersonalRegistration).getLatestTokenForPersonEvent(personID,eventID).getLinkURL())
	do $$$assertTagMatchEmailHTMLURLEncode("PersonalAbstractReviewerLink",##class(access.objAccessTokenPersonalAbstractReviewer).getLatestTokenForPersonEvent(personID,eventID).getLinkURL())
	do $$$assertTagMatchEmailHTMLURLEncode("PersonalAbstractSubmissionLink",##class(access.objAccessTokenPersonalAbstractSubmission).getLatestTokenForPersonEvent(personID,eventID).getLinkURL())
	do $$$assertTagMatchEmailHTMLURLEncode("MeetingDiaryLoginLink",##class(shared.pageMethods).getFullPath(eventID)_"/frontend/reg/homepage.csp?pd="_personID_"&msID=888&eventID="_eventID_"&pageID="_##class(setup.objEventSetting).getParameter("meeting manager pages","Login PageID",eventID))
	do $$$assertTagMatchEmailHTMLURLEncode("EVENTLINK:"_eventID_"|REGISTER",##class(shared.pageMethods).getFullPath(eventID)_"/frontend/reg/homepage.csp?pd="_personID_"&msID=888&eventID="_eventID_"&page=registerNew.csp")
	do $$$assertTagMatchEmailHTMLURLEncode("EVENTPAGELINK:"_eventID_"|AMEND",##class(shared.pageMethods).getFullPath(eventID)_"/frontend/reg/homepage.csp?pd="_personID_"&msID=888&eventID="_eventID_"&page=registerAmend.csp")
	do $$$assertTagMatchEmailHTMLURLEncode("AwardsJudgesLoginLink",##class(shared.pageMethods).getFullPath(eventID)_"/frontend/reg/homepage.csp?pd="_personID_"&msID=888&eventID="_eventID_"&page=awardsJudgeLogin.csp")
	
		
	
	do $$$assertTagMatchEmailHTML("PDFDOWNLOAD",##class(shared.pageMethods).getFullPath(eventID)_"/frontend/xt/pdfDownload.csp?identifier=&eventID="_eventID)
	// Registration
	do $$$assertTagMatchEmailHTML("REGISTEREDATTENDEEDAYS","Day 1, Day 2, Day 3")
	do $$$assertTagMatchEmailHTML("REGISTEREDDAYS","  Attendee 1: test booker firstname test booker lastname<br>Day 1<br>Day 2<br>Day 3<br><br>  Attendee 2: test attendee firstname test attendee lastname<br>Day 1<br>Day 2<br>Day 3<br><br>")
	do $$$assertTagMatchEmailHTML("BOOKEDDAYS","  Attendee 1: test booker firstname test booker lastname<br>Day 1<br>Day 2<br>Day 3<br><br>  Attendee 2: test attendee firstname test attendee lastname<br>Day 1<br>Day 2<br>Day 3<br><br>")
	do $$$assertTagMatchEmailHTML("BOOKEDDELEGATEDAYS","Day 1, Day 2, Day 3")
	do $$$assertTagMatchEmailHTML("BOOKERSNAME","test booker firstname test booker lastname")
	do $$$assertTagMatchEmailHTML("BOOKINGREF",bookingRef)
	do $$$assertTagMatchEmailHTML("REGISTRATIONREF",bookingRef)
	do $$$assertTagMatchEmailHTML("REGISTRATIONCONTACTSNAME","test booker firstname test booker lastname")
	do $$$assertTagMatchEmailHTML("EventEndTime","17:00")
	do $$$assertTagMatchEmailHTML("EventStartTime","09:00")
	do $$$assertTagMatchEmailHTML("FULLADDRESS","test booker address line 1<br>test booker address line 2")
	do $$$assertTagMatchEmailHTML("FULLNAME","test booker firstname test booker lastname")
	do $$$assertTagMatchEmailHTML("GUESTLIST","All attendees:<br>  Attendee 1: test booker firstname test booker lastname<br>  Attendee 2: test attendee firstname test attendee lastname<br>")
	do $$$assertTagMatchEmailHTML("EVENTDATE","25/12/2025 to 27/12/2025")
	do $$$assertTagMatchEmailHTML("EVENTDESC","Email Testing Group Booking Event - Do Not Use")
	do $$$assertTagMatchEmailHTML("EVENTENDDATE","27/12/2025")
	do $$$assertTagMatchEmailHTML("BOOKEDATTENDEESESSIONS","<br>  Session in group, Default Location, 25/12/2025 09:00- 12:00, <a href='"_vCardLinkURL_"'>Add to calendar</a><br>")
	do $$$assertTagMatchEmailHTML("BOOKEDATTENDEESESSIONSCODES","GBCODE")
	do $$$assertTagMatchEmailHTML("BOOKEDDELEGATESESSIONS","<br>  Session in group, Default Location, 25/12/2025 09:00- 12:00, <a href='"_vCardLinkURL_"'>Add to calendar</a><br>")
	do $$$assertTagMatchEmailHTML("BOOKEDDELEGATESESSIONSCODES","GBCODE")
	do $$$assertTagMatchEmailHTML("BOOKEDSESSIONNAMESLIST","Thu<br>Session in group<br>")
	do $$$assertTagMatchEmailHTML("BOOKEDSESSIONS","<br>  Attendee 1: test booker firstname test booker lastname<br>  Session in group, Default Location, 25/12/2025 09:00 - 12:00, <a href='"_vCardLinkURL_"'>Add to calendar</a><br>  Attendee 2: test attendee firstname test attendee lastname<br>")
	do $$$assertTagMatchEmailHTML("BOOKEDSESSIONSTABLEVIEW","<table><tr><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>Attendee 1:&nbsp;</font></td><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>test booker firstname test booker lastname&nbsp;</font></td></tr><tr><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>Date:&nbsp;</font></td><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>25/12/2025&nbsp;</font></td></tr><tr><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>Time:&nbsp;</font></td><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>09:00 - 12:00&nbsp;</font></td></tr><tr><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>Name:&nbsp;</font></td><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>Session in group&nbsp;</font></td></tr><tr><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>Location:&nbsp;</font></td><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>Default Location&nbsp;</font></td></tr><tr><td>&nbsp;<font face='Verdana,Geneva,Arial,sans-serif' size='1'><a href='"_vCardLinkURL_"'>Add to calendar</a><tr><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>Attendee 2:&nbsp;</font></td><td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>test attendee firstname test attendee lastname&nbsp;</font></td></tr><tr><td>&nbsp;</td><td>&nbsp;</td></tr></table>")
	do $$$assertTagMatchEmailHTML("BOOKEDSESSIONTIMESLOCATIONSLIST","Thu<br>09:00 - 12:00  Default Location<br>")
	do $$$assertTagMatchEmailHTML("ALLREGDATATABLE","<table border='0' cellspacing='0' cellpadding='1' bgcolor='#000000'><tr> <td>  <table width='100%' border=0 cellpadding=2 cellspacing=0 bgcolor='#FFFFFF'> <tr>  <td width=""100""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b>Registration Contact's details</b></font></td>  <td width=""10"">&nbsp;</td>  <td colspan=""3""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b> test booker firstname test booker lastname</b></font></td> </tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Company</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Address Line 1</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">test booker address line 1&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Address Line 2</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">test booker address line 2&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Town</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Postcode</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Country</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Phone number</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td colspan=""5"">&nbsp;</td></tr> <tr>  <td width=""100""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b>Attendee 1:</b></font></td>  <td width=""10"">&nbsp;</td>  <td colspan=""3""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b> test booker firstname test booker lastname</b></font></td> </tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Company</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Address Line 1</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">test booker address line 1&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Address Line 2</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">test booker address line 2&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Town</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Postcode</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Country</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Phone number</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td colspan=""5"">&nbsp;</td></tr> <tr>  <td width=""100""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b>Attendee 2:</b></font></td>  <td width=""10"">&nbsp;</td>  <td colspan=""3""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b> test attendee firstname test attendee lastname</b></font></td> </tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Company</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Address Line 1</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Address Line 2</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Town</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Postcode</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Country</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Phone number</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td colspan=""5"">&nbsp;</td></tr>			</table>		</td>	</tr></table>")
    do $$$assertTagMatchEmailHTML("ALLREGDATA","  Registration contact's name:<br> test booker firstname test booker lastname<br>Registration Contact's Details:<br>  test booker firstname test booker lastname<br>    Company = <br>    Address Line 1 = test booker address line 1<br>    Address Line 2 = test booker address line 2<br>    Town = <br>    Postcode = <br>    Country = <br>    Phone number = <br><br>  Attendee 1:<br>  test booker firstname test booker lastname<br>    Company = <br>    Address Line 1 = test booker address line 1<br>    Address Line 2 = test booker address line 2<br>    Town = <br>    Postcode = <br>    Country = <br>    Phone number = <br><br>  Attendee 2:<br>  test attendee firstname test attendee lastname<br>    Company = <br>    Address Line 1 = <br>    Address Line 2 = <br>    Town = <br>    Postcode = <br>    Country = <br>    Phone number = <br><br>")
    do $$$assertTagMatchEmailHTML("QUESTPROMPTDATATABLE","<table border='0' cellspacing='0' cellpadding='1' bgcolor='#000000'><tr> <td>  <table width='100%' border=0 cellpadding=2 cellspacing=0 bgcolor='#FFFFFF'><tr height=0><td colspan=""5""></td></tr> <tr>  <td width=""100""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b>Registration Contact's Details</b></font></td>  <td width=""10"">&nbsp;</td>  <td colspan=""3""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b> test booker firstname test booker lastname</b></font></td> </tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Company</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Address line 1</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">test booker address line 1&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Address line 2</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">test booker address line 2&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Town</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Postcode</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Country</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Phone number</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td colspan=""5"">&nbsp;</td></tr> <tr>  <td width=""100""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b>Attendee 1:</b></font></td>  <td width=""10"">&nbsp;</td>  <td colspan=""3""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b> test booker firstname test booker lastname</b></font></td> </tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Company</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Address line 1</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">test booker address line 1&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Address line 2</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">test booker address line 2&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Town</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Postcode</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Country</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Phone number</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td colspan=""5"">&nbsp;</td></tr> <tr>  <td width=""100""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b>Attendee 2:</b></font></td>  <td width=""10"">&nbsp;</td>  <td colspan=""3""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""><b> test attendee firstname test attendee lastname</b></font></td> </tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Company</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Address line 1</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Address line 2</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Town</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Postcode</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Country</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td width=""15"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""10"">&nbsp;</td><td width=""275"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Phone number</font></td><td width=""200"" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">&nbsp;</font></td></tr><tr><td colspan=""5"">&nbsp;</td></tr>			</table>		</td>	</tr></table>")
    do $$$assertTagMatchEmailHTML("QUESTPROMPTDATA","  Registration contact's name:<br> test booker firstname test booker lastname<br>Registration Contact's Details:<br>  test booker firstname test booker lastname<br>    Company = <br>    Address line 1 = test booker address line 1<br>    Address line 2 = test booker address line 2<br>    Town = <br>    Postcode = <br>    Country = <br>    Phone number = <br><br>  Attendee 1:<br>  test booker firstname test booker lastname<br>    Company = <br>    Address line 1 = test booker address line 1<br>    Address line 2 = test booker address line 2<br>    Town = <br>    Postcode = <br>    Country = <br>    Phone number = <br><br>  Attendee 2:<br>  test attendee firstname test attendee lastname<br>    Company = <br>    Address line 1 = <br>    Address line 2 = <br>    Town = <br>    Postcode = <br>    Country = <br>    Phone number = <br><br>")
	do $$$assertTagMatchEmailHTML("PERSONID",personID)
	do $$$assertTagMatchEmailHTML("COD:FIRSTNAME","test booker firstname")
	do $$$assertTagMatchEmailHTML("ATTENDEECATEGORY","Attendee")
	do $$$assertTagMatchEmailHTML("CustomEventField:Venue Name","Test Venue")
	do $$$assertTagMatchEmailHTML("SOFTEVENTPROMPT:Venue Name","Test Venue")
	do $$$assertTagMatchEmailHTML("VENUENAME","Test Venue")
	do $$$assertTagMatchEmailHTML("DELEGATEITINERARY","<table border='0' cellspacing='0' cellpadding='1' bgcolor='#000000'>"_$c(9)_"<tr>"_$c(9,9)_"<td>"_$c(9,9,9)_"<table border=0 cellpadding=3 cellspacing=0 bgcolor='#FFFFFF'>"_$c(9,9,9,9)_"<tr>"_$c(9,9,9,9,9)_"<td width=100 nowrap><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Date</b></font></td>"_$c(9,9,9,9,9)_"<td width=150 align='left'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Time</b></font></td>"_$c(9,9,9,9,9)_"<td width=100 align='left'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Type</b></font></td>"_$c(9,9,9,9,9)_"<td width=250 align='left'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Description</b></font></td>"_$c(9,9,9,9,9)_"<td width=250 align='left'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Location</b></font></td>"_$c(9,9,9,9,9)_"<td width=250 align='left'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Microsoft Outlook link</b></font></td>"_$c(9,9,9,9)_"</tr>"_$c(9,9,9,9)_"<tr>"_$c(9,9,9,9,9)_"<td nowrap><font face='Verdana,Geneva,Arial,sans-serif' size='1'>25/12/2025</font></td>"_$c(9,9,9,9,9)_"<td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>09:00-12:00</font></td>"_$c(9,9,9,9,9)_"<td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>Conference</font></td>"_$c(9,9,9,9,9)_"<td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>Session in group</font></td>"_$c(9,9,9,9,9)_"<td><font face='Verdana,Geneva,Arial,sans-serif' size='1'></font></td>"_$c(9,9,9,9,9)_"<td><font face='Verdana,Geneva,Arial,sans-serif' size='1'><a href='"_##class(shared.pageMethods).getFullPath(eventID)_"/frontend/xt/sessionGetVcard.csp?eventID="_eventID_"&itemID="_sessionItemID_"'>Click to export to Microsoft Outlook</a></font></td>"_$c(9,9,9,9)_"</tr>"_$c(9,9,9)_"</table>"_$c(9,9)_"</td>"_$c(9)_"</tr></table>")
	do $$$assertTagMatchEmailHTML("DELEGATESANDGUESTS","Attendees:<br>  Attendee 1: test booker firstname test booker lastname<br>  Attendee 2: test attendee firstname test attendee lastname<br>")
	do $$$assertTagMatchEmailHTML("ATTENDEEITINERARY","<table border='0' cellspacing='0' cellpadding='1' bgcolor='#000000'>"_$c(9)_"<tr>"_$c(9,9)_"<td>"_$c(9,9,9)_"<table border=0 cellpadding=3 cellspacing=0 bgcolor='#FFFFFF'>"_$c(9,9,9,9)_"<tr>"_$c(9,9,9,9,9)_"<td width=100 nowrap><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Date</b></font></td>"_$c(9,9,9,9,9)_"<td width=150 align='left'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Time</b></font></td>"_$c(9,9,9,9,9)_"<td width=100 align='left'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Type</b></font></td>"_$c(9,9,9,9,9)_"<td width=250 align='left'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Description</b></font></td>"_$c(9,9,9,9,9)_"<td width=250 align='left'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Location</b></font></td>"_$c(9,9,9,9,9)_"<td width=250 align='left'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Microsoft Outlook link</b></font></td>"_$c(9,9,9,9)_"</tr>"_$c(9,9,9,9)_"<tr>"_$c(9,9,9,9,9)_"<td nowrap><font face='Verdana,Geneva,Arial,sans-serif' size='1'>25/12/2025</font></td>"_$c(9,9,9,9,9)_"<td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>09:00-12:00</font></td>"_$c(9,9,9,9,9)_"<td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>Conference</font></td>"_$c(9,9,9,9,9)_"<td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>Session in group</font></td>"_$c(9,9,9,9,9)_"<td><font face='Verdana,Geneva,Arial,sans-serif' size='1'></font></td>"_$c(9,9,9,9,9)_"<td><font face='Verdana,Geneva,Arial,sans-serif' size='1'><a href='"_##class(shared.pageMethods).getFullPath(eventID)_"/frontend/xt/sessionGetVcard.csp?eventID="_eventID_"&itemID="_sessionItemID_"'>Click to export to Microsoft Outlook</a></font></td>"_$c(9,9,9,9)_"</tr>"_$c(9,9,9)_"</table>"_$c(9,9)_"</td>"_$c(9)_"</tr></table>")
	do $$$assertTagMatchEmailHTML("ATTENDEESANDGUESTS","Attendees:<br>  Attendee 1: test booker firstname test booker lastname<br>  Attendee 2: test attendee firstname test attendee lastname<br>")
	do $$$assertTagMatchEmailHTML("ATTENDEESUMMARY","test booker firstname test booker lastname<table border=""0"" cellspacing=""0"" cellpadding=""0"" width=""100%""><tr>"_$c(9)_"<td>"_$c(9,9)_"<table cellpadding=""5"" cellspacing=""0"" border=""0"" width=""100%"">"_$c(9,9)_"<tr>"_$c(9,9,9)_"<td align=""left"" height=""20"" width=""90%""><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Attendee Registration Details</b></font></td>"_$c(9,9,9)_"<td height=""20"" align=""left"" width=""10%""><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Quantity</b></font></td>"_$c(9,9)_"</tr>"_$c(9,9)_"<tr>"_$c(9,9,9)_"<td valign=""top""><font face='Verdana,Geneva,Arial,sans-serif' size='1'>Event Booking"_$c(9,9,9)_"</font></td>"_$c(9,9,9)_"<td valign=""top"" align=""center""><font face='Verdana,Geneva,Arial,sans-serif' size='1'>1"_$c(9,9,9)_"</font></td>"_$c(9,9)_"</tr>"_$c(9,9)_"<tr>"_$c(9,9,9)_"<td valign=""top""><font face='Verdana,Geneva,Arial,sans-serif' size='1'>Session in group"_$c(9,9,9)_"</font></td>"_$c(9,9,9)_"<td valign=""top"" align=""center""><font face='Verdana,Geneva,Arial,sans-serif' size='1'>1"_$c(9,9,9)_"</font></td>"_$c(9,9)_"</tr>"_$c(9,9,9,9)_"</tr>"_$c(9,9,9)_"</table>"_$c(9,9)_"</td>"_$c(9)_"</table>test attendee firstname test attendee lastname<table border=""0"" cellspacing=""0"" cellpadding=""0"" width=""100%""><tr>"_$c(9)_"<td>"_$c(9,9)_"<table cellpadding=""5"" cellspacing=""0"" border=""0"" width=""100%"">"_$c(9,9)_"<tr>"_$c(9,9,9)_"<td align=""left"" height=""20"" width=""90%""><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Attendee Registration Details</b></font></td>"_$c(9,9,9)_"<td height=""20"" align=""left"" width=""10%""><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Quantity</b></font></td>"_$c(9,9)_"</tr>"_$c(9,9)_"<tr>"_$c(9,9,9)_"<td valign=""top""><font face='Verdana,Geneva,Arial,sans-serif' size='1'>Event Booking"_$c(9,9,9)_"</font></td>"_$c(9,9,9)_"<td valign=""top"" align=""center""><font face='Verdana,Geneva,Arial,sans-serif' size='1'>1"_$c(9,9,9)_"</font></td>"_$c(9,9)_"</tr>"_$c(9,9,9,9)_"</tr>"_$c(9,9,9)_"</table>"_$c(9,9)_"</td>"_$c(9)_"</table>")
	do $$$assertTagMatchEmailHTML("ATTENDEESUMMARYTEXT","test booker firstname test booker lastname<br>Attendee Registration Details,Quantity<br>Event Booking,1<br>Session in group,1<br>test attendee firstname test attendee lastname<br>Attendee Registration Details,Quantity<br>Event Booking,1<br>")
	do ##class(cod.objItemData).set(personID,"password","1234")
	do $$$assertTagMatchEmailHTML("PASSWORD","<span class='ef_pwd'>1234</span>")
	do $$$assertTagMatchEmailHTML("DAYSTOEVENT",$ZDH("25/12/2025",4)-(+$H))
	do $$$assertTagMatchEmailHTML("TODAY",##class(shared.dateFunctions).multiDate(+##class(shared.timeFunctions).getCurrentHorologUTC(),dateFormat)_" "_##class(shared.timeFunctions).showUTClabel())
	do $$$assertTagMatchEmailHTML("EVENTSTARTDATE","25/12/2025")
	do $$$assertTagMatchEmailHTML("EVENTPIN",##class(cod.objItemData).get(personID,"EVENT PIN",controllerID))
	
	set mailMergeParams="URL*=*www.url.url"
	do $$$assertTagMatchEmailHTML("URL","www.url.url")
	

	do ##class(EF.utils.populate.event).addEventPrice(eventID)
	set sessionID="EF-testGroupBookings-with-price"_$ZTS
	set tempPurchaseID=##class(EF.utils.populate.tempPurchase).createTempPurchase(sessionID,eventID)
	set tempPersonID=##class(EF.utils.populate.tempPurchase).createTempPerson(eventID,tempPurchaseID,1,1,0,"test pricedBooker firstname","test pricedBooker lastname","test.pricedBooker@xxx.xxx","inv company")
	set paymentMethodID=##class(eCom.objPaymentMethod).getIDfromInternalName("Stripe")
	do ##class(eCom.tempCodData).set(tempPersonID,"Address Line 1","test pricedBooker address line 1")
	do ##class(eCom.tempCodData).set(tempPersonID,"Address Line 2","test pricedBooker address line 2")
	do ##class(EF.utils.populate.tempPurchase).createTempPerson(eventID,tempPurchaseID,0,1,0,"test pricedAttendee firstname","test pricedAttendee lastname","test.pricedAttendee@xxx.xxx")
	do ##class(EF.utils.populate.tempPurchase).updateTempPurchase(tempPurchaseID,,,paymentMethodID)
	
	set purchaseID=##class(eCom.tempPurchase).createPurchase(sessionID,100,$$$sendEmails,$$$markSessionComplete,$$$fromPaymentPortal,$$$updateAwardsPaymentStatus)
	
	set personID=##class(eCom.objPurchase).getBookerID(purchaseID)
	set bookingRef=##class(eCom.objPurchaseData).get(purchaseID,"booking reference")
	set origInvoiceID=##class(eCom.invoiceMethods).getLatestInvoiceForPurchase(purchaseID)
	
	&SQL(UPDATE eCom.objInvoice 
		SET xCRstamp='2022-11-11 11:00:00'
			,externalcustomeraccount=1234
			,customerPOnumber=9999
		WHERE objPurchase=:purchaseID
	)
	
	set paymentID=$p(##class(eCom.objPayment).add(purchaseID, 100, 1,origInvoiceID,"test payment comment",1,"test111","source"),"|",2)
	&SQL(SELECT xCRstamp INTO :tmp FROM eCom.objPayment WHERE ID = :paymentID)
	if +SQLCODE=0 {
		set paymentTimestamp=tmp	
	}
	
	set accountID=##class(EF.utils.populate.event).createDummyStripeAccount(eventID)
	set transactionID=##class(EF.utils.populate.registrations).createDummyStripeTransaction(purchaseID,sessionID,"DUMMY TRANS")
	
	set mailMergeParams="cod.objPerson*=*"_personID_"*$*eCom.objPurchase*=*"_purchaseID
	do $$$assertTagMatchEmailHTML("AMOUNT","£200.00")
	do $$$assertTagMatchEmailHTML("AMOUNTOUTSTANDING","£100.00")
	do $$$assertTagMatchEmailHTML("AMOUNTPAID","£100.00")
	do $$$assertTagMatchEmailHTML("CANCELPRICE","£0.00")
	do $$$assertTagMatchEmailHTML("LASTAMOUNTPAID","£100.00")
	do $$$assertTagMatchEmailHTML("PURCHASEDATE",##class(shared.dateFunctions).multiDate(+$H,dateFormat))
	do $$$assertTagMatchEmailHTML("PURCHASELIST","<table border='0' cellspacing='0' cellpadding='1' bgcolor='#000000'>"_$c(9)_"<tr>"_$c(9,9)_"<td>"_$c(9,9,9)_"<table width='100%' border=0 cellpadding=3 cellspacing=0 bgcolor='#FFFFFF'>"_$c(9,9,9,9)_"<tr>"_$c(9,9,9,9,9)_"<td width=250><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Description</b></font></td>"_$c(9,9,9,9,9)_"<td width=100 align='center'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Quantity</b></font></td>"_$c(9,9,9,9,9)_"<td width=100 align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Unit price</b></font></td>"_$c(9,9,9,9,9)_"<td width=100 align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Total&nbsp;&nbsp;</b></font></td>"_$c(9,9,9,9)_"</tr>"_$c(9,9,9,9)_"<tr>"_$c(9,9,9,9,9)_"<td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>Test event price</font></td>"_$c(9,9,9,9,9)_"<td align='center'><font face='Verdana,Geneva,Arial,sans-serif' size='1'>2</font></td>"_$c(9,9,9,9,9)_"<td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'>£100.00</font></td>"_$c(9,9,9,9,9)_"<td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'>£200.00</font></td>"_$c(9,9,9,9)_"</tr>"_$c(9,9,9,9)_"<tr>"_$c(9,9,9,9,9)_"<td colspan=2>&nbsp;</td>"_$c(9,9,9,9,9)_"<td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Total:</b></font></td>"_$c(9,9,9,9,9)_"<td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>£200.00</b></font></td>"_$c(9,9,9,9)_"</tr>"_$c(9,9,9,9)_"<tr>"_$c(9,9,9,9,9)_"<td colspan=2>&nbsp;</td>"_$c(9,9,9,9,9)_"<td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Grand total:</b></font></td>"_$c(9,9,9,9,9)_"<td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>£200.00</b></font></td>"_$c(9,9,9)_"</table>"_$c(9,9)_"</td>"_$c(9)_"</tr></table>")
	set html="2 x Test event price @ £100.00 = £200.00<br>Sub total:   £200.00<br>-------------------------------------------<br> Grand total:  £200.00<br>"
	set text=$REPLACE(html,"<br>",$C(13,10))
	do $$$assertTagMatchEmailHTML("PURCHASELISTTEXT",html)
	do $$$assertTagMatchEmailText("PURCHASELISTTEXT",text)
	do $$$assertTagMatchEmailHTML("LASTPAYMENTDETAILS","Payment updated: "_paymentTimestamp_", Transaction reference: test111, Amount paid: £100.00")
	do $$$assertTagMatchEmailHTML("LASTINVOICEPDF",##class(shared.pageMethods).getFullPath(eventID)_"/frontend/xt/pdfDownload.csp?identifier=&eventID="_eventID)
	do $$$assertTagMatchEmailHTML("ORIGINALINVOICENUMBER",origInvoiceID)
	do $$$assertTagMatchEmailHTML("INVOICE","<table width=""600"" cellspacing=""0"" cellpadding=""0"" border=""1""><tr>    <td align=""center"">INVOICE</td></tr></table><table width=""600"" cellspacing=""0"" cellpadding=""0"" border=""1""><tr>    <td width=""300"">test pricedBooker firstname test pricedBooker lastname</td>    <td width=""300"">Invoice number: "_origInvoiceID_"</td></tr><tr>    <td>inv company</td>    <td>Invoice date: 2022-11-11 11:00:00</td></tr><tr>    <td>test pricedBooker address line 1</td>    <td>Payment terms:</td></tr><tr>    <td>test pricedBooker address line 2</td>    <td>&nbsp;</td></tr><tr>    <td></td>    <td>email:</td></tr><tr>    <td></td>    <td>test.pricedBooker@xxx.xxx</td></tr><tr>    <td></td>    <td>phone:</td></tr><tr>    <td></td>    <td>&nbsp;</td></tr></table><p>&nbsp;<br>&nbsp;</p><table width=""600"" cellspacing=""0"" cellpadding=""0"" border=""1""><tr>    <td width=""300"">Description</td>    <td width=""100"" align=""center"">Quantity</td>    <td width=""100"" align=""right"">Unit price</td>    <td width=""100"" align=""right"">Total</td></tr><tr>    <td>Test event price</td>    <td align=""center"">2</td>    <td align=""right"">100.00</td>    <td align=""right"">200.00</td></tr><tr>    <td colspan=""3"" align=""right"">Sub total: </td>    <td align=""right"">200.00</td></tr><tr>    <td colspan=""3"" align=""right"">Grand total: </td>    <td align=""right"">200.00</td></tr></table>")
	

	
	
	do ##class(eCom.objInvoice).new(purchaseID,1,1)
	&SQL(UPDATE eCom.objInvoice 
		SET xCRstamp='2022-11-11 11:30:00'
			,externalcustomeraccount=1234
			,customerPOnumber=9999
		WHERE objPurchase=:purchaseID
		AND ID<>:origInvoiceID
	)
	set invoiceID=##class(eCom.invoiceMethods).getLatestInvoiceForPurchase(purchaseID)
	set objInvoice=##class(eCom.objInvoice).%OpenId(invoiceID)

	// Invoices
	set mailMergeParams="cod.objPerson*=*"_personID_"*$*eCom.objPurchase*=*"_purchaseID_"*$*eCom.objInvoice*=*"_invoiceID
	do $$$assertTagMatchEmailHTML("INVADDRESS","test pricedBooker address line 1<br>test pricedBooker address line 2")
	do $$$assertTagMatchEmailHTML("INVADDRESSDETAILS","test pricedBooker firstname test pricedBooker lastname<br>inv company<br>test pricedBooker address line 1<br>test pricedBooker address line 2")
	do $$$assertTagMatchEmailHTML("INVAMOUNT","GBP 200.00")
	do $$$assertTagMatchEmailHTML("INVATTENDEELIST","test pricedBooker firstname test pricedBooker lastname, test pricedAttendee firstname test pricedAttendee lastname")
	do $$$assertTagMatchEmailHTML("INVBOOKINGREF",bookingRef)
	do $$$assertTagMatchEmailHTML("INVCOMPANY","inv company")
	do $$$assertTagMatchEmailHTML("INVCURCODE","GBP")
	do $$$assertTagMatchEmailHTML("INVDATE","11/11/2022")
	do $$$assertTagMatchEmailHTML("INVDESCCAPS","INVOICE")
	do $$$assertTagMatchEmailHTML("INVDESCMIXED","Invoice")
	do $$$assertTagMatchEmailHTML("INVEXTCUSTACCT",1234)
	do $$$assertTagMatchEmailHTML("INVFIRSTNAME","test pricedBooker firstname")
	do $$$assertTagMatchEmailHTML("INVFIRSTPRINTRUNDATE",##class(shared.dateFunctions).multiDate(+$H,dateFormat))
	do $$$assertTagMatchEmailHTML("INVLASTNAME","test pricedBooker lastname")
	do $$$assertTagMatchEmailHTML("INVNUMBER",invoiceID)
	do $$$assertTagMatchEmailHTML("INVPONUMBER",9999)
	do $$$assertTagMatchEmailHTML("INVPURCHASESTATUS","partly paid")
	
	set nowLocalHorolog=##class(shared.dateFunctions).timestampToHorolog(##class(setup.objEvent).getTimestampLocalFromHorologUTC(eventID,$ZTS))
	do $$$assertTagMatchEmailHTML("INVREGDATE",##class(shared.dateFunctions).multiDate($P(nowLocalHorolog,",",1),dateFormat))
	do $$$assertTagMatchEmailHTML("INVREGISTRATIONREF",bookingRef)
	do $$$assertTagMatchEmailHTML("INVORIGDATE","11/11/2022")
	do $$$assertTagMatchEmailHTML("INVORIGNUMBER",objInvoice.originalInvoiceNumber)
	do $$$assertTagMatchEmailHTML("LATESTINVOICENUMBER",invoiceID)

	set mailMergeParams="cod.objPerson*=*"_personID_"*$*eCom.objPurchase*=*"_purchaseID
	
	do $$$assertTagMatchEmailHTML("PaymentGatewayTransactionID","DUMMY TRANS")
	do $$$assertTagMatchEmailHTML("NBTRANSID","DUMMY TRANS")
	do $$$assertTagMatchEmailHTML("OGONETRANSID","DUMMY TRANS")
	do $$$assertTagMatchEmailHTML("PROTXTRANSID","DUMMY TRANS")
	do $$$assertTagMatchEmailHTML("SAGEPAYTRANSID","DUMMY TRANS")
	do $$$assertTagMatchEmailHTML("WPTRANSID","DUMMY TRANS")
	do $$$assertTagMatchEmailHTML("PAYPALTRANSID","DUMMY TRANS")
	do $$$assertTagMatchEmailHTML("AUTHTRANSID","DUMMY TRANS")
	do $$$assertTagMatchEmailHTML("DCTRANSID","DUMMY TRANS")
	do $$$assertTagMatchEmailHTML("PAYMENTTYPE","Credit Card")
	
	do $$$assertTagMatchEmailHTML("DELEGATECOSTA1","")
	do $$$assertTagMatchEmailHTML("DELEGATECOSTA2","")
	do $$$assertTagMatchEmailHTML("DELEGATECOSTA3","")
	do $$$assertTagMatchEmailHTML("ATTENDEECOSTA1","")
	do $$$assertTagMatchEmailHTML("ATTENDEECOSTA2","")
	do $$$assertTagMatchEmailHTML("ATTENDEECOSTA3","")
	do $$$assertTagMatchEmailHTML("EVMANTASKDESC","")
	do $$$assertTagMatchEmailHTML("EVMANTASKDUEDATE","")
	do $$$assertTagMatchEmailHTML("EVMANTASKDURATION","")
	do $$$assertTagMatchEmailHTML("EVMANTASKSTATUS","")
	do $$$assertTagMatchEmailHTML("EVMANTASKTYPE","")
	do $$$assertTagMatchEmailHTML("CREDITCARDDETAILS","")
	do $$$assertTagMatchEmailHTML("CalendarLink",##class(shared.pageMethods).getFullPathVCard(eventID)_"/frontEnd/xt/getVcard.csp?eventID="_eventID)
	
	
	
	do $$$assertTagMatchEmailHTML("ADDITIONALITEMNAME","")
	do $$$assertTagMatchEmailHTML("ALTCODE","")
	do $$$AssertTrue($$$replaceTagEmailHTML("AUDITTRAIL")["Transaction update started<br>&nbsp;&nbsp;&nbsp;Registration created by: test pricedBooker firstname test pricedBooker lastname<br>&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;Changes to <i> </i> (personID=211140)<br>&nbsp;&nbsp;&nbsp;Data change: Firstname ADDED: <i>test pricedBooker firstname</i><br>&nbsp;&nbsp;&nbsp;Data change: Lastname ADDED: <i>test pricedBooker lastname</i><br>&nbsp;&nbsp;&nbsp;Data change: email2 ADDED: <i>test.pricedBooker@xxx.xxx</i><br>&nbsp;&nbsp;&nbsp;Data change: Company ADDED: <i>inv company</i><br>&nbsp;&nbsp;&nbsp;Data change: cod origin OLD: <i>Eventsforce Attendee</i> NEW: <i>EF.utils.populate.tempPurchase</i><br>&nbsp;&nbsp;&nbsp;Data change: Address Line 1 ADDED: <i>test pricedBooker address line 1</i><br>&nbsp;&nbsp;&nbsp;Data change: Address Line 2 ADDED: <i>test pricedBooker address line 2</i><br>&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;Added Attendee: personID=211140, name=test pricedBooker firstname test pricedBooker lastname<br>&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;Changes to <i> </i> (personID=211141)<br>&nbsp;&nbsp;&nbsp;Data change: Firstname ADDED: <i>test pricedAttendee firstname</i><br>&nbsp;&nbsp;&nbsp;Data change: Lastname ADDED: <i>test pricedAttendee lastname</i><br>&nbsp;&nbsp;&nbsp;Data change: email2 ADDED: <i>test.pricedAttendee@xxx.xxx</i><br>&nbsp;&nbsp;&nbsp;Data change: cod origin OLD: <i>Eventsforce Attendee</i> NEW: <i>EF.utils.populate.tempPurchase</i><br>&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;Added Attendee: personID="_personID_", name=test pricedAttendee firstname test pricedAttendee lastname<br>&nbsp;&nbsp;&nbsp;Category for personID")
	do $$$assertTagMatchEmailHTML("AWARDSCATEGORY","")
	do $$$assertTagMatchEmailHTML("AWARDSENTRY","")
	do $$$assertTagMatchEmailHTML("AWARDSSECTION","")
	do $$$AssertTrue($$$replaceTagEmailHTML("CODLASTCHANGES")["<table border='0' cellspacing='0' cellpadding='1' bgcolor='#FFFFFF'> <tr>  <td>  <table width='100%' border=0 cellpadding=3 cellspacing=0 bgcolor='#FFFFFF'>  <tr>   <td width=100><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>First name</b></font></td>   <td width=100><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Last name</b></font></td>   <td width=200><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Question</b></font></td>   <td width=100><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Old value</b></font></td>   <td width=100><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>New value</b></font></td>   <td width=100><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Changed</b></font></td>  </tr>   <tr>    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>test pricedBooker firstname</font></td>    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>test pricedBooker lastname</font></td>    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>Address Line 1</font></td>    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'></font></td>    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>test pricedBooker address line 1</font></td>")
	do $$$AssertTrue($$$replaceTagEmailHTML("CODLASTCHANGESADMIN")["<table border='0' cellspacing='0' cellpadding='1' bgcolor='#FFFFFF'> <tr>  <td>  <table width='100%' border=0 cellpadding=3 cellspacing=0 bgcolor='#FFFFFF'>  <tr>   <td width=100><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>First name</b></font></td>   <td width=100><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Last name</b></font></td>   <td width=200><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Question</b></font></td>   <td width=100><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Old value</b></font></td>   <td width=100><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>New value</b></font></td>   <td width=100><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Changed</b></font></td>  </tr>   <tr>    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>test pricedBooker firstname</font></td>    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>test pricedBooker lastname</font></td>    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>Address Line 1</font></td>    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'></font></td>    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>test pricedBooker address line 1</font></td>")
	
	do $$$assertTagMatchEmailHTML("ENTRYLIST","<table border='0' cellspacing='0' cellpadding='1' bgcolor='#000000'>"_$c(9)_"<tr>"_$c(9,9)_"<td>"_$c(9,9,9)_"<table border=0 cellpadding=3 cellspacing=0 bgcolor='#FFFFFF'>"_$c(9,9,9,9)_"<tr>"_$c(9,9,9,9,9)_"<td width=50><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Entry Number</b></font></td>"_$c(9,9,9,9,9)_"<td width=250 align='left'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Category</b></font></td>"_$c(9,9,9,9,9)_"<td width=250 align='left'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Entry name</b></font></td>"_$c(9,9,9,9,9)_"<td width=250 align='left'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Status</b></font></td>"_$c(9,9,9,9)_"</tr>"_$c(9,9,9)_"</table>"_$c(9,9)_"</td>"_$c(9)_"</tr></table>")
	do $$$assertTagMatchEmailHTML("ENTRYLISTTEXT","<table border='0' cellspacing='0' cellpadding='1' bgcolor='#000000'>"_$c(9)_"<tr>"_$c(9,9)_"<td>"_$c(9,9,9)_"<table border=0 cellpadding=3 cellspacing=0 bgcolor='#FFFFFF'>"_$c(9,9,9,9)_"<tr>"_$c(9,9,9,9,9)_"<td width=50><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Entry Number</b></font></td>"_$c(9,9,9,9,9)_"<td width=250 align='left'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Category</b></font></td>"_$c(9,9,9,9,9)_"<td width=250 align='left'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Entry name</b></font></td>"_$c(9,9,9,9,9)_"<td width=250 align='left'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Status</b></font></td>"_$c(9,9,9,9)_"</tr>"_$c(9,9,9)_"</table>"_$c(9,9)_"</td>"_$c(9)_"</tr></table>")
	do $$$assertTagMatchEmailHTML("MEETINGATTENDEES","")
	do $$$assertTagMatchEmailHTML("MEETINGDATA","")
	do $$$assertTagMatchEmailHTML("MEETINGDATAALL","")
	do $$$assertTagMatchEmailHTML("MEETINGDATE","")
	do $$$assertTagMatchEmailHTML("MEETINGDESCRIPTION","")
	do $$$assertTagMatchEmailHTML("MEETINGLIST","")
	do $$$assertTagMatchEmailHTML("MEETINGLOCATION","")
	do $$$assertTagMatchEmailHTML("MEETINGNAME","")
	do $$$assertTagMatchEmailHTML("MEETINGORGANISER","")
	do $$$assertTagMatchEmailHTML("MEETINGSTATUS","")
	do $$$assertTagMatchEmailHTML("MEETINGTIME","00:00-00:00")
	do $$$assertTagMatchEmailHTML("MEETINGTYPE","One-to-one meeting")
	do $$$AssertTrue($$$replaceTagEmailHTML("NOW")?2N1":"2N1" UTC")
	do $$$assertTagMatchEmailHTML("PICTURE","")

	
	set mailMergeParams="cod.objPerson*=*"_personID_"*$*eCom.objPurchase*=*"_purchaseID_"*$*setup.objItem*=*"_sessionItemID
	do $$$assertTagMatchEmailHTML("SESSIONBOOKINGS",1)
	do $$$assertTagMatchEmailHTML("SESSIONCAPACITY",100)
	do $$$assertTagMatchEmailHTML("SESSIONDATE","25/12/2025")
	do $$$assertTagMatchEmailHTML("SESSIONDATETIME","Thursday, Dec 25, 9:00-12:00 PM")
	do $$$assertTagMatchEmailHTML("SESSIONNAME","Session in group")
	do $$$assertTagMatchEmailHTML("SESSIONREGISTRATIONS",1)
	do $$$assertTagMatchEmailHTML("SESSIONTIME","09:00-12:00")
	do $$$assertTagMatchEmailHTML("SPECIALINSTRUCTIONS","") //Obsolete
	do $$$assertTagMatchEmailHTML("LOCATION","Default Location")
	
	set dayItemID=##class(setup.objItem).getDayItemID(eventID,1)
	set objItem=##class(setup.objItem).%OpenId(dayItemID)
	set objItem.capacity=50
	do objItem.%Save()
	
	set mailMergeParams="setup.objItem*=*"_dayItemID
	do $$$assertTagMatchEmailHTML("DAYBOOKINGS",4)
	do $$$assertTagMatchEmailHTML("DAYCAPACITY",50)
	do $$$assertTagMatchEmailHTML("DAYNAME","Day 1")
	do $$$assertTagMatchEmailHTML("DAYNUMBER",1)
	do $$$assertTagMatchEmailHTML("DAYREGISTRATIONS",4)
	
	set purchaseID=..createABIBooking(eventID,.alternativeExtrasID)
	set personID=##class(eCom.objPurchase).getBookerID(purchaseID)
	set mailMergeParams="cod.objPerson*=*"_personID_"*$*eCom.objPurchase*=*"_purchaseID
	do $$$assertTagMatchEmailHTML("ALLABIDATA","  Registration Contact's Details:<br>  test pricedBooker firstname test pricedBooker lastname<br><br>  Attendee 1:<br>  test pricedBooker firstname test pricedBooker lastname<br>    test tags abi = yes<br><br>  Attendee 2:<br>  test pricedAttendee firstname test pricedAttendee lastname<br>    test tags abi = <br><br>")
	
	// Dependency test
	set tagProcessor=##class(EF.tags.tagProcessorForEmailHtml).createNew(..getDependencyHTML(),langID,mailMergeParams,eventID)
	set tagResults("dependencyTest","html","dependency")=..getStringWithReplacedTags(tagProcessor) 
	do $$$AssertEquals(tagResults("dependencyTest","html","dependency"),"<HTML><BODY><p>test pricedBooker firstname</p><p>test pricedBooker lastname</p><p>Dependent Block: yes = yes</p></BODY></HTML>")
	
	set mailMergeParams="cod.objAlternativeExtras*=*"_alternativeExtrasID
	do $$$assertTagMatchEmailHTML("ADDITIONALITEMNAME","ABI: yes")
	
	set ticketID=##class(EF.utils.populate.registrationQuestion).addTicketToRegistrationPage(eventID,"Test ticket for email")
	set mailMergeParams="cod.objTicket*=*"_ticketID
	do $$$assertTagMatchEmailHTML("QUANTITYITEMNAME","Ticket")
	merge tagErrors=^tagErrors
	TROLLBACK
	merge ^tagErrors=tagErrors
	kill ^xTagProcessorTest("TestGroupBookingsResults")
	merge ^xTagProcessorTest("TestGroupBookingsResults")=tagResults
]]></Implementation>
</Method>

<Method name="TestAbstracts">
<Implementation><![CDATA[


	#define replaceTagEmailHTML(%tagName) ..getWithReplacedTagsForSingleTagEmailHTML(%tagName,mailMergeParams,eventID,.tagResults)
	#define replaceTagEmailText(%tagName) ..getWithReplacedTagsForSingleTagEmailText(%tagName,mailMergeParams,eventID,.tagResults)
	#define assertTagMatchEmailHTML(%tagName,%expectedResult) $$$AssertEquals($$$replaceTagEmailHTML(%tagName),%expectedResult,%tagName - "html") do ..logExpectedResult(%tagName,"html",%expectedResult,.tagResults)
	#define assertTagMatchEmailText(%tagName,%expectedResult) $$$AssertEquals($$$replaceTagEmailText(%tagName),%expectedResult,%tagName - "text") do ..logExpectedResult(%tagName,"text",%expectedResult,.tagResults)
	#dim tagProcessor As EF.tags.tagProcessorForEmailHtml
	TSTART
	try {
		set langID=1
		set eventID=..createEventForAbstractEmailTesting()
		set topicID=..createTopic(eventID)
		set objDocument=..createAbstractDocument(topicID, langID, .reviewID,.paperReviewID)
	} catch errObj {
		TROLLBACK
		throw errObj	
	}
	set documentID=objDocument.%Id()
	set dateFormat=##class(setup.objEvent).getDateFormat(eventID)
	set objReview=##class(abstract.objReview).%OpenId(reviewID)
	set reviewTimestamp=objReview.getReviewTimeStampFormatted(dateFormat)
	set objReview=##class(abstract.objReview).%OpenId(paperReviewID)
	set paperReviewTimestamp=objReview.getReviewTimeStampFormatted(dateFormat)
	set mailMergeParams="cod.objPerson*=*"_objDocument.authorID_"*$*abstract.objDocument*=*"_documentID_"*$*setup.objEvent*=*"_eventID

	do $$$assertTagMatchEmailHTML("ABSPRESENTATIONORDER",1)
	do $$$assertTagMatchEmailHTML("ABSTRACTALLAUTHORSANDCOMPANIES","<br>test author firstname test author lastname<sup>1</sup>, test co-author 2 firstname test co-author 2 lastname<sup>2</sup>, test co-author 1 firstname test co-author 1 lastname<sup>3</sup><BR><I><sup>1</sup>test author company,&nbsp;<sup>2</sup>test co-author 2 company,&nbsp;<sup>3</sup>test co-author 1 company</I>")
	do $$$assertTagMatchEmailHTML("ABSTRACTASSPRESMETHOD","oral")
	do $$$assertTagMatchEmailHTML("ABSTRACTAUTHOR","test author firstname test author lastname")
	do $$$assertTagMatchEmailHTML("ABSTRACTAUTHORCOMPANY","test author company")
	do $$$assertTagMatchEmailHTML("ABSTRACTCOAUTHORS","test co-author 2 firstname test co-author 2 lastname<br>test co-author 1 firstname test co-author 1 lastname<br>")
	do $$$assertTagMatchEmailHTML("ABSTRACTCONTENT","<P>Abstracts test content</P> ")
	do $$$assertTagMatchEmailHTML("ABSTRACTCORRESPONDINGAUTHOR","test submitter firstname test submitter lastname")
	do $$$assertTagMatchEmailHTML("ABSTRACTID",documentID)
	do $$$assertTagMatchEmailHTML("ABSTRACTKEYWORDS","Test Keywords")
	do $$$assertTagMatchEmailHTML("ABSTRACTNUMBER",documentID)
	do $$$assertTagMatchEmailHTML("ABSTRACTPREFPRESMETHOD","poster")
	do $$$assertTagMatchEmailHTML("ABSTRACTPRESENTINGAUTHOR","test author firstname test author lastname")
	do $$$assertTagMatchEmailHTML("ABSTRACTSESSIONDATE","27/12/2025")
	do $$$assertTagMatchEmailHTML("ABSTRACTSESSIONLOCATION","Default Location")
	do $$$assertTagMatchEmailHTML("ABSTRACTSESSIONNAME","Session with abstracts")
	do $$$assertTagMatchEmailHTML("ABSTRACTSESSIONSUMMARY","27/12/2025 - 09:00 - Session with abstracts")
	do $$$assertTagMatchEmailHTML("ABSTRACTSESSIONTIME","09:00-12:00")
	do $$$assertTagMatchEmailHTML("ABSTRACTSUMMARY","Test Summary")
	do $$$assertTagMatchEmailHTML("ABSTRACTTITLE","abstract document test document")
	do $$$assertTagMatchEmailHTML("ABSTRACTTOPIC","Testing Abstract Topic")
	do $$$assertTagMatchEmailHTML("ABSPRESENTATIONDURATION","09:00 - 10:00")
	do $$$assertTagMatchEmailHTML("Abstract Paper Review Comments","Review date: "_paperReviewTimestamp_"<br><br>Comments: Paper Review 1<br><br>")
	do $$$assertTagMatchEmailHTML("Abstract Paper Reviews","Review date: "_paperReviewTimestamp_"<br><br>Grade: 2<br>Comments: Paper Review 1<br><br>")
	do $$$assertTagMatchEmailHTML("ABSREVIEWCOMMENTS","Review date: "_reviewTimestamp_"<br><br>Comments: Review 1<br><br>")
	do $$$assertTagMatchEmailHTML("Abstract Review Comments","Review date: "_reviewTimestamp_"<br><br>Comments: Review 1<br><br>")
	do $$$assertTagMatchEmailHTML("Abstract Reviews","Review date: "_reviewTimestamp_"<br><br>Grade: 1<br>Comments: Review 1<br><br>")

	
	do $$$assertTagMatchEmailHTML("ABSREVIEWERSCOMMENTS","")
	do $$$assertTagMatchEmailHTML("ABSOTHERREVIEWCOMMENTS","")
	merge tagErrors=^tagErrors
	TROLLBACK
	merge ^tagErrors=tagErrors
	kill ^xTagProcessorTest("TestAbstracts")
	merge ^xTagProcessorTest("TestAbstracts")=tagResults
]]></Implementation>
</Method>

<Method name="TestAccom">
<Implementation><![CDATA[

	#define replaceTagEmailHTML(%tagName) ..getWithReplacedTagsForSingleTagEmailHTML(%tagName,mailMergeParams,eventID,.tagResults)
	#define replaceTagEmailText(%tagName) ..getWithReplacedTagsForSingleTagEmailText(%tagName,mailMergeParams,eventID,.tagResults)
	#define assertTagMatchEmailHTML(%tagName,%expectedResult) $$$AssertEquals($$$replaceTagEmailHTML(%tagName),%expectedResult,%tagName - "html"),..logExpectedResult(%tagName,"html",%expectedResult,.tagResults)
	#define assertTagMatchEmailText(%tagName,%expectedResult) $$$AssertEquals($$$replaceTagEmailText(%tagName),%expectedResult,%tagName - "text"),..logExpectedResult(%tagName,"text",%expectedResult,.tagResults)
	TSTART
	try {
		set eventConfiguration=##class(EF.utils.populate.accom).createAccomEvent("Email Testing Accom Event - Do Not Use")
		set eventHotelID=##class(EF.utils.populate.accom).createHotel(eventConfiguration,,,,.roomTypeID)
	
		set purchaseID=##class(EF.utils.populate.accom).createAccomBooking(eventConfiguration,eventHotelID,roomTypeID)
	} catch errObj {
		TROLLBACK
		throw errObj	
	}
	
	set personID=##class(eCom.objPurchase).getBookerID(purchaseID)
	set eventID=eventConfiguration.getEventID()
	set mailMergeParams="cod.objPerson*=*"_personID_"*$*eCom.objPurchase*=*"_purchaseID

	do $$$assertTagMatchEmailHTML("ACCOMLIST","<table border='0' cellspacing='0' cellpadding='1' bgcolor='#FFFFFF'> <tr>  <td>  <table width='100%' border=0 cellpadding=3 cellspacing=0 bgcolor='#FFFFFF'><tr><td colspan=""5""><font face='Verdana,Geneva,Arial,sans-serif' size='2'><b>Test Hotel</b></font></td></tr>  <tr>   <td width=200><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Room Type</b></font></td>   <td width=100 align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Arrival</b></font></td>   <td width=100 align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Departure</b></font></td>  </tr>   <tr>    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>double</font></td>    <td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'>25/12/2025</font></td>    <td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'>27/12/2025</font></td>   </tr>   <tr>       <td colspan=3><font face='Verdana,Geneva,Arial,sans-serif' size='1'>&nbsp;&nbsp;&nbsp;&nbsp;Guest No. 1: ,room guest1<br>       </font></td>   </tr>   <tr>       <td colspan=3><font face='Verdana,Geneva,Arial,sans-serif' size='1'>&nbsp;&nbsp;&nbsp;&nbsp;Guest No. 2: ,room guest2<br>       </font></td>   </tr>"_$c(9,9,9)_"</table>"_$c(9,9)_"</td>"_$c(9)_"</tr></table>")
	set html="Test Hotel<br>Room Type   Arrival - Departure<br>double   25/12/2025 - 27/12/2025<br>    Guest No. 1: ,room guest1<br>    Guest No. 2: ,room guest2<br>"
	set text=$REPLACE(html,"<br>",$C(13,10))
	do $$$assertTagMatchEmailText("ACCOMLIST",text)
	do $$$assertTagMatchEmailHTML("ACCOMLISTTEXT",html)
	do $$$assertTagMatchEmailText("ACCOMLISTTEXT",text)
	do $$$assertTagMatchEmailHTML("ACCOMLASTCHANGES","")
	do $$$assertTagMatchEmailHTML("ACCOMLASTCHANGESTEXT","")
	do $$$assertTagMatchEmailHTML("ATTENDEEACCOMLIST","<table border='0' cellspacing='0' cellpadding='1' bgcolor='#FFFFFF'> <tr>  <td>  <table width='100%' border=0 cellpadding=3 cellspacing=0 bgcolor='#FFFFFF'><tr><td colspan=""5""><font face='Verdana,Geneva,Arial,sans-serif' size='2'><b>Test Hotel</b></font></td></tr>  <tr>   <td width=200><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Room Type</b></font></td>   <td width=100 align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Arrival</b></font></td>   <td width=100 align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Departure</b></font></td>  </tr>   <tr>    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>double</font></td>    <td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'>25/12/2025</font></td>    <td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'>27/12/2025</font></td>   </tr>   <tr>       <td colspan=3><font face='Verdana,Geneva,Arial,sans-serif' size='1'>&nbsp;&nbsp;&nbsp;&nbsp;Guest No. 1: ,room guest1<br>       </font></td>   </tr>   <tr>       <td colspan=3><font face='Verdana,Geneva,Arial,sans-serif' size='1'>&nbsp;&nbsp;&nbsp;&nbsp;Guest No. 2: ,room guest2<br>       </font></td>   </tr>"_$c(9,9,9)_"</table>"_$c(9,9)_"</td>"_$c(9)_"</tr></table>")
	set html="Test Hotel<br>Room Type   Arrival - Departure<br>double   25/12/2025 - 27/12/2025<br>    Guest No. 1: ,room guest1<br>    Guest No. 2: ,room guest2<br>"
	set text=$REPLACE(html,"<br>",$C(13,10))
	do $$$assertTagMatchEmailText("ATTENDEEACCOMLIST",text)
	do $$$assertTagMatchEmailHTML("ATTENDEEACCOMLISTTEXT",html)
	do $$$assertTagMatchEmailText("ATTENDEEACCOMLISTTEXT",text)
	do $$$assertTagMatchEmailHTML("DELEGATEACCOMLIST","<table border='0' cellspacing='0' cellpadding='1' bgcolor='#FFFFFF'> <tr>  <td>  <table width='100%' border=0 cellpadding=3 cellspacing=0 bgcolor='#FFFFFF'><tr><td colspan=""5""><font face='Verdana,Geneva,Arial,sans-serif' size='2'><b>Test Hotel</b></font></td></tr>  <tr>   <td width=200><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Room Type</b></font></td>   <td width=100 align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Arrival</b></font></td>   <td width=100 align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'><b>Departure</b></font></td>  </tr>   <tr>    <td><font face='Verdana,Geneva,Arial,sans-serif' size='1'>double</font></td>    <td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'>25/12/2025</font></td>    <td align='right'><font face='Verdana,Geneva,Arial,sans-serif' size='1'>27/12/2025</font></td>   </tr>   <tr>       <td colspan=3><font face='Verdana,Geneva,Arial,sans-serif' size='1'>&nbsp;&nbsp;&nbsp;&nbsp;Guest No. 1: ,room guest1<br>       </font></td>   </tr>   <tr>       <td colspan=3><font face='Verdana,Geneva,Arial,sans-serif' size='1'>&nbsp;&nbsp;&nbsp;&nbsp;Guest No. 2: ,room guest2<br>       </font></td>   </tr>"_$c(9,9,9)_"</table>"_$c(9,9)_"</td>"_$c(9)_"</tr></table>")
	set html="Test Hotel<br>Room Type   Arrival - Departure<br>double   25/12/2025 - 27/12/2025<br>    Guest No. 1: ,room guest1<br>    Guest No. 2: ,room guest2<br>"
	set text=$REPLACE(html,"<br>",$C(13,10))
	do $$$assertTagMatchEmailText("DELEGATEACCOMLIST",text)
	do $$$assertTagMatchEmailHTML("DELEGATEACCOMLISTTEXT",html)
	do $$$assertTagMatchEmailText("DELEGATEACCOMLISTTEXT",text)
	merge tagErrors=^tagErrors
	TROLLBACK
	merge ^tagErrors=tagErrors
	kill ^xTagProcessorTest("testAccom")
	merge ^xTagProcessorTest("testAccom")=tagResults
]]></Implementation>
</Method>

<Method name="TestTableBookings">
<Implementation><![CDATA[


	#define replaceTagEmailHTML(%tagName) ..getWithReplacedTagsForSingleTagEmailHTML(%tagName,mailMergeParams,eventID,.tagResults)
	#define replaceTagEmailText(%tagName) ..getWithReplacedTagsForSingleTagEmailText(%tagName,mailMergeParams,eventID,.tagResults)
	#define assertTagMatchEmailHTML(%tagName,%expectedResult) $$$AssertEquals($$$replaceTagEmailHTML(%tagName),%expectedResult,%tagName - "html"),..logExpectedResult(%tagName,"html",%expectedResult,.tagResults)
	#define assertTagMatchEmailText(%tagName,%expectedResult) $$$AssertEquals($$$replaceTagEmailText(%tagName),%expectedResult,%tagName - "text"),..logExpectedResult(%tagName,"text",%expectedResult,.tagResults)
	
	TSTART
	try {
		set eventConfiguration=##class(EF.utils.populate.tableBooking).createTableBookingEvent("Email Testing Table Booking Event - Do Not Use")
		do ##class(EF.utils.populate.tableBooking).createTable(eventConfiguration,2,50,10)
		do ##class(EF.utils.populate.tableBooking).createTable(eventConfiguration,2,50,10)
		set purchaseID=##class(EF.utils.populate.tableBooking).createTableBooking(eventConfiguration,2,50,10)
	} catch errObj {
		TROLLBACK
		throw errObj	
	}
	
	set personID=##class(eCom.objPurchase).getBookerID(purchaseID)
	set eventID=eventConfiguration.getEventID()
	set mailMergeParams="cod.objPerson*=*"_personID_"*$*eCom.objPurchase*=*"_purchaseID

	do $$$assertTagMatchEmailHTML("TABLEHOSTANDGUESTS","  <table width='100%' border=0 cellpadding=2 cellspacing=0 bgcolor='#FFFFFF'> <tr>  <td colspan=4 height=25><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Table: 1</font></td></tr> <tr><td width=""60"" style=""border-bottom: 1px solid Black;"">&nbsp;</td>  <td width="""" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">First name</font></td>  <td width="""" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Last name</font></td>  <td width="""" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Company</font></td></tr> <tr>  <td ><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">1 </font></td>  <td width="""" ><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">table guest first: 1</font></td>  <td width="""" ><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">table guest last: 1</font></td>  <td width="""" ><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""></font></td></tr> <tr>  <td ><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">2 </font></td>  <td width="""" ><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">table guest first: 2</font></td>  <td width="""" ><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">table guest last: 2</font></td>  <td width="""" ><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""></font></td></tr> <tr>  <td colspan=4 height=25><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Individual Seats</font></td></tr> <tr><td width=""60"" style=""border-bottom: 1px solid Black;"">&nbsp;</td>  <td width="""" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">First name</font></td>  <td width="""" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Last name</font></td>  <td width="""" style=""border-bottom: 1px solid Black;""><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">Company</font></td></tr> <tr>  <td ><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">1 </font></td>  <td width="""" ><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">table guest first: 3</font></td>  <td width="""" ><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1"">table guest last: 3</font></td>  <td width="""" ><font face=""Verdana,Geneva,Arial,sans-serif"" size=""1""></font></td></tr></table>")
	set tableHostsAndGuestsTextHTML="Table: SEAT<br>1 : table guest first: 1 table guest last: 1<br>2 : table guest first: 2 table guest last: 2<br>Individual Seats<br>1 : table guest first: 3 table guest last: 3<br>"
	set tableHostsAndGuestsText=$REPLACE(tableHostsAndGuestsTextHTML,"<br>",$C(13,10))
	do $$$assertTagMatchEmailText("TABLEHOSTANDGUESTS",tableHostsAndGuestsText)
	do $$$assertTagMatchEmailHTML("TABLEHOSTANDGUESTSTEXT",tableHostsAndGuestsTextHTML)
	do $$$assertTagMatchEmailText("TABLEHOSTANDGUESTSTEXT",tableHostsAndGuestsText)
	merge tagErrors=^tagErrors
	TROLLBACK
	merge ^tagErrors=tagErrors
	kill ^xTagProcessorTest("testTableBookings")
	merge ^xTagProcessorTest("testTableBookings")=tagResults
]]></Implementation>
</Method>

<Method name="createEventForGroupBookingEmailTesting">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	
	#dim eventConfiguration As setup.eventConfiguration = ##class(setup.eventConfiguration).createForNewEvent()
	
	do eventConfiguration.setMainEventName("Email Testing Group Booking Event - Do Not Use")
	do eventConfiguration.setEventStartTimeStamp("2025-12-25 09:00:00")
	do eventConfiguration.setEventEndTimeStamp("2025-12-27 17:00:00")
	do eventConfiguration.setHasAbstracts(1)
	do eventConfiguration.setHasCost(1)
	do eventConfiguration.setAllowGroupBookings(1)
	do eventConfiguration.setIdentifier("anonymous")
	do eventConfiguration.save()
	set eventID=eventConfiguration.getEventID()
	
	do ##class(setup.objEventData).setDataUsingDescription(eventID, "Venue Name","Test Venue")
	do ##class(setup.objEventSetting).setParameter("system","do not use email",1,eventID)
	
	return eventID
]]></Implementation>
</Method>

<Method name="createEventForAbstractEmailTesting">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[

	#dim eventConfiguration As setup.eventConfiguration = ##class(setup.eventConfiguration).createForNewEvent()
	do eventConfiguration.setMainEventName("Email Testing Abstracts Event - Do Not Use")
	do eventConfiguration.setEventStartTimeStamp("2025-12-27 09:00:00")
	do eventConfiguration.setEventEndTimeStamp("2025-12-27 17:00:00")
	do eventConfiguration.setHasAbstracts(1)
	do eventConfiguration.save()
	set eventID=eventConfiguration.getEventID()
	
	do ##class(setup.objEventSetting).setParameter("abstracts","use abstract keywords",1,eventID)
	do ##class(setup.objEventSetting).setParameter("abstracts","suppress summary field",0,eventID)
		
		
	return eventID
]]></Implementation>
</Method>

<Method name="createTopic">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<Implementation><![CDATA[
	set objTopic=##class(abstract.objTopic).%New()
	set objTopic.objEvent=eventID
	set objTopic.description="Testing Abstract Topic"
	set objTopic.active=1
	set objTopic.displayOrder=1
	do objTopic.%Save()
	return objTopic.%Id()
]]></Implementation>
</Method>

<Method name="createAbstractDocument">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[topicID,langID,&reviewID,&paperReviewID]]></FormalSpec>
<Implementation><![CDATA[
	#dim document As abstract.objDocument = ##class(abstract.objDocument).createNew()
	set document.abstractNumber = 1234
	set document.active = 1
	do document.objAssignedPresentationMethodSetObjectId(##class(abstract.objPresentationMethod).getIDfromDescription("oral"))
	do document.objPreferredPresentationMethodSetObjectId(##class(abstract.objPresentationMethod).getIDfromDescription("poster"))
	set document.authorID=##class(EF.utils.populate.codPeople).createPerson("test author firstname","test author lastname","test.author@xxx.xxx","test author company")
	set document.description="abstract document test document"
	do document.objLanguageSetObjectId(langID)
	do document.objStatusSetObjectId(2)
	do document.objTopicSetObjectId(topicID)
	set document.submitterID=##class(EF.utils.populate.codPeople).createPerson("test submitter firstname","test submitter lastname","test.submitter@xxx.xxx","test submitter company")
	do document.%Save()
	set documentID=document.%Id()
	set eventID=##class(abstract.objDocument).getEventIDFromDocumentID(documentID)
	do document.updateKeywords(documentID,"Test Keywords")
	do document.updateSummary(documentID,"Test Summary")
	do ##class(abstract.objItemData).set(documentID,##class(cod.objItemName).getIDFromDescriptionNoEvent("Presenting Author ID"),document.authorID)
	do ##class(abstract.objItemData).set(documentID,##class(cod.objItemName).getIDFromDescriptionNoEvent("Corresponding Author ID"),document.submitterID)
	do ##class(abstract.objDocumentSectionDefinition).createInitial(eventID)
	kill abstractSectionsArray
	do ##class(abstract.objDocumentSectionDefinition).getDocumentActiveSectionsArray(eventID,.abstractSectionsArray)
	set sectionID=abstractSectionsArray($O(abstractSectionsArray("")))
	do ##class(abstract.objDocumentSectionData).create(documentID,sectionID,"Abstracts test content")
	
	do ..addCoAuthor(document,##class(EF.utils.populate.codPeople).createPerson("test co-author 1 firstname","test co-author 1 lastname","test.co1@xxx.xxx","test co-author 1 company"))
	do ..addCoAuthor(document,##class(EF.utils.populate.codPeople).createPerson("test co-author 2 firstname","test co-author 2 lastname","test.co2@xxx.xxx","test co-author 2 company"))
	
	set reviewer1ID=##class(EF.utils.populate.codPeople).createPerson("test reviewer 1 firstname","test reviewer 1 lastname","test.reviewer1@xxx.xxx","test reviewer 1 company")
	set reviewID=##class(EF.utils.populate.abstractEvent).addReview(documentID,reviewer1ID, 1, "Review 1", 0)
	set reviewer2ID=##class(EF.utils.populate.codPeople).createPerson("test reviewer 2 firstname","test reviewer 2 lastname","test.reviewer2@xxx.xxx","test reviewer 2 company")
	set paperReviewID=##class(EF.utils.populate.abstractEvent).addReview(documentID,reviewer2ID, 2, "Paper Review 1", 1)
	
	do ..addAbstractToSession(document)
	
	return document
]]></Implementation>
</Method>

<Method name="createABIBooking">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[eventID,&alternativeExtrasID]]></FormalSpec>
<Implementation><![CDATA[
	set alternativeExtrasID=##class(EF.utils.populate.registrationQuestion).addABIToRegistrationPage(eventID,"test tags abi","yes")
	set sessionID="EF-testGroupBookings-with-price"_$ZTS
	set tempPurchaseID=##class(EF.utils.populate.tempPurchase).createTempPurchase(sessionID,eventID)
	set tempPersonID=##class(EF.utils.populate.tempPurchase).createTempPerson(eventID,tempPurchaseID,1,1,0,"test pricedBooker firstname","test pricedBooker lastname","test.pricedBooker@xxx.xxx","inv company")
	set ok=##class(setup.lnkCategoryEvent).getAllRegPages(eventID,1,1,.allRegPages,.allRegPageIDs,.allReg)
	set eventCategoryID=$O(allRegPages(""))
	set displayOrder=$O(allRegPages(eventCategoryID,""))

	set pageID=allRegPages(eventCategoryID,displayOrder)
	do ##class(eCom.tempCodData).set(tempPersonID,"test tags abi","yes",pageID)
	do ##class(EF.utils.populate.tempPurchase).createTempPerson(eventID,tempPurchaseID,0,1,0,"test pricedAttendee firstname","test pricedAttendee lastname","test.pricedAttendee@xxx.xxx")
	do ##class(EF.utils.populate.tempPurchase).updateTempPurchase(tempPurchaseID)
	
	return ##class(eCom.tempPurchase).createPurchase(sessionID,0,0,1,0,0)
]]></Implementation>
</Method>

<Method name="addAbstractToSession">
<ClassMethod>1</ClassMethod>
<FormalSpec>objDocument</FormalSpec>
<Implementation><![CDATA[
	do objDocument.%Reload()
	set eventID=##class(abstract.objDocument).getEventIDFromDocumentID(objDocument.%Id())
	set objSessionItem=##class(EF.utils.populate.sessions).createSessionForEvent(eventID,"Session with abstracts","ABSCODE","Session with abstracts additional details")
	set sessionItemID=objSessionItem.%Id()
	set contextData=##class(EF.contextData).%New()
	set contextData.eventID=eventID

	do objDocument.updateSessionID(sessionItemID,contextData)
	do ##class(abstract.objItemData).set(objDocument.%Id(),##class(cod.objItemName).getIDFromDescriptionNoEvent("Abstract Start Time"),$ZTH("09:00",2))
	do ##class(abstract.objItemData).set(objDocument.%Id(),##class(cod.objItemName).getIDFromDescriptionNoEvent("Abstract End Time"),$ZTH("10:00",2))
]]></Implementation>
</Method>

<Method name="addCoAuthor">
<ClassMethod>1</ClassMethod>
<FormalSpec>objDocument,personID</FormalSpec>
<Implementation><![CDATA[
	set objCoAuthor=##class(abstract.objCoAuthor).%New()
	set objCoAuthor.objDocument=objDocument
	do objCoAuthor.objPersonSetObjectId(personID)
	do objCoAuthor.%Save()
	
	do ##class(abstract.objCoAuthor).reorderCoAuthors(objDocument.%Id())
]]></Implementation>
</Method>

<Method name="getWithReplacedTagsForSingleTagEmailHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[tagName,mailMergeParams,eventID,&tagResultArray]]></FormalSpec>
<Implementation><![CDATA[
	
	set tagProcessor=##class(EF.tags.tagProcessorForEmailHtml).createNew("{{"_tagName_"}}",1,mailMergeParams,eventID)
	set tagResults=..getStringWithReplacedTags(tagProcessor)
	
	set tagResultArray(tagName,"html","results")=tagResults
	set tagResultArray(tagName,"html","isLegacy")='tagProcessor.tagFound
	return tagResults
]]></Implementation>
</Method>

<Method name="getWithReplacedTagsForSingleTagEmailText">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[tagName,mailMergeParams,eventID,&tagResultArray]]></FormalSpec>
<Implementation><![CDATA[
	set tagProcessor=##class(EF.tags.tagProcessorForEmailText).createNew("{{"_tagName_"}}",1,mailMergeParams,eventID)
	
	set tagResults=..getStringWithReplacedTags(tagProcessor)
	set tagResultArray(tagName,"text","results")=tagResults
	set tagResultArray(tagName,"text","isLegacy")='tagProcessor.tagFound
	
	return tagResults
]]></Implementation>
</Method>

<Method name="logExpectedResult">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[tagName,mode,expected,&tagResultArray]]></FormalSpec>
<Implementation><![CDATA[	set tagResultArray(tagName,mode,"expected")=expected
]]></Implementation>
</Method>

<Method name="getStringWithReplacedTags">
<ClassMethod>1</ClassMethod>
<FormalSpec>tagProcessor:EF.tags.tagProcessor</FormalSpec>
<Implementation><![CDATA[
	try {
		set tagResults=tagProcessor.getStringWithReplacedTags()
	} catch errObj {
		set pLocation = "" For stackIdx=($STACK(-1)-1):-1:0 { Set stackLine=" [L"_stackIdx_"] "_$STACK(stackIdx)_" "_$STACK(stackIdx,"PLACE")_" "_$STACK(stackIdx,"MCODE") Set pLocation=pLocation_stackLine } 
		throw ##class(shared.exceptions.generalException).%New("Tag replacement error: ["_tagProcessor.originalString_"] "_errObj.DisplayString()_" - "_pLocation)
	}
	return tagResults
]]></Implementation>
</Method>

<Method name="getDependencyHTML">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set messageText="<HTML><BODY><p>{{COD:FIRSTNAME}}</p>"
	set messageText=messageText_"<p>{{COD:LASTNAME}}</p>"
	set messageText=messageText_"{{DEPENDENTBLOCK:test tags abi=yes|%|newFormatTag}}"
	set messageText=messageText_"<p>Dependent Block: {{COD:test tags abi}} = yes</p>"
	set messageText=messageText_"{{/DEPENDENTBLOCK}}"
	set messageText=messageText_"{{DEPENDENTBLOCK:test tags abi=no|%|newFormatTag}}"
	set messageText=messageText_"<p>Dependent Block: {{COD:test tags abi}} = no</p>"
	set messageText=messageText_"{{/DEPENDENTBLOCK}}"
	set messageText=messageText_"</BODY></HTML>"
	return messageText
]]></Implementation>
</Method>

<Method name="writeUntestedTags">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set allTagsArray("ABSOTHERREVIEWCOMMENTS")=""
	set allTagsArray("ABSPRESENTATIONDURATION")=""
	set allTagsArray("ABSPRESENTATIONORDER")=""
	set allTagsArray("ABSREVIEWCOMMENTS")=""
	set allTagsArray("ABSREVIEWERSCOMMENTS")=""
	set allTagsArray("ABSTRACTALLAUTHORSANDCOMPANIES")=""
	set allTagsArray("ABSTRACTASSPRESMETHOD")=""
	set allTagsArray("ABSTRACTAUTHOR")=""
	set allTagsArray("ABSTRACTAUTHORCOMPANY")=""
	set allTagsArray("ABSTRACTCOAUTHORS")=""
	set allTagsArray("ABSTRACTCONTENT")=""
	set allTagsArray("ABSTRACTCORRESPONDINGAUTHOR")=""
	set allTagsArray("ABSTRACTID")=""
	set allTagsArray("ABSTRACTKEYWORDS")=""
	set allTagsArray("ABSTRACTNUMBER")=""
	set allTagsArray("ABSTRACTPREFPRESMETHOD")=""
	set allTagsArray("ABSTRACTPRESENTINGAUTHOR")=""
	set allTagsArray("ABSTRACTSESSIONDATE")=""
	set allTagsArray("ABSTRACTSESSIONLOCATION")=""
	set allTagsArray("ABSTRACTSESSIONNAME")=""
	set allTagsArray("ABSTRACTSESSIONSUMMARY")=""
	set allTagsArray("ABSTRACTSESSIONTIME")=""
	set allTagsArray("ABSTRACTSUMMARY")=""
	set allTagsArray("ABSTRACTTITLE")=""
	set allTagsArray("ABSTRACTTOPIC")=""
	set allTagsArray("ACCOMLASTCHANGES")=""
	set allTagsArray("ACCOMLASTCHANGESTEXT")=""
	set allTagsArray("ACCOMLIST")=""
	set allTagsArray("ACCOMLISTTEXT")=""
	set allTagsArray("ADDITIONALINFO")=""
	set allTagsArray("ADDITIONALITEMNAME")=""
	set allTagsArray("ALLABIDATA")=""
	set allTagsArray("ALLREGDATA")=""
	set allTagsArray("ALLREGDATATABLE")=""
	set allTagsArray("ALTCODE")=""
	set allTagsArray("AMOUNT")=""
	set allTagsArray("AMOUNTOUTSTANDING")=""
	set allTagsArray("AMOUNTPAID")=""
	set allTagsArray("ATTENDEEACCOMLIST")=""
	set allTagsArray("ATTENDEEACCOMLISTTEXT")=""
	set allTagsArray("ATTENDEECATEGORY")=""
	set allTagsArray("ATTENDEECOSTA1")=""
	set allTagsArray("ATTENDEECOSTA2")=""
	set allTagsArray("ATTENDEECOSTA3")=""
	set allTagsArray("ATTENDEEITINERARY")=""
	set allTagsArray("ATTENDEESANDGUESTS")=""
	set allTagsArray("ATTENDEESUMMARY")=""
	set allTagsArray("ATTENDEESUMMARYTEXT")=""
	set allTagsArray("AUDITTRAIL")=""
	set allTagsArray("AUTHTRANSID")=""
	set allTagsArray("AWARDSCATEGORY")=""
	set allTagsArray("AWARDSENTRY")=""
	set allTagsArray("AWARDSSECTION")=""
	set allTagsArray("Abstract Paper Review Comments")=""
	set allTagsArray("Abstract Paper Reviews")=""
	set allTagsArray("Abstract Review Comments")=""
	set allTagsArray("Abstract Reviews")=""
	set allTagsArray("AwardsJudgesLoginLink")=""
	set allTagsArray("BOOKEDATTENDEESESSIONS")=""
	set allTagsArray("BOOKEDATTENDEESESSIONSCODES")=""
	set allTagsArray("BOOKEDDAYS")=""
	set allTagsArray("BOOKEDDELEGATEDAYS")=""
	set allTagsArray("BOOKEDDELEGATESESSIONS")=""
	set allTagsArray("BOOKEDDELEGATESESSIONSCODES")=""
	set allTagsArray("BOOKEDSESSIONNAMESLIST")=""
	set allTagsArray("BOOKEDSESSIONS")=""
	set allTagsArray("BOOKEDSESSIONSTABLEVIEW")=""
	set allTagsArray("BOOKEDSESSIONTIMESLOCATIONSLIST")=""
	set allTagsArray("BOOKERSNAME")=""
	set allTagsArray("BOOKINGREF")=""
	set allTagsArray("CANCELPRICE")=""
	set allTagsArray("COD")=""
	set allTagsArray("CODLASTCHANGES")=""
	set allTagsArray("CODLASTCHANGESADMIN")=""
	set allTagsArray("CREDITCARDDETAILS")=""
	set allTagsArray("CalendarLink")=""
	set allTagsArray("CustomEventField")=""
	set allTagsArray("DAYBOOKINGS")=""
	set allTagsArray("DAYCAPACITY")=""
	set allTagsArray("DAYNAME")=""
	set allTagsArray("DAYNUMBER")=""
	set allTagsArray("DAYREGISTRATIONS")=""
	set allTagsArray("DAYSTOEVENT")=""
	set allTagsArray("DCTRANSID")=""
	set allTagsArray("DELEGATEACCOMLIST")=""
	set allTagsArray("DELEGATEACCOMLISTTEXT")=""
	set allTagsArray("DELEGATECOSTA1")=""
	set allTagsArray("DELEGATECOSTA2")=""
	set allTagsArray("DELEGATECOSTA3")=""
	set allTagsArray("DELEGATEITINERARY")=""
	set allTagsArray("DELEGATESANDGUESTS")=""
	set allTagsArray("ENTRYLIST")=""
	set allTagsArray("ENTRYLISTTEXT")=""
	set allTagsArray("EVENTDATE")=""
	set allTagsArray("EVENTDESC")=""
	set allTagsArray("EVENTENDDATE")=""
	set allTagsArray("EVENTLINK")=""
	set allTagsArray("EVENTPAGELINK")=""
	set allTagsArray("EVENTPIN")=""
	set allTagsArray("EVENTSTARTDATE")=""
	set allTagsArray("EVMANTASKDESC")=""
	set allTagsArray("EVMANTASKDUEDATE")=""
	set allTagsArray("EVMANTASKDURATION")=""
	set allTagsArray("EVMANTASKSTATUS")=""
	set allTagsArray("EVMANTASKTYPE")=""
	set allTagsArray("EventEndTime")=""
	set allTagsArray("EventStartTime")=""
	set allTagsArray("FULLADDRESS")=""
	set allTagsArray("FULLNAME")=""
	set allTagsArray("GUESTLIST")=""
	set allTagsArray("INVADDRESS")=""
	set allTagsArray("INVADDRESSDETAILS")=""
	set allTagsArray("INVAMOUNT")=""
	set allTagsArray("INVATTENDEELIST")=""
	set allTagsArray("INVBOOKINGREF")=""
	set allTagsArray("INVCOMPANY")=""
	set allTagsArray("INVCURCODE")=""
	set allTagsArray("INVDATE")=""
	set allTagsArray("INVDESCCAPS")=""
	set allTagsArray("INVDESCMIXED")=""
	set allTagsArray("INVEXTCUSTACCT")=""
	set allTagsArray("INVFIRSTNAME")=""
	set allTagsArray("INVFIRSTPRINTRUNDATE")=""
	set allTagsArray("INVLASTNAME")=""
	set allTagsArray("INVNUMBER")=""
	set allTagsArray("INVOICE")=""
	set allTagsArray("INVORGRILEY")=""
	set allTagsArray("INVORIGDATE")=""
	set allTagsArray("INVORIGNUMBER")=""
	set allTagsArray("INVPONUMBER")=""
	set allTagsArray("INVPURCHASESTATUS")=""
	set allTagsArray("INVREGDATE")=""
	set allTagsArray("INVREGISTRATIONREF")=""
	set allTagsArray("LASTAMOUNTPAID")=""
	set allTagsArray("LASTINVOICEPDF")=""
	set allTagsArray("LASTPAYMENTDETAILS")=""
	set allTagsArray("LATESTINVOICENUMBER")=""
	set allTagsArray("LOCATION")=""
	set allTagsArray("MEETINGATTENDEES")=""
	set allTagsArray("MEETINGDATA")=""
	set allTagsArray("MEETINGDATAALL")=""
	set allTagsArray("MEETINGDATE")=""
	set allTagsArray("MEETINGDESCRIPTION")=""
	set allTagsArray("MEETINGLIST")=""
	set allTagsArray("MEETINGLOCATION")=""
	set allTagsArray("MEETINGNAME")=""
	set allTagsArray("MEETINGORGANISER")=""
	set allTagsArray("MEETINGSTATUS")=""
	set allTagsArray("MEETINGTIME")=""
	set allTagsArray("MEETINGTYPE")=""
	set allTagsArray("MeetingDiaryLoginLink")=""
	set allTagsArray("NBTRANSID")=""
	set allTagsArray("NOW")=""
	set allTagsArray("OGONETRANSID")=""
	set allTagsArray("ORIGINALINVOICENUMBER")=""
	set allTagsArray("PASSWORD")=""
	set allTagsArray("PAYMENTTYPE")=""
	set allTagsArray("PAYPALTRANSID")=""
	set allTagsArray("PDFDOWNLOAD")=""
	set allTagsArray("PERSONID")=""
	set allTagsArray("PICTURE")=""
	set allTagsArray("PROTXTRANSID")=""
	set allTagsArray("PURCHASEDATE")=""
	set allTagsArray("PURCHASELIST")=""
	set allTagsArray("PURCHASELISTTEXT")=""
	set allTagsArray("PaymentGatewayTransactionID")=""
	set allTagsArray("PersonalAbstractReviewerLink")=""
	set allTagsArray("PersonalAbstractSubmissionLink")=""
	set allTagsArray("PersonalAmendmentLink")=""
	set allTagsArray("PersonalAwardsJudgeLink")=""
	set allTagsArray("PersonalDeclineLink")=""
	set allTagsArray("PersonalDiaryLink")=""
	set allTagsArray("PersonalEventLink")=""
	set allTagsArray("PersonalRegistrationLink")=""
	set allTagsArray("QUANTITYITEMNAME")=""
	set allTagsArray("QUESTPROMPTDATA")=""
	set allTagsArray("QUESTPROMPTDATATABLE")=""
	set allTagsArray("REGISTEREDATTENDEEDAYS")=""
	set allTagsArray("REGISTEREDDAYS")=""
	set allTagsArray("REGISTRATIONCONTACTSNAME")=""
	set allTagsArray("REGISTRATIONREF")=""
	set allTagsArray("SAGEPAYTRANSID")=""
	set allTagsArray("SESSIONBOOKINGS")=""
	set allTagsArray("SESSIONCAPACITY")=""
	set allTagsArray("SESSIONDATE")=""
	set allTagsArray("SESSIONDATETIME")=""
	set allTagsArray("SESSIONNAME")=""
	set allTagsArray("SESSIONREGISTRATIONS")=""
	set allTagsArray("SESSIONTIME")=""
	set allTagsArray("SOFTEVENTPROMPT")=""
	set allTagsArray("SPECIALINSTRUCTIONS")=""
	set allTagsArray("TODAY")=""
	set allTagsArray("URL")=""
	set allTagsArray("VENUENAME")=""
	set allTagsArray("WPTRANSID")=""

	
	set testedTags=0
	set method=""
	for {
		set method=$O(^xTagProcessorTest(method))
		if method="" quit
		set tagName=""
		for {
			set tagName=$O(^xTagProcessorTest(method,tagName))
			if tagName="" quit
			set format=""
			for {
				set format=$O(^xTagProcessorTest(method,tagName,format))
				if format="" quit
				if $l($G(^xTagProcessorTest(method,tagName,format,"results"))) {
					if $G(^xTagProcessorTest(method,tagName,format,"isLegacy")) {
						set testedTagsArray($ZCVT($p(tagName,":",1),"U"),"legacy")=""
					} else {
						set testedTagsArray($ZCVT($p(tagName,":",1),"U"),"new")=""
					}
				}
			}
		}
	}
	w "Untested tags",!
	set (testedLegacyTags,testedNewTags,untestedTags)=0
	set tagName=""
	for {
		set tagName=$O(allTagsArray(tagName))
		if tagName="" quit
		if $D(testedTagsArray($ZCVT(tagName,"U"),"new")) {
			set testedNewTags=testedNewTags+1
		} elseif $D(testedTagsArray($ZCVT(tagName,"U"),"legacy")) {
			set testedLegacyTags=testedLegacyTags+1
		} else {
			set untestedTags=untestedTags+1
			w "{{"_tagName_"}}",!
		}
		
	}
	w !!,"Untested tags:",untestedTags,!
	w !!,"Tested new tags:",testedNewTags,!
	w !!,"Tested legacy tags:",testedLegacyTags,!
]]></Implementation>
</Method>
</Class>


<Class name="EF.tags.tagsTestCase">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.tags.tagsTestCase.CLS/EV.0
;vc; Component: CLS.EF.tags.tagsTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:23
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.tags.tagsTestCase.CLS/EV.0</td><td>CLS.EF.tags.tagsTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:23</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>64089,35773</TimeChanged>
<TimeCreated>64077,65388.271101</TimeCreated>

<Method name="TestTags">
<Implementation><![CDATA[
	set arrayOfTags=##class(EF.tags.base).getArrayOfTags()
	set tagObject=arrayOfTags.GetAt("ATTENDEEITINERARY")
	do $$$AssertTrue(tagObject.%IsA("EF.tags.base"))
	set tagProcessor=##class(EF.tags.tagProcessorForEmailText).createNew("dummy",1,"")
	do $$$AssertTrue($IsObject(##class(EF.tags.base).dispatchTag("attendeeItinerary",tagProcessor)))
	do $$$AssertTrue($IsObject(##class(EF.tags.base).dispatchTag("delegateItinerary",tagProcessor)))
	do $$$AssertTrue($IsObject(##class(EF.tags.base).dispatchTag("ATTENDEEItinerary",tagProcessor)))
	do $$$AssertTrue($IsObject(##class(EF.tags.base).dispatchTag("deleGATEItinerary",tagProcessor)))
	do $$$AssertTrue($IsObject(##class(EF.tags.base).dispatchTag("attendeeItinerary:urlencode",tagProcessor)))
	do $$$AssertTrue(##class(EF.tags.base).dispatchTag("attendeeItinerary:urlencode",tagProcessor).urlEncodeOutput)
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.backend.controls.awardsCategoryDropdown">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.backend.controls.awardsCategoryDropdown.CLS/EV.0
;vc; Component: CLS.EF.ui.backend.controls.awardsCategoryDropdown
;vc;  Location: SmallDev
;vc; Date/Time: 15-Dec-14 16:03
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.backend.controls.awardsCategoryDropdown.CLS/EV.0</td><td>CLS.EF.ui.backend.controls.awardsCategoryDropdown</td><td>SmallDev</td><td style='white-space: nowrap;'>15-Dec-14 16:03</td><td>AdrianM</td></tr></table>
]]></Description>
<Super>EF.ui.backend.controls.base</Super>
<TimeChanged>63536,58046.928487</TimeChanged>
<TimeCreated>63533,51726.500349</TimeCreated>

<Property name="name">
<Type>%String</Type>
</Property>

<Property name="eventID">
<Type>%Integer</Type>
</Property>

<Property name="selectedCategoryID">
<Type>%Integer</Type>
</Property>

<Property name="width">
<Type>%Integer</Type>
</Property>

<Property name="showEmptyOption">
</Property>

<Property name="emptyOptionName">
</Property>

<Property name="emptyOptionValue">
</Property>

<Method name="renderFromEfLabelRule">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&params]]></FormalSpec>
<Implementation><![CDATA[
	set awardsCategoryDropdown=..%New($g(params("id")))
	set awardsCategoryDropdown.name=params("name")
	set awardsCategoryDropdown.selectedCategoryID=$g(params("selectedcategoryid"))
	set awardsCategoryDropdown.showEmptyOption=+$g(params("showemptyoption"))
	if $l($G(params("emptyoptionvalue"))) {
		set awardsCategoryDropdown.emptyOptionName=params("emptyoptionvalue")
	}
	if $l($G(params("emptyoptionname"))) {
		set awardsCategoryDropdown.emptyOptionName=params("emptyoptionname")
	}
	set awardsCategoryDropdown.eventID=$g(params("eventid"))
	set awardsCategoryDropdown.width=$g(params("width"))
	do awardsCategoryDropdown.render()
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	set widthStyle=""
	if ..width {
		set widthStyle="width: "_..width_"px;"
	}
	&html<
		<select id="#(..encodeHTMLAttribute(..htmlID))#" name="#(..encodeHTMLAttribute(..htmlID))#" class="black10px" style="#(..encodeHTMLAttribute(widthStyle))#">
			#[do ..renderOptions()]#
		</select>	
	>
]]></Implementation>
</Method>

<Method name="renderOptions">
<Implementation><![CDATA[
	if ..showEmptyOption {
		&html<<option value="#(..encodeHTMLAttribute(..emptyOptionValue))#">#(..encodeHTMLContent(..emptyOptionName))#</option>>	
	}
	
	set rs=##class(awards.objCategory).getActiveCategoriesForEventResultSet(..eventID)
	while rs.Next() {
		set selectedString=""
		if rs.Get("ID")=..selectedCategoryID {
			set selectedString="SELECTED"	
		}
		&html<<option value="#(..encodeHTMLAttribute(rs.Get("ID")))#" #(..encodeHTMLAttribute(selectedString))#>#(..encodeHTMLContent(rs.Get("description")))#</option>>
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.backend.controls.backgroundJobMonitor">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.backend.controls.backgroundJobMonitor.CLS/EV.1
;vc; Component: CLS.EF.ui.backend.controls.backgroundJobMonitor
;vc;  Location: SmallDev
;vc; Date/Time: 17-Mar-14 11:22
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.backend.controls.backgroundJobMonitor.CLS/EV.1</td><td>CLS.EF.ui.backend.controls.backgroundJobMonitor</td><td>SmallDev</td><td style='white-space: nowrap;'>17-Mar-14 11:22</td><td>RajibQ</td></tr></table>
]]></Description>
<Super>EF.ui.backend.controls.lightBox</Super>
<TimeChanged>63270,41200.229617</TimeChanged>
<TimeCreated>63221,49254.757846</TimeCreated>

<Property name="refreshIntervalMS">
<Type>%Integer</Type>
<InitialExpression>2000</InitialExpression>
</Property>

<Property name="preStartStatusText">
<Type>%String</Type>
<InitialExpression>##class(shared.pCSP).out("Waiting…")</InitialExpression>
</Property>

<Property name="progressBar">
<Type>progressBar</Type>
</Property>

<Property name="allowClose">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="width">
<Type>%String</Type>
<InitialExpression>"324px"</InitialExpression>
</Property>

<Property name="enableDefaultFormKeyBindings">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="showStopButton">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="stopButtonText">
<Type>%String</Type>
<InitialExpression>##class(shared.pCSP).out("Stop")</InitialExpression>
</Property>

<Property name="stoppingText">
<Type>%String</Type>
<InitialExpression>##class(shared.pCSP).out("Stopping…")</InitialExpression>
</Property>

<Method name="%OnNew">
<FormalSpec>htmlID:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	If ($DATA(htmlID)) {
		Do ##super(htmlID)
	} else {
		Do ##super()
	}
	
	Set ..progressBar=##class(progressBar).%New(..htmlID_"_progress_bar")
	
	Set ..classes=..classes_" ef_backend_bjmonitor"
	
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="show">
<Implementation><![CDATA[
	
	Do ##super()
	
	&js<
		var tempFunc = function () {
			var ele=$('##(..htmlID)#');
			
			if (ele.length != 0) {
				var statusEle=ele.find('.ef_backend_bjinfo_status');
				if (statusEle.length == 0) {
					ele.append('<div class="ef_backend_bjinfo_status"></div>');
				}
				
				var progContainerEle=ele.find('.ef_backend_bjinfo_progress_container');
				if (progContainerEle.length == 0) {
					ele.append('<div class="ef_backend_bjinfo_progress_container"></div>');
					progContainerEle=ele.find('.ef_backend_bjinfo_progress_container');
				}
				
				var progBarEle=progContainerEle.find('.ef_backend_bjinfo_progressbar');
				if (progBarEle.length == 0) {
					progContainerEle.append('<div class="ef_backend_bjinfo_progressbar" id="#(..progressBar.htmlID)#"></div>');
				}
				
				#[Do ..progressBar.render()]#
				
				var progTextEle=progContainerEle.find('.ef_backend_bjinfo_progress_text');
				if (progTextEle.length == 0) {
					progContainerEle.append('<div class="ef_backend_bjinfo_progress_text"></div>');
				}
				
				if (#(..showStopButton)#) {
					var stopButtonEle=ele.find('.ef_backend_bjinfo_stop_button');
					if (stopButtonEle.length == 0) {
						ele.append('<input type="button" class="ef_button ef_backend_bjinfo_stop_button" value="#(..stopButtonText)#" />');
					}
					var stopButtonEle=ele.find('.ef_backend_bjinfo_stop_button');
				}
				
			}
		}
		tempFunc();
	>
]]></Implementation>
</Method>

<Method name="startMonitoring">
<FormalSpec>updateURLJSVar:%String,bjInfoIdxJSVar:%String,bjInfoSecurityTokenJSVar:%String,onCompleteCallbackJSVar:%String="null",stopNotificationURLJSVar:%String="null"</FormalSpec>
<Implementation><![CDATA[
	&js<
		var tempFunc = function (updateURL,bjInfoIdx,bjInfoSecurityToken,onCompleteCallback,stopNotificationURL) {
			var ele=$('##(..htmlID)#');
			
			ele.data("efOnCompleteCallback",onCompleteCallback);
			
			if (#(..showStopButton)#) {
				var stopButtonEle=ele.find('.ef_backend_bjinfo_stop_button');
				if (stopButtonEle.length != 0) {
					stopButtonEle.click(function () {
						stopButtonEle.attr('disabled',true);
						var statusEle=ele.find('.ef_backend_bjinfo_status');
						if (statusEle.length != 0) {
							statusEle.html(#(##class(shared.pCSP).QuoteJS(..stoppingText))#);
						}
						$.ajax({
				        	url: stopNotificationURL,
				        	type: "POST",
				        	data: {bjInfoIdx : bjInfoIdx, bjInfoSecurityToken: bjInfoSecurityToken, stoppingText: #(##class(shared.pCSP).QuoteJS(..stoppingText))# },
				        	dataType: 'json'
						});
					});
				}
			}
			
			if (ele.length != 0) {
				var updateFunction = function () {
					$.ajax({
				        url: updateURL,
				        type: "POST",
				        data: {bjInfoIdx : bjInfoIdx, bjInfoSecurityToken: bjInfoSecurityToken},
				        dataType: 'json',
				        success: function (data) {
				            
				            if (!data.started) {
					            var statusEle=ele.find('.ef_backend_bjinfo_status');
					            statusEle.html(#(##class(shared.pCSP).QuoteJS(..preStartStatusText))#);
				            } else {
					            var statusEle=ele.find('.ef_backend_bjinfo_status');
					            if (statusEle.length != 0) {
									if ((statusEle.html() != data.statusText)) {
										statusEle.html(data.statusText);
									}
								}
								
								var progBarEle=ele.find('.ef_backend_bjinfo_progressbar');
								if (progBarEle.length != 0) {
									#[do ..progressBar.setValue("data.progressPercentage")]#
								}
								
								var progTextEle=ele.find('.ef_backend_bjinfo_progress_text');
								if (progTextEle.length != 0) {
									if ((progTextEle.html() != data.progressText)) {
										progTextEle.html(data.progressText);
									}
								}
				            }
				            
				            
				            if ((!data.completed) && (!data.crashed) && (!data.stopped)) {
				            	var updateTimerID = setTimeout(updateFunction, #(..refreshIntervalMS)#);
								ele.data('efBJInfoUpdateTimerID',updateTimerID);
				            } else {
					            if (data.completed || data.stopped) {
						            if (ele.data("efOnCompleteCallback") != null) {
							            ele.data("efOnCompleteCallback")();
						            }
					            } else if (data.crashed) {
						            #[do ..showCloseButton()]#
					            }
				            }
				        }
				    });
					
				};
				
				var updateTimerID = setTimeout(updateFunction, 0);
				ele.data('efBJInfoUpdateTimerID',updateTimerID);
			}
		}
			
		tempFunc(#(updateURLJSVar)#,#(bjInfoIdxJSVar)#,#(bjInfoSecurityTokenJSVar)#,#(onCompleteCallbackJSVar)#,#(stopNotificationURLJSVar)#);
	>
]]></Implementation>
</Method>

<Method name="hide">
<Implementation><![CDATA[
	Do ##super()
	
	&js<
		var tempFunc = function() {
			var ele=$('##(..htmlID)#');
			if (ele.data('efBJInfoUpdateTimerID')) {
				clearTimeout(ele.data('efBJInfoUpdateTimerID'));
			}
		}
		tempFunc();
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.backend.controls.base">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.backend.controls.base.CLS/EV.1
;vc; Component: CLS.EF.ui.backend.controls.base
;vc;  Location: SmallDev
;vc; Date/Time: 12-Dec-14 14:09
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.backend.controls.base.CLS/EV.1</td><td>CLS.EF.ui.backend.controls.base</td><td>SmallDev</td><td style='white-space: nowrap;'>12-Dec-14 14:09</td><td>AdrianM</td></tr></table>
]]></Description>
<Super>EF.htmlGenerator,%RegisteredObject</Super>
<TimeChanged>63533,51041.152438</TimeChanged>
<TimeCreated>63221,51389.44036</TimeCreated>

<Property name="htmlID">
<Type>%String</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>htmlID:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	If ($DATA(htmlID)) {
		Set ..htmlID=htmlID
	} else {
		Set ..htmlID="ef_control_"_$TR(##class(%SYSTEM.Util).CreateGUID(),"-","")
	}
	
    Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.backend.controls.grid">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.backend.controls.grid.CLS/EV.3
;vc; Component: CLS.EF.ui.backend.controls.grid
;vc;  Location: SmallDev
;vc; Date/Time: 10-Mar-14 10:24
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.backend.controls.grid.CLS/EV.3</td><td>CLS.EF.ui.backend.controls.grid</td><td>SmallDev</td><td style='white-space: nowrap;'>10-Mar-14 10:24</td><td>AdrianM</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63256,41538.883407</TimeChanged>
<TimeCreated>63134,53503.397111</TimeCreated>

<Property name="columns">
<Type>gridColumn</Type>
<Collection>list</Collection>
</Property>

<Property name="allowCreate">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="allowUpdate">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="allowDelete">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="updateButtonText">
<Type>%String</Type>
<InitialExpression>"Save"</InitialExpression>
</Property>

<Property name="dataCreateURL">
<Type>%String</Type>
<Parameter name="MAXLEN" value="250"/>
</Property>

<Property name="dataReadURL">
<Type>%String</Type>
<Parameter name="MAXLEN" value="250"/>
</Property>

<Property name="dataUpdateURL">
<Type>%String</Type>
<Parameter name="MAXLEN" value="250"/>
</Property>

<Property name="dataDeleteURL">
<Type>%String</Type>
<Parameter name="MAXLEN" value="250"/>
</Property>

<Property name="width">
<Type>%Integer</Type>
<InitialExpression>-1</InitialExpression>
</Property>

<Property name="gridID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="idColumn">
<Type>%Integer</Type>
<InitialExpression>-1</InitialExpression>
</Property>

<Method name="addColumn">
<FormalSpec>name,displayTitle="",isHidden=0,dataType="string",editorType="dropdown",width=-1,mandatory=1</FormalSpec>
<Implementation><![CDATA[
	set myColumn=##class(gridColumn).createColumn(name,displayTitle,isHidden,dataType,editorType,width,mandatory)
	do ..columns.Insert(myColumn)
]]></Implementation>
</Method>

<Method name="addColumnDropdownRemoteData">
<FormalSpec>name,displayTitle="",isHidden=0,dataType="string",editorType="dropdown",width=-1,mandatory=1,getDataURL</FormalSpec>
<Implementation><![CDATA[
	set myColumn=##class(gridColumnDropdownRemoteData).createColumn(name,displayTitle,isHidden,dataType,editorType,width, mandatory,getDataURL)
	do ..columns.Insert(myColumn)
]]></Implementation>
</Method>

<Method name="addColumnDropdownLocalData">
<FormalSpec>name,displayTitle="",isHidden=0,dataType="string",editorType="dropdown",width=-1,mandatory=1,listObject:%ListOfDataTypes=""</FormalSpec>
<Implementation><![CDATA[
	set myColumn=##class(gridColumnDropdownLocalData).createColumn(name,displayTitle,isHidden,dataType,editorType,width, mandatory,listObject)
	do ..columns.Insert(myColumn)
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	write !,"<DIV id="_..gridID_" width='"_..width_"px;'></div>"
	write !,"<script language='javascript'>"
		write !,"$(function() {"

			do ..renderDataModel()
			
			do ..renderDataSource()	
			
			do ..renderKendoGridParams()
			
			do ..renderEditors()
				
		write !,"});"
	write !,"</script>"
]]></Implementation>
</Method>

<Method name="renderKendoGridParams">
<Implementation><![CDATA[

	write !,"	$('#"_..gridID_"').kendoGrid({"
		write !,"editable: {"
			write !,"mode: 'inline'"
			if ..allowUpdate {
				write !,",update: true"
			}
			if ..allowCreate {
				write !,",createAt: 'top'"
			}
			if ..allowDelete {
				write !,",destroy: true"
				write !,",confirmation: 'Ok to delete?'"
			}
		write !,"},"
		write !,"scrollable: false,"
		write !,"sortable: false,"
		write !,"selectable: false,"
		write !,"resizable: true,"
		write !,"navigatable: true,"
		if ..allowCreate {
			write !,"toolbar: ["
				write !,"{ name: 'create', text:'Add' }"
			write !,"],"	
		}
		
		do ..renderColumnsDefinition()
		
		write !,"dataSource: myDataSource"_..gridID_","

		write !,"edit: function(e) {"
		write !,"},"
		write !,"remove: function(e) {"
		write !,"}"

		
	write !,"})"
]]></Implementation>
</Method>

<Method name="renderDataModel">
<Implementation><![CDATA[
	write !,"var myDataModel"_..gridID_" = kendo.data.Model.define({"
		if ..idColumn>0 write !,"id:'"_..columns.GetAt(..idColumn).name_"',"
		write !,"fields: {"
			for col=1:1:..columns.Count() {
				if col>1 w ","
				write !,..columns.GetAt(col).name_": { type: '"_..columns.GetAt(col).dataType_"'}"	
			}
		write !,"}"
	write !,"});"
]]></Implementation>
</Method>

<Method name="renderDataSource">
<Implementation><![CDATA[
	write !,"var myDataSource"_..gridID_" = new kendo.data.DataSource({"
		write !,"transport: {"
			write !,"read: {"
				write !,"url: '"_..dataReadURL_"',"
				write !,"dataType: 'json',"
				write !,"type: 'GET'"
			write !,"}"
			if $l(..dataUpdateURL) {
				write !,",update: {"
					write !,"url: '"_..dataUpdateURL_"',"
					write !,"dataType: 'json',"
					write !,"type: 'GET'"
				write !,"}"
			}
			if $l(..dataCreateURL) {
				write !,",create: {"
					write !,"url: '"_..dataCreateURL_"',"
					write !,"dataType: 'json',"
					write !,"type: 'GET'"
				write !,"}"
			}
			if $l(..dataDeleteURL) {
				write !,",destroy: {"
					write !,"url: '"_..dataDeleteURL_"',"
					write !,"dataType: 'json',"
					write !,"type: 'GET'"
				write !,"}"
			}
		write !,"},"
		write !,"schema: {"
			write !,"model: myDataModel"_..gridID
		write !,"}"
	write !,"});"
]]></Implementation>
</Method>

<Method name="renderColumnsDefinition">
<Implementation><![CDATA[
	write !,"columns: ["
		set tmpCnt=""
		for col=1:1:..columns.Count() {
			if ..columns.GetAt(col).isHidden continue
			if $I(tmpCnt)>1 w ","
			do ..columns.GetAt(col).renderColumnDefinition()			
		}
		if (..allowUpdate) ! (..allowDelete) {
			write ",",!,"{command: ["
				if ..allowUpdate write "{ name: ""edit"", text: { update: """_..updateButtonText_""" } }"
				if ..allowDelete {
					if ..allowUpdate w ","
					write "'destroy'"	
				}			 	
			write "]}"
		}
	write !,"],"
]]></Implementation>
</Method>

<Method name="renderEditors">
<Implementation><![CDATA[
	for col=1:1:..columns.Count() {
		do ..columns.GetAt(col).renderEditor()
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.backend.controls.gridColumn">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.backend.controls.gridColumn.CLS/EV.1
;vc; Component: CLS.EF.ui.backend.controls.gridColumn
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.backend.controls.gridColumn.CLS/EV.1</td><td>CLS.EF.ui.backend.controls.gridColumn</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63204,56655</TimeChanged>
<TimeCreated>63134,53516.721975</TimeCreated>

<Property name="displayTitle">
<Type>%String</Type>
<Parameter name="MAXLEN" value="250"/>
</Property>

<Property name="name">
<Type>%String</Type>
<Parameter name="MAXLEN" value="250"/>
</Property>

<Property name="isHidden">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="editorType">
<Type>%String</Type>
<InitialExpression>"dropdown"</InitialExpression>
<Required>1</Required>
<Parameter name="VALUELIST" value=",dropdown"/>
</Property>

<Property name="dataType">
<Type>%String</Type>
<InitialExpression>"string"</InitialExpression>
<Required>1</Required>
<Parameter name="VALUELIST" value=",number,string"/>
</Property>

<Property name="width">
<Type>%Integer</Type>
<InitialExpression>-1</InitialExpression>
</Property>

<Property name="mandatory">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Method name="createColumn">
<ClassMethod>1</ClassMethod>
<FormalSpec>name,displayTitle="",isHidden=0,dataType="string",editorType="dropdown",width=-1,mandatory=1</FormalSpec>
<ReturnType>gridColumn</ReturnType>
<Implementation><![CDATA[
	if $G(name)="" throw ##class(shared.exceptions.generalException).%New("No column name defined")
	
	set myObject=..%New()
	set myObject.displayTitle=displayTitle
	set myObject.isHidden=isHidden
	set myObject.dataType=dataType
	set myObject.editorType=editorType
	set myObject.width=width
	set myObject.name=name
	set myObject.mandatory=mandatory

	
	quit myObject
]]></Implementation>
</Method>

<Method name="renderEditor">
<Implementation><![CDATA[	// skeleton method
]]></Implementation>
</Method>

<Method name="renderColumnDefinition">
<Implementation><![CDATA[
	write !,"{"
	write "title: '"_..displayTitle_"', "
 	write "field: '"_..name_"', "
 	write "attributes: { 'class': 'ef_data_text'},"
 	write "headerAttributes: { 'class': 'ef_tabular_form_header' },"
 	write "hidden: "_..isHidden
 	if ..editorType="dropdown" {
	 	set editorID=..editorType_..name_"Editor"
 		write ", editor: "_editorID_""
 	}
 	if ..width>0 {
	 	write ", width: "_..width
 	}
 	do ..renderValuesDefinition()
	Write "}"
]]></Implementation>
</Method>

<Method name="renderValuesDefinition">
</Method>
</Class>


<Class name="EF.ui.backend.controls.gridColumnDropdown">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.backend.controls.gridColumnDropdown.CLS/EV.1
;vc; Component: CLS.EF.ui.backend.controls.gridColumnDropdown
;vc;  Location: SmallDev
;vc; Date/Time: 26-Feb-14 12:20
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.backend.controls.gridColumnDropdown.CLS/EV.1</td><td>CLS.EF.ui.backend.controls.gridColumnDropdown</td><td>SmallDev</td><td style='white-space: nowrap;'>26-Feb-14 12:20</td><td>AdrianM</td></tr></table>
]]></Description>
<Super>EF.ui.backend.controls.gridColumn</Super>
<TimeChanged>63244,44755.960816</TimeChanged>
<TimeCreated>63134,53539.220646</TimeCreated>

<Property name="dropdownID">
<Type>%String</Type>
</Property>

<Method name="createColumn">
<ClassMethod>1</ClassMethod>
<FormalSpec>name,displayTitle="",isHidden=0,dataType="string",editorType="dropdown",width=-1,mandatory=1</FormalSpec>
<ReturnType>gridColumn</ReturnType>
<Implementation><![CDATA[
	set myColumn=##super(name,displayTitle,isHidden,dataType,editorType,width, mandatory)
	set myColumn.dropdownID="dropdown_"_myColumn.name
	quit myColumn
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.backend.controls.gridColumnDropdownLocalData">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.backend.controls.gridColumnDropdownLocalData.CLS/EV.2
;vc; Component: CLS.EF.ui.backend.controls.gridColumnDropdownLocalData
;vc;  Location: SmallDev
;vc; Date/Time: 26-Feb-14 12:24
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.backend.controls.gridColumnDropdownLocalData.CLS/EV.2</td><td>CLS.EF.ui.backend.controls.gridColumnDropdownLocalData</td><td>SmallDev</td><td style='white-space: nowrap;'>26-Feb-14 12:24</td><td>AdrianM</td></tr></table>
]]></Description>
<Super>EF.ui.backend.controls.gridColumnDropdown</Super>
<TimeChanged>63244,47305.90525</TimeChanged>
<TimeCreated>63134,53434.806263</TimeCreated>

<Property name="dropdownAlternatives">
<Type>%ListOfDataTypes</Type>
</Property>

<Property name="onChangeJS">
<Type>%String</Type>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Method name="createColumn">
<ClassMethod>1</ClassMethod>
<FormalSpec>name,displayTitle="",isHidden=0,dataType="string",editorType="dropdown",width=-1,mandatory=1,listObject:%ListOfDataTypes=""</FormalSpec>
<ReturnType>gridColumn</ReturnType>
<Implementation><![CDATA[
	set myColumn=##super(name,displayTitle,isHidden,dataType,editorType,width, mandatory=1)
	set myColumn.dropdownAlternatives=listObject
	quit myColumn
]]></Implementation>
</Method>

<Method name="renderEditor">
<Implementation><![CDATA[
		set editorID=..editorType_..name_"Editor"

		&js<
		function #(editorID)#(container, options) {
			
    $('<input id="#(..dropdownID)#" required data-text-field="text" class="ef_gridDropdownClass" data-value-field="value" data-bind="value:' + options.field + '"/>')
        .appendTo(container)
        .kendoDropDownList({
            autoBind: true,
            dataSource: {
	         	data: #[do ..renderAlternativesJSON()]# 
            },
            dataTextField: "text",
            dataValueField:"value"
            #[do ..renderOnChangeJS()]#

        });	
		}
	>
]]></Implementation>
</Method>

<Method name="renderOnChangeJS">
<Implementation><![CDATA[
	if $l(..onChangeJS) {
		w ",change: "_..onChangeJS,!
	}
]]></Implementation>
</Method>

<Method name="renderValuesDefinition">
<Implementation><![CDATA[
	&js<
		,values : #[do ..renderAlternativesJSON()]#
	>
]]></Implementation>
</Method>

<Method name="renderAlternativesJSON">
<Implementation><![CDATA[
	Set jsonProvider = ##class(%ZEN.Auxiliary.jsonProvider).%New()
	Set jsonProvider.%Format="aelo"
	Do jsonProvider.%SetTargetObject(..dropdownAlternatives)
	Do jsonProvider.%DrawJSON()
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.backend.controls.gridColumnDropdownRemoteData">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.backend.controls.gridColumnDropdownRemoteData.CLS/EV.2
;vc; Component: CLS.EF.ui.backend.controls.gridColumnDropdownRemoteData
;vc;  Location: SmallDev
;vc; Date/Time: 26-Feb-14 12:24
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.backend.controls.gridColumnDropdownRemoteData.CLS/EV.2</td><td>CLS.EF.ui.backend.controls.gridColumnDropdownRemoteData</td><td>SmallDev</td><td style='white-space: nowrap;'>26-Feb-14 12:24</td><td>AdrianM</td></tr></table>
]]></Description>
<Super>EF.ui.backend.controls.gridColumnDropdown</Super>
<TimeChanged>63244,44717.041206</TimeChanged>
<TimeCreated>63134,53448.454231</TimeCreated>

<Property name="getDataURL">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="250"/>
</Property>

<Method name="createColumn">
<ClassMethod>1</ClassMethod>
<FormalSpec>name,displayTitle="",isHidden=0,dataType="string",editorType="dropdown",width=-1,mandatory=1,getDataURL</FormalSpec>
<ReturnType>gridColumn</ReturnType>
<Implementation><![CDATA[
	set myColumn=##super(name,displayTitle,isHidden,dataType,editorType,width, mandatory)
	set myColumn.getDataURL=getDataURL
	quit myColumn
]]></Implementation>
</Method>

<Method name="renderEditor">
<Implementation><![CDATA[
		set editorID=..editorType_..name_"Editor"
		&js<
		
		var dataSource#(editorID)# = new kendo.data.DataSource({
			transport: {
                read: {
					url: "#(..getDataURL)#",
					dataType: "json"
                }
            },
			schema: {
				data: "children"
			} 
		});
		dataSource#(editorID)#.fetch()
		
		function #(editorID)#(container, options) {
		    $('<input id="#(..dropdownID)#" #($S(..mandatory:"required",1:""))# data-text-field="description" class="ef_gridDropdownClass" data-value-field="description" data-bind="value:' + options.field + '"/>')
		        .appendTo(container)
		        .kendoDropDownList({
		            autoBind: false,
		            dataSource: dataSource#(editorID)#
		     });	
		}
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.backend.controls.lightBox">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.backend.controls.lightBox.CLS/EV.2
;vc; Component: CLS.EF.ui.backend.controls.lightBox
;vc;  Location: SmallDev
;vc; Date/Time: 31-Mar-14 18:08
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.backend.controls.lightBox.CLS/EV.2</td><td>CLS.EF.ui.backend.controls.lightBox</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Mar-14 18:08</td><td>AdrianM</td></tr></table>
]]></Description>
<Super>base</Super>
<TimeChanged>63278,34659.340104</TimeChanged>
<TimeCreated>63151,59364.073093</TimeCreated>

<Property name="boxTitle">
<Type>%String</Type>
</Property>

<Property name="showBoxTitle">
<Type>%Boolean</Type>
</Property>

<Property name="width">
<Type>%String</Type>
<InitialExpression>"300px"</InitialExpression>
</Property>

<Property name="classes">
<Type>%String</Type>
<InitialExpression>"ef_backend_lightbox contentbox"</InitialExpression>
</Property>

<Property name="allowClose">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="actionButtonID">
<Type>%String</Type>
</Property>

<Property name="cancelButtonID">
<Type>%String</Type>
</Property>

<Property name="enableDefaultFormKeyBindings">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Method name="show">
<Implementation><![CDATA[
	&js<
		var tempFunc = function() {
			var ele=$('##(..htmlID)#');
			
			if (ele.length == 0) {
				$('body').append('<div id="#(..htmlID)#" class="#(..classes)#"></div>');
				ele=$('##(..htmlID)#');
			} else {
				ele.addClass('#(..classes)#');
				ele.css("visibility", "visible");
			}
			
			// ele.addClass('ef_backend_lightbox').addClass('contentbox');
			
			if (!ele.data('kendoWindow')) {
				ele.kendoWindow({
					width: '#(..width)#'
					, title: #($SELECT(..showBoxTitle:##class(shared.pCSP).QuoteJS(..boxTitle),1:"false"))#
					, pinned: true
					, modal: true
					, resizable: false
					, draggable: false
					, actions: [#($SELECT(..allowClose:"'Close'",1:""))#]
					, visible: false
				});
			}
			
			// hacking because there's no way to just not show the close button if 'Close' action is allowed!
			var closeEle=ele.closest('.k-window').find('.k-i-close')
			if (closeEle.length != 0) {
				closeEle.parent().hide();
			}
			
			if (#(..enableDefaultFormKeyBindings)#) {
				ele.data('kendoWindow').setOptions({
					open: function() {
								$('form').bind('keypress.lightbox', function(event) {
							            if (event.keyCode == 13) return false;
								});
								$(window).bind('keyup.lightbox', function(event) {
									if (event.keyCode == 13) {   // enter
										var actionEle=$('##(..actionButtonID)#');
										if (actionEle.length != 0) {
								  			actionEle.click();
										}
									}
									if (event.keyCode == 27) {   // esc
										var cancelEle=$('##(..cancelButtonID)#'); 
										if (cancelEle.length != 0) {
								  			cancelEle.click();
										}
									}
								});
							}
					, close: function() {
								$('form').unbind('.lightbox');
								$(window).unbind('.lightbox');
							}
				});				
			}
			
			ele.data('kendoWindow').center().open();

		}
		tempFunc();
	>
]]></Implementation>
</Method>

<Method name="hide">
<Implementation><![CDATA[
	&js<
		var tempFunc = function() {
			var ele=$('##(..htmlID)#');
			if (ele.data('kendoWindow')) {
				ele.data('kendoWindow').close();
			}
		}
		tempFunc();
	>
]]></Implementation>
</Method>

<Method name="showCloseButton">
<Implementation><![CDATA[
	// DOES NOT DISPLAY THE ACTUAL BUTTON!
	
	&js<
		var tempFunc = function() {
			var ele=$('##(..htmlID)#');
			var kenWin=ele.data('kendoWindow');
			if (kenWin) {
				kenWin.setOptions({
					actions: ['Close']
				});
			}
		}
		tempFunc();
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.backend.controls.newPasswordInput">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.backend.controls.newPasswordInput.CLS/EV.0
;vc; Component: CLS.EF.ui.backend.controls.newPasswordInput
;vc;  Location: SmallDev
;vc; Date/Time: 02-Feb-14 02:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.backend.controls.newPasswordInput.CLS/EV.0</td><td>CLS.EF.ui.backend.controls.newPasswordInput</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Feb-14 02:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63154,61565</TimeChanged>
<TimeCreated>63154,43066.559768</TimeCreated>

<Property name="htmlID">
<Type>%String</Type>
</Property>

<Property name="promptClass">
<Type>%String</Type>
<InitialExpression>"ef_data_prompt_short"</InitialExpression>
</Property>

<Property name="inputClass">
<Type>%String</Type>
</Property>

<Property name="rowClass">
<Type>%String</Type>
</Property>

<Property name="errorRowClass">
<Type>%String</Type>
<InitialExpression>"ef_backend_dialog_error_message_container"</InitialExpression>
</Property>

<Property name="newPasswordPromptText">
<Type>%String</Type>
<InitialExpression>"New password"</InitialExpression>
</Property>

<Property name="verifyPromptText">
<Type>%String</Type>
<InitialExpression>"Verify password"</InitialExpression>
</Property>

<Method name="render">
<Implementation><![CDATA[
	do ..renderContent()
	&html<
		<script language="javascript">
			#[do ..renderJS()]#
		</script>
	>
]]></Implementation>
</Method>

<Method name="renderContent">
<Implementation><![CDATA[
	&html<
		<div class='#(..rowClass)#'>
			<div class='#(..promptClass)#'>
				<label for='#(..htmlID)#_new' class='#(..promptClass)#'>#(..newPasswordPromptText)#</label>
			</div>
			<div class='#(..inputClass)#'>
				<input type='password' name='#(..htmlID)#_new' id='#(..htmlID)#_new' autocomplete='off'>
			</div>
		</div>
		<div class='#(..rowClass)#'>
			<div class='#(..promptClass)#'>
				<label for='#(..htmlID)#_retyped' class='#(..promptClass)#'>#(..verifyPromptText)#</label>
			</div>
			<div class='#(..inputClass)#'>
				<input type='password' name='#(..htmlID)#_retyped' id='#(..htmlID)#_retyped' autocomplete='off'>
			</div>
		</div>
		<div class="#(..errorRowClass)#">
			<span id="#(..htmlID)#_error_message" class="ef_backend_dialog_error_message"></span>
		</div>
		<input type="hidden" id="#(..htmlID)#" name="#(..htmlID)#" value="">
	>
]]></Implementation>
</Method>

<Method name="renderJS">
<Implementation><![CDATA[
	&js<
		$(function() {
			$("##(..htmlID)#_new, ##(..htmlID)#_retyped").keyup ( function () {
				var newPassword = $('##(..htmlID)#_new').val();
				var newPasswordsRetyped = $('##(..htmlID)#_retyped').val();
				if (newPassword != newPasswordsRetyped) {
					$("##(..htmlID)#_error_message").text("Passwords do not match")
					$('##(..htmlID)#').val("");	
				} else {
					$("##(..htmlID)#_error_message").text("")	
					$('##(..htmlID)#').val(newPassword);
				}
			});
		
		});
	>
]]></Implementation>
</Method>

<Method name="disable">
<Implementation><![CDATA[
	&js<
		$('##(..htmlID)#').val('');
		$("##(..htmlID)#_error_message").text('')
		$('##(..htmlID)#_new').val('');
		$('##(..htmlID)#_retyped').val('');
		$('##(..htmlID)#_new').prop('disabled', true);
		$('##(..htmlID)#_retyped').prop('disabled', true);
	>
]]></Implementation>
</Method>

<Method name="enable">
<Implementation><![CDATA[
	&js<
		$('##(..htmlID)#').val('');
		$('##(..htmlID)#_new').val('');
		$("##(..htmlID)#_error_message").text('')
		$('##(..htmlID)#_new').prop('disabled', false);
		$('##(..htmlID)#_retyped').prop('disabled', false);
	>
]]></Implementation>
</Method>

<Method name="getPassword">
<Implementation><![CDATA[
	set out="$('#"_..htmlID_"').val()"
	quit out
]]></Implementation>
</Method>

<Method name="renderError">
<Description>
msgVar is a javascript variable use QuoteJS to pass through a literal</Description>
<FormalSpec>msgVar</FormalSpec>
<Implementation><![CDATA[
	set out="$('#"_..htmlID_"_error_message').text("_msgVar_")"
	quit out
]]></Implementation>
</Method>

<Method name="hasError">
<Implementation><![CDATA[
	set out="($('#"_..htmlID_"_error_message').text() != '')"
	quit out
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.backend.controls.notification">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.backend.controls.notification.CLS/EV.0
;vc; Component: CLS.EF.ui.backend.controls.notification
;vc;  Location: SmallDev
;vc; Date/Time: 02-Feb-14 02:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.backend.controls.notification.CLS/EV.0</td><td>CLS.EF.ui.backend.controls.notification</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Feb-14 02:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63159,58953</TimeChanged>
<TimeCreated>63155,58192.081128</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Theme defines the style class to use for rendering the notification.

]]></Content>
</UDLText>

<Property name="theme">
<Type>%String</Type>
</Property>

<Property name="hasCloser">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="isSticky">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
// life span in milliseconds. 

]]></Content>
</UDLText>

<Property name="showDuration">
<Type>%Integer</Type>
<InitialExpression>5000</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
// The actual message to display.

]]></Content>
</UDLText>

<Property name="message">
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// to specify a position.

]]></Content>
</UDLText>

<Property name="position">
<Type>%String</Type>
<InitialExpression>"top-right"</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
// fade speed in milliseconds. 

]]></Content>
</UDLText>

<Property name="fadeSpeed">
<Type>%Integer</Type>
<InitialExpression>500</InitialExpression>
</Property>

<Method name="writeCSS">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&html<
		<style type="text/css" media="screen">			
			.jGrowl-notification {
				line-height:1.4em;
				border:1px solid #AAAAAA;
				width:300px;
				word-wrap: break-word;
			
			}

			div.jGrowl div.jGrowl-notification, div.jGrowl div.jGrowl-closer {
				background-color:#FFFFDD;
				color:#000000;
			}
		</style>
	>
]]></Implementation>
</Method>

<Method name="show">
<Implementation><![CDATA[
	if $L(..message) {
		&html<
			<script language='javascript'>
			#[do ..showJS()]#
			</script>
		>	
	}
]]></Implementation>
</Method>

<Method name="showJS">
<Implementation><![CDATA[
	set messageJS=##class(shared.pCSP).QuoteJS(..message)
	set extras=",{"
	
	if $L(..position) {
		set extras = $S($L(extras)>2:extras_", position:'"_..position_"' ",1:extras_" position:'"_..position_"' ")
	}

	
	if $L(..theme) {
		set extras = $S($L(extras)>2:extras_", theme:'"_..theme_"' ",1:extras_" theme:'"_..theme_"' ")
	}
	
	if ..showDuration {
		set extras = $S($L(extras)>2:extras_", life:"_..showDuration_" ",1:extras_" life:"_..showDuration_" ")
	}

	if ..isSticky {
		set extras = $S($L(extras)>2:extras_", sticky: true",1:extras_" life:sticky ")
	}

	if ..fadeSpeed {
		set extras = $S($L(extras)>2:extras_", speed: "_..fadeSpeed,1:extras_" speed:"_..fadeSpeed)
	}	
	
	if $L(extras)=2 {
		set extras=""
	} else {
		set extras=extras_" }"	
	}
	
	&js<
		$.jGrowl.defaults.closer=false;
		$.jGrowl(#(messageJS)# 
			#(extras)#
		);
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.backend.controls.notificationInfo">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.backend.controls.notificationInfo.CLS/EV.0
;vc; Component: CLS.EF.ui.backend.controls.notificationInfo
;vc;  Location: SmallDev
;vc; Date/Time: 02-Feb-14 02:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.backend.controls.notificationInfo.CLS/EV.0</td><td>CLS.EF.ui.backend.controls.notificationInfo</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Feb-14 02:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.ui.backend.controls.notification</Super>
<TimeChanged>63159,59008</TimeChanged>
<TimeCreated>63155,58223.999087</TimeCreated>

<Property name="theme">
<Type>%String</Type>
<InitialExpression>"info"</InitialExpression>
</Property>

<Method name="writeCSS">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&html<
		<style type="text/css" media="screen">

			div.jGrowl {
				width: 0;
			}

			div.jGrowl div.info {
				font-family: 			AzuroRegular,Verdana,Geneva,Arial,Helvetica,sans-serif;
				font-size: 				12px;
				opacity: 				.90;
				-ms-filter: 			"progid:DXImageTransform.Microsoft.Alpha(Opacity=90)"; 
				filter: 				alpha(Opacity=90); 
				border-color: 			#AAAAAA;
				color: 					#FFFFFF;
				background-color:		#787878;
				padding: 				7px;
				padding-left: 			15px;
				padding-right: 			15px;
			}

			div.jGrowl div.info div.message {
				padding-top: 			0px;
				padding-bottom: 		7px;
				padding-left: 			15px;
				padding-right: 			15px;
			}

			div.jGrowl div.info div.header {
				padding: 				7px;
				padding-left: 			15px;
				padding-right: 			15px;
				font-size: 				17px;
			}

			div.jGrowl div.jGrowl-notification div.jGrowl-close {
				margin-top:				-8px;
				margin-right: 			-12px;
				font-family: 			Verdana,Geneva,Arial,Helvetica,sans-serif;
				padding-right: 			0px;
				font-size: 				12px;
			}
			
			div.jGrowl div.jGrowl-notification {
				min-height: 0;
				min-width: 400px;
			}
	</style>
	>
]]></Implementation>
</Method>

<Method name="showJS">
<Implementation><![CDATA[
	do ##super()
	&js<
		$(function() {
			var jGrowlWidth=$('div#jGrowl div.jGrowl-notification').outerWidth();
			var windowWidth=$(window).width();
			$('div#jGrowl').css('left',(windowWidth-jGrowlWidth)/2);
		});
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.backend.controls.progressBar">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.backend.controls.progressBar.CLS/EV.0
;vc; Component: CLS.EF.ui.backend.controls.progressBar
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.backend.controls.progressBar.CLS/EV.0</td><td>CLS.EF.ui.backend.controls.progressBar</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.ui.backend.controls.base</Super>
<TimeChanged>63222,49195</TimeChanged>
<TimeCreated>63222,43334.0006</TimeCreated>

<Method name="render">
<Implementation><![CDATA[
	&js<
		var tempFunc = function () {
			var ele=$('##(..htmlID)#');
			ele.progressbar({value: false});
		}
		tempFunc();
	>
]]></Implementation>
</Method>

<Method name="setValue">
<FormalSpec>valueJSVar</FormalSpec>
<Implementation><![CDATA[
	&js<
		var tempFunc = function (newValue) {
			var ele=$('##(..htmlID)#');
			ele.progressbar({value: Math.floor(newValue)});
		}
		tempFunc(#(valueJSVar)#);
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.backend.pageInclude.bulkEmailErrors">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.backend.pageInclude.bulkEmailErrors.CLS/EV.1
;vc; Component: CLS.EF.ui.backend.pageInclude.bulkEmailErrors
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.backend.pageInclude.bulkEmailErrors.CLS/EV.1</td><td>CLS.EF.ui.backend.pageInclude.bulkEmailErrors</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject,EF.htmlGenerator</Super>
<TimeChanged>64106,54917</TimeChanged>
<TimeCreated>63153,39518.997687</TimeCreated>

<Property name="htmlID">
<Type>%String</Type>
</Property>

<Property name="newPasswordInput">
<Type>EF.ui.backend.controls.newPasswordInput</Type>
</Property>

<Property name="lightBox">
<Type>EF.ui.backend.controls.lightBox</Type>
</Property>

<Property name="bulkMailBuilder">
<Type>mail.bulkMailBuilder</Type>
</Property>

<Property name="errors">
<Type>mail.mailBuilderErrors</Type>
</Property>

<Method name="render">
<ClassMethod>1</ClassMethod>
<FormalSpec>mailBuilderErrors:mail.mailBuilderErrors</FormalSpec>
<Implementation><![CDATA[
	set lightBox=..%New()
	set lightBox.htmlID="bulkEmailLightBox"
	set lightBox.lightBox=##class(EF.ui.backend.controls.lightBox).%New(lightBox.htmlID)
	set lightBox.lightBox.boxTitle="Email Sending"
	set lightBox.lightBox.showBoxTitle=1
	set lightBox.lightBox.width="540px"
	set lightBox.lightBox.cancelButtonID="lightBoxClose"
	set lightBox.errors=mailBuilderErrors
	
	
	&html<
		<div id="#(..encodeForHTMLAttribute(lightBox.encodeForHTMLAttribute(lightBox.htmlID)))#" style="visibility:hidden;">
			<div class='ef_settings_group'>
				<div class='ef_backend_dialog_row'>
					#[do lightBox.renderContents()]#
				</div>
			</div>
			<div class="ef_backend_button_section">
				<input type="image" id="#(..encodeForHTMLAttribute(lightBox.lightBox.cancelButtonID))#" src="../../media/images/English/Default/backend/close.gif" border="0" alt="cancel" name="Close">
			</div>
		</div>
		<script language="javascript">
			$(function() {
				#[do lightBox.renderShowJS()]#
				$('##(..encodeForJavaScript(lightBox.lightBox.cancelButtonID))#').click( function () {
					#[do lightBox.renderHideJS()]#
				});
			});
		</script>
	>
]]></Implementation>
</Method>

<Method name="renderContents">
<Implementation><![CDATA[
	if ..errors.hasTagError() {
		&html<<div class="alert alert-danger">
			<p>Your email contains some tags that cannot be merged in this context:</p>
			<ul>
		>
		set tagErrors=..errors.getListOfTagErrors()
		for i=1:1:tagErrors.Count() {
			w "<li>"_tagErrors.GetAt(i)_"</li>"
		}			
		&html<</ul>>
		do ..renderTagErrorFooterText()
		&html<</div>
		>
	}
	if ..errors.hasMissingToAddress() {
		&html<<div class="alert alert-danger">
			<p>The following recipients do not have a valid email address:</p>
			<ul>
		>
		set listOfPeople=..errors.getListOfPeopleWithoutToAddress()
		for i=1:1:listOfPeople.Count() {
			&html<<li>#(..encodeForHTML(##class(cod.objPerson).getFullName(listOfPeople.GetAt(i))))#</li>>
		}
		&html<</ul>
			</div>>
	}
]]></Implementation>
</Method>

<Method name="renderTagErrorFooterText">
<Implementation><![CDATA[	&html<<p>Either change the tags or send the email from the supported context.</p>>
]]></Implementation>
</Method>

<Method name="renderShowJS">
<Implementation><![CDATA[
	&js< 
			#[do ..lightBox.show()]#
			$('##(..encodeForJavaScript(..htmlID))#').show();
	>
]]></Implementation>
</Method>

<Method name="renderHideJS">
<Implementation><![CDATA[
	&js<
		#[do ..lightBox.hide()]#
		$('##(..encodeForJavaScript(..htmlID))#').hide();
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.backend.pageInclude.bulkEmailErrorsScheduledInvitations">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.backend.pageInclude.bulkEmailErrorsScheduledInvitations.CLS/EV.0
;vc; Component: CLS.EF.ui.backend.pageInclude.bulkEmailErrorsScheduledInvitations
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.backend.pageInclude.bulkEmailErrorsScheduledInvitations.CLS/EV.0</td><td>CLS.EF.ui.backend.pageInclude.bulkEmailErrorsScheduledInvitations</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.backend.pageInclude.bulkEmailErrors</Super>
<TimeChanged>64097,64641</TimeChanged>
<TimeCreated>64013,46061.654726</TimeCreated>

<Method name="renderFooterText">
<Implementation><![CDATA[	&html<<p>Change the tags and re-schedule the email.</p>>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.backend.pageInclude.scheduleEmailLightBox">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.backend.pageInclude.scheduleEmailLightBox.CLS/EV.1
;vc; Component: CLS.EF.ui.backend.pageInclude.scheduleEmailLightBox
;vc;  Location: SmallDev
;vc; Date/Time: 25-May-16 15:08
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.backend.pageInclude.scheduleEmailLightBox.CLS/EV.1</td><td>CLS.EF.ui.backend.pageInclude.scheduleEmailLightBox</td><td>SmallDev</td><td style='white-space: nowrap;'>25-May-16 15:08</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.htmlGenerator,%RegisteredObject</Super>
<TimeChanged>64063,54548.981574</TimeChanged>
<TimeCreated>63153,39518.997687</TimeCreated>

<Property name="htmlID">
<Type>%String</Type>
</Property>

<Property name="lightBox">
<Type>EF.ui.backend.controls.lightBox</Type>
</Property>

<Method name="render">
<ClassMethod>1</ClassMethod>
<FormalSpec>openerHtmlID,dateHtmlID,timeHtmlID,scheduleFlagHtmlID,xUserInputDateFormat</FormalSpec>
<Implementation><![CDATA[
	set scheduleEmailLightBox=..%New()
	set scheduleEmailLightBox.htmlID="scheduleEmailLightBox"
	
	Set scheduleEmailLightBox.lightBox=##class(EF.ui.backend.controls.lightBox).%New(scheduleEmailLightBox.htmlID)
	set scheduleEmailLightBox.lightBox.boxTitle="Schedule Sending of Emails"
	set scheduleEmailLightBox.lightBox.showBoxTitle=1
	set scheduleEmailLightBox.lightBox.width="660px"
	set scheduleEmailLightBox.lightBox.cancelButtonID="scheduleEmailLightBoxClose"
	set scheduleEmailLightBox.lightBox.actionButtonID="scheduleEmailLightSubmit"
	
	
	&html<
		<div id="#(..encodeForHTMLAttribute(scheduleEmailLightBox.htmlID))#" style="visibility:hidden;">
			<div class='ef_settings_group'>
				<table width="100%" border="0" cellpadding="0" cellspacing="0">
					<tr>
						<td colspan="2" class="blackbold10px">The sending of emails can be delayed to a future date and time of your choice.
					</tr>
					<tr height="40">
						<td class="black10px">
							<tx>Send at</tx>&nbsp;&nbsp;<input type="text" id="lbScheduleTime" class="black10px"> (HH:MM) #(##class(shared.timeFunctions).showUTClabel())#
						</td>
						<td class="black10px">
							<input type="text" id="lbScheduleDate" value="" class="black10px efDatePicker" inputDateFormat="#(xUserInputDateFormat)#">&nbsp;(#(##class(shared.dateFunctions).getBackendInputDatePattern())#) #(##class(shared.timeFunctions).showUTClabel())#
						</td>
					</tr>
	    		</table>
			</div>
			<div class="ef_backend_button_section">
				<input type="image" id="#(scheduleEmailLightBox.lightBox.cancelButtonID)#" src="../../media/images/English/Default/backend/cancel.gif" border="0" alt="cancel" name="Cancel">
				<input type="image" id="#(scheduleEmailLightBox.lightBox.actionButtonID)#" src="../../media/images/English/Default/backend/send.gif" border="0" alt="Save" name="Submit">
			</div>
		</div>
		<script language="javascript">
			$(function() {
				$("##(..encodeForJavaScript(openerHtmlID))#").click( function (event) {
					event.preventDefault();
					#[do scheduleEmailLightBox.renderShowJS()]#
				});
				$('##(scheduleEmailLightBox.lightBox.cancelButtonID)#').click( function () {
					#[do scheduleEmailLightBox.renderHideJS()]#
					$("#txtScheduleDate").val('');
					$("#txtScheduleTime").val('');
				});
				$('##(scheduleEmailLightBox.lightBox.actionButtonID)#').click( function (event) {
					event.preventDefault();
					$("##(..encodeForJavaScript(timeHtmlID))#").val($("#lbScheduleTime").val());
					$("##(..encodeForJavaScript(dateHtmlID))#").val($("#lbScheduleDate").val());
					$("##(..encodeForJavaScript(scheduleFlagHtmlID))#").val(1);
					$("##(..encodeForJavaScript(openerHtmlID))#").closest("form").submit();
				});
			});
		</script>
	>
]]></Implementation>
</Method>

<Method name="renderShowJS">
<Implementation><![CDATA[
	&js< 
			#[do ..lightBox.show()]#
			$('##(..htmlID)#').show();
	>
]]></Implementation>
</Method>

<Method name="renderHideJS">
<Implementation><![CDATA[
	&js<
		#[do ..lightBox.hide()]#
		$('##(..htmlID)#').hide();
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.backend.pageInclude.userDetailsPasswordReset">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.backend.pageInclude.userDetailsPasswordReset.CLS/EV.2
;vc; Component: CLS.EF.ui.backend.pageInclude.userDetailsPasswordReset
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-14 08:43
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.backend.pageInclude.userDetailsPasswordReset.CLS/EV.2</td><td>CLS.EF.ui.backend.pageInclude.userDetailsPasswordReset</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-14 08:43</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63223,40480</TimeChanged>
<TimeCreated>63153,39518.997687</TimeCreated>

<Property name="htmlID">
<Type>%String</Type>
</Property>

<Property name="personID">
<Type>%String</Type>
</Property>

<Property name="newPasswordInput">
<Type>EF.ui.backend.controls.newPasswordInput</Type>
</Property>

<Property name="lightBox">
<Type>EF.ui.backend.controls.lightBox</Type>
</Property>

<Method name="renderPasswordReset">
<ClassMethod>1</ClassMethod>
<FormalSpec>personID,sendPasswordLinkURL</FormalSpec>
<Implementation><![CDATA[
	set userDetailsPasswordReset=..%New()
	set userDetailsPasswordReset.htmlID="userDetailsPasswordReset"
	
	Set userDetailsPasswordReset.lightBox=##class(EF.ui.backend.controls.lightBox).%New(userDetailsPasswordReset.htmlID)
	set userDetailsPasswordReset.lightBox.boxTitle="Reset Password"
	set userDetailsPasswordReset.lightBox.showBoxTitle=1
	set userDetailsPasswordReset.lightBox.width="348px"
	set userDetailsPasswordReset.lightBox.actionButtonID="userDetailsPasswordResetSave"
	set userDetailsPasswordReset.lightBox.cancelButtonID="userDetailsPasswordResetCancel"
	
	set userDetailsPasswordReset.personID=personID

	set userDetailsPasswordReset.newPasswordInput=##class(EF.ui.backend.controls.newPasswordInput).%New()
	set userDetailsPasswordReset.newPasswordInput.htmlID="newPasswordInput"
	set userDetailsPasswordReset.newPasswordInput.rowClass="ef_backend_dialog_dependent_row"
	set userDetailsPasswordReset.newPasswordInput.errorRowClass="ef_backend_dialog_row"
	set userDetailsPasswordReset.newPasswordInput.promptClass="ef_data_prompt_short black10px"
	
	&html<
		<div id="userDetailsPasswordReset" style="visibility:hidden; width: #(userDetailsPasswordReset.lightBox.width)#;">
			<div class='ef_settings_group'>
				<div class='ef_backend_dialog_row'>
					<input type='radio' name='radPasswordResetMethod' id='radPasswordResetMethodEmail' value='email' SELECTED>
					<label for='radPasswordResetMethodEmail' class='black10px'><tx>Send a reset link by email</tx></label>
				</div>
				<div class='ef_backend_dialog_row'>
					<input type='radio' name='radPasswordResetMethod' id='radPasswordResetMethodTyped' value='typed'>
					<label for='radPasswordResetMethodTyped' class='black10px'><tx>Set password now</tx></label>
				</div>
				#[do userDetailsPasswordReset.newPasswordInput.render()]#
			</div>
			<div class="ef_backend_button_section">
				<input type="image" id="#(userDetailsPasswordReset.lightBox.cancelButtonID)#" src="../../media/images/English/Default/backend/cancel.gif" border="0" alt="cancel" name="Cancel">
				<input type="image" id="#(userDetailsPasswordReset.lightBox.actionButtonID)#" src="../../media/images/English/Default/backend/submit.gif" border="0" alt="Save" name="Submit">
			</div>
		</div>
		<script language="javascript">
			$(function() {
				$('#radPasswordResetMethodEmail').click( function () {
					#[do userDetailsPasswordReset.newPasswordInput.disable()]#
				});
				$('#radPasswordResetMethodTyped').click( function () {
					#[do userDetailsPasswordReset.newPasswordInput.enable()]#
				});
				$('##(userDetailsPasswordReset.lightBox.cancelButtonID)#').click( function () {
					#[do userDetailsPasswordReset.renderHideJS()]#
				});
				$('##(userDetailsPasswordReset.lightBox.actionButtonID)#').click( function () {
					if ($("#radPasswordResetMethodTyped").prop("checked")) {
						#[do userDetailsPasswordReset.resetPasswordJS()]#
					} else {
						#[do userDetailsPasswordReset.sendPasswordLinkJS()]#
					}
				});
				$('#radPasswordResetMethodEmail').click();
				
			});
			
			function showResetPassword() {
				#[do userDetailsPasswordReset.renderShowJS()]#
			}
		</script>
	>
]]></Implementation>
</Method>

<Method name="sendPasswordLinkJS">
<Implementation><![CDATA[
	set successNotification=##class(EF.ui.backend.controls.notificationInfo).%New()
	set email=##class(cod.objItemData).get(..personID,"email")
	set successNotification.message=##class(shared.pCSP).out("A password reset email has been sent to {{{VAR01}}}",,email)
	&js<
		$.ajax({
		  type: 'POST',
		  url: '#(##class(shared.pCSP).Link("userDetailsSendPassword.csp?personID="_..personID))#',
		  dataType: "json",
		  success: function(obj) {
			if (obj.status == "ok") {
				#[do ..renderHideJS()]#
				#[do successNotification.showJS()]#
			} else {
				#(..newPasswordInput.renderError("obj.errorMsg"))#;
			}
		  }
		});	
	>
]]></Implementation>
</Method>

<Method name="resetPasswordJS">
<Implementation><![CDATA[
	set successNotification=##class(EF.ui.backend.controls.notificationInfo).%New()
	set successNotification.message=##class(shared.pCSP).out("Password has been reset")
	&js<
		if ($("#radPasswordResetMethodTyped").prop("checked")) {
			if (#(..newPasswordInput.hasError())# == false) { 
				var newPassword = #(..newPasswordInput.getPassword())#;
				if (newPassword != '') {
					$.ajax({
					  type: 'POST',
					  url: '#(##class(shared.pCSP).Link("userDetailsResetPassword.csp?personID="_..personID))#',
					  dataType: "json",
					  data: {'newPassword' : newPassword },
					  success: function(obj) {
					    if (obj.status == "ok") {
							#[do ..renderHideJS()]#
							#[do successNotification.showJS()]#
						} else {
							#(..newPasswordInput.renderError("obj.errorMsg"))#;
						}
					  }
					});	
				} else {
					var status="Please enter a password";
					#(..newPasswordInput.renderError("status"))#;
				}
			}
		}
	>
]]></Implementation>
</Method>

<Method name="renderShowJS">
<Implementation><![CDATA[
	&js<
		#[do ..lightBox.show()]#
		$('##(..htmlID)#').css("visibility", "visible");
		$('#radPasswordResetMethodEmail').click();
	>
]]></Implementation>
</Method>

<Method name="renderHideJS">
<Implementation><![CDATA[
	&js<
		#[do ..lightBox.hide()]#
		$('##(..htmlID)#').css("visibility", "hidden");
		$("##(..htmlID)#_error_message").text('')
		$('#radPasswordResetMethodEmail').click();
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.alternative">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.alternative.CLS/EV.0
;vc; Component: CLS.EF.ui.components.alternative
;vc;  Location: SmallDev
;vc; Date/Time: 15-Jul-14 15:25
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.alternative.CLS/EV.0</td><td>CLS.EF.ui.components.alternative</td><td>SmallDev</td><td style='white-space: nowrap;'>15-Jul-14 15:25</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.base</Super>
<TimeChanged>63363,58772</TimeChanged>
<TimeCreated>63355,60433.898391</TimeCreated>

<Property name="label">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="value">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="isSelected">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="isDefault">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>
</Class>


<Class name="EF.ui.components.attribute">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.attribute.CLS/EV.1
;vc; Component: CLS.EF.ui.components.attribute
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.attribute.CLS/EV.1</td><td>CLS.EF.ui.components.attribute</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>%RegisteredObject,EF.htmlGenerator</Super>
<TimeChanged>63838,38131</TimeChanged>
<TimeCreated>63771,55871.797567</TimeCreated>

<Property name="name">
<Type>%String</Type>
</Property>

<Property name="value">
<Type>%String</Type>
</Property>

<Method name="addAttributeToList">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&listOfAttributes:%ListOfObjects,name:%String,value:%String]]></FormalSpec>
<Implementation><![CDATA[
	set attribute=##class(EF.ui.components.attribute).%New()
	set attribute.name=name
	set attribute.value=value
	do listOfAttributes.Insert(attribute)
]]></Implementation>
</Method>

<Method name="getAttributesAsHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&listOfAttributes:%ListOfObjects]]></FormalSpec>
<Implementation><![CDATA[
	set extraAttributes=""
	for i=1:1:listOfAttributes.Count() {
		set attribute=listOfAttributes.GetAt(i)
		if ($l(attribute.name))&&($l(attribute.value)) {
			set extraAttributes=extraAttributes_" "_..encodeForHTMLAttribute(attribute.name)_"="""_..encodeForHTMLAttribute(attribute.value)_""""
		}
	}
	return extraAttributes
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.button">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.button.CLS/EV.3
;vc; Component: CLS.EF.ui.components.backend.button
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.button.CLS/EV.3</td><td>CLS.EF.ui.components.backend.button</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.buttonBase</Super>
<TimeChanged>63956,40960</TimeChanged>
<TimeCreated>63404,35213.577879</TimeCreated>

<Property name="contentType">
<Type>%String</Type>
<InitialExpression>"text"</InitialExpression>
</Property>

<Property name="buttonType">
<Type>%String</Type>
<InitialExpression>"secondary"</InitialExpression>
</Property>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" btn"
]]></Implementation>
</Method>

<Method name="renderStart">
<Implementation><![CDATA[
	if ..buttonType="primary" {
		do ..addClass("ef-btn-primary")
	}
	if ..buttonType="secondary" {
		do ..addClass("ef-btn-secondary")
	}
	&html<
		<button id="#(..encodeHTMLAttribute(..htmlID))#" type="button" class="#(..encodeHTMLAttribute(..classes))#" title="#(..encodeHTMLAttribute(..title))#" #(..rawHTML(..getExtraAttributes()))#>
    >
]]></Implementation>
</Method>

<Method name="renderContents">
<Implementation><![CDATA[
	if ..contentType="add" {
		&html<
			<span class="glyphicon glyphicon-plus"></span> 
		>
	}
	if $l(..label) {
		write ..encodeHTMLContent(..label)
	}
	do ##super()
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[
	&html<
        </button>	
    >
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.buttonCloseModal">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.buttonCloseModal.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.buttonCloseModal
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:35
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.buttonCloseModal.CLS/EV.0</td><td>CLS.EF.ui.components.backend.buttonCloseModal</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:35</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.ui.components.buttonBase</Super>
<TimeChanged>63392,57719</TimeChanged>
<TimeCreated>63383,60222.773167</TimeCreated>

<Method name="render">
<Implementation><![CDATA[
	&html<
		<button type="button" id="#(..encodeHTMLAttribute(..htmlID))#" class="btn ef-btn-secondary" data-dismiss="modal">
			#(..encodeHTMLContent(..label))#
        </button>	
    >
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.buttonDelete">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.buttonDelete.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.buttonDelete
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:35
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.buttonDelete.CLS/EV.0</td><td>CLS.EF.ui.components.backend.buttonDelete</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:35</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.ui.components.buttonBase</Super>
<TimeChanged>63392,57744</TimeChanged>
<TimeCreated>63385,63753.47087</TimeCreated>

<Property name="htmlName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="confirmationMessage">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Method name="%OnNew">
<FormalSpec>htmlID:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	do ##super(htmlID)
	set ..htmlName=..htmlID
	
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	
	&html<
		<button id="#(..encodeHTMLAttribute(..htmlID))#" type="button" class="btn ef-btn-secondary btn-sm">
			<span class="glyphicon glyphicon-trash"></span>
        </button>
        <script language="javascript">
        	#[do ..renderJS()]#
        </script>
    >
]]></Implementation>
</Method>

<Method name="renderJS">
<Implementation><![CDATA[
	&js<
		$(function() {
			$('##(..encodeJS(..htmlID))#').click(function() {
				efDeleteButtonClicked('#(..encodeJS(..htmlID))#','#(..encodeJS(..confirmationMessage))#');
			});
		}); 
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.buttonOpenModal">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.buttonOpenModal.CLS/EV.3
;vc; Component: CLS.EF.ui.components.backend.buttonOpenModal
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.buttonOpenModal.CLS/EV.3</td><td>CLS.EF.ui.components.backend.buttonOpenModal</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.button</Super>
<TimeChanged>63949,63713</TimeChanged>
<TimeCreated>63383,53500.026734</TimeCreated>

<Property name="targetUIComponent">
<Type>EF.ui.components.base</Type>
</Property>

<Method name="renderStart">
<Implementation><![CDATA[
	set dataTarget=""
	if $IsObject(..targetUIComponent) {
		set dataTarget="#"_..targetUIComponent.htmlID
	}
	if ..buttonType="primary" {
		do ..addClass("ef-btn-primary")
	}
	if ..buttonType="secondary" {
		do ..addClass("ef-btn-secondary")
	}
	
	do ..addAttribute("data-toggle","modal")
	do ..addAttribute("data-target",dataTarget)
	
	do ##super()
]]></Implementation>
</Method>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" ef_dont_activate_save"
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.buttonOpenModalAjax">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.buttonOpenModalAjax.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.buttonOpenModalAjax
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.buttonOpenModalAjax.CLS/EV.1</td><td>CLS.EF.ui.components.backend.buttonOpenModalAjax</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.button</Super>
<TimeChanged>63896,55394</TimeChanged>
<TimeCreated>63889,38906.785011</TimeCreated>

<Property name="targetURL">
<Type>%String</Type>
</Property>

<Method name="renderStart">
<Implementation><![CDATA[
	do ..addAttribute("data-link-url",..linkURL(..targetURL))
	do ##super()
]]></Implementation>
</Method>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" ef-open-modal ef_dont_activate_save"
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.buttonSubmit">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.buttonSubmit.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.buttonSubmit
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:35
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.buttonSubmit.CLS/EV.0</td><td>CLS.EF.ui.components.backend.buttonSubmit</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:35</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.ui.components.buttonBase</Super>
<TimeChanged>63392,57812</TimeChanged>
<TimeCreated>63383,60314.590696</TimeCreated>

<Method name="render">
<Implementation><![CDATA[
	
	&html<
		<button type="button" id="#(..encodeHTMLAttribute(..htmlID))#" class="btn ef-btn-primary">
			#(..encodeHTMLContent(..label))#
        </button>
        <script language="javascript">
        	#[do ..renderJS()]#
        </script>
    >
]]></Implementation>
</Method>

<Method name="renderJS">
<Implementation><![CDATA[
	&js<
		$(function() {
			$('##(..encodeJS(..htmlID))#').click(function() {
				efSubmitButtonClicked('#(..encodeJS(..htmlID))#');
			});
		}); 
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.buttonSubmitModal">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.buttonSubmitModal.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.buttonSubmitModal
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.buttonSubmitModal.CLS/EV.0</td><td>CLS.EF.ui.components.backend.buttonSubmitModal</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.buttonBase</Super>
<TimeChanged>63746,58348</TimeChanged>
<TimeCreated>63746,58348.994148</TimeCreated>

<Method name="render">
<Implementation><![CDATA[
	
	&html<
		<button type="submit" id="#(..encodeHTMLAttribute(..htmlID))#" class="btn ef-btn-primary">
			#(..encodeHTMLContent(..label))#
        </button>
    >
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.caption">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.caption.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.caption
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.caption.CLS/EV.0</td><td>CLS.EF.ui.components.backend.caption</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.text</Super>
<TimeChanged>63410,64149</TimeChanged>
<TimeCreated>63410,63549.151596</TimeCreated>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" ef-input-group-label-addon"
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	&HTML<
		<span id="#(..encodeHTMLAttribute(..htmlID))#" class="#(..encodeHTMLAttribute(..classes))#">
	>
	do ##super()
	&HTML<
		</span>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.chart.accountSummary">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.accountSummary.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.chart.accountSummary
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.accountSummary.CLS/EV.0</td><td>CLS.EF.ui.components.backend.chart.accountSummary</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.summary</Super>
<TimeChanged>63840,49496</TimeChanged>
<TimeCreated>63834,43176.029928</TimeCreated>

<Parameter name="name">
<Default>Account Summary</Default>
</Parameter>

<Parameter name="description">
<Default>Shows detailed status information for this account.</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>accountSummary</Default>
</Parameter>
</Class>


<Class name="EF.ui.components.backend.chart.allRegistrations">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.allRegistrations.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.chart.allRegistrations
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.allRegistrations.CLS/EV.0</td><td>CLS.EF.ui.components.backend.chart.allRegistrations</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63867,58142</TimeChanged>
<TimeCreated>63833,32776.55679</TimeCreated>

<Parameter name="name">
<Default>Registrations (All Events)</Default>
</Parameter>

<Parameter name="description">
<Default>Column chart showing registrations for all events.</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>allRegistrationsMonth</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceAllRegistrationsMonth.csp</Default>
</Parameter>

<Parameter name="dataSeriesField">
<Default>value</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>column</Default>
</Parameter>

<Parameter name="dataCategoryaxisBaseunit">
<Default>fit</Default>
</Parameter>

<Parameter name="dataCategoryaxisField">
<Default>date</Default>
</Parameter>

<Parameter name="dataCategoryaxisType">
<Default>date</Default>
</Parameter>

<Parameter name="dataTooltipTemplate">
<Default>#: value # registrations</Default>
</Parameter>

<Parameter name="dataCategoryAxisLabelsRotation">
<Default>auto</Default>
</Parameter>

<Parameter name="dataSeriesAggregate">
<Default>sum</Default>
</Parameter>

<Parameter name="dataSharedTooltipTemplate">
<Default>#: points[0].value # registrations</Default>
</Parameter>
</Class>


<Class name="EF.ui.components.backend.chart.allRegistrationsByEvent">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.allRegistrationsByEvent.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.chart.allRegistrationsByEvent
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:15
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.allRegistrationsByEvent.CLS/EV.0</td><td>CLS.EF.ui.components.backend.chart.allRegistrationsByEvent</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:15</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63858,60476</TimeChanged>
<TimeCreated>63833,32776.55679</TimeCreated>

<Parameter name="name">
<Default>Registrations by Event</Default>
</Parameter>

<Parameter name="description">
<Default>Column chart showing the current registration levels across all live events</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>allRegistrationsByEvent</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceAllRegistrationsByEvent.csp</Default>
</Parameter>

<Parameter name="dataSeriesField">
<Default>Value</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>column</Default>
</Parameter>

<Parameter name="dataCategoryaxisField">
<Default>Event</Default>
</Parameter>

<Parameter name="dataTooltipTemplate">
<Default>#: value # registrations</Default>
</Parameter>

<Parameter name="dataCategoryAxisLabelsRotation">
<Default>auto</Default>
</Parameter>
</Class>


<Class name="EF.ui.components.backend.chart.allRevenueByEvent">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.allRevenueByEvent.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.chart.allRevenueByEvent
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.allRevenueByEvent.CLS/EV.1</td><td>CLS.EF.ui.components.backend.chart.allRevenueByEvent</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63872,46413</TimeChanged>
<TimeCreated>63833,32776.55679</TimeCreated>

<Parameter name="name">
<Default>Revenue by Event</Default>
</Parameter>

<Parameter name="description">
<Default>Column chart showing payments received and outstanding across all live events. This will not work if multiple currencies have been set up in your account.</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>allRevenueByEvent</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceAllRevenueByEvent.csp</Default>
</Parameter>

<Parameter name="dataSeriesField">
<Default>Value</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>column</Default>
</Parameter>

<Parameter name="dataCategoryaxisField">
<Default>Event</Default>
</Parameter>

<Parameter name="dataCategoryAxisLabelsRotation">
<Default>auto</Default>
</Parameter>

<Parameter name="useCurrencySymbolOnValueAxis">
<Default>1</Default>
</Parameter>

<Method name="getTooltipTemplate">
<Implementation><![CDATA[
	
	return ..getCurrencySymbolForChart()_"#: kendo.toString(value,""n2"") #"
]]></Implementation>
</Method>

<Method name="getCurrencySymbolForChart">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set objCurrency=##class(EF.dataSources.allRevenueByEvent).getCurrency()
	if $IsObject(objCurrency) {
		return objCurrency.symbol
	} else {
		return ""	
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.chart.allRevenueGrowth">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.allRevenueGrowth.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.chart.allRevenueGrowth
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.allRevenueGrowth.CLS/EV.1</td><td>CLS.EF.ui.components.backend.chart.allRevenueGrowth</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63872,46437</TimeChanged>
<TimeCreated>63833,32776.55679</TimeCreated>

<Parameter name="name">
<Default>Revenue Growth (All Events)</Default>
</Parameter>

<Parameter name="description">
<Default>Column chart showing the total revenue for each month compared to the same month in the previous year. This will not work if multiple currencies have been set up in your account.</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>allRevenueGrowth</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceAllRevenueGrowth.csp</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>column</Default>
</Parameter>

<Parameter name="dataSeriesField">
<Default>Previous</Default>
</Parameter>

<Parameter name="dataSeriesName">
<Default>Last year</Default>
</Parameter>

<Parameter name="dataSeries2Type">
<Default>column</Default>
</Parameter>

<Parameter name="dataSeries2Field">
<Default>Current</Default>
</Parameter>

<Parameter name="dataSeries2Name">
<Default>This year</Default>
</Parameter>

<Parameter name="dataCategoryaxisType">
<Default>category</Default>
</Parameter>

<Parameter name="dataCategoryaxisField">
<Default>Month</Default>
</Parameter>

<Parameter name="useCurrencySymbolOnValueAxis">
<Default>1</Default>
</Parameter>

<Parameter name="dataCategoryAxisLabelsRotation">
<Default>auto</Default>
</Parameter>

<Method name="getTooltipTemplate">
<Implementation><![CDATA[
	
	return ..getCurrencySymbolForChart()_"#: kendo.toString(value,""n2"") #"
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.chart.base">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.base.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.chart.base
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.base.CLS/EV.0</td><td>CLS.EF.ui.components.backend.chart.base</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<IncludeCode>EF.common.macros</IncludeCode>
<Super>EF.ui.components.div</Super>
<TimeChanged>63840,49453</TimeChanged>
<TimeCreated>63833,32479.452969</TimeCreated>

<Parameter name="name">
</Parameter>

<Parameter name="description">
</Parameter>

<Property name="objEvent">
<Type>setup.objEvent</Type>
</Property>

<Parameter name="dataSourceName">
</Parameter>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>htmlID</FormalSpec>
<ReturnType>EF.ui.components.backend.chart.base</ReturnType>
<Implementation><![CDATA[
	set chart=..%New(htmlID)
	do chart.configureChart()
	
	return chart
]]></Implementation>
</Method>

<Method name="configureChart">
<Implementation><![CDATA[	throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return $p($CLASSNAME(),".",$l($CLASSNAME(),"."))
]]></Implementation>
</Method>

<Method name="getAllAvailableChartsSorted">
<ClassMethod>1</ClassMethod>
<FormalSpec>contextData:EF.contextData</FormalSpec>
<ReturnType>%ArrayOfObjects</ReturnType>
<Implementation><![CDATA[
	set charts=##class(%ArrayOfObjects).%New()
	set query="SELECT * FROM %Dictionary.ClassDefinition WHERE Name['EF.ui.components.backend.chart.'"
	set sqlStatement=##class(%SQL.Statement).%New()
	set sc=sqlStatement.%Prepare(query)
	set rs=sqlStatement.%Execute() 
	while rs.%Next() {
		set className=rs.%Get("Name")
		set chartName=$p(className,".",$l(className,"."))
		if ..isValidDashboardChartName(chartName) {
			try {
				set object=$ClassMethod(className,"%New")
				if object.hasAccess(contextData) {
					set key=$ZCVT(object.#name,"U")
					do charts.SetAt(object,key)
				}
			} catch {
				
			}
		}
	}
	
	return charts
]]></Implementation>
</Method>

<Method name="isValidDashboardChartName">
<ClassMethod>1</ClassMethod>
<FormalSpec>chartName</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set isValid=0
	set className="EF.ui.components.backend.chart."_chartName
	if ##class(EF.utils.classes).classExists(className) {
		try {
			for validSuperClass="EF.ui.components.backend.chart.chart","EF.ui.components.backend.chart.summary" {
				if className'=validSuperClass {
					if $ClassMethod(className,"%IsA",validSuperClass) {
						set isValid=1	
					}
				}
			}
		} catch {
				
		}
	}
	return isValid
]]></Implementation>
</Method>

<Method name="hasAccessToChartName">
<ClassMethod>1</ClassMethod>
<FormalSpec>chartName,contextData:EF.contextData</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set className="EF.ui.components.backend.chart."_chartName
	if ..isValidDashboardChartName(chartName) {
		if $ClassMethod(className,"hasAccess",contextData) {
			return 1	
		} else {
			return 0	
		}
	} else {
		return 0	
	}
]]></Implementation>
</Method>

<Method name="hasAccess">
<ClassMethod>1</ClassMethod>
<FormalSpec>contextData:EF.contextData</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	return 1
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.chart.chart">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.chart.CLS/EV.4
;vc; Component: CLS.EF.ui.components.backend.chart.chart
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.chart.CLS/EV.4</td><td>CLS.EF.ui.components.backend.chart.chart</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.base</Super>
<TimeChanged>63867,59188</TimeChanged>
<TimeCreated>63834,32131.613532</TimeCreated>

<Parameter name="hasComparisonEvent">
<Default>0</Default>
</Parameter>

<Parameter name="comparisonEventListDataSourceURL">
</Parameter>

<Property name="dateFormat">
<Type>%Integer</Type>
<InitialExpression>3</InitialExpression>
</Property>

<Property name="eventID">
<Type>%Integer</Type>
</Property>

<Property name="comparisonEventID">
<Type>%Integer</Type>
</Property>

<Parameter name="dataSourceURL">
<Description>
datasource</Description>
</Parameter>

<Parameter name="datasourceGroupField">
</Parameter>

<Parameter name="dataSeriesName">
<Description>
series</Description>
</Parameter>

<Parameter name="dataSeriesField">
</Parameter>

<Parameter name="dataSeriesYField">
</Parameter>

<Parameter name="dataSeriesXField">
</Parameter>

<Parameter name="dataSeriesType">
</Parameter>

<Parameter name="dataSeriesCategoryField">
</Parameter>

<Parameter name="dataSeriesAggregate">
</Parameter>

<Parameter name="dataSeriesStack">
</Parameter>

<Parameter name="dataSeries2Name">
<Description>
series 2</Description>
</Parameter>

<Parameter name="dataSeries2Type">
</Parameter>

<Parameter name="dataSeries2Field">
</Parameter>

<Parameter name="dataSeries2YField">
</Parameter>

<Parameter name="dataSeries2XField">
</Parameter>

<Parameter name="dataSeries2Aggregate">
</Parameter>

<Parameter name="dataCategoryaxisBaseunit">
<Description>
category axis</Description>
</Parameter>

<Parameter name="dataCategoryaxisField">
</Parameter>

<Parameter name="dataCategoryaxisType">
<Default>category</Default>
</Parameter>

<Parameter name="dataCategoryAxisLabelsRotation">
<Default>auto</Default>
</Parameter>

<Parameter name="dataXAxisType">
<Description>
X axis</Description>
</Parameter>

<Parameter name="dataXAxisReverse">
</Parameter>

<Parameter name="dataXAxisLabelsRotation">
<Default>auto</Default>
</Parameter>

<Parameter name="dataXAxisTitleText">
</Parameter>

<Parameter name="useCurrencySymbolOnYAxis">
<Default>0</Default>
</Parameter>

<Parameter name="useCurrencySymbolOnValueAxis">
<Default>0</Default>
</Parameter>

<Parameter name="dataTooltipTemplate">
<Description>
cosmetics</Description>
</Parameter>

<Parameter name="dataSharedTooltipTemplate">
</Parameter>

<Parameter name="dataTooltipFormat">
</Parameter>

<Parameter name="dataLegendPosition">
</Parameter>

<Property name="plotBands">
<Type>EF.ui.components.backend.chart.plotBand</Type>
<Collection>list</Collection>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>htmlID,eventID="",comparisonEventID=""</FormalSpec>
<ReturnType>EF.ui.components.backend.chart.chart</ReturnType>
<Implementation><![CDATA[
	
	set chart=..%New(htmlID)
	do chart.addClass("ef-chart")
	set chart.dateFormat = ##class(shared.dateFunctions).getBackendOutputDateFormat()
	
	return chart
]]></Implementation>
</Method>

<Method name="hasAccess">
<ClassMethod>1</ClassMethod>
<FormalSpec>contextData:EF.contextData</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	return ##class(EF.dataSources.base).canAccessDataSourceType(..#dataSourceName,contextData)
]]></Implementation>
</Method>

<Method name="configureChart">
<FormalSpec>eventID="",comparisonEventID=""</FormalSpec>
<Implementation><![CDATA[
	
	if eventID {
		set ..eventID=eventID
	}
	if comparisonEventID {
		set ..comparisonEventID=comparisonEventID	
	}
	do ..addAttribute("data-category-axis-labels-date-formats-days",##class(shared.dateFunctions).getKendoBackendShortDateFormat(..dateFormat))
	do ..addAttribute("data-category-axis-labels-date-formats-weeks",##class(shared.dateFunctions).getKendoBackendShortDateFormat(..dateFormat))
	
	do ..addAttribute("data-category-axis-labels-date-formats-months",##class(shared.dateFunctions).getKendoMonthFormat())
	do ..addAttribute("data-category-axis-labels-date-formats-years","yyyy")

	do ..addAttribute("data-x-axis-labels-date-formats-days",##class(shared.dateFunctions).getKendoBackendShortDateFormat(..dateFormat))
	do ..addAttribute("data-x-axis-labels-date-formats-weeks",##class(shared.dateFunctions).getKendoBackendShortDateFormat(..dateFormat))
	
	do ..addAttribute("data-x-axis-labels-date-formats-months",##class(shared.dateFunctions).getKendoMonthFormat())
	do ..addAttribute("data-x-axis-labels-date-formats-years",##class(shared.dateFunctions).getKendoYearFormat())

	// datasource
	do ..addAttribute("data-data-source-group-field",..#datasourceGroupField)
	
	
	// series
	do ..addAttribute("data-series-name",..#dataSeriesName)
	do ..addAttribute("data-series-field",..#dataSeriesField)
	do ..addAttribute("data-series-y-field",..#dataSeriesYField)
	do ..addAttribute("data-series-x-field",..#dataSeriesXField)
	do ..addAttribute("data-series-type",..#dataSeriesType)
	do ..addAttribute("data-series-aggregate",..#dataSeriesAggregate)
	do ..addAttribute("data-series-category-field",..#dataSeriesCategoryField)
	do ..addAttribute("data-series-stack",..#dataSeriesStack)
	
	
	// series 2
	do ..addAttribute("data-series2-name",..#dataSeries2Name)
	do ..addAttribute("data-series2-type",..#dataSeries2Type)
	do ..addAttribute("data-series2-field",..#dataSeries2Field)
	do ..addAttribute("data-series2-y-field",..#dataSeries2YField)
	do ..addAttribute("data-series2-x-field",..#dataSeries2XField)
	do ..addAttribute("data-series2-aggregate",..#dataSeries2Aggregate)
	
	// category axis
	do ..addAttribute("data-category-axis-baseunit",..#dataCategoryaxisBaseunit)
	do ..addAttribute("data-category-axis-field",..#dataCategoryaxisField)
	do ..addAttribute("data-category-axis-type",..#dataCategoryaxisType)
	do ..addAttribute("data-category-axis-labels-rotation",..#dataCategoryAxisLabelsRotation)
	
	
	// X axis
	do ..addAttribute("data-x-axis-type",..#dataXAxisType)
	do ..addAttribute("data-x-axis-reverse",..#dataXAxisReverse)
	do ..addAttribute("data-x-axis-labels-rotation",..#dataXAxisLabelsRotation)
	do ..addAttribute("data-x-axis-title-text",..#dataXAxisTitleText)
	
	// Value axis
	
	
	if ..#useCurrencySymbolOnValueAxis {
		do ..addAttribute("data-value-axis-currency-symbol",..getCurrencySymbolForChart())	
	}
	
	
	// Y axis.
	if ..#useCurrencySymbolOnYAxis {
		do ..addAttribute("data-y-axis-currency-symbol",..getCurrencySymbolForChart())		
	}
	
	// cosmetics
	do ..addAttribute("data-tooltip-template",..getTooltipTemplate())
	do ..addAttribute("data-shared-tooltip-template",..getSharedTooltipTemplate())
	do ..addAttribute("data-tooltip-format",..#dataTooltipFormat)
	do ..addAttribute("data-legend-position",..#dataLegendPosition)
	
	set url=..#dataSourceURL
	if ..eventID {
		set url=##class(EF.htmlGenerator).addParameterToURL(url,"eventID",..eventID)
	}
	if ..#hasComparisonEvent {
		set url=##class(EF.htmlGenerator).addParameterToURL(url,"comparisonEventID",..comparisonEventID)
		do ..addAttribute("data-series-name",##class(setup.objEventDetails).getDetails(..eventID,$$$efEnglishLangID)) 
		do ..addAttribute("data-series2-name",##class(setup.objEventDetails).getDetails(..comparisonEventID,$$$efEnglishLangID)	)
	}
	
	if $l(url) {
		do ..addAttribute("data-link-url",##class(shared.pCSP).Link(url))	
	}
	
	do ..addPlotBands()
]]></Implementation>
</Method>

<Method name="getComparisonEventListDataSourceURLForChartName">
<ClassMethod>1</ClassMethod>
<FormalSpec>chartName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim chart As EF.ui.components.backend.chart.chart
	#dim returnUrl As %String = ""
	set nameOfChartClass = "EF.ui.components.backend.chart."_chartName	

	if '##class(EF.utils.classes).classExists(nameOfChartClass) {
		throw ##class(shared.exceptions.generalException).%New("Chart does not exist")
	}
	
	set chart=$ClassMethod(nameOfChartClass,"%New")
	if chart.#hasComparisonEvent {
		set returnUrl=chart.#comparisonEventListDataSourceURL 	
	}
	
	return returnUrl
]]></Implementation>
</Method>

<Method name="getTooltipTemplate">
<Implementation><![CDATA[	return ..#dataTooltipTemplate
]]></Implementation>
</Method>

<Method name="getSharedTooltipTemplate">
<Implementation><![CDATA[	return ..#dataSharedTooltipTemplate
]]></Implementation>
</Method>

<Method name="getCurrencySymbolForChart">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if ..eventID {
		set currencyID=##class(setup.objEvent).getBaseCurrency(..eventID)
		if currencyID {
			set currencySymbol=##class(eCom.objCurrency).getSymbol(currencyID)
		} else {
			set currencySymbol=""	
		}
	} else {
		set currencyID=##class(setup.objSetting).getParameter("system","defaultCurrency")	
	}
	
	return currencySymbol
]]></Implementation>
</Method>

<Method name="addPlotBands">
<Implementation><![CDATA[	do ..addAttribute("data-x-axis-plot-bands",##class(shared.jsonFunctions).getObjectAsJSONString(..plotBands))
]]></Implementation>
</Method>

<Method name="addPlotBandForEvent">
<Implementation><![CDATA[
	set objEvent = ##class(setup.objEvent).%OpenId(..eventID)
	do objEvent.%Reload()
	
	set plotBand=##class(EF.ui.components.backend.chart.plotBand).%New()
	set plotBand.from=##class(shared.dateFunctions).multiDate(objEvent.dateFrom-1,$$$kendoDateFormat)
	set plotBand.to=##class(shared.dateFunctions).multiDate(objEvent.dateTo,$$$kendoDateFormat)
	set plotBand.color="#bce8f1"
	set plotBand.opacity=0.3
	do ..plotBands.Insert(plotBand)
]]></Implementation>
</Method>

<Method name="getConvertStringToKendoDateJS">
<FormalSpec>jsExpression</FormalSpec>
<Implementation><![CDATA[	return ..getFormatKendoDateJS("kendo.parseDate("_jsExpression_")")
]]></Implementation>
</Method>

<Method name="getFormatKendoDateJS">
<FormalSpec>jsExpression</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return "kendo.toString("_jsExpression_", """_##class(shared.dateFunctions).getKendoDateFormat(..dateFormat)_""" )"
]]></Implementation>
</Method>

<Method name="getFormatKendoMonthJS">
<FormalSpec>jsExpression</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return "kendo.toString("_jsExpression_", """_##class(shared.dateFunctions).getKendoMonthFormat()_""" )"
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.chart.eventAbstractSubmissionsByTopic">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.eventAbstractSubmissionsByTopic.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.chart.eventAbstractSubmissionsByTopic
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.eventAbstractSubmissionsByTopic.CLS/EV.1</td><td>CLS.EF.ui.components.backend.chart.eventAbstractSubmissionsByTopic</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63858,60752</TimeChanged>
<TimeCreated>63833,32776.55679</TimeCreated>

<Parameter name="name">
<Default>Abstract Submissions by Topic</Default>
</Parameter>

<Parameter name="description">
<Default>Bar chart that displays the the number of abstract submissions by topic.</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>eventAbstractSubmissionsByTopic</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceEventAbstractSubmissionsByTopic.csp</Default>
</Parameter>

<Parameter name="dataSeriesField">
<Default>Value</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>bar</Default>
</Parameter>

<Parameter name="dataCategoryaxisField">
<Default>Topic</Default>
</Parameter>

<Parameter name="dataTooltipTemplate">
<Default>#: value # submissions</Default>
</Parameter>
</Class>


<Class name="EF.ui.components.backend.chart.eventAbstractSubmissionsComparison">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.eventAbstractSubmissionsComparison.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.chart.eventAbstractSubmissionsComparison
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.eventAbstractSubmissionsComparison.CLS/EV.0</td><td>CLS.EF.ui.components.backend.chart.eventAbstractSubmissionsComparison</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63861,55300</TimeChanged>
<TimeCreated>63833,32776.55679</TimeCreated>

<Parameter name="name">
<Default>Abstract Submissions Comparison</Default>
</Parameter>

<Parameter name="description">
<Default>Abstract submissions over time for the current event compared against another event.</Default>
</Parameter>

<Parameter name="hasComparisonEvent">
<Default>1</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>eventAbstractSubmissionsComparison</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceEventAbstractSubmissionsComparison.csp</Default>
</Parameter>

<Parameter name="comparisonEventListDataSourceURL">
<Default>../../backend/home/dataSourceAbstractEventList.csp</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>scatterLine</Default>
</Parameter>

<Parameter name="dataSeriesYField">
<Default>thisEvent</Default>
</Parameter>

<Parameter name="dataSeriesXField">
<Default>daysBeforeEvent</Default>
</Parameter>

<Parameter name="dataSeriesAggregate">
<Default>first</Default>
</Parameter>

<Parameter name="dataXAxisType">
<Default>number</Default>
</Parameter>

<Parameter name="dataXAxisReverse">
<Default>true</Default>
</Parameter>

<Parameter name="dataTooltipTemplate">
<Default>#: series.name #: #: value.y # submissions #: value.x # days before event</Default>
</Parameter>

<Parameter name="dataLegendPosition">
<Default>bottom</Default>
</Parameter>

<Parameter name="dataSeries2Type">
<Default>scatterLine</Default>
</Parameter>

<Parameter name="dataSeries2YField">
<Default>comparisonEvent</Default>
</Parameter>

<Parameter name="dataSeries2XField">
<Default>daysBeforeEvent</Default>
</Parameter>

<Parameter name="dataSeries2Aggregate">
<Default>first</Default>
</Parameter>

<Parameter name="dataXAxisLabelsRotation">
<Default>auto</Default>
</Parameter>

<Parameter name="dataXAxisTitleText">
<Default>Days before event</Default>
</Parameter>
</Class>


<Class name="EF.ui.components.backend.chart.eventAbstractSubmissionsOverTime">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.eventAbstractSubmissionsOverTime.CLS/EV.2
;vc; Component: CLS.EF.ui.components.backend.chart.eventAbstractSubmissionsOverTime
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.eventAbstractSubmissionsOverTime.CLS/EV.2</td><td>CLS.EF.ui.components.backend.chart.eventAbstractSubmissionsOverTime</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63867,59841</TimeChanged>
<TimeCreated>63833,32776.55679</TimeCreated>

<Parameter name="name">
<Default>Abstract Submissions over Time</Default>
</Parameter>

<Parameter name="description">
<Default>Abstract submissions over time for the current event.</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>eventAbstractSubmissionsOverTime</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceEventAbstractSubmissionsOverTime.csp</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>scatterLine</Default>
</Parameter>

<Parameter name="dataSeriesXField">
<Default>date</Default>
</Parameter>

<Parameter name="dataSeriesYField">
<Default>value</Default>
</Parameter>

<Parameter name="dataXAxisType">
<Default>date</Default>
</Parameter>

<Parameter name="dataXAxisLabelsRotation">
<Default>auto</Default>
</Parameter>

<Parameter name="dataTooltipTemplate">
<Default>#: value.x #: #: value.y # submissions</Default>
</Parameter>

<Method name="addPlotBands">
<Implementation><![CDATA[
	do ..addPlotBandForEvent()
	do ##super()
]]></Implementation>
</Method>

<Method name="getTooltipTemplate">
<Implementation><![CDATA[	return "#: "_..getConvertStringToKendoDateJS("value.x")_" #: #: value.y # submissions"
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.chart.eventActionSummary">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.eventActionSummary.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.chart.eventActionSummary
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.eventActionSummary.CLS/EV.0</td><td>CLS.EF.ui.components.backend.chart.eventActionSummary</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.summary</Super>
<TimeChanged>63855,57510</TimeChanged>
<TimeCreated>63834,43178.720458</TimeCreated>

<Parameter name="name">
<Default>Action List</Default>
</Parameter>

<Parameter name="description">
<Default>Shows the status of all actions for the current event.</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>eventActionSummary</Default>
</Parameter>
</Class>


<Class name="EF.ui.components.backend.chart.eventAttendeeCategories">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.eventAttendeeCategories.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.chart.eventAttendeeCategories
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.eventAttendeeCategories.CLS/EV.1</td><td>CLS.EF.ui.components.backend.chart.eventAttendeeCategories</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63854,50433</TimeChanged>
<TimeCreated>63833,33647.477698</TimeCreated>

<Parameter name="name">
<Default>Registrations by Attendee Category</Default>
</Parameter>

<Parameter name="description">
<Default>Pie chart showing the number of registrations for each attendee category in the current event.</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>eventAttendeeCategories</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceEventAttendeeCategories.csp</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>pie</Default>
</Parameter>

<Parameter name="dataSeriesField">
<Default>value</Default>
</Parameter>

<Parameter name="dataSeriesCategoryField">
<Default>category</Default>
</Parameter>

<Parameter name="dataTooltipTemplate">
<Default>${category}: ${value}</Default>
</Parameter>

<Parameter name="dataLegendPosition">
<Default>bottom</Default>
</Parameter>
</Class>


<Class name="EF.ui.components.backend.chart.eventAwardEntriesByCategory">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.eventAwardEntriesByCategory.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.chart.eventAwardEntriesByCategory
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.eventAwardEntriesByCategory.CLS/EV.1</td><td>CLS.EF.ui.components.backend.chart.eventAwardEntriesByCategory</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63858,60710</TimeChanged>
<TimeCreated>63833,32776.55679</TimeCreated>

<Parameter name="name">
<Default>Award Entries by Category</Default>
</Parameter>

<Parameter name="description">
<Default>Bar chart that displays the number of award entries by category.</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>eventAwardEntriesByCategory</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceEventAwardEntriesByCategory.csp</Default>
</Parameter>

<Parameter name="dataSeriesField">
<Default>Value</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>bar</Default>
</Parameter>

<Parameter name="dataCategoryaxisField">
<Default>Category</Default>
</Parameter>

<Parameter name="dataTooltipTemplate">
<Default>#: value # entries</Default>
</Parameter>
</Class>


<Class name="EF.ui.components.backend.chart.eventAwardEntriesComparison">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.eventAwardEntriesComparison.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.chart.eventAwardEntriesComparison
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.eventAwardEntriesComparison.CLS/EV.0</td><td>CLS.EF.ui.components.backend.chart.eventAwardEntriesComparison</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63853,48173</TimeChanged>
<TimeCreated>63833,32776.55679</TimeCreated>

<Parameter name="name">
<Default>Award Entries Comparison</Default>
</Parameter>

<Parameter name="description">
<Default>Award entries over time for the current event compared against another event.</Default>
</Parameter>

<Parameter name="hasComparisonEvent">
<Default>1</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>eventAwardEntriesComparison</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceEventAwardEntriesComparison.csp</Default>
</Parameter>

<Parameter name="comparisonEventListDataSourceURL">
<Default>../../backend/home/dataSourceAwardsEventList.csp</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>scatterLine</Default>
</Parameter>

<Parameter name="dataSeriesYField">
<Default>thisEvent</Default>
</Parameter>

<Parameter name="dataSeriesXField">
<Default>daysBeforeEvent</Default>
</Parameter>

<Parameter name="dataSeriesAggregate">
<Default>first</Default>
</Parameter>

<Parameter name="dataXAxisType">
<Default>number</Default>
</Parameter>

<Parameter name="dataXAxisReverse">
<Default>true</Default>
</Parameter>

<Parameter name="dataTooltipTemplate">
<Default>#: series.name #: #: value.y # award entries #: value.x # days before event</Default>
</Parameter>

<Parameter name="dataLegendPosition">
<Default>bottom</Default>
</Parameter>

<Parameter name="dataSeries2Type">
<Default>scatterLine</Default>
</Parameter>

<Parameter name="dataSeries2YField">
<Default>comparisonEvent</Default>
</Parameter>

<Parameter name="dataSeries2XField">
<Default>daysBeforeEvent</Default>
</Parameter>

<Parameter name="dataSeries2Aggregate">
<Default>first</Default>
</Parameter>

<Parameter name="dataXAxisLabelsRotation">
<Default>auto</Default>
</Parameter>

<Parameter name="dataXAxisTitleText">
<Default>Days before event</Default>
</Parameter>
</Class>


<Class name="EF.ui.components.backend.chart.eventAwardEntriesOverTime">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.eventAwardEntriesOverTime.CLS/EV.2
;vc; Component: CLS.EF.ui.components.backend.chart.eventAwardEntriesOverTime
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.eventAwardEntriesOverTime.CLS/EV.2</td><td>CLS.EF.ui.components.backend.chart.eventAwardEntriesOverTime</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63867,59812</TimeChanged>
<TimeCreated>63833,32776.55679</TimeCreated>

<Parameter name="name">
<Default>Award Entries over Time</Default>
</Parameter>

<Parameter name="description">
<Default>Submitted award entries over time for the current event.</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>eventAwardEntriesOverTime</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceEventAwardEntriesOverTime.csp</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>scatterLine</Default>
</Parameter>

<Parameter name="dataSeriesXField">
<Default>date</Default>
</Parameter>

<Parameter name="dataSeriesYField">
<Default>value</Default>
</Parameter>

<Parameter name="dataXAxisType">
<Default>date</Default>
</Parameter>

<Parameter name="dataXAxisLabelsRotation">
<Default>auto</Default>
</Parameter>

<Method name="addPlotBands">
<Implementation><![CDATA[
	do ..addPlotBandForEvent()
	do ##super()
]]></Implementation>
</Method>

<Method name="getTooltipTemplate">
<Implementation><![CDATA[	return "#: "_..getConvertStringToKendoDateJS("value.x")_" #: #: value.y # submitted entries"
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.chart.eventCapacity">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.eventCapacity.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.chart.eventCapacity
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.eventCapacity.CLS/EV.1</td><td>CLS.EF.ui.components.backend.chart.eventCapacity</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63858,61952</TimeChanged>
<TimeCreated>63833,32776.55679</TimeCreated>

<Parameter name="name">
<Default>Capacity</Default>
</Parameter>

<Parameter name="description">
<Default>Column chart showing the registration levels and capacities of all items that have a capacity. Includes event days, sessions and additional booking items.</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>eventCapacity</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceEventCapacity.csp</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>column</Default>
</Parameter>

<Parameter name="dataSeriesField">
<Default>used</Default>
</Parameter>

<Parameter name="dataSeriesName">
<Default>Used</Default>
</Parameter>

<Parameter name="dataSeriesStack">
<Default>true</Default>
</Parameter>

<Parameter name="dataSeries2Type">
<Default>column</Default>
</Parameter>

<Parameter name="dataSeries2Field">
<Default>remaining</Default>
</Parameter>

<Parameter name="dataSeries2Name">
<Default>Remaining</Default>
</Parameter>

<Parameter name="dataSeries2Stack">
<Default>true</Default>
</Parameter>

<Parameter name="dataCategoryaxisField">
<Default>name</Default>
</Parameter>

<Parameter name="dataCategoryAxisLabelsRotation">
<Default>auto</Default>
</Parameter>

<Parameter name="dataLegendPosition">
<Default>bottom</Default>
</Parameter>
</Class>


<Class name="EF.ui.components.backend.chart.eventEmailOpens">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.eventEmailOpens.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.chart.eventEmailOpens
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.eventEmailOpens.CLS/EV.0</td><td>CLS.EF.ui.components.backend.chart.eventEmailOpens</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63855,34528</TimeChanged>
<TimeCreated>63833,33647.477698</TimeCreated>

<Parameter name="name">
<Default>Email Opens</Default>
</Parameter>

<Parameter name="description">
<Default>Pie chart showing the ratio of opened and unopened emails.</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>eventEmailOpens</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceEventEmailOpens.csp</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>pie</Default>
</Parameter>

<Parameter name="dataSeriesField">
<Default>Value</Default>
</Parameter>

<Parameter name="dataSeriesCategoryField">
<Default>Category</Default>
</Parameter>

<Parameter name="dataTooltipTemplate">
<Default>${category}: ${value}</Default>
</Parameter>

<Parameter name="dataLegendPosition">
<Default>bottom</Default>
</Parameter>
</Class>


<Class name="EF.ui.components.backend.chart.eventInvitationStatus">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.eventInvitationStatus.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.chart.eventInvitationStatus
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.eventInvitationStatus.CLS/EV.0</td><td>CLS.EF.ui.components.backend.chart.eventInvitationStatus</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63854,50347</TimeChanged>
<TimeCreated>63833,33647.477698</TimeCreated>

<Parameter name="name">
<Default>Invitation Status</Default>
</Parameter>

<Parameter name="description">
<Default>Pie chart showing responses to invitations.</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>eventInvitationStatus</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceEventInvitationStatus.csp</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>pie</Default>
</Parameter>

<Parameter name="dataSeriesField">
<Default>Value</Default>
</Parameter>

<Parameter name="dataSeriesCategoryField">
<Default>Status</Default>
</Parameter>

<Parameter name="dataTooltipTemplate">
<Default>${category}: ${value}</Default>
</Parameter>

<Parameter name="dataLegendPosition">
<Default>bottom</Default>
</Parameter>
</Class>


<Class name="EF.ui.components.backend.chart.eventRegistrationsComparison">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.eventRegistrationsComparison.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.chart.eventRegistrationsComparison
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.eventRegistrationsComparison.CLS/EV.0</td><td>CLS.EF.ui.components.backend.chart.eventRegistrationsComparison</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63853,48121</TimeChanged>
<TimeCreated>63833,32776.55679</TimeCreated>

<Parameter name="name">
<Default>Registrations Comparison</Default>
</Parameter>

<Parameter name="description">
<Default>Registrations over time for the current event compared against another event.</Default>
</Parameter>

<Parameter name="hasComparisonEvent">
<Default>1</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>eventRegistrationsComparison</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceEventRegistrationsComparison.csp</Default>
</Parameter>

<Parameter name="comparisonEventListDataSourceURL">
<Default>../../backend/home/dataSourceRegistrationEventList.csp</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>scatterLine</Default>
</Parameter>

<Parameter name="dataSeriesYField">
<Default>thisEvent</Default>
</Parameter>

<Parameter name="dataSeriesXField">
<Default>daysBeforeEvent</Default>
</Parameter>

<Parameter name="dataSeriesAggregate">
<Default>first</Default>
</Parameter>

<Parameter name="dataXAxisType">
<Default>number</Default>
</Parameter>

<Parameter name="dataXAxisReverse">
<Default>true</Default>
</Parameter>

<Parameter name="dataTooltipTemplate">
<Default>#: series.name #: #: value.y # registrations #: value.x # days before event</Default>
</Parameter>

<Parameter name="dataLegendPosition">
<Default>bottom</Default>
</Parameter>

<Parameter name="dataSeries2Type">
<Default>scatterLine</Default>
</Parameter>

<Parameter name="dataSeries2YField">
<Default>comparisonEvent</Default>
</Parameter>

<Parameter name="dataSeries2XField">
<Default>daysBeforeEvent</Default>
</Parameter>

<Parameter name="dataSeries2Aggregate">
<Default>first</Default>
</Parameter>

<Parameter name="dataXAxisLabelsRotation">
<Default>auto</Default>
</Parameter>

<Parameter name="dataXAxisTitleText">
<Default>Days before event</Default>
</Parameter>
</Class>


<Class name="EF.ui.components.backend.chart.eventRegistrationsMonth">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.eventRegistrationsMonth.CLS/EV.2
;vc; Component: CLS.EF.ui.components.backend.chart.eventRegistrationsMonth
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.eventRegistrationsMonth.CLS/EV.2</td><td>CLS.EF.ui.components.backend.chart.eventRegistrationsMonth</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63867,59199</TimeChanged>
<TimeCreated>63833,32776.55679</TimeCreated>

<Parameter name="name">
<Default>Registrations by Month</Default>
</Parameter>

<Parameter name="description">
<Default>Column chart showing registrations by month for the current event.</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>eventRegistrationsMonth</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceEventRegistrationsMonth.csp</Default>
</Parameter>

<Parameter name="dataSeriesField">
<Default>value</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>column</Default>
</Parameter>

<Parameter name="dataCategoryaxisBaseunit">
<Default>months</Default>
</Parameter>

<Parameter name="dataCategoryaxisField">
<Default>date</Default>
</Parameter>

<Parameter name="dataCategoryaxisType">
<Default>date</Default>
</Parameter>

<Method name="getSharedTooltipTemplate">
<Implementation><![CDATA[	return "#:"_..getFormatKendoMonthJS("category")_" #: #: points[0].value # registrations"
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.chart.eventRegistrationsTotal">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.eventRegistrationsTotal.CLS/EV.3
;vc; Component: CLS.EF.ui.components.backend.chart.eventRegistrationsTotal
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.eventRegistrationsTotal.CLS/EV.3</td><td>CLS.EF.ui.components.backend.chart.eventRegistrationsTotal</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63867,59716</TimeChanged>
<TimeCreated>63833,32776.55679</TimeCreated>

<Parameter name="name">
<Default>Registrations over Time</Default>
</Parameter>

<Parameter name="description">
<Default>Registrations over time for the current event.</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>eventRegistrationsTotal</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceEventRegistrationsTotal.csp</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>scatterLine</Default>
</Parameter>

<Parameter name="dataSeriesXField">
<Default>date</Default>
</Parameter>

<Parameter name="dataSeriesYField">
<Default>value</Default>
</Parameter>

<Parameter name="dataXAxisType">
<Default>date</Default>
</Parameter>

<Parameter name="dataXAxisLabelsRotation">
<Default>auto</Default>
</Parameter>

<Method name="addPlotBands">
<Implementation><![CDATA[
	do ..addPlotBandForEvent()
	do ##super()
]]></Implementation>
</Method>

<Method name="getTooltipTemplate">
<Implementation><![CDATA[	return "#: "_..getConvertStringToKendoDateJS("value.x")_" #: #: value.y # registrations"
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.chart.eventRegistrationsWeek">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.eventRegistrationsWeek.CLS/EV.2
;vc; Component: CLS.EF.ui.components.backend.chart.eventRegistrationsWeek
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.eventRegistrationsWeek.CLS/EV.2</td><td>CLS.EF.ui.components.backend.chart.eventRegistrationsWeek</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63867,58945</TimeChanged>
<TimeCreated>63833,32776.55679</TimeCreated>

<Parameter name="name">
<Default>Registrations by Week</Default>
</Parameter>

<Parameter name="description">
<Default>Column chart showing registrations by week for the current event.</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>eventRegistrationsWeek</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceEventRegistrationsWeek.csp</Default>
</Parameter>

<Parameter name="dataSeriesField">
<Default>value</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>column</Default>
</Parameter>

<Parameter name="dataCategoryaxisBaseunit">
<Default>weeks</Default>
</Parameter>

<Parameter name="dataCategoryaxisField">
<Default>date</Default>
</Parameter>

<Parameter name="dataCategoryaxisType">
<Default>date</Default>
</Parameter>

<Parameter name="dataSeriesAggregate">
<Default>sum</Default>
</Parameter>

<Method name="getSharedTooltipTemplate">
<Implementation><![CDATA[	return "#:"_..getFormatKendoDateJS("category")_" #: #: points[0].value # registrations"
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.chart.eventRevenueByCurrency">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.eventRevenueByCurrency.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.chart.eventRevenueByCurrency
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.eventRevenueByCurrency.CLS/EV.0</td><td>CLS.EF.ui.components.backend.chart.eventRevenueByCurrency</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63861,59214</TimeChanged>
<TimeCreated>63833,32776.55679</TimeCreated>

<Parameter name="name">
<Default>Payments by Currency</Default>
</Parameter>

<Parameter name="description">
<Default>Column chart showing payments received and balances unpaid for the current event, including VAT. Includes balances from overpaid and cancelled registrations.</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>eventRevenueByCurrency</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceEventRevenueByCurrency.csp</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>column</Default>
</Parameter>

<Parameter name="dataSeriesField">
<Default>received</Default>
</Parameter>

<Parameter name="dataSeriesName">
<Default>Paid</Default>
</Parameter>

<Parameter name="dataSeriesStack">
<Default>true</Default>
</Parameter>

<Parameter name="dataSeries2Type">
<Default>column</Default>
</Parameter>

<Parameter name="dataSeries2Field">
<Default>remaining</Default>
</Parameter>

<Parameter name="dataSeries2Name">
<Default>Balance unpaid</Default>
</Parameter>

<Parameter name="dataSeries2Stack">
<Default>true</Default>
</Parameter>

<Parameter name="dataCategoryaxisField">
<Default>name</Default>
</Parameter>

<Parameter name="dataCategoryAxisLabelsRotation">
<Default>auto</Default>
</Parameter>

<Parameter name="dataLegendPosition">
<Default>bottom</Default>
</Parameter>

<Method name="getTooltipTemplate">
<Implementation><![CDATA[
	
	return " #: dataItem.currencySymbol ##: kendo.toString(value,""n2"") #"
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.chart.eventRevenueComparison">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.eventRevenueComparison.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.chart.eventRevenueComparison
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.eventRevenueComparison.CLS/EV.1</td><td>CLS.EF.ui.components.backend.chart.eventRevenueComparison</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63872,50341</TimeChanged>
<TimeCreated>63833,32776.55679</TimeCreated>

<Parameter name="name">
<Default>Revenue Comparison</Default>
</Parameter>

<Parameter name="description">
<Default>Revenue over time for the current event compared against another event. This will not work if multiple currencies have been set up in your account.</Default>
</Parameter>

<Parameter name="hasComparisonEvent">
<Default>1</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>eventRevenueComparison</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceEventRevenueComparison.csp</Default>
</Parameter>

<Parameter name="comparisonEventListDataSourceURL">
<Default>../../backend/home/dataSourceEventList.csp</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>scatterLine</Default>
</Parameter>

<Parameter name="dataSeriesYField">
<Default>thisEvent</Default>
</Parameter>

<Parameter name="dataSeriesXField">
<Default>daysBeforeEvent</Default>
</Parameter>

<Parameter name="dataSeriesAggregate">
<Default>first</Default>
</Parameter>

<Parameter name="dataXAxisType">
<Default>number</Default>
</Parameter>

<Parameter name="dataXAxisReverse">
<Default>true</Default>
</Parameter>

<Parameter name="dataLegendPosition">
<Default>bottom</Default>
</Parameter>

<Parameter name="dataSeries2Type">
<Default>scatterLine</Default>
</Parameter>

<Parameter name="dataSeries2YField">
<Default>comparisonEvent</Default>
</Parameter>

<Parameter name="dataSeries2XField">
<Default>daysBeforeEvent</Default>
</Parameter>

<Parameter name="dataSeries2Aggregate">
<Default>first</Default>
</Parameter>

<Parameter name="dataXAxisLabelsRotation">
<Default>auto</Default>
</Parameter>

<Parameter name="dataXAxisTitleText">
<Default>Days before event</Default>
</Parameter>

<Parameter name="useCurrencySymbolOnYAxis">
<Default>1</Default>
</Parameter>

<Method name="getTooltipTemplate">
<Implementation><![CDATA[
	
	return "#: series.name #: "_..getCurrencySymbolForChart()_"#: kendo.toString(value.y,""n2"") # revenue #: value.x # days before event"
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.chart.eventRevenueOverTime">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.eventRevenueOverTime.CLS/EV.4
;vc; Component: CLS.EF.ui.components.backend.chart.eventRevenueOverTime
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.eventRevenueOverTime.CLS/EV.4</td><td>CLS.EF.ui.components.backend.chart.eventRevenueOverTime</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63872,46466</TimeChanged>
<TimeCreated>63833,32776.55679</TimeCreated>

<Parameter name="name">
<Default>Revenue over Time</Default>
</Parameter>

<Parameter name="description">
<Default>Revenue over time for the current event. This will not work in a multiple currency event.</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>eventRevenueOverTime</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceEventRevenueOverTime.csp</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>scatterLine</Default>
</Parameter>

<Parameter name="dataSeriesXField">
<Default>date</Default>
</Parameter>

<Parameter name="dataSeriesYField">
<Default>value</Default>
</Parameter>

<Parameter name="dataXAxisType">
<Default>date</Default>
</Parameter>

<Parameter name="dataXAxisLabelsRotation">
<Default>auto</Default>
</Parameter>

<Parameter name="useCurrencySymbolOnYAxis">
<Default>1</Default>
</Parameter>

<Method name="addPlotBands">
<Implementation><![CDATA[
	do ..addPlotBandForEvent()
	do ##super()
]]></Implementation>
</Method>

<Method name="getTooltipTemplate">
<Implementation><![CDATA[	return "#: "_..getConvertStringToKendoDateJS("value.x")_" #: "_..getCurrencySymbolForChart()_"#: kendo.toString(value.y,""n2"") #"
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.chart.eventSummary">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.eventSummary.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.chart.eventSummary
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.eventSummary.CLS/EV.0</td><td>CLS.EF.ui.components.backend.chart.eventSummary</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.summary</Super>
<TimeChanged>63840,49518</TimeChanged>
<TimeCreated>63834,43178.720458</TimeCreated>

<Parameter name="name">
<Default>Event Summary</Default>
</Parameter>

<Parameter name="description">
<Default>Shows detailed status information for this event.</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>eventSummary</Default>
</Parameter>
</Class>


<Class name="EF.ui.components.backend.chart.eventsRegistrationsByPaymentStatus">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.eventsRegistrationsByPaymentStatus.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.chart.eventsRegistrationsByPaymentStatus
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.eventsRegistrationsByPaymentStatus.CLS/EV.0</td><td>CLS.EF.ui.components.backend.chart.eventsRegistrationsByPaymentStatus</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63853,40782</TimeChanged>
<TimeCreated>63833,33647.477698</TimeCreated>

<Parameter name="name">
<Default>Registrations by Payment Status</Default>
</Parameter>

<Parameter name="description">
<Default>Pie chart showing the number of registrations with each payment status for the current event.</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>eventsRegistrationsByPaymentStatus</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceEventsRegistrationsByPaymentStatus.csp</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>pie</Default>
</Parameter>

<Parameter name="dataSeriesField">
<Default>Value</Default>
</Parameter>

<Parameter name="dataSeriesCategoryField">
<Default>Category</Default>
</Parameter>

<Parameter name="dataTooltipTemplate">
<Default>${category}: ${value}</Default>
</Parameter>

<Parameter name="dataLegendPosition">
<Default>bottom</Default>
</Parameter>
</Class>


<Class name="EF.ui.components.backend.chart.eventsSalesByPaymentMethod">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.eventsSalesByPaymentMethod.CLS/EV.2
;vc; Component: CLS.EF.ui.components.backend.chart.eventsSalesByPaymentMethod
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.eventsSalesByPaymentMethod.CLS/EV.2</td><td>CLS.EF.ui.components.backend.chart.eventsSalesByPaymentMethod</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.chart</Super>
<TimeChanged>63872,50491</TimeChanged>
<TimeCreated>63833,33647.477698</TimeCreated>

<Parameter name="name">
<Default>Sales by Payment Method</Default>
</Parameter>

<Parameter name="description">
<Default>Pie chart showing sales for each payment method for the current event. This will not work in a multiple currency event.</Default>
</Parameter>

<Parameter name="dataSourceName">
<Default>eventsSalesByPaymentMethod</Default>
</Parameter>

<Parameter name="dataSourceURL">
<Default>../../backend/home/dataSourceEventsSalesByPaymentMethod.csp</Default>
</Parameter>

<Parameter name="dataSeriesType">
<Default>pie</Default>
</Parameter>

<Parameter name="dataSeriesField">
<Default>Value</Default>
</Parameter>

<Parameter name="dataSeriesCategoryField">
<Default>Category</Default>
</Parameter>

<Parameter name="dataLegendPosition">
<Default>bottom</Default>
</Parameter>

<Method name="getTooltipTemplate">
<Implementation><![CDATA[
	
	return "#:category#: "_..getCurrencySymbolForChart()_"#: kendo.toString(value,""n2"") #"
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.chart.panelChart">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.panelChart.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.chart.panelChart
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.panelChart.CLS/EV.1</td><td>CLS.EF.ui.components.backend.chart.panelChart</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.panel</Super>
<TimeChanged>63852,59100</TimeChanged>
<TimeCreated>63833,55187.52757</TimeCreated>

<Property name="chart">
<Type>EF.ui.components.backend.chart.base</Type>
</Property>

<Property name="toolDropdown">
<Type>EF.ui.components.backend.toolDropdown.toolDropdown</Type>
</Property>

<Method name="renderStart">
<Implementation><![CDATA[
	set classes="ef-admin-settings-panel ef-admin-panel-chart"
	
	if $IsObject(..chart) {
		set chartName=..chart.#name	
	} else {
		set chartName="No Chart Selected"	
	}
	
	&HTML<
		<div class="#(classes)#" id="#(..encodeHTMLAttribute(..htmlID))#">
			<div class="ef-hover-button">
				#[do ..toolDropdown.render()]#
			</div>
			<div class="panel-heading">#(..encodeHTMLContent(chartName))#</div>
            #[do ..renderErrorMessage()]#
            <div class="panel-body">
	            
	>
	if $IsObject(..chart) {
		do ..chart.render()
	}
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[
	&HTML<
			</div>
        </div>
	>
]]></Implementation>
</Method>

<Method name="addToolDropdown">
<ReturnType>EF.ui.components.backend.toolDropdown.toolDropdown</ReturnType>
<Implementation><![CDATA[
	set ..toolDropdown=##class(EF.ui.components.backend.chart.toolDropdown).createNew()
	return ..toolDropdown
]]></Implementation>
</Method>

<Method name="addChart">
<FormalSpec>chartName:%String,chartID:%String</FormalSpec>
<ReturnType>EF.ui.components.backend.chart.base</ReturnType>
<Implementation><![CDATA[
	set nameOfChartClass = "EF.ui.components.backend.chart."_chartName	

	if ##class(EF.utils.classes).classExists(nameOfChartClass) {
		set ..chart = $ClassMethod(nameOfChartClass,"createNew",chartID)
		
	} else {
		throw ##class(shared.exceptions.generalException).%New("Unknown chart type")	
	}
	return ..chart
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.chart.plotBand">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.plotBand.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.chart.plotBand
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.plotBand.CLS/EV.0</td><td>CLS.EF.ui.components.backend.chart.plotBand</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63860,41839</TimeChanged>
<TimeCreated>63860,41656.461033</TimeCreated>

<Property name="from">
<Type>%String</Type>
</Property>

<Property name="to">
<Type>%String</Type>
</Property>

<Property name="color">
<Type>%String</Type>
</Property>

<Property name="opacity">
<Type>%Numeric</Type>
</Property>
</Class>


<Class name="EF.ui.components.backend.chart.summary">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.summary.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.chart.summary
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.summary.CLS/EV.0</td><td>CLS.EF.ui.components.backend.chart.summary</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.chart.base</Super>
<TimeChanged>63840,53155</TimeChanged>
<TimeCreated>63834,43137.439943</TimeCreated>

<Property name="dataSource">
<Type>EF.dataSources.eventSummary</Type>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>htmlID</FormalSpec>
<ReturnType>EF.ui.components.backend.chart.summary</ReturnType>
<Implementation><![CDATA[
	set chart=..%New(htmlID)
	
	return chart
]]></Implementation>
</Method>

<Method name="renderStart">
<Implementation><![CDATA[
	do ..dataSource.populateData()
	do ..dataSource.renderSummaryHTML()
]]></Implementation>
</Method>

<Method name="renderEnd">
</Method>

<Method name="hasAccess">
<ClassMethod>1</ClassMethod>
<FormalSpec>contextData:EF.contextData</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	return ##class(EF.dataSources.dashboardSummary).canAccessDataSourceType(..#dataSourceName,contextData)
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.chart.toolDropdown">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.chart.toolDropdown.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.chart.toolDropdown
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.chart.toolDropdown.CLS/EV.0</td><td>CLS.EF.ui.components.backend.chart.toolDropdown</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.toolDropdown.toolDropdown</Super>
<TimeChanged>63834,54172</TimeChanged>
<TimeCreated>63833,57346.116698</TimeCreated>

<Property name="isDropdownRightAligned">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Method name="addExportToExcel">
<FormalSpec>label,chartName</FormalSpec>
<Implementation><![CDATA[
	set toolItem=..addToolItem(label)
	set toolItem.action=##class(EF.ui.components.backend.toolDropdown.toolItemAction).createNew(label)
	do toolItem.action.addClass("ef-export-chart-xlsx")
	do toolItem.action.addAttribute("data-chart","#"_chartName)
	return toolItem
]]></Implementation>
</Method>

<Method name="addExportAsPDF">
<FormalSpec>label,chartName</FormalSpec>
<Implementation><![CDATA[
	set toolItem=..addToolItem(label)
	set toolItem.action=##class(EF.ui.components.backend.toolDropdown.toolItemAction).createNew(label)
	do toolItem.action.addClass("ef-export-chart-pdf")
	do toolItem.action.addAttribute("data-chart","#"_chartName)
	return toolItem
]]></Implementation>
</Method>

<Method name="addExportAsImage">
<FormalSpec>label,chartName</FormalSpec>
<Implementation><![CDATA[
	set toolItem=..addToolItem(label)
	set toolItem.action=##class(EF.ui.components.backend.toolDropdown.toolItemAction).createNew(label)
	do toolItem.action.addClass("ef-export-chart-png")
	do toolItem.action.addAttribute("data-chart","#"_chartName)
	return toolItem
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.checkbox">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.checkbox.CLS/EV.5
;vc; Component: CLS.EF.ui.components.backend.checkbox
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.checkbox.CLS/EV.5</td><td>CLS.EF.ui.components.backend.checkbox</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.checkbox</Super>
<TimeChanged>64128,44009</TimeChanged>
<TimeCreated>63355,62572.097775</TimeCreated>

<Method name="render">
<Implementation><![CDATA[
	// The html bit
	if $length(..label) {
		&html<
	        <label>
		        #[do ..renderCheckbox()]#
		        #(..encodeHTMLContent(..label))#
		    </label>
		    <br/>
		>
	} else {
		do ..renderCheckbox()	
	}
	do ##super()
]]></Implementation>
</Method>

<Method name="addOnChangeConfirm">
<FormalSpec>value,message</FormalSpec>
<Implementation><![CDATA[
	do ..addClass("ef-on-change-confirm")
	do ..addAttribute("data-on-change-confirm-message",message)
	do ..addAttribute("data-on-change-confirm-value",value)
]]></Implementation>
</Method>

<Method name="addOnSubmitConfirmChange">
<FormalSpec>value,message</FormalSpec>
<Implementation><![CDATA[
	do ..addClass("ef-on-submit-confirm-change")
	do ..addAttribute("data-on-change-confirm-message",message)
	do ..addAttribute("data-on-change-confirm-value",value)
]]></Implementation>
</Method>

<Method name="addOnDisableAction">
<FormalSpec>action</FormalSpec>
<Implementation><![CDATA[	do ..addAttribute("data-on-disable-action",action)
]]></Implementation>
</Method>

<Method name="renderCheckbox">
<Implementation><![CDATA[
	set disabledString=""
	if ..isDisabled {
		set disabledString="disabled=""disabled"""
	}
	set isCheckedString=""
	if ..value {
		set isCheckedString="checked"
	}
	&html<
		<input type="checkbox" value="1" id="#(..encodeHTMLAttribute(..htmlID))#" class="#(..encodeForHTMLAttribute(..classes))#" name="#(..encodeHTMLAttribute(..htmlName))#" title="#(..encodeHTMLAttribute(..title))#" #(..rawHTML(isCheckedString))# #(..rawHTML(disabledString))# #(..rawHTML(..getExtraAttributes()))#>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.checkboxGroup">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.checkboxGroup.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.checkboxGroup
;vc;  Location: SmallDev
;vc; Date/Time: 15-Jul-14 15:25
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.checkboxGroup.CLS/EV.0</td><td>CLS.EF.ui.components.backend.checkboxGroup</td><td>SmallDev</td><td style='white-space: nowrap;'>15-Jul-14 15:25</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.checkboxGroup</Super>
<TimeChanged>63363,58756</TimeChanged>
<TimeCreated>63356,56848.077942</TimeCreated>

<Property name="checkboxes">
<Type>EF.ui.components.backend.checkbox</Type>
<Collection>list</Collection>
</Property>

<Method name="render">
<Implementation><![CDATA[
	// The html bit
	&html<
		<label>#(..label)#</label>
		<div class="form-group">
        #[do ..renderCheckboxes()]#
        </div>
    >
]]></Implementation>
</Method>

<Method name="renderColumnStart">
<Implementation><![CDATA[
	if ..columns=1 {
		&html<<ul class="inputs-list">>
	} elseif ..columns=2 {
		&html<<ul class="inputs-list col-sm-6">>
	} else {
		throw ##class(shared.exceptions.generalException).%New("Checkbox group not implmeneted for "_..columns_" columns")	
	}
]]></Implementation>
</Method>

<Method name="renderColumnEnd">
<Implementation><![CDATA[	&html<</ul>>
]]></Implementation>
</Method>

<Method name="renderCheckbox">
<FormalSpec>checkbox:EF.ui.components.backend.checkbox</FormalSpec>
<Implementation><![CDATA[
	
	// The html bit
	&html<
		<li>
			#[do checkbox.render()]#
		</li>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.colourPickerLegacy">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.colourPickerLegacy.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.colourPickerLegacy
;vc;  Location: SmallDev
;vc; Date/Time: 20-May-15 17:58
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.colourPickerLegacy.CLS/EV.0</td><td>CLS.EF.ui.components.backend.colourPickerLegacy</td><td>SmallDev</td><td style='white-space: nowrap;'>20-May-15 17:58</td><td>RajibQ</td></tr></table>
]]></Description>
<Super>EF.ui.components.base</Super>
<TimeChanged>63692,64781.408408</TimeChanged>
<TimeCreated>63687,48452.626155</TimeCreated>

<Property name="backgroundColour">
<Type>EF.dataTypes.hexColour</Type>
</Property>

<Property name="foregroundColour">
<Type>EF.dataTypes.hexColour</Type>
</Property>

<Property name="backGroundColourFieldName">
<Type>%String</Type>
</Property>

<Property name="backGroundColourFieldID">
<Type>%String</Type>
</Property>

<Property name="foregroundColourFieldName">
<Type>%String</Type>
</Property>

<Property name="foregroundColourFieldID">
<Type>%String</Type>
</Property>

<Property name="description">
<Type>%String</Type>
<InitialExpression>"Click to change colours"</InitialExpression>
</Property>

<Property name="borderStyle">
<Type>%String</Type>
</Property>

<Property name="isReadOnly">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="colourPickerURL">
<Type>%String</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>backgroundColour:EF.dataTypes.hexColour,foregroundColour:EF.dataTypes.hexColour,backGroundColourFieldName:%String,foregroundColourFieldName:%String,isReadOnly:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	do ##super()
	if ($DATA(backgroundColour)) {
		set ..backgroundColour=backgroundColour
	}
	if ($DATA(foregroundColour)) {
		set ..foregroundColour=foregroundColour	
	}
	if ($DATA(backGroundColourFieldName)) {
		set ..backGroundColourFieldName=backGroundColourFieldName	
		set ..backGroundColourFieldID=backGroundColourFieldName
	}
	if ($DATA(foregroundColourFieldName)) {
		set ..foregroundColourFieldName=foregroundColourFieldName	
		set ..foregroundColourFieldID=foregroundColourFieldName
	}
	if ($DATA(isReadOnly)) {
		set ..isReadOnly=isReadOnly	
	}
	
	set ..colourPickerURL=##class(shared.pCSP).Link("selectcolor.csp?zzz=1")
	
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	
	// The html bit
	&html<<input type="text" id="#(..encodeForHTMLAttribute(..htmlID))#" data-colourPickerURL="#(..encodeForHTMLAttribute(..colourPickerURL))#" data-backgroundColour="#(..encodeForHTMLAttribute(..backgroundColour))#" data-foregroundColour="#(..encodeForHTMLAttribute(..foregroundColour))#" data-foregroundColourFieldID="#(..encodeForHTMLAttribute(..foregroundColourFieldID))#" data-backGroundColourFieldID="#(..encodeForHTMLAttribute(..backGroundColourFieldID))#" value="#(..encodeForHTMLAttribute(..description))#" size="25" readonly>
		<style>
			#(..encodeForHTML("#"_..htmlID))# {
				background-color: #(..encodeForHTML(..encodeForCSS(..backgroundColour)))#;
				color: #(..encodeForHTML(..encodeForCSS(..foregroundColour)))#;
				font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; 
				font-size: 9px; 
				#(..encodeForHTML(..borderStyle))#
			}
		</style>
	>
	if '..isReadOnly {
		&html<								
			<input type="hidden" id="#(..encodeForHTMLAttribute(..backGroundColourFieldID))#" name="#(..encodeForHTMLAttribute(..backGroundColourFieldName))#" value="#(..encodeForHTMLAttribute(..backgroundColour))#">																
			<input type="hidden" id="#(..encodeForHTMLAttribute(..foregroundColourFieldID))#" name="#(..encodeForHTMLAttribute(..foregroundColourFieldName))#" value="#(..encodeForHTMLAttribute(..foregroundColour))#">
					
		>
		w "<script language='javascript'>"
		&js<
			$(function() {
				$("##(..encodeForJavaScript(..htmlID))#").click(function() {
					ef.admin.openPopupColourPicker(this);
				});
			});
		>
		w "</script>"
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.column">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.column.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.column
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.column.CLS/EV.1</td><td>CLS.EF.ui.components.backend.column</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.ui.components.container</Super>
<TimeChanged>63403,63473</TimeChanged>
<TimeCreated>63362,37010.782451</TimeCreated>

<Property name="width">
<Description>
Width in columns (full width = 12)</Description>
<Type>%Integer</Type>
<InitialExpression>12</InitialExpression>
</Property>

<Method name="renderStart">
<Implementation><![CDATA[
	if (..width<0)!(..width>12) {
		throw ##class(shared.exceptions.generalException).%New("Columns must be between 1 and 12")	
	}
	set classes="col-sm-"_..width
	&HTML<
		<div class="#(..encodeHTMLAttribute(classes))#">
	>
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[
	&HTML<
        </div>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.datePicker">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.datePicker.CLS/EV.3
;vc; Component: CLS.EF.ui.components.backend.datePicker
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.datePicker.CLS/EV.3</td><td>CLS.EF.ui.components.backend.datePicker</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.textInput</Super>
<TimeChanged>63950,45290</TimeChanged>
<TimeCreated>63384,38215.518113</TimeCreated>

<Parameter name="html5Validation">
<Default>0</Default>
</Parameter>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" ef-kendo-form-control"
]]></Implementation>
</Method>

<Method name="renderJS">
<Implementation><![CDATA[
	&js<
		$(function() {
			$('##(..encodeJS(..htmlID))#').kendoDatePicker({
				format: getKendoDateFormat(#(..encodeJS(..validator.dateFormat))#),
			});
		});
	>
	do ##super()
]]></Implementation>
</Method>

<Method name="getDefaultValidator">
<ReturnType>EF.validator.base</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.validator.dateInput).%New()
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.dateTimePicker">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.dateTimePicker.CLS/EV.2
;vc; Component: CLS.EF.ui.components.backend.dateTimePicker
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.dateTimePicker.CLS/EV.2</td><td>CLS.EF.ui.components.backend.dateTimePicker</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.textInput</Super>
<TimeChanged>63950,45312</TimeChanged>
<TimeCreated>63384,38215.518113</TimeCreated>

<Property name="defaultDateTime">
<Type>%String</Type>
</Property>

<Parameter name="typeAttribute">
<Default>datetime</Default>
</Parameter>

<Parameter name="html5Validation">
<Default>0</Default>
</Parameter>

<Method name="getExtraAttributes">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set dateFormat=##class(shared.dateFunctions).getKendoDateFormat(..validator.dateFormat)
	set timeFormat=##class(shared.timeFunctions).getKendoTimeFormat(..validator.timeFormat)
	return ##super()_" data-ef-default-date-time="""_..encodeForHTMLAttribute(..defaultDateTime)_""" data-ef-date-format="""_..encodeForHTMLAttribute(dateFormat)_""" data-ef-time-format="""_..encodeForHTMLAttribute(timeFormat)_""""
]]></Implementation>
</Method>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" ef-kendo-form-control"
]]></Implementation>
</Method>

<Method name="getDefaultValidator">
<ReturnType>EF.validator.base</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.validator.dateTimeInput).%New()
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.dropdown">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.dropdown.CLS/EV.7
;vc; Component: CLS.EF.ui.components.backend.dropdown
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.dropdown.CLS/EV.7</td><td>CLS.EF.ui.components.backend.dropdown</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.listInput</Super>
<TimeChanged>64112,53845</TimeChanged>
<TimeCreated>63355,56609.363142</TimeCreated>

<Property name="isPersistent">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" form-group"
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	if ..hasError do ..addClass("has-error")
	set selectClass="form-control"
	if ..isPersistent {
		set selectClass=selectClass_" ef-persistent-value"	
	}
	set disabledString=""
	if ..isDisabled {
		set disabledString="disabled=""disabled"""
	}	
	
	// The html bit
	if $Length(..label) {
		&html<
			<div class="#(..encodeHTMLAttribute(..classes))#">
	        	<label for="#(..encodeHTMLAttribute(..htmlID))#" class="control-label">#(..encodeHTMLContent(..label))#</label>
		>
	}
	&html<		<select class="#(..encodeForHTMLAttribute(selectClass))#" name="#(..encodeHTMLAttribute(..htmlName))#" id="#(..encodeHTMLAttribute(..htmlID))#" title="#(..encodeHTMLAttribute(..title))#" #(..rawHTML(disabledString))# #(..rawHTML(..getExtraAttributes()))#>
    				#[do ..renderAlternatives()]#
        		</select>
    >
    if $Length(..label) {
	    &html<
	    	</div>
	    >
    }
]]></Implementation>
</Method>

<Method name="renderAlternative">
<FormalSpec>alternative:EF.ui.components.alternative</FormalSpec>
<Implementation><![CDATA[
	
	set selectedString=""
	if alternative.isSelected {
		set selectedString="selected="""""	
	}
	
	set disabledString=""
	if alternative.isDisabled {
		set disabledString="disabled"	
	}
	
	// The html bit
	&html<
        <option #(..rawHTML(selectedString))# #(..rawHTML(disabledString))# value="#(..encodeHTMLAttribute(alternative.value))#" #(..rawHTML(alternative.getExtraAttributes()))#>#(..encodeHTMLContent(alternative.label))#</option>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.emailInput">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.emailInput.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.emailInput
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.emailInput.CLS/EV.0</td><td>CLS.EF.ui.components.backend.emailInput</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.textInput</Super>
<TimeChanged>63883,60918</TimeChanged>
<TimeCreated>63883,60755.900427</TimeCreated>

<Parameter name="typeAttribute">
<Default>email</Default>
</Parameter>

<Method name="getDefaultValidator">
<ReturnType>EF.validator.base</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.validator.emailAddress).%New()
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.grid.filter">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.grid.filter.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.grid.filter
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.grid.filter.CLS/EV.0</td><td>CLS.EF.ui.components.backend.grid.filter</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63796,45569</TimeChanged>
<TimeCreated>63796,45219.065246</TimeCreated>

<Property name="field">
<Type>%String</Type>
</Property>

<Property name="operator">
<Type>%String</Type>
</Property>

<Property name="value">
<Type>%String</Type>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>field:%String,operator:%String,value:%String</FormalSpec>
<ReturnType>filter</ReturnType>
<Implementation><![CDATA[
	Set ret=..%New()
	
	Set ret.field=field
	Set ret.operator=operator
	Set ret.value=value
	
	Return ret
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.grid.filterDropdown">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.grid.filterDropdown.CLS/EV.5
;vc; Component: CLS.EF.ui.components.backend.grid.filterDropdown
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.grid.filterDropdown.CLS/EV.5</td><td>CLS.EF.ui.components.backend.grid.filterDropdown</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.base</Super>
<TimeChanged>63824,38386</TimeChanged>
<TimeCreated>63729,36718.541358</TimeCreated>

<Property name="gridID">
<Type>%String</Type>
</Property>

<Property name="label">
<Type>%String</Type>
</Property>

<Property name="filterItems">
<Type>EF.ui.components.backend.grid.filterItem</Type>
<Collection>list</Collection>
</Property>

<Method name="createNew">
<Description><![CDATA[
Example
<div class="form-group">
           <label class="control-label" for="mainGridFilter">Show:</label>
          <select id="mainGridFilter" class="form-control ef-bootstrap-box-sizing">
               <option value="Submitted" selected="" data-filter-list="...json...">Submitted</option>
               <option value="Review incomplete" data-filter-list="...json...">Review incomplete</option>
               <option value="All">All</option>
           </select>
       </div>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>htmlID:%String,toolBar:EF.ui.components.backend.grid.toolBar="",label:%String=""</FormalSpec>
<ReturnType>EF.ui.components.backend.grid.filterDropdown</ReturnType>
<Implementation><![CDATA[
	set filterDropdown=..%New()
	set filterDropdown.htmlID=htmlID
	if $IsObject(toolBar) {
		
		do toolBar.filters.Insert(filterDropdown)
		set filterDropdown.gridID=toolBar.gridID
	}
	set filterDropdown.label=label
	return filterDropdown
]]></Implementation>
</Method>

<Method name="addFilterItem">
<FormalSpec>label:%String="",filterField:%String="",filterOperator:%String="",filterValue:%String="",filterField2:%String="",filterOperator2:%String="",filterValue2:%String=""</FormalSpec>
<ReturnType>EF.ui.components.backend.grid.filterItem</ReturnType>
<Implementation><![CDATA[
	set filterItem=##class(EF.ui.components.backend.grid.filterItem).createNew($this,label,filterField,filterOperator,filterValue,filterField2,filterOperator2,filterValue2)
	return filterItem
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	set selectID=..gridID_"Filter"
	&html<<div class="form-group"><label class="control-label" for="#(..encodeForHTMLAttribute(..htmlID))#">#(..encodeForHTML(..label))#</label>
          	<select id="#(..encodeForHTMLAttribute(..htmlID))#" class="form-control ef-bootstrap-box-sizing ef-grid-main-filters ef-persistent-value" data-ef-grid-id="#(..encodeForHTMLAttribute(..gridID))#">
           		#[do ..renderFilterItems()]#
			</select>
		</div>
	>
]]></Implementation>
</Method>

<Method name="renderFilterItems">
<Implementation><![CDATA[
	for ind=1:1:..filterItems.Count() {
		set filterItem=..filterItems.GetAt(ind)
		do filterItem.render()	
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.grid.filterDropdownTestCase">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.grid.filterDropdownTestCase.CLS/EV.4
;vc; Component: CLS.EF.ui.components.backend.grid.filterDropdownTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.grid.filterDropdownTestCase.CLS/EV.4</td><td>CLS.EF.ui.components.backend.grid.filterDropdownTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63824,55253</TimeChanged>
<TimeCreated>63729,56826.865076</TimeCreated>

<Method name="TestRender">
<Implementation><![CDATA[
	#dim filterItem As EF.ui.components.backend.grid.filterDropdown
	
	set filterDropdown=##class(EF.ui.components.backend.grid.filterDropdown).createNew("mainGridFilter")
	set filterDropdown.gridID="mainGrid"
	set filterDropdown.label="Show:"
	
	set expectedHTML="<div class=""form-group""><label class=""control-label"" for=""mainGridFilter"">Show:</label><select id=""mainGridFilter"" class=""form-control ef-bootstrap-box-sizing ef-grid-main-filters ef-persistent-value"" data-ef-grid-id=""mainGrid""></select></div>"
	set returnedHTML=filterDropdown.getRendered()
	do $$$AssertEquals($ZSTRIP(expectedHTML,"*WC"),$ZSTRIP(returnedHTML,"*WC"))
	
	set toolBar=##class(%ZEN.proxyObject).%New()
	set toolBar.gridID="mainGrid"
	set toolBar.filters=##class(%ListOfDataTypes).%New()
	set filterDropdown=##class(EF.ui.components.backend.grid.filterDropdown).createNew("mainGridFilter",toolBar,"Show:")
	do filterDropdown.addFilterItem("No session","status","eq","Submitted","session","eq","")
	do $$$AssertEquals(filterDropdown.gridID,toolBar.gridID)
	set expectedHTML="<div class=""form-group""><labelclass=""control-label""for=""mainGridFilter"">Show:</label><selectid=""mainGridFilter""class=""form-controlef-bootstrap-box-sizingef-grid-main-filtersef-persistent-value""data-ef-grid-id=""mainGrid""><optionvalue=""Nosession""data-filter-list=""{&quot;logic&quot;:&quot;and&quot;,&quot;filters&quot;:[{&quot;field&quot;:&quot;status&quot;,&quot;operator&quot;:&quot;eq&quot;,&quot;value&quot;:&quot;Submitted&quot;},{&quot;field&quot;:&quot;session&quot;,&quot;operator&quot;:&quot;eq&quot;,&quot;value&quot;:&quot;&quot;}]}"">Nosession</option></select></div>"
	set returnedHTML=filterDropdown.getRendered()
	do $$$AssertEquals($ZSTRIP(expectedHTML,"*WC"),$ZSTRIP(returnedHTML,"*WC"))
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.grid.filterItem">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.grid.filterItem.CLS/EV.2
;vc; Component: CLS.EF.ui.components.backend.grid.filterItem
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.grid.filterItem.CLS/EV.2</td><td>CLS.EF.ui.components.backend.grid.filterItem</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.base</Super>
<TimeChanged>63796,65769</TimeChanged>
<TimeCreated>63729,54166.071134</TimeCreated>

<Property name="gridID">
<Type>%String</Type>
</Property>

<Property name="label">
<Type>%String</Type>
</Property>

<Property name="filterField">
<Type>%String</Type>
</Property>

<Property name="filterOperator">
<Type>%String</Type>
</Property>

<Property name="filterValue">
<Type>%String</Type>
</Property>

<Property name="filterField2">
<Type>%String</Type>
</Property>

<Property name="filterOperator2">
<Type>%String</Type>
</Property>

<Property name="filterValue2">
<Type>%String</Type>
</Property>

<Property name="filterList">
<Type>filterList</Type>
</Property>

<Method name="createNew">
<Description><![CDATA[
Examples
<option value="Submitted" selected="" data-filter-field="status" data-filter-operator="eq" data-filter-value="Submitted">Submitted</option>
<option value="Review incomplete" data-filter-field="status" data-filter-operator="eq" data-filter-value="Submitted" data-filter-field2="reviewsCompleted" data-filter-operator2="lt" data-filter-value2="2">Review incomplete</option>
<option value="Review complete" data-filter-field="status" data-filter-operator="eq" data-filter-value="Submitted" data-filter-field2="reviewsCompleted" data-filter-operator2="gte" data-filter-value2="2">Review complete</option>
<option value="No session" data-filter-field="status" data-filter-operator="eq" data-filter-value="Submitted" data-filter-field2="session" data-filter-operator2="eq" data-filter-value2="">No session</option>
<option value="No registered presenter" data-filter-field="status" data-filter-operator="eq" data-filter-value="Submitted" data-filter-field-2="presentingAuthorRegistered" data-filter-operator-2="eq" data-filter-value-2="No">No registered presenter</option>
<option value="All">All</option>
<option value="Unsubmitted" data-filter-field="status" data-filter-operator="eq" data-filter-value="Unsubmitted">Unsubmitted</option>
<option value="Archived" data-filter-field="status" data-filter-operator="eq" data-filter-value="Archived">Archived</option>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>filterDropdown:EF.ui.components.backend.grid.filterDropdown="",label:%String="",filterField:%String="",filterOperator:%String="",filterValue:%String="",filterField2:%String="",filterOperator2:%String="",filterValue2:%String=""</FormalSpec>
<ReturnType>EF.ui.components.backend.grid.filterItem</ReturnType>
<Implementation><![CDATA[
	set filterItem=..%New()
	if $IsObject(filterDropdown) {
		do filterDropdown.filterItems.Insert(filterItem)
		set filterItem.gridID=filterDropdown.gridID	
	}
	
	set filterItem.label=label
	set filterItem.filterList=##class(filterList).createNew()
	
	if (filterField'="") {
		set filterItem.filterField=filterField
		set filterItem.filterOperator=filterOperator
		set filterItem.filterValue=filterValue
		
		do filterItem.filterList.addFilterListItem(##class(filter).createNew(filterField,filterOperator,filterValue))
	}
	if (filterField2'="") {
		set filterItem.filterField2=filterField2
		set filterItem.filterOperator2=filterOperator2
		set filterItem.filterValue2=filterValue2
		
		do filterItem.filterList.addFilterListItem(##class(filter).createNew(filterField2,filterOperator2,filterValue2))
	}
	
	return filterItem
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	set filterList=""
	
	if (..filterList.filters.Count()>0) {
		set filterListJSON=##class(shared.jsonFunctions).getObjectAsJSONString(..filterList)
		set filterList="data-filter-list="""_..encodeForHTMLAttribute(filterListJSON)_""""
	}
	
	&html<
		<option value="#(..encodeForHTMLAttribute(..label))#" #(..rawHTML(filterList))#>#(..encodeForHTML(..label))#</option>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.grid.filterItemTestCase">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.grid.filterItemTestCase.CLS/EV.2
;vc; Component: CLS.EF.ui.components.backend.grid.filterItemTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.grid.filterItemTestCase.CLS/EV.2</td><td>CLS.EF.ui.components.backend.grid.filterItemTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63799,52684</TimeChanged>
<TimeCreated>63729,54663.261105</TimeCreated>

<Method name="TestRender">
<Implementation><![CDATA[
	#dim filterItem As EF.ui.components.backend.grid.filterItem
	
	set filterItem=##class(EF.ui.components.backend.grid.filterItem).createNew()
	set filterItem.gridID="mainGrid"
	set filterItem.label="Review incomplete"
	set filterItem.filterField="status"
	set filterItem.filterOperator="eq"
	set filterItem.filterValue="Submitted"
	set filterItem.filterField2="reviewsCompleted"
	set filterItem.filterOperator2="lt"
	set filterItem.filterValue2="2"
	set expectedSearchButtonHTML="<optionvalue=""Reviewincomplete"">Reviewincomplete</option>"
	set returnedColumnSelectorHTML=filterItem.getRendered()
	do $$$AssertEquals($ZSTRIP(expectedSearchButtonHTML,"*WC"),$ZSTRIP(returnedColumnSelectorHTML,"*WC"))
	
	set filterDropdown=##class(%ZEN.proxyObject).%New()
	set filterDropdown.gridID="TestID"
	set filterDropdown.filterItems=##class(%ListOfDataTypes).%New()
	set filterItem=##class(EF.ui.components.backend.grid.filterItem).createNew(filterDropdown)
	do $$$AssertEquals(filterDropdown.gridID,filterItem.gridID)
	
	set filterItem=##class(EF.ui.components.backend.grid.filterItem).createNew(filterDropdown,"All")
	set expectedSearchButtonHTML="<option value=""All"">All</option>"
	set returnedColumnSelectorHTML=filterItem.getRendered()
	do $$$AssertEquals($ZSTRIP(expectedSearchButtonHTML,"*WC"),$ZSTRIP(returnedColumnSelectorHTML,"*WC"))
	
	set filterItem=##class(EF.ui.components.backend.grid.filterItem).createNew(filterDropdown,"Archived","status","eq","Archived")
	set expectedSearchButtonHTML="<optionvalue=""Archived""data-filter-list=""{&quot;logic&quot;:&quot;and&quot;,&quot;filters&quot;:[{&quot;field&quot;:&quot;status&quot;,&quot;operator&quot;:&quot;eq&quot;,&quot;value&quot;:&quot;Archived&quot;}]}"">Archived</option>"
	set returnedColumnSelectorHTML=filterItem.getRendered()
	do $$$AssertEquals($ZSTRIP(expectedSearchButtonHTML,"*WC"),$ZSTRIP(returnedColumnSelectorHTML,"*WC"))
	
	set filterItem=##class(EF.ui.components.backend.grid.filterItem).createNew(filterDropdown,"No session","status","eq","Submitted","session","eq","")
	set expectedSearchButtonHTML=" <optionvalue=""Nosession""data-filter-list=""{&quot;logic&quot;:&quot;and&quot;,&quot;filters&quot;:[{&quot;field&quot;:&quot;status&quot;,&quot;operator&quot;:&quot;eq&quot;,&quot;value&quot;:&quot;Submitted&quot;},{&quot;field&quot;:&quot;session&quot;,&quot;operator&quot;:&quot;eq&quot;,&quot;value&quot;:&quot;&quot;}]}"">Nosession</option>"
	set returnedColumnSelectorHTML=filterItem.getRendered()
	do $$$AssertEquals($ZSTRIP(expectedSearchButtonHTML,"*WC"),$ZSTRIP(returnedColumnSelectorHTML,"*WC"))
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.grid.filterList">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.grid.filterList.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.grid.filterList
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.grid.filterList.CLS/EV.0</td><td>CLS.EF.ui.components.backend.grid.filterList</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63796,61632</TimeChanged>
<TimeCreated>63796,45167.435562</TimeCreated>

<Property name="logic">
<Type>%String</Type>
<InitialExpression>"and"</InitialExpression>
<Required>1</Required>
<Parameter name="VALUELIST" value="and,or"/>
</Property>

<Property name="filters">
<Type>%RegisteredObject</Type>
<Collection>list</Collection>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>logic:%String=""</FormalSpec>
<Implementation><![CDATA[
	Set ret=..%New()
	
	If logic'="" {
		Set ret.logic=logic
	}
	
	Return ret
]]></Implementation>
</Method>

<Method name="addFilterListItem">
<Description>
Item can either be a filter or another filterList</Description>
<FormalSpec>item</FormalSpec>
<Implementation><![CDATA[
	Do ..filters.Insert(item)
	Return item
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.grid.gridRemote">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.grid.gridRemote.CLS/EV.5
;vc; Component: CLS.EF.ui.components.backend.grid.gridRemote
;vc;  Location: SmallDev
;vc; Date/Time: 13-Jan-16 11:48
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.grid.gridRemote.CLS/EV.5</td><td>CLS.EF.ui.components.backend.grid.gridRemote</td><td>SmallDev</td><td style='white-space: nowrap;'>13-Jan-16 11:48</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.ui.components.container</Super>
<TimeChanged>63935,52275.859693</TimeChanged>
<TimeCreated>63729,37478.625857</TimeCreated>

<Property name="columnDefinitionURL">
<Type>%String</Type>
</Property>

<Property name="dataURL">
<Type>%String</Type>
</Property>

<Property name="toolTipURL">
<Type>%String</Type>
</Property>

<Property name="rowCountMessage">
<Type>%String</Type>
</Property>

<Property name="toolBar">
<Type>EF.ui.components.backend.grid.toolBar</Type>
</Property>

<Property name="rowEditButton">
<Type>EF.ui.components.backend.grid.rowEditButton</Type>
</Property>

<Property name="rowSelectButton">
<Type>EF.ui.components.backend.grid.rowSelectButton</Type>
</Property>

<Property name="dateFormat">
<Type>%Integer</Type>
<InitialExpression>3</InitialExpression>
</Property>

<Property name="timeFormat">
<Type>%Integer</Type>
</Property>

<Property name="isDraggable">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="isSelectable">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="isSortable">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="allRowIdsWithOrderInputElement">
<Type>EF.ui.components.hiddenInput</Type>
</Property>

<Property name="defaultSortColumnName">
<Type>%String</Type>
</Property>

<Property name="defaultSortColumnOrder">
<Type>%Library.String</Type>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",asc,desc"/>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>htmlID</FormalSpec>
<ReturnType>EF.ui.components.backend.grid.gridRemote</ReturnType>
<Implementation><![CDATA[	return ..%New(htmlID)
]]></Implementation>
</Method>

<Method name="configureDefaultSorting">
<FormalSpec>columnName:%String,sortDirection:%String</FormalSpec>
<Implementation><![CDATA[
	if '$L(columnName) {
		throw ##class(shared.exceptions.generalException).%New("Default sort column name is missing")	
	}
	
	set ListOfAllowedSortDirections=$LISTBUILD("asc","desc")
	if '$LISTFIND(ListOfAllowedSortDirections,sortDirection) {
		throw ##class(shared.exceptions.generalException).%New("Default sort direction is invalid")	
	}
	set ..defaultSortColumnName=columnName
	set ..defaultSortColumnOrder=sortDirection
]]></Implementation>
</Method>

<Method name="makeDraggable">
<FormalSpec>allRowIdsWithOrderInputElementID</FormalSpec>
<Implementation><![CDATA[
	set ..isDraggable=1
	set ..allRowIdsWithOrderInputElement=##class(EF.ui.components.hiddenInput).%New(allRowIdsWithOrderInputElementID)
	do ..allRowIdsWithOrderInputElement.addClass("ef-all-grid-rows-with-order")
]]></Implementation>
</Method>

<Method name="renderStart">
<Implementation><![CDATA[
	if $Data(%request) {
		set columnDefinitionURL=##class(%CSP.Page).Link(..columnDefinitionURL)
		set cellURL=##class(%CSP.Page).Link(..dataURL)
		set toolTipURL=##class(%CSP.Page).Link(..toolTipURL)
	} else {
		set columnDefinitionURL=..columnDefinitionURL
		set cellURL=..dataURL		
		set toolTipURL=..toolTipURL
	}
	
	set toolBarTemplateID=""
	if $IsObject(..toolBar) {
		set toolBarTemplateID=..toolBar.templateID
	}
	set rowEditTemplateID=""
	if $IsObject(..rowEditButton) {
		set rowEditTemplateID=..rowEditButton.templateID
	}
	set rowSelectTemplateID=""
	if $IsObject(..rowSelectButton) {
		set rowSelectTemplateID=..rowSelectButton.templateID
	}
	
	set kendoDateFormat=##class(shared.dateFunctions).getKendoDateFormat(..dateFormat)
	
	do ..addClass("ef-admin-data-grid")
	if ..isSelectable {
		do ..addClass("ef-selectable-grid")	
	}
	if ..isDraggable {
		do ..addClass("ef-draggable-grid")	
	}
	if ..isSortable {
		do ..addClass("ef-sortable-grid")
	}	
	&HTML<
		 <div id="#(..encodeForHTMLAttribute(..htmlID))#" class="#(..encodeForHTMLAttribute(..classes))#" data-column-definition-url="#(..encodeForHTMLAttribute(columnDefinitionURL))#" data-cell-data-url="#(..encodeForHTMLAttribute(cellURL))#" data-grid-row-count-message="#(..encodeForHTMLAttribute(..rowCountMessage))#" data-grid-toolbar-id="#(..encodeForHTMLAttribute(toolBarTemplateID))#" data-grid-row-edit-button-id="#(..encodeForHTMLAttribute(rowEditTemplateID))#"  data-grid-row-select-button-id="#(..encodeForHTMLAttribute(rowSelectTemplateID))#" data-kendo-date-format="#(..encodeForHTMLAttribute(kendoDateFormat))#" data-tool-tip-url="#(..encodeForHTMLAttribute(toolTipURL))#" data-default-sort-column-name="#(..encodeForHTMLAttribute(..defaultSortColumnName))#" data-default-sort-column-order="#(..encodeForHTMLAttribute(..defaultSortColumnOrder))#">
	>
	if $IsObject(..allRowIdsWithOrderInputElement) {
		do ..allRowIdsWithOrderInputElement.render()	
	}
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[
	&html<</div>>
	if $IsObject(..toolBar) {
		do ..toolBar.render()
	}
	if $IsObject(..rowEditButton) {
		do ..rowEditButton.render()
	}
	if $IsObject(..rowSelectButton) {
		do ..rowSelectButton.render()
	}
]]></Implementation>
</Method>

<Method name="addToolBar">
<ReturnType>EF.ui.components.backend.grid.toolBar</ReturnType>
<Implementation><![CDATA[	return ##class(EF.ui.components.backend.grid.toolBar).createNew($this)
]]></Implementation>
</Method>

<Method name="addRowEditButton">
<ReturnType>EF.ui.components.backend.grid.rowEditButton</ReturnType>
<Implementation><![CDATA[	return ##class(EF.ui.components.backend.grid.rowEditButton).createNew($this)
]]></Implementation>
</Method>

<Method name="addRowSelectButton">
<ReturnType>EF.ui.components.backend.grid.rowSelectButton</ReturnType>
<Implementation><![CDATA[	return ##class(EF.ui.components.backend.grid.rowSelectButton).createNew($this)
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.grid.gridRemoteTestCase">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.grid.gridRemoteTestCase.CLS/EV.4
;vc; Component: CLS.EF.ui.components.backend.grid.gridRemoteTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 13-Jan-16 12:37
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.grid.gridRemoteTestCase.CLS/EV.4</td><td>CLS.EF.ui.components.backend.grid.gridRemoteTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>13-Jan-16 12:37</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63930,46022.680188</TimeChanged>
<TimeCreated>63729,44150.481984</TimeCreated>

<Method name="TestRender">
<Implementation><![CDATA[
	#dim gridRemote as EF.ui.components.backend.grid.gridRemote
	set gridRemote=##class(EF.ui.components.backend.grid.gridRemote).createNew("gridMain")
	do $$$AssertEquals(gridRemote.htmlID,"gridMain")
	set gridRemote.rowCountMessage="Showing {2} submissions"
	set gridRemote.columnDefinitionURL="abstractSubmissionColumnsJSON.csp"
	set gridRemote.dataURL="abstractSubmissionJSON.csp"
	set expectedHTML="<divid=""gridMain""class=""ef-admin-data-grid""data-column-definition-url=""abstractSubmissionColumnsJSON.csp""data-cell-data-url=""abstractSubmissionJSON.csp""data-grid-row-count-message=""Showing{2}submissions""data-grid-toolbar-id=""""data-grid-row-edit-button-id=""""data-grid-row-select-button-id=""""data-kendo-date-format=""dd/MM/yyyy""data-tool-tip-url="""" data-default-sort-column-name="""" data-default-sort-column-order=""""></div>"
	set returnedHTML=gridRemote.getRendered()
	do $$$AssertEquals($ZSTRIP(expectedHTML,"*WC"),$ZSTRIP(returnedHTML,"*WC"))
	
	set gridRemote=##class(EF.ui.components.backend.grid.gridRemote).createNew("gridMain")
	set toolBar=gridRemote.addToolBar()
	do $$$AssertEquals(toolBar.gridID,gridRemote.htmlID)
	do $$$AssertTrue(toolBar.%IsA("EF.ui.components.backend.grid.toolBar"))
	
	set gridRemote=##class(EF.ui.components.backend.grid.gridRemote).createNew("gridMain")
	set editButton=gridRemote.addRowEditButton()
	do $$$AssertEquals(editButton.gridID,gridRemote.htmlID)
	do $$$AssertTrue(editButton.%IsA("EF.ui.components.backend.grid.rowEditButton"))
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.grid.rowEditButton">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.grid.rowEditButton.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.grid.rowEditButton
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.grid.rowEditButton.CLS/EV.1</td><td>CLS.EF.ui.components.backend.grid.rowEditButton</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.container</Super>
<TimeChanged>63812,38031</TimeChanged>
<TimeCreated>63729,52324.499448</TimeCreated>

<Property name="gridID">
<Type>%String</Type>
</Property>

<Property name="popupURL">
<Type>%String</Type>
</Property>

<Property name="newTabURL">
<Type>%String</Type>
</Property>

<Property name="templateID">
<Type>%String</Type>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>grid:EF.ui.components.backend.grid.gridRemote=""</FormalSpec>
<ReturnType>EF.ui.components.backend.grid.toolBar</ReturnType>
<Implementation><![CDATA[
	set rowEditButton=..%New()
	if $IsObject(grid) {
		set grid.rowEditButton=rowEditButton
		set rowEditButton.gridID=grid.htmlID
		set rowEditButton.templateID=grid.htmlID_"EditButtonTemplate"	
	}
	return rowEditButton
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	if $Data(%request) {
		set linkedPopupURL=##class(%CSP.Page).Link(..popupURL)
		set linkedNewTabURL=##class(%CSP.Page).Link(..newTabURL)

	} else {
		set linkedPopupURL=..popupURL
		set linkedNewTabURL=..newTabURL
	}
	w "<script type=""text/x-kendo-template"" id="""_..encodeForHTMLAttribute(..templateID)_""">",!
	&html<<button type="button" class="btn btn-default btn-xs ef-grid-row-edit-button #(..classes)#" data-popup-url="#(..encodeForHTMLAttribute(linkedPopupURL))#" data-new-tab-url="#(..encodeForHTMLAttribute(linkedNewTabURL))#" data-row-id="#= rowID #">
            <span class="glyphicon glyphicon-pencil"></span>
        </button>>
	w "</script>",!
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.grid.rowEditButtonTestCase">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.grid.rowEditButtonTestCase.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.grid.rowEditButtonTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.grid.rowEditButtonTestCase.CLS/EV.1</td><td>CLS.EF.ui.components.backend.grid.rowEditButtonTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63816,39820</TimeChanged>
<TimeCreated>63729,52902.225877</TimeCreated>

<Method name="TestRender">
<Implementation><![CDATA[
	#dim rowEditButton As EF.ui.components.backend.grid.rowEditButton
	
	set rowEditButton=##class(EF.ui.components.backend.grid.rowEditButton).createNew()
	set rowEditButton.templateID="rowEditButton"
	set rowEditButton.popupURL="popup.csp"

	set returnedHTML=##class(EF.utils.outputRedirection).redirectMethodOutputToString(rowEditButton,"render")
	set expectedURL="<script type=""text/x-kendo-template"" id=""rowEditButton""><button type=""button"" class=""btn btn-default btn-xs ef-grid-row-edit-button"" data-popup-url=""popup.csp""data-new-tab-url="""" data-row-id=""#= rowID #"">            <span class=""glyphicon glyphicon-pencil""></span>        </button></script>"
	do $$$AssertEquals($ZSTRIP(expectedURL,"*WC"),$ZSTRIP(returnedHTML,"*WC"))
	
	set grid=##class(%ZEN.proxyObject).%New()
	set grid.htmlID="TestID"
	set rowEditButton=##class(EF.ui.components.backend.grid.rowEditButton).createNew(grid)
	do $$$AssertEquals(grid.htmlID,rowEditButton.gridID)
	do $$$AssertEquals(grid.htmlID_"EditButtonTemplate",rowEditButton.templateID)
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.grid.rowSelectButton">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.grid.rowSelectButton.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.grid.rowSelectButton
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.grid.rowSelectButton.CLS/EV.1</td><td>CLS.EF.ui.components.backend.grid.rowSelectButton</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.container</Super>
<TimeChanged>63812,44103</TimeChanged>
<TimeCreated>63729,52324.499448</TimeCreated>

<Property name="gridID">
<Type>%String</Type>
</Property>

<Property name="gotoURL">
<Type>%String</Type>
</Property>

<Property name="templateID">
<Type>%String</Type>
</Property>

<Property name="className">
<Type>%String</Type>
<InitialExpression>"ef-grid-row-select-button"</InitialExpression>
</Property>

<Property name="glyphIconName">
<Type>%String</Type>
<InitialExpression>"glyphicon-chevron-right"</InitialExpression>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>grid:EF.ui.components.backend.grid.gridRemote=""</FormalSpec>
<ReturnType>EF.ui.components.backend.grid.toolBar</ReturnType>
<Implementation><![CDATA[
	set rowSelectButton=..%New()
	if $IsObject(grid) {
		set grid.rowSelectButton=rowSelectButton
		set rowSelectButton.gridID=grid.htmlID
		set rowSelectButton.templateID=grid.htmlID_"SelectButtonTemplate"	
	}
	return rowSelectButton
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	if $Data(%request) {
		set linkedGotoURL=##class(%CSP.Page).Link(..gotoURL)
	} else {
		set linkedGotoURL=..gotoURL
			
	}
	write "<script type=""text/x-kendo-template"" id="""_..encodeForHTMLAttribute(..templateID)_""">",!
	&html<<button type="button" class="btn btn-default btn-xs #(..className)# #(..classes)#" data-goto-url="#(..encodeForHTMLAttribute(linkedGotoURL))#" data-row-id="#= rowID #" data-event-id="#= id #">
            <span class="glyphicon #(..glyphIconName)#"></span>
        </button>>
	write "</script>",!
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.grid.toolBar">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.grid.toolBar.CLS/EV.7
;vc; Component: CLS.EF.ui.components.backend.grid.toolBar
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.grid.toolBar.CLS/EV.7</td><td>CLS.EF.ui.components.backend.grid.toolBar</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.container</Super>
<TimeChanged>63824,40506</TimeChanged>
<TimeCreated>63729,36421.239127</TimeCreated>

<Property name="gridID">
<Type>%String</Type>
</Property>

<Property name="tools">
<Type>EF.ui.components.backend.grid.toolDropdown</Type>
</Property>

<Property name="filters">
<Type>EF.ui.components.backend.grid.filterDropdown</Type>
<Collection>list</Collection>
</Property>

<Property name="extraControls">
<Type>EF.ui.components.base</Type>
<Collection>list</Collection>
</Property>

<Property name="templateID">
<Type>%String</Type>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>grid:EF.ui.components.backend.grid.gridRemote=""</FormalSpec>
<ReturnType>EF.ui.components.backend.grid.toolBar</ReturnType>
<Implementation><![CDATA[
	set toolBar=..%New()
	if $IsObject(grid) {
		set grid.toolBar=toolBar
		set toolBar.gridID=grid.htmlID
		set toolBar.templateID=grid.htmlID_"ToolbarTemplate"
	}
	return toolBar
]]></Implementation>
</Method>

<Method name="addFilterDropdown">
<FormalSpec>htmlID:%String,label:%String</FormalSpec>
<ReturnType>EF.ui.components.backend.grid.filterDropdown</ReturnType>
<Implementation><![CDATA[	return ##class(EF.ui.components.backend.grid.filterDropdown).createNew(htmlID,$this,label)
]]></Implementation>
</Method>

<Method name="addToolDropdown">
<FormalSpec>label:%String</FormalSpec>
<ReturnType>EF.ui.components.backend.grid.filterDropdown</ReturnType>
<Implementation><![CDATA[	return ##class(EF.ui.components.backend.grid.toolDropdown).createNew($this)
]]></Implementation>
</Method>

<Method name="addCalendarButton">
<FormalSpec>htmlID:%String</FormalSpec>
<ReturnType>EF.ui.components.backend.linkButtonCalendar</ReturnType>
<Implementation><![CDATA[
	set calendarButton=##class(EF.ui.components.backend.linkButtonCalendar).%New(htmlID)
	do ..extraControls.Insert(calendarButton)
	return calendarButton
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	write "<script type=""text/x-kendo-template"" id="""_..encodeForHTMLAttribute(..templateID)_""">",! //Studio does not like this in &html
		write ..encodeForKendoTemplate(##class(EF.utils.outputRedirection).redirectMethodOutputToString($this,"renderContents"))
   write "</script>",!
]]></Implementation>
</Method>

<Method name="renderContents">
<Implementation><![CDATA[
	#define formInline "form-inline"
	if ..filters.Count() >= 3 {
		set toolsColumnClass=$$$formInline_" col-md-2"
		set filtersColumnClass=$$$formInline_" col-md-10 ef-filters-narrow"
	} else {
		set toolsColumnClass=$$$formInline_" col-md-3"
		set filtersColumnClass=$$$formInline_" col-md-9"
		
	}
	&html<
		<div class="ef-k-grid-toolbar">
		    <div class="#(..encodeHTMLAttribute(toolsColumnClass))#">
		        <div class="form-group">
		           #[do ..renderTools()]#
		           #[do ..renderColumnSelector()]#
		           #[do ..renderExtraControls()]#
		        </div>
		    </div>
		    <div class="#(..encodeHTMLAttribute(filtersColumnClass))#">
		        <div class="ef-pull-right-md">
		            #[do ..renderFilters()]#
		            #[do ..renderSearch()]#
		        </div>
		    </div>
		</div>
    >
]]></Implementation>
</Method>

<Method name="renderTools">
<Implementation><![CDATA[
	if $IsObject(..tools) {
		do ..tools.render()	
	}
]]></Implementation>
</Method>

<Method name="renderExtraControls">
<Implementation><![CDATA[
	set count=..extraControls.Count()
	if count {
		for ind=1:1:count {
			set control=..extraControls.GetAt(ind)
			do control.render()	
		}
	}
]]></Implementation>
</Method>

<Method name="renderColumnSelector">
<Implementation><![CDATA[
	&html<<div class="btn-group">
            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                <i class="fa fa-columns"></i>
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu ef-checkbox-dropdown-menu ef-grid-hide-show-column-dropdown" role="menu">
            </ul>
        </div>>
]]></Implementation>
</Method>

<Method name="renderFilters">
<Implementation><![CDATA[
	set filterCount=..filters.Count()
	if filterCount {
		for ind=1:1:..filters.Count() {
			set filterControl=..filters.GetAt(ind)
			do filterControl.render()	
		}
	}
]]></Implementation>
</Method>

<Method name="renderSearch">
<Implementation><![CDATA[
	&html<
		<div class="form-group">
            <label class="sr-only" for="mainGridSearch">Search</label>
            <div class="left-inner-addon">
                <i class="fa fa-search"></i>
                <input type="text" id="mainGridSearch" class="form-control ef-bootstrap-box-sizing ef-grid-main-search" placeholder="Search" />
            </div>
        </div>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.grid.toolBarTestCase">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.grid.toolBarTestCase.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.grid.toolBarTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.grid.toolBarTestCase.CLS/EV.1</td><td>CLS.EF.ui.components.backend.grid.toolBarTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63754,53213</TimeChanged>
<TimeCreated>63729,45161.907558</TimeCreated>

<Method name="TestRender">
<Implementation><![CDATA[
	#dim toolBar As EF.ui.components.backend.grid.toolBar
	
	set toolBar=##class(EF.ui.components.backend.grid.toolBar).createNew()
	set toolBar.gridID="mainGrid"
	set expectedSearchButtonHTML="<div class=""form-group"">            <label class=""sr-only"" for=""mainGridSearch"">Search</label>            <div class=""left-inner-addon"">                <i class=""fa fa-search""></i>                <input type=""text"" id=""mainGridSearch"" class=""form-control ef-bootstrap-box-sizing ef-grid-main-search"" placeholder=""Search"" />            </div>        </div>"
	set returnedColumnSelectorHTML=##class(EF.utils.outputRedirection).redirectMethodOutputToString(toolBar,"renderSearch")
	do $$$AssertEquals($ZSTRIP(expectedSearchButtonHTML,"*WC"),$ZSTRIP(returnedColumnSelectorHTML,"*WC"))
	
	set expectedColumnSelectorHTML="<div class=""btn-group"">            <button type=""button"" class=""btn btn-default dropdown-toggle"" data-toggle=""dropdown"">                <i class=""fa fa-columns""></i>                <span class=""caret""></span>            </button>            <ul class=""dropdown-menu ef-checkbox-dropdown-menu ef-grid-hide-show-column-dropdown"" role=""menu"">            </ul>        </div>"
	set returnedColumnSelectorHTML=##class(EF.utils.outputRedirection).redirectMethodOutputToString(toolBar,"renderColumnSelector")
	do $$$AssertEquals($ZSTRIP(expectedColumnSelectorHTML,"*WC"),$ZSTRIP(returnedColumnSelectorHTML,"*WC"))
	
	set expectedHTML="<div class=""ef-k-grid-toolbar"">             <div class=""form-inline col-md-3"">                  <div class=""form-group"">                                                   <div class=""btn-group"">            <button type=""button"" class=""btn btn-default dropdown-toggle"" data-toggle=""dropdown"">                <i class=""fa fa-columns""></i>                <span class=""caret""></span>            </button>            <ul class=""dropdown-menu ef-checkbox-dropdown-menu ef-grid-hide-show-column-dropdown"" role=""menu"">            </ul>        </div>                   </div>              </div>                  <div class=""form-inline col-md-9"">                  <div class=""ef-pull-right-md"">                                                         <div class=""form-group"">            <label class=""sr-only"" for=""mainGridSearch"">Search</label>            <div class=""left-inner-addon"">                <i class=""fa fa-search""></i>                <input type=""text"" id=""mainGridSearch"" class=""form-control ef-bootstrap-box-sizing ef-grid-main-search"" placeholder=""Search"" />            </div>        </div>                              </div>             </div>               </div>"
	set returnedHTML=##class(EF.utils.outputRedirection).redirectMethodOutputToString(toolBar,"renderContents")
	do $$$AssertEquals($ZSTRIP(expectedHTML,"*WC"),$ZSTRIP(returnedHTML,"*WC"))
	
	set grid=##class(%ZEN.proxyObject).%New()
	set grid.htmlID="TestID"
	set toolBar=##class(EF.ui.components.backend.grid.toolBar).createNew(grid)
	do $$$AssertEquals(grid.htmlID,toolBar.gridID)
	do $$$AssertEquals(grid.htmlID_"ToolbarTemplate",toolBar.templateID)
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.grid.toolDropdown">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.grid.toolDropdown.CLS/EV.3
;vc; Component: CLS.EF.ui.components.backend.grid.toolDropdown
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.grid.toolDropdown.CLS/EV.3</td><td>CLS.EF.ui.components.backend.grid.toolDropdown</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.toolDropdown.toolDropdown</Super>
<TimeChanged>63834,61686</TimeChanged>
<TimeCreated>63729,60927.134461</TimeCreated>

<Property name="gridID">
<Type>%String</Type>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>toolBar:EF.ui.components.backend.grid.toolBar=""</FormalSpec>
<ReturnType>EF.ui.components.backend.grid.toolDropdown</ReturnType>
<Implementation><![CDATA[
	set toolDropdown=##super()
	if $IsObject(toolBar) {
		set toolBar.tools=toolDropdown
		set toolDropdown.gridID=toolBar.gridID	
	}
	return toolDropdown
]]></Implementation>
</Method>

<Method name="addToolItem">
<FormalSpec>label</FormalSpec>
<Implementation><![CDATA[	return ##class(EF.ui.components.backend.grid.toolItem).createNew($this,label)
]]></Implementation>
</Method>

<Method name="addToolItemOpenModal">
<FormalSpec>label,targetURL</FormalSpec>
<Implementation><![CDATA[
	set toolItem=##super(label, targetURL)
	set toolItem.action.openModalClass="ef-grid-open-modal"
	return toolItem
]]></Implementation>
</Method>

<Method name="addExportToExcel">
<FormalSpec>label</FormalSpec>
<Implementation><![CDATA[
	set toolItem=..addToolItem(label)
	set toolItem.action=##class(EF.ui.components.backend.toolDropdown.toolItemAction).createNew(label)
	do toolItem.action.addClass("ef-grid-excel-export")
	return toolItem
]]></Implementation>
</Method>

<Method name="addSelectAll">
<FormalSpec>label="Select all"</FormalSpec>
<Implementation><![CDATA[
	set toolItem=..addToolItem(label)
	set toolItem.action=##class(EF.ui.components.backend.toolDropdown.toolItemAction).createNew(label)
	do toolItem.action.addClass("ef-grid-select-all")
	return toolItem
]]></Implementation>
</Method>

<Method name="addSelectNone">
<FormalSpec>label="Select none"</FormalSpec>
<Implementation><![CDATA[
	set toolItem=..addToolItem(label)
	set toolItem.action=##class(EF.ui.components.backend.toolDropdown.toolItemAction).createNew(label)
	do toolItem.action.addClass("ef-grid-select-none")
	return toolItem
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.grid.toolDropdownTestCase">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.grid.toolDropdownTestCase.CLS/EV.3
;vc; Component: CLS.EF.ui.components.backend.grid.toolDropdownTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.grid.toolDropdownTestCase.CLS/EV.3</td><td>CLS.EF.ui.components.backend.grid.toolDropdownTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63834,63381</TimeChanged>
<TimeCreated>63734,58592.584832</TimeCreated>

<Method name="TestRender">
<Implementation><![CDATA[
	#dim dropdown As EF.ui.components.backend.grid.toolDropdown
	
	set dropdown=##class(EF.ui.components.backend.grid.toolDropdown).createNew()
	set dropdown.gridID="mainGrid"
	set returnedHTML=dropdown.getRendered()
	set expectedHTML="<divclass=""btn-group""><buttontype=""button""class=""btnbtn-defaultdropdown-toggle""data-toggle=""dropdown""><spanclass=""glyphiconglyphicon-wrench""></span><spanclass=""caret""></span></button><ulclass=""dropdown-menu""role=""menu""></ul></div>"
	do $$$AssertEquals($ZSTRIP(expectedHTML,"*WC"),$ZSTRIP(returnedHTML,"*WC"))
	
	do dropdown.addDivider()
	set returnedHTML=dropdown.getRendered()
	set expectedHTML="<divclass=""btn-group""><buttontype=""button""class=""btnbtn-defaultdropdown-toggle""data-toggle=""dropdown""><spanclass=""glyphiconglyphicon-wrench""></span><spanclass=""caret""></span></button><ulclass=""dropdown-menu""role=""menu""><liclass=""divider""></li></ul></div>"
    
 


	do $$$AssertEquals($ZSTRIP(expectedHTML,"*WC"),$ZSTRIP(returnedHTML,"*WC"))
	
	do dropdown.addToolItemOpenModal("openModalTest","abc.csp")
	set returnedHTML=dropdown.getRendered()
	set expectedHTML="<divclass=""btn-group""><buttontype=""button""class=""btnbtn-defaultdropdown-toggle""data-toggle=""dropdown""><spanclass=""glyphiconglyphicon-wrench""></span><spanclass=""caret""></span></button><ulclass=""dropdown-menu""role=""menu""><liclass=""divider""></li><li><aclass=""ef-grid-open-modal""role=""menuitem"" data-modal-dialog-class=""modal-md"" data-link-url=""abc.csp"">openModalTest</a></li></ul></div>"
	do $$$AssertEquals($ZSTRIP(expectedHTML,"*WC"),$ZSTRIP(returnedHTML,"*WC"))
	
	set toolItem=dropdown.addToolItem("toolItemTest")
	set toolItem.action=##class(EF.ui.components.backend.toolDropdown.toolItemAction).createNew("toolItemTest")
	set returnedHTML=dropdown.getRendered()
	set expectedHTML="<divclass=""btn-group""><buttontype=""button""class=""btnbtn-defaultdropdown-toggle""data-toggle=""dropdown""><spanclass=""glyphiconglyphicon-wrench""></span><spanclass=""caret""></span></button><ulclass=""dropdown-menu""role=""menu""><liclass=""divider""></li><li><aclass=""ef-grid-open-modalef-grid-open-modal""role=""menuitem""data-modal-dialog-class=""modal-md""data-link-url=""abc.csp"">openModalTest</a></li><li><aclass="""" href=""#"">toolItemTest</a></li></ul></div>"
	do $$$AssertEquals($ZSTRIP(expectedHTML,"*WC"),$ZSTRIP(returnedHTML,"*WC"))
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.grid.toolItem">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.grid.toolItem.CLS/EV.5
;vc; Component: CLS.EF.ui.components.backend.grid.toolItem
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.grid.toolItem.CLS/EV.5</td><td>CLS.EF.ui.components.backend.grid.toolItem</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.toolDropdown.toolItem</Super>
<TimeChanged>63834,58983</TimeChanged>
<TimeCreated>63729,61820.582429</TimeCreated>

<Property name="gridID">
<Type>%String</Type>
</Property>

<Property name="requiresSelectedRows">
<Type>%Boolean</Type>
</Property>

<Property name="requiresSingleSelectedRow">
<Type>%Boolean</Type>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>toolDropdown:EF.ui.components.backend.grid.toolDropdown="",label=""</FormalSpec>
<ReturnType>EF.ui.components.backend.grid.toolItem</ReturnType>
<Implementation><![CDATA[
	set toolItem=..%New()
	if $IsObject(toolDropdown) {
		do toolDropdown.toolItems.Insert(toolItem)
		set toolItem.gridID=toolDropdown.gridID	
	}
	set toolItem.label=label
	return toolItem
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	if ..requiresSingleSelectedRow {
		do ..addClass("ef-requires-single-selected-row")
	}
	if ..requiresSelectedRows {
		do ..addClass("ef-requires-selected-rows")	
	}
	if ..isDisabled {
		do ..addClass("ef-permanently-disabled")	
	}
	do ##super()
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.grid.toolItemTestCase">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.grid.toolItemTestCase.CLS/EV.2
;vc; Component: CLS.EF.ui.components.backend.grid.toolItemTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.grid.toolItemTestCase.CLS/EV.2</td><td>CLS.EF.ui.components.backend.grid.toolItemTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63834,62941</TimeChanged>
<TimeCreated>63734,59647.840971</TimeCreated>

<Method name="TestRender">
<Implementation><![CDATA[
	#dim toolItem As EF.ui.components.backend.grid.toolDropdown
	
	set toolItem=##class(EF.ui.components.backend.grid.toolItem).createNew()
	set toolItem.label="testToolItem"

	set returnedHTML=##class(EF.utils.outputRedirection).redirectMethodOutputToString(toolItem,"render")
	set expectedHTML="<li></li>"
	do $$$AssertEquals($ZSTRIP(expectedHTML,"*WC"),$ZSTRIP(returnedHTML,"*WC"))
	
	set toolDropdown=##class(%ZEN.proxyObject).%New()
	set toolDropdown.grid="TestID"
	set toolDropdown.toolItems=##class(%ListOfDataTypes).%New()
	set toolItem=##class(EF.ui.components.backend.grid.toolItem).createNew(toolDropdown,"toolTest2")
	
	do $$$AssertEquals(toolItem.gridID,toolDropdown.gridID)
	
	set returnedHTML=##class(EF.utils.outputRedirection).redirectMethodOutputToString(toolItem,"render")
	set expectedHTML="<li></li>"
	do $$$AssertEquals($ZSTRIP(expectedHTML,"*WC"),$ZSTRIP(returnedHTML,"*WC"))
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.inputGroup">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.inputGroup.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.inputGroup
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.inputGroup.CLS/EV.1</td><td>CLS.EF.ui.components.backend.inputGroup</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.container</Super>
<TimeChanged>63896,61342</TimeChanged>
<TimeCreated>63407,64770.313805</TimeCreated>

<Property name="label">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="title">
<Type>%String</Type>
<Parameter name="MAXLEN" value="3641144"/>
</Property>

<Method name="getDefaultContainerClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" form-group"
]]></Implementation>
</Method>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" input-group"
]]></Implementation>
</Method>

<Method name="renderStart">
<Implementation><![CDATA[
	if ..hasError {
		set ..containerClasses=..containerClasses_" has-error"
	}
	&HTML<
		<div class="#(..rawHTML(..containerClasses))#" title="#(..encodeHTMLAttribute(..title))#">
	>
	if ($LENGTH(..label)>0) {
		
		set for=""
		set uiComponent=..childComponents.GetNext("")
		if $IsObject(uiComponent) {
			set for="for="""_..encodeHTMLAttribute(uiComponent.htmlID)_""""
		}
		
		&HTML<
				<label class="control-label" #(for)#>
		        	#(..encodeHTMLContent(..label))#
		    	</label>
		>
	}
	&HTML<
			<div class="#(..classes)#" id="#(..encodeHTMLAttribute(..htmlID))#">
	>
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[
	&HTML<
        	</div>
        </div>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.inputGroupNumber">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.inputGroupNumber.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.inputGroupNumber
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.inputGroupNumber.CLS/EV.0</td><td>CLS.EF.ui.components.backend.inputGroupNumber</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.inputGroup</Super>
<TimeChanged>63410,40489</TimeChanged>
<TimeCreated>63407,65368.855536</TimeCreated>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" ef-number-input-group"
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.integerInput">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.integerInput.CLS/EV.3
;vc; Component: CLS.EF.ui.components.backend.integerInput
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.integerInput.CLS/EV.3</td><td>CLS.EF.ui.components.backend.integerInput</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.numericInput</Super>
<TimeChanged>63946,60794</TimeChanged>
<TimeCreated>63364,37378.769805</TimeCreated>

<Parameter name="typeAttribute">
<Default>number</Default>
</Parameter>

<Method name="getDefaultValidator">
<ReturnType>EF.validator.integer</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.validator.integer).%New()
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.linkButton">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.linkButton.CLS/EV.4
;vc; Component: CLS.EF.ui.components.backend.linkButton
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.linkButton.CLS/EV.4</td><td>CLS.EF.ui.components.backend.linkButton</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.buttonBase</Super>
<TimeChanged>63949,61610</TimeChanged>
<TimeCreated>63405,53367.570747</TimeCreated>

<Property name="href">
<Type>%String</Type>
</Property>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" btn ef-btn-secondary ef_dont_activate_save on-click-redirect"
]]></Implementation>
</Method>

<Method name="renderStart">
<Implementation><![CDATA[
	&html<
		<button type="button" id="#(..encodeForHTMLAttribute(..htmlID))#" class="#(..encodeForHTMLAttribute(..classes))#" data-link-url="#(..encodeForHTMLAttribute(..href))#" #(..rawHTML(..getExtraAttributes()))#>
    >
]]></Implementation>
</Method>

<Method name="renderContents">
<Implementation><![CDATA[
	if $l(..label) {
		write ..encodeHTMLContent(..label)
	}
	do ##super()
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[
	&html<
        </button>	
    >
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.linkButtonCalendar">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.linkButtonCalendar.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.linkButtonCalendar
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.linkButtonCalendar.CLS/EV.0</td><td>CLS.EF.ui.components.backend.linkButtonCalendar</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.linkButton</Super>
<TimeChanged>63803,65297</TimeChanged>
<TimeCreated>63799,46920.739258</TimeCreated>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" btn btn-default"
]]></Implementation>
</Method>

<Method name="renderContents">
<Implementation><![CDATA[
	write "<span class='glyphicon glyphicon-calendar'></span>" 
	do ##super()
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.list">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.list.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.list
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.list.CLS/EV.0</td><td>CLS.EF.ui.components.backend.list</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.ui.components.list</Super>
<TimeChanged>63405,52773</TimeChanged>
<TimeCreated>63405,38388.292292</TimeCreated>

<Method name="renderStart">
<Implementation><![CDATA[
	if $l(..label) {
		&html<<label>#(..encodeHTMLContent(..label))#</label>>
	}
	// The html bit
	&html<
		<ul class="inputs-list">
    >
]]></Implementation>
</Method>

<Method name="renderChildComponent">
<FormalSpec>uiComponent:EF.ui.components.base</FormalSpec>
<Implementation><![CDATA[
	&html<<li>
			#[do uiComponent.render()]#
		</li>
	>
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[
	&html<
		</ul>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.modal">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.modal.CLS/EV.3
;vc; Component: CLS.EF.ui.components.backend.modal
;vc;  Location: SmallDev
;vc; Date/Time: 14-May-15 15:44
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.modal.CLS/EV.3</td><td>CLS.EF.ui.components.backend.modal</td><td>SmallDev</td><td style='white-space: nowrap;'>14-May-15 15:44</td><td>AdrianM</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.panel</Super>
<TimeChanged>63686,56701.773265</TimeChanged>
<TimeCreated>63383,46314.990138</TimeCreated>

<Property name="footer">
<Type>EF.ui.components.backend.modalFooter</Type>
<Collection>list</Collection>
</Property>

<Property name="size">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",lg"/>
</Property>

<Property name="showOuterDiv">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" modal"
]]></Implementation>
</Method>

<Method name="renderStart">
<Implementation><![CDATA[
	if $l(..errorMessage) {
		do ..addClass("ef-modal-with-error")
	}
	set innerClasses="ef-admin-modal-dialog"
	if $l(..size) {
		set innerClasses=innerClasses_" "_"modal-"_..size	
	}
	if ..showOuterDiv {
		&HTML<
			<div class="#(..encodeHTMLAttribute(..classes))#" id="#(..encodeHTMLAttribute(..htmlID))#" tabindex="-1" role="dialog" aria-labelledby="timeout-modal-title" aria-hidden="true">
		        <div class="#(..encodeHTMLAttribute(innerClasses))#">
		            <div class="modal-content">
		>
	}
	&HTML<
	                <div class="modal-header">
	                    <h4 class="modal-title">#(..encodeHTMLContent(..heading))#</h4>
	                </div>
	                #[do ..renderErrorMessage()]#
	>
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[
	&HTML<
				</div>
	>
	if ..showOuterDiv {
		&HTML<
			        </div>
			    </div>
	    	</div>
		>
	}
]]></Implementation>
</Method>

<Method name="renderErrorMessage">
<Implementation><![CDATA[
	if $l(..errorMessage) {
		&html<
			<div class="ef-modal-message-area">
				<div class="alert alert-danger ">#(..rawHTML(..errorMessage))#
	            </div>
	        </div>
		>
		
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.modalBody">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.modalBody.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.modalBody
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:35
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.modalBody.CLS/EV.0</td><td>CLS.EF.ui.components.backend.modalBody</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:35</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.ui.components.container</Super>
<TimeChanged>63383,64242</TimeChanged>
<TimeCreated>63383,64242.462403</TimeCreated>

<Method name="renderStart">
<Implementation><![CDATA[
	&HTML<
		<div class="modal-body">
	>
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[
	&HTML<
	    </div>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.modalFooter">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.modalFooter.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.modalFooter
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:35
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.modalFooter.CLS/EV.0</td><td>CLS.EF.ui.components.backend.modalFooter</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:35</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.ui.components.container</Super>
<TimeChanged>63383,62770</TimeChanged>
<TimeCreated>63383,62770.810203</TimeCreated>

<Method name="renderStart">
<Implementation><![CDATA[
	&HTML<
		<div class="modal-footer">
	>
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[
	&HTML<
	    </div>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.modalHeader">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.modalHeader.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.modalHeader
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.modalHeader.CLS/EV.0</td><td>CLS.EF.ui.components.backend.modalHeader</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.ui.components.text</Super>
<TimeChanged>63407,48689</TimeChanged>
<TimeCreated>63407,48427.885202</TimeCreated>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" modal-header"
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	&HTML<<div  id="#(..encodeHTMLAttribute(..htmlID))#" class="#(..encodeHTMLAttribute(..classes))#">
	        <h4 class="modal-title">#[do ##super()]#</h4>
	    </div>
    >
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.modalRemote">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.modalRemote.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.modalRemote
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.modalRemote.CLS/EV.0</td><td>CLS.EF.ui.components.backend.modalRemote</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.modal</Super>
<TimeChanged>63406,78020</TimeChanged>
<TimeCreated>63406,60659.503205</TimeCreated>

<Property name="href">
<Type>%String</Type>
</Property>

<Method name="renderStart">
<Implementation><![CDATA[
	set innerClasses="ef-admin-modal-dialog"
	if $l(..size) {
		set innerClasses=innerClasses_" "_"modal-"_..size	
	}
	&HTML<
		<div class="#(..encodeHTMLAttribute(..classes))#" id="#(..encodeHTMLAttribute(..htmlID))#" tabindex="-1" role="dialog" aria-labelledby="timeout-modal-title" aria-hidden="true" data-remote="#(..href)#">
			<div class="#(..encodeHTMLAttribute(innerClasses))#">
        		<div class="modal-content">
        		 </div>
		    </div>
	    </div>
	    <script language="javascript">
		    $(function() {
			    $('##(..encodeJS(..htmlID))#').modal('hide');
				$('##(..encodeJS(..htmlID))#').on('hidden.bs.modal', function() {
				    $(this).data('bs.modal', null);
				    $(this).modal('hide');
				});
			});
	    </script>
	>
]]></Implementation>
</Method>

<Method name="renderJS">
<Implementation><![CDATA[
	&js<
		
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.numericInput">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.numericInput.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.numericInput
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.numericInput.CLS/EV.0</td><td>CLS.EF.ui.components.backend.numericInput</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.textInput</Super>
<TimeChanged>63939,34887</TimeChanged>
<TimeCreated>63939,34887.983469</TimeCreated>

<Property name="minValue">
<Type>%Integer</Type>
</Property>

<Property name="maxValue">
<Type>%Integer</Type>
</Property>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" form-control ef-number-field"
]]></Implementation>
</Method>

<Method name="minValueSet">
<Description>
Overrides the set method for charSet to set the .</Description>
<FormalSpec>minValue:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set ..validator.minValue=minValue
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="maxValueSet">
<Description>
Overrides the set method for charSet to set the .</Description>
<FormalSpec>maxValueSet:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set ..validator.maxValue=maxValueSet
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getDefaultValidator">
<ReturnType>EF.validator.integer</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.validator.numeric).%New()
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.panel">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.panel.CLS/EV.3
;vc; Component: CLS.EF.ui.components.backend.panel
;vc;  Location: SmallDev
;vc; Date/Time: 03-Sep-14 15:19
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.panel.CLS/EV.3</td><td>CLS.EF.ui.components.backend.panel</td><td>SmallDev</td><td style='white-space: nowrap;'>03-Sep-14 15:19</td><td>AdrianM</td></tr></table>
]]></Description>
<Super>EF.ui.components.container</Super>
<TimeChanged>63433,59619.929387</TimeChanged>
<TimeCreated>63361,62973.538498</TimeCreated>

<Property name="heading">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="errorMessage">
<Type>%String</Type>
<Parameter name="MAXLEN" value="10000"/>
</Property>

<Method name="renderStart">
<Implementation><![CDATA[
	set classes="ef-admin-settings-panel"
	if $l(..errorMessage) {
		set classes=classes_" ef-panel-with-error"
	}
	&HTML<
		<div class="#(classes)#" id="#(..encodeHTMLAttribute(..htmlID))#">
            <div class="panel-heading">#(..encodeHTMLContent(..heading))#</div>
            	#[do ..renderErrorMessage()]#
	>
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[
	&HTML<
        </div>
	>
]]></Implementation>
</Method>

<Method name="renderErrorMessage">
<Implementation><![CDATA[
	if $l(..errorMessage) {
		&html<
			<div class="ef-panel-message-area">
				<div class="alert alert-danger ">#(..rawHTML(..errorMessage))#
	            </div>
	        </div>
		>
	}
]]></Implementation>
</Method>

<Method name="addErrorMessage">
<FormalSpec>errorMessage</FormalSpec>
<Implementation><![CDATA[
	if $l(..errorMessage) {
		set ..errorMessage=..errorMessage_..rawHTML("<br>")	
	}
	set ..errorMessage=..errorMessage_..encodeHTMLContent(errorMessage)
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.panelBody">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.panelBody.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.panelBody
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:35
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.panelBody.CLS/EV.0</td><td>CLS.EF.ui.components.backend.panelBody</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:35</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.ui.components.container</Super>
<TimeChanged>63386,62269</TimeChanged>
<TimeCreated>63386,62269.914548</TimeCreated>

<Method name="renderStart">
<Implementation><![CDATA[
	&HTML<
		<div class="panel-body">
	>
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[
	&HTML<
	    </div>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.passwordInput">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.passwordInput.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.passwordInput
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.passwordInput.CLS/EV.0</td><td>CLS.EF.ui.components.backend.passwordInput</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.textInput</Super>
<TimeChanged>63886,38388</TimeChanged>
<TimeCreated>63886,38372.348345</TimeCreated>

<Parameter name="typeAttribute">
<Default>password</Default>
</Parameter>
</Class>


<Class name="EF.ui.components.backend.radioButtons">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.radioButtons.CLS/EV.4
;vc; Component: CLS.EF.ui.components.backend.radioButtons
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.radioButtons.CLS/EV.4</td><td>CLS.EF.ui.components.backend.radioButtons</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.listInput</Super>
<TimeChanged>63950,45101</TimeChanged>
<TimeCreated>63356,39686.205586</TimeCreated>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" btn-group"
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	if ..parentComponent.%IsA("EF.ui.components.backend.inputGroup") {
		set ..classes="input-group-btn"	
	}
	
	
	// The html bit
	if ..showOuterDiv() {
		&html<
			<div class="form-group">
		>
	}
	if ($LENGTH(..label)>0) {
		&html<
			<label for="#(..encodeHTMLAttribute(..htmlID))#" class="control-label" title="#(..encodeHTMLAttribute(..title))#">#(..encodeHTMLContent(..label))#</label>
			<br>
		>
	}
	&html<
            <div class="#(..encodeHTMLAttribute(..classes))#" id="#(..encodeHTMLAttribute(..htmlID))#" data-toggle="buttons" title="#(..encodeHTMLAttribute(..title))#" #(..rawHTML(..getExtraAttributes()))#>
	    		#[do ..renderAlternatives()]#
	        </div>
	>
	if ..showOuterDiv() {
		&html<
			</div>
		>
	}
]]></Implementation>
</Method>

<Method name="renderAlternative">
<FormalSpec>alternative:EF.ui.components.alternative</FormalSpec>
<Implementation><![CDATA[
	if $IsObject(..enableDisableDependencyList) {
		set alternative.enableDisableDependencyList=..enableDisableDependencyList	
	}
	do alternative.render()
]]></Implementation>
</Method>

<Method name="addAlternative">
<FormalSpec>value,label,isDefault=0</FormalSpec>
<ReturnType>EF.ui.components.alternative</ReturnType>
<Implementation><![CDATA[
	set htmlID=..htmlID_"_"_(..alternatives.Count()+1)
	
	set radio=##class(EF.ui.components.radio).%New(htmlID)
	set radio.label=label
	set radio.value=value
	set radio.isDefault=isDefault
	set radio.htmlName=..htmlName
	do radio.addClass("btn")
	do radio.addClass("ef-btn-default")
	do ..alternatives.Insert(radio)
	// Also add to the validator
	do ..validator.addAllowedValue(value)
	return radio
]]></Implementation>
</Method>

<Method name="showOuterDiv">
<Implementation><![CDATA[
	set out=1
	if ..parentComponent.%IsA("EF.ui.components.backend.inputGroup") {
		set out=0	
	}
	quit out
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.responsiveTable">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.responsiveTable.CLS/EV.3
;vc; Component: CLS.EF.ui.components.backend.responsiveTable
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.responsiveTable.CLS/EV.3</td><td>CLS.EF.ui.components.backend.responsiveTable</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.tableBase</Super>
<TimeChanged>64118,60391</TimeChanged>
<TimeCreated>63384,64504.53858</TimeCreated>

<Method name="%OnNew">
<FormalSpec>htmlID:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	do ##super(htmlID)
	set ..headerRow=##class(EF.ui.components.backend.tableRow).%New()
	do ..addClass("ef-admin-settings-table")
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="useCustomStripes">
<Implementation><![CDATA[
	do ..addClass("ef-admin-settings-table-custom-stripes")
	do ..removeClass("ef-admin-settings-table")
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	// The html bit
	&html<
		<div class="table-responsive">
        	<table id="#(..encodeHTMLAttribute(..htmlID))#" class="#(..encodeHTMLAttribute(..classes))#" #(..rawHTML(..getExtraAttributes()))#>
        		#[do ..renderHeader()]#
        		#[do ..renderRows()]#
        	</table>
        </div>
    >
]]></Implementation>
</Method>

<Method name="renderHeader">
<Implementation><![CDATA[
	if ..headerRow.cells.Count()>0 {
		&html<
			<thead>
				#[do ..headerRow.render()]#
			</thead>
		>	
	}
]]></Implementation>
</Method>

<Method name="renderRows">
<Implementation><![CDATA[
	&html<
		<tbody>
			#[do ##super()]#
		</tbody>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.row">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.row.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.row
;vc;  Location: SmallDev
;vc; Date/Time: 15-Jul-14 15:26
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.row.CLS/EV.0</td><td>CLS.EF.ui.components.backend.row</td><td>SmallDev</td><td style='white-space: nowrap;'>15-Jul-14 15:26</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.container</Super>
<TimeChanged>63377,39526</TimeChanged>
<TimeCreated>63377,39481.376793</TimeCreated>

<Method name="renderStart">
<Implementation><![CDATA[
	&HTML<
		<div class="row">
	>
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[
	&HTML<
        </div>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.searchableDropdown">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.searchableDropdown.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.searchableDropdown
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.searchableDropdown.CLS/EV.0</td><td>CLS.EF.ui.components.backend.searchableDropdown</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.textInput</Super>
<TimeChanged>63838,44069</TimeChanged>
<TimeCreated>63837,66436.679923</TimeCreated>

<Property name="dataSourceURL">
<Type>%String</Type>
</Property>

<Property name="dataTextField">
<Type>%String</Type>
</Property>

<Property name="dataValueField">
<Type>%String</Type>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>htmlID,dataSourceURL,dataTextField,dataValueField</FormalSpec>
<ReturnType>EF.ui.components.backend.searchableDropdown</ReturnType>
<Implementation><![CDATA[
	set object=..%New(htmlID)
	set object.dataSourceURL=dataSourceURL
	set object.dataTextField=dataTextField
	set object.dataValueField=dataValueField
	
	return object
]]></Implementation>
</Method>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return "ef-kendo-form-control ef-kendo-searchable-dropdown"
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	set attributeList=..extraAttributes.%ConstructClone()
	do ##class(EF.ui.components.attribute).addAttributeToList(.attributeList,"data-link-url",##class(shared.pCSP).Link(..dataSourceURL))
	do ##class(EF.ui.components.attribute).addAttributeToList(.attributeList,"data-ef-text-field",..dataTextField)
	do ##class(EF.ui.components.attribute).addAttributeToList(.attributeList,"data-ef-value-field",..dataValueField)
	set attributeHTML=##class(EF.ui.components.attribute).getAttributesAsHTML(attributeList)
	do ..renderLabel()
	&html<
        <input id="#(..htmlID)#" name="#(..encodeHTMLAttribute(..htmlName))#" class="#(..encodeForHTMLAttribute(..classes))#"  value="#(..encodeForHTMLAttribute(..value))#" #(..rawHTML(attributeHTML))# >

	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.tableCell">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.tableCell.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.tableCell
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.tableCell.CLS/EV.1</td><td>CLS.EF.ui.components.backend.tableCell</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.tableCellBase</Super>
<TimeChanged>64138,61201</TimeChanged>
<TimeCreated>63384,64633.448672</TimeCreated>

<Method name="renderStart">
<Implementation><![CDATA[
	if $l(..alignment) {
		do ..addClass("text-"_..alignment)
	}
	&html<
		<td  id="#(..encodeHTMLAttribute(..htmlID))#" class="#(..encodeHTMLAttribute(..classes))#">
	>
]]></Implementation>
</Method>

<Method name="renderContents">
<Implementation><![CDATA[	do ##super()
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[
	&html<
		</td>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.tableHeader">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.tableHeader.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.tableHeader
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.tableHeader.CLS/EV.1</td><td>CLS.EF.ui.components.backend.tableHeader</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.ui.components.tableCellBase</Super>
<TimeChanged>63406,60911</TimeChanged>
<TimeCreated>63384,64686.407777</TimeCreated>

<Method name="renderStart">
<Implementation><![CDATA[
	if $l(..alignment) {
		do ..addClass("text-"_..alignment)
	}
	&html<
		<th class="#(..encodeHTMLAttribute(..classes))#">
	>
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[
	&html<
		</th>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.tableRow">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.tableRow.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.tableRow
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.tableRow.CLS/EV.1</td><td>CLS.EF.ui.components.backend.tableRow</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.tableRowBase</Super>
<TimeChanged>64110,60473</TimeChanged>
<TimeCreated>63384,64592.242458</TimeCreated>

<Method name="render">
<Implementation><![CDATA[
	// The html bit
	&html<
		<tr id="#(..htmlID)#" class="#(..classes)#" #(..rawHTML(..getExtraAttributes()))#>
        	#[do ..renderCells()]#
        </tr>
    >
]]></Implementation>
</Method>

<Method name="applyIsMuted">
<Implementation><![CDATA[	do ..addClass("text-muted")
]]></Implementation>
</Method>

<Method name="applyIsItalic">
<Implementation><![CDATA[	do ..addClass("ef-text-secondary")
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.text">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.text.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.text
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:35
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.text.CLS/EV.0</td><td>CLS.EF.ui.components.backend.text</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:35</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.ui.components.text</Super>
<TimeChanged>63390,33473</TimeChanged>
<TimeCreated>63385,58632.700605</TimeCreated>
</Class>


<Class name="EF.ui.components.backend.textAlert">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.textAlert.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.textAlert
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.textAlert.CLS/EV.1</td><td>CLS.EF.ui.components.backend.textAlert</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.text</Super>
<TimeChanged>63950,37769</TimeChanged>
<TimeCreated>63406,59678.584711</TimeCreated>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" alert"
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	&HTML<
		<div id="#(..encodeHTMLAttribute(..htmlID))#" class="#(..encodeHTMLAttribute(..classes))#" #(..rawHTML(..getExtraAttributes()))#>
	>
	do ##super()
	&HTML<
		</div>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.textAlertInfo">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.textAlertInfo.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.textAlertInfo
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.textAlertInfo.CLS/EV.0</td><td>CLS.EF.ui.components.backend.textAlertInfo</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.textAlert</Super>
<TimeChanged>63406,62161</TimeChanged>
<TimeCreated>63406,60108.151725</TimeCreated>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" alert-info"
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.textArea">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.textArea.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.textArea
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.textArea.CLS/EV.1</td><td>CLS.EF.ui.components.backend.textArea</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.textInput</Super>
<TimeChanged>63952,54722</TimeChanged>
<TimeCreated>63403,57070.027389</TimeCreated>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" form-control"
]]></Implementation>
</Method>

<Method name="getDefaultValidator">
<ReturnType>EF.validator.base</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.validator.multiLineText).%New()
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	
	set classes=""
	if $l(..label) {
		set classes="form-group"
	}
	if ..hasError {
		set classes=classes_" has-error"
	}
	
	set disabledString=""
	if ..isDisabled {
		set disabledString="disabled=""disabled"""
	}
	// The html bit
	&html<
		<div class="#(..encodeHTMLAttribute(classes))#">
			#[do ..renderLabel()]#
    	    <textarea type="text" class="#(..encodeHTMLAttribute(..classes))#" #(..rawHTML(disabledString))# title="#(..encodeHTMLAttribute(..title))#" id="#(..encodeHTMLAttribute(..htmlID))#" name="#(..encodeHTMLAttribute(..htmlName))#" placeholder="#(..encodeHTMLAttribute(..placeHolder))#" #(..rawHTML(..getExtraAttributes()))#>#(..encodeHTMLContentForTextarea(..value))#</textArea>
    	</div>
	>
	do ##super()
]]></Implementation>
</Method>

<Method name="renderLabel">
<Implementation><![CDATA[
	if $l(..label) {
		&html<
			<label class="control-label" for="#(..encodeHTMLAttribute(..htmlID))#">#(..encodeHTMLContent(..label))#</label>
		>
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.textInput">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.textInput.CLS/EV.6
;vc; Component: CLS.EF.ui.components.backend.textInput
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.textInput.CLS/EV.6</td><td>CLS.EF.ui.components.backend.textInput</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.textInput</Super>
<TimeChanged>64128,43989</TimeChanged>
<TimeCreated>63357,57620.613738</TimeCreated>

<Property name="labelSpanPrefixClass">
<Type>%String</Type>
</Property>

<Parameter name="typeAttribute">
<Default>text</Default>
</Parameter>

<Parameter name="html5Validation">
<Default>1</Default>
</Parameter>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" form-control"
]]></Implementation>
</Method>

<Method name="getDefaultContainerClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" form-group"
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	
	if ..hasError {
		set ..containerClasses=..containerClasses_" has-error"
	}
	set disabledString=""
	if ..isDisabled {
		set disabledString="disabled=""disabled"""
	}
	
	if ..#html5Validation {
		set regex=..validator.getRegex()
		if $length(regex) {
			do ..addAttribute("pattern",regex)
		}
		do ..addAttribute("oninvalid","ef.html5CustomMessages.setMessage(this,"""_..encodeForJavaScript(..validator.getErrorMessage())_""");")
		do ..addAttribute("oninput","ef.html5CustomMessages.clearMessage(this);")	
	}
	// The html bit
	if ..showOuterDiv() {
		&html<	<div class="#(..encodeHTMLAttribute(..containerClasses))#">
		>
	}
	&html<
		
			#[do ..renderLabel()]#
    	    <input type="#(..encodeHTMLAttribute(..#typeAttribute))#" class="#(..encodeHTMLAttribute(..classes))#" #(..rawHTML(disabledString))# title="#(..encodeHTMLAttribute(..title))#" id="#(..encodeHTMLAttribute(..htmlID))#" name="#(..encodeHTMLAttribute(..htmlName))#" value="#(..encodeHTMLAttribute(..value))#" placeholder="#(..encodeHTMLAttribute(..placeHolder))#"  #(..rawHTML(..getExtraAttributes()))#>
    	
	>
	if ..showOuterDiv() {
	&html<	</div>
		>
	}
	do ##super()
]]></Implementation>
</Method>

<Method name="renderLabel">
<Implementation><![CDATA[
	if $length(..label) {
		if $length(..labelSpanPrefixClass) {
			&html<<label class="control-label" for="#(..encodeForHTMLAttribute(..htmlID))#">
				<span class="#(..encodeForHTMLAttribute(..labelSpanPrefixClass))#"></span>#(..encodeForHTML(..label))#
				</label>>
		} else {
			&html<<label class="control-label" for="#(..encodeForHTMLAttribute(..htmlID))#">#(..encodeForHTML(..label))#</label>>
		}
	}
]]></Implementation>
</Method>

<Method name="showOuterDiv">
<Implementation><![CDATA[
	set out=1
	if ($IsObject(..parentComponent))&&(..parentComponent.%IsA("EF.ui.components.backend.inputGroup")) {
		set out=0	
	}
	if '$length(..label) {
		set out=0
	}
	quit out
]]></Implementation>
</Method>

<Method name="makeSystemItem">
<Implementation><![CDATA[	set ..labelSpanPrefixClass="ef-cross-event-icon"
]]></Implementation>
</Method>

<Method name="useHtml5Validation">
<Implementation><![CDATA[	return ..#html5Validation
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.textInputCheckboxDisables">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.textInputCheckboxDisables.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.textInputCheckboxDisables
;vc;  Location: SmallDev
;vc; Date/Time: 15-Jul-14 15:26
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.textInputCheckboxDisables.CLS/EV.0</td><td>CLS.EF.ui.components.backend.textInputCheckboxDisables</td><td>SmallDev</td><td style='white-space: nowrap;'>15-Jul-14 15:26</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.textInput</Super>
<TimeChanged>63377,48801</TimeChanged>
<TimeCreated>63357,63884.447755</TimeCreated>

<Property name="checkbox">
<Type>EF.ui.components.backend.checkbox</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>htmlID:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	do ##super(htmlID)
	set ..checkbox=##class(EF.ui.components.backend.checkbox).%New(htmlID_"_checkbox")
	
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	set patternString=""
	set regex=..validator.getRegex()
	if $l(regex) {
		set patternString="pattern="""_regex_""""
	}
	set disabledString=""
	if '$l(..value) {
		set ..checkbox.value=1
		set disabledString="disabled=""disabled"""	
	}
	if ..isDisabled {
		set disabledString="disabled=""disabled"""
		set ..checkbox.isDisabled=1
		set ..checkbox.title=..title
	}
	
	// The html bit
	&html<
		<div class="form-group">
			<label class="control-label" for="#(..encodeHTMLAttribute(..htmlID))#">#(..encodeHTMLContent(..label))#</label>
	        <div class="input-group" title="#(..encodeHTMLAttribute(..title))#">
	        	<input type="text" class="form-control" id="#(..encodeHTMLAttribute(..htmlID))#" name="#(..encodeHTMLAttribute(..htmlName))#" value="#(..encodeHTMLAttribute(..value))#" placeholder="#(..encodeHTMLAttribute(..placeHolder))#" #(patternString)# oninvalid="ef.html5CustomMessages.setMessage(this,'#(..encodeHTMLAttribute(..validator.getErrorMessage()))#');" oninput="ef.html5CustomMessages.clearMessage(this);" #(disabledString)# required>
	            <span class="ef-input-group-checkbox-addon">
	                #[do ..checkbox.renderCheckbox()]# #(..encodeHTMLContent(..checkbox.label))#
	            </span>
	        </div>
	    </div>
        <script language="javascript">
        	#[do ..renderJS()]#
        </script>
	>
]]></Implementation>
</Method>

<Method name="renderJS">
<Implementation><![CDATA[
	&js<
		$(function() {
			$("##(..encodeJS(..checkbox.htmlID))#").click(function() {
				if ($(this).is(":checked")) {
					$("##(..encodeJS(..htmlID))#").prop("disabled",true);
				} else {
					$("##(..encodeJS(..htmlID))#").prop("disabled",false);
				}
			});
		});
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.timePicker">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.timePicker.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.timePicker
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.timePicker.CLS/EV.1</td><td>CLS.EF.ui.components.backend.timePicker</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.textInput</Super>
<TimeChanged>63931,65450</TimeChanged>
<TimeCreated>63384,38215.518113</TimeCreated>

<Parameter name="typeAttribute">
<Default>time</Default>
</Parameter>

<Parameter name="html5Validation">
<Default>0</Default>
</Parameter>

<Method name="getExtraAttributes">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set timeFormat=##class(shared.timeFunctions).getKendoTimeFormat(..validator.timeFormat)
	return ##super()_" data-ef-time-format="""_..encodeForHTMLAttribute(timeFormat)_""""
]]></Implementation>
</Method>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" ef-kendo-form-control"
]]></Implementation>
</Method>

<Method name="getDefaultValidator">
<ReturnType>EF.validator.base</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.validator.timeInput).%New()
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.toolDropdown.actionOpenModal">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.toolDropdown.actionOpenModal.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.toolDropdown.actionOpenModal
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.toolDropdown.actionOpenModal.CLS/EV.0</td><td>CLS.EF.ui.components.backend.toolDropdown.actionOpenModal</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.toolDropdown.toolItemAction</Super>
<TimeChanged>63834,61533</TimeChanged>
<TimeCreated>63833,53847.014854</TimeCreated>

<Property name="targetURL">
<Type>%String</Type>
</Property>

<Property name="modalSize">
<Type>%String</Type>
<InitialExpression>"medium"</InitialExpression>
<Parameter name="VALUELIST" value="medium,large"/>
</Property>

<Property name="openModalClass">
<Type>%String</Type>
<InitialExpression>"ef-open-modal"</InitialExpression>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>label:%String="",targetURL="",modalSize="medium"</FormalSpec>
<ReturnType>EF.ui.components.backend.toolDropdown.actionOpenModal</ReturnType>
<Implementation><![CDATA[
	
	set toolItem=##super(label)
	if $l(targetURL) {
		set toolItem.targetURL=..linkURL(targetURL)
	}
	set toolItem.modalSize=modalSize
	return toolItem
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	
	do ..addClass(..openModalClass)
	
	if ..modalSize="large" {
		set modalDialogClass="modal-lg"
	} else {
		set modalDialogClass="modal-md"
	}
	
	if ..isDisabled {
		do ..addClass("ef-permanently-disabled")	
	}

	&html<<a class="#(..encodeForHTMLAttribute(..classes))#" role="menuitem" data-modal-dialog-class="#(..encodeForHTMLAttribute(modalDialogClass))#" data-link-url="#(..encodeForHTMLAttribute(..targetURL))#">#(..encodeForHTML(..label))#</a>>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.toolDropdown.actionOpenModalTestCase">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.toolDropdown.actionOpenModalTestCase.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.toolDropdown.actionOpenModalTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.toolDropdown.actionOpenModalTestCase.CLS/EV.0</td><td>CLS.EF.ui.components.backend.toolDropdown.actionOpenModalTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63840,57226</TimeChanged>
<TimeCreated>63734,60646.773922</TimeCreated>

<Method name="TestRender">
<Implementation><![CDATA[
	#dim toolItem As EF.ui.components.backend.toolDropdown.actionOpenModal
	
	set toolItem=##class(EF.ui.components.backend.toolDropdown.actionOpenModal).createNew("testToolItem","abc.de")


	set returnedHTML=##class(EF.utils.outputRedirection).redirectMethodOutputToString(toolItem,"render")
	set expectedHTML="<a class=""ef-open-modal"" role=""menuitem"" data-modal-dialog-class=""modal-md"" data-link-url=""abc.de"">testToolItem</a>"
	do $$$AssertEquals($ZSTRIP(expectedHTML,"*WC"),$ZSTRIP(returnedHTML,"*WC"))
	set toolDropdown=##class(%ZEN.proxyObject).%New()
	set toolDropdown.grid="TestID"
	set toolDropdown.toolItems=##class(%ListOfDataTypes).%New()
	set toolItem=##class(EF.ui.components.backend.toolDropdown.actionOpenModal).createNew("toolTest2","abc.de")
	do $$$AssertEquals(toolItem.label,"toolTest2")
	do $$$AssertEquals(toolItem.targetURL,"abc.de")
	do $$$AssertEquals(toolItem.modalSize,"medium")
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.toolDropdown.actionOpenNewTab">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.toolDropdown.actionOpenNewTab.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.toolDropdown.actionOpenNewTab
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.toolDropdown.actionOpenNewTab.CLS/EV.0</td><td>CLS.EF.ui.components.backend.toolDropdown.actionOpenNewTab</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.toolDropdown.toolItemAction</Super>
<TimeChanged>63834,59552</TimeChanged>
<TimeCreated>63834,59335.075008</TimeCreated>

<Property name="targetURL">
<Type>%String</Type>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>label="",targetURL=""</FormalSpec>
<ReturnType>EF.ui.components.backend.toolDropdown.actionOpenNewTab</ReturnType>
<Implementation><![CDATA[
	set toolItem=##super(label)
	if $l(targetURL) {
		set toolItem.targetURL=..linkURL(targetURL)
	}
	return toolItem
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	do ..addClass("ef-grid-open-new-tab")
	
	if ..isDisabled {
		do ..addClass("ef-permanently-disabled")	
	}
	
	&html<<a target="newTab" class="#(..encodeForHTMLAttribute(..classes))#" role="menuitem" data-link-url="#(..encodeForHTMLAttribute(..targetURL))#">#(..encodeForHTML(..label))#</a>>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.toolDropdown.actionRedirect">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.toolDropdown.actionRedirect.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.toolDropdown.actionRedirect
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.toolDropdown.actionRedirect.CLS/EV.0</td><td>CLS.EF.ui.components.backend.toolDropdown.actionRedirect</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.toolDropdown.toolItemAction</Super>
<TimeChanged>63834,60352</TimeChanged>
<TimeCreated>63735,44930.356142</TimeCreated>

<Property name="redirectURL">
<Type>%String</Type>
</Property>

<Property name="selectAll">
<Type>%String</Type>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>label="",redirectURL=""</FormalSpec>
<ReturnType>EF.ui.components.backend.toolDropdown.actionRedirect</ReturnType>
<Implementation><![CDATA[

	set toolItem=##super(label)
	set toolItem.redirectURL=..linkURL(redirectURL)
	return toolItem
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	
	do ..addClass("ef-grid-redirect")
	if ..selectAll {
		do ..addClass("ef-select-all")	
	}
	if ..isDisabled {
		do ..addClass("ef-permanently-disabled")	
		set ..redirectURL="#"
	}	
	&html<<a class="#(..encodeForHTMLAttribute(..classes))#" role="menuitem" data-link-url="#(..encodeForHTMLAttribute(..redirectURL))#">#(..encodeForHTML(..label))#</a>>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.toolDropdown.divider">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.toolDropdown.divider.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.toolDropdown.divider
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.toolDropdown.divider.CLS/EV.0</td><td>CLS.EF.ui.components.backend.toolDropdown.divider</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.backend.toolDropdown.toolItem</Super>
<TimeChanged>63833,54164</TimeChanged>
<TimeCreated>63729,62512.187845</TimeCreated>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>toolDropdown:EF.ui.components.backend.toolDropdown.toolDropdown=""</FormalSpec>
<ReturnType>EF.ui.components.backend.toolDropdown.divider</ReturnType>
<Implementation><![CDATA[

	set toolItem=##super(toolDropdown,"")
	do toolItem.addClass("divider")
	return toolItem
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.toolDropdown.dividerTestCase">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.toolDropdown.dividerTestCase.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.toolDropdown.dividerTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.toolDropdown.dividerTestCase.CLS/EV.0</td><td>CLS.EF.ui.components.backend.toolDropdown.dividerTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63834,63538</TimeChanged>
<TimeCreated>63734,60321.264375</TimeCreated>

<Method name="TestRender">
<Implementation><![CDATA[
	#dim toolItem As EF.ui.components.backend.toolDropdown.divider
	
	set toolItem=##class(EF.ui.components.backend.toolDropdown.divider).createNew()

	set returnedHTML=##class(EF.utils.outputRedirection).redirectMethodOutputToString(toolItem,"render")
	set expectedHTML="<li class=""divider""></li>"
	do $$$AssertEquals($ZSTRIP(expectedHTML,"*WC"),$ZSTRIP(returnedHTML,"*WC"))
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.toolDropdown.toolDropdown">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.toolDropdown.toolDropdown.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.toolDropdown.toolDropdown
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.toolDropdown.toolDropdown.CLS/EV.0</td><td>CLS.EF.ui.components.backend.toolDropdown.toolDropdown</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.base</Super>
<TimeChanged>63834,60292</TimeChanged>
<TimeCreated>63833,53630.327475</TimeCreated>

<Property name="toolItems">
<Type>EF.ui.components.backend.toolDropdown.toolItem</Type>
<Collection>list</Collection>
</Property>

<Property name="isDropdownRightAligned">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<ReturnType>EF.ui.components.backend.toolDropdown.toolDropdown</ReturnType>
<Implementation><![CDATA[
	set toolDropdown=..%New()
	return toolDropdown
]]></Implementation>
</Method>

<Method name="addToolItem">
<FormalSpec>label</FormalSpec>
<Implementation><![CDATA[	return ##class(EF.ui.components.backend.toolDropdown.toolItem).createNew($this,label)
]]></Implementation>
</Method>

<Method name="addDivider">
<Implementation><![CDATA[	return ##class(EF.ui.components.backend.toolDropdown.divider).createNew($this)
]]></Implementation>
</Method>

<Method name="addToolItemOpenModal">
<FormalSpec>label,targetURL</FormalSpec>
<Implementation><![CDATA[
	set toolItem=..addToolItem(label)
	set toolItem.action=##class(EF.ui.components.backend.toolDropdown.actionOpenModal).createNew(label,targetURL)
	return toolItem
]]></Implementation>
</Method>

<Method name="addToolItemOpenNewTab">
<FormalSpec>label,targetURL</FormalSpec>
<Implementation><![CDATA[
	set toolItem=..addToolItem(label)
	set toolItem.action=##class(EF.ui.components.backend.toolDropdown.actionOpenNewTab).createNew(label,targetURL)
	return toolItem
]]></Implementation>
</Method>

<Method name="addToolItemRedirect">
<FormalSpec>label,redirectURL</FormalSpec>
<Implementation><![CDATA[
	set toolItem=..addToolItem(label)
	set toolItem.action=##class(EF.ui.components.backend.toolDropdown.actionRedirect).createNew(label,redirectURL)
	return toolItem
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	set dropdownClasses="dropdown-menu"
	if ..isDropdownRightAligned {
		set dropdownClasses=dropdownClasses_" dropdown-menu-right"
	}
	&html<
		 <div class="btn-group">
            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                <span class="glyphicon glyphicon-wrench"></span>
                <span class="caret"></span>
            </button>
            <ul class="#(..encodeHTMLAttribute(dropdownClasses))#" role="menu">
            	#[do ..renderToolItems()]#
            </ul>
        </div>
	>
]]></Implementation>
</Method>

<Method name="renderToolItems">
<Implementation><![CDATA[
	for ind=1:1:..toolItems.Count() {
		set toolItem=..toolItems.GetAt(ind)
		do toolItem.render()	
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.toolDropdown.toolItem">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.toolDropdown.toolItem.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.toolDropdown.toolItem
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.toolDropdown.toolItem.CLS/EV.0</td><td>CLS.EF.ui.components.backend.toolDropdown.toolItem</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.base</Super>
<TimeChanged>63833,57014</TimeChanged>
<TimeCreated>63833,53701.151745</TimeCreated>

<Property name="label">
<Type>%String</Type>
</Property>

<Property name="action">
<Type>EF.ui.components.backend.toolDropdown.toolItemAction</Type>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>toolDropdown:EF.ui.components.backend.toolDropdown.toolDropdown="",label=""</FormalSpec>
<ReturnType>EF.ui.components.backend.toolDropdown.toolItem</ReturnType>
<Implementation><![CDATA[
	set toolItem=..%New()
	if $IsObject(toolDropdown) {
		do toolDropdown.toolItems.Insert(toolItem)
	}
	set toolItem.label=label
	return toolItem
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	&html<<li #(..createEncodedAttribute("class",..classes))#>>
	if $IsObject(..action) {
		do ..action.render()	
	} 
	&html<</li>>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.toolDropdown.toolItemAction">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.toolDropdown.toolItemAction.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.toolDropdown.toolItemAction
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.toolDropdown.toolItemAction.CLS/EV.0</td><td>CLS.EF.ui.components.backend.toolDropdown.toolItemAction</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.base</Super>
<TimeChanged>63834,63325</TimeChanged>
<TimeCreated>63833,53808.498543</TimeCreated>

<Property name="label">
<Type>%String</Type>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>label=""</FormalSpec>
<ReturnType>EF.ui.components.backend.toolDropdown.toolItemAction</ReturnType>
<Implementation><![CDATA[
	
	set toolItemAction=..%New()
	set toolItemAction.label=label
	return toolItemAction
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[	&html<<a class="#(..encodeForHTMLAttribute(..classes))#" href="#" #(..rawHTML(..getExtraAttributes()))#>#(..encodeForHTML(..label))#</a>>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.userMessage">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.userMessage.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.userMessage
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.userMessage.CLS/EV.0</td><td>CLS.EF.ui.components.backend.userMessage</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.div</Super>
<TimeChanged>63847,38461</TimeChanged>
<TimeCreated>63846,51870.045063</TimeCreated>

<Property name="button">
<Type>EF.ui.components.backend.button</Type>
</Property>

<Property name="messageRawHTML">
<Type>%String</Type>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>htmlID,message:admin.message</FormalSpec>
<ReturnType>EF.ui.components.backend.toolDropdown.toolItem</ReturnType>
<Implementation><![CDATA[
	set userMessage=..%New(htmlID)
	set userMessage.messageRawHTML=message.messageBody
	do userMessage.addClass("alert")
	do userMessage.addClass("alert-info")
	do userMessage.addClass("alert-dismissible")
	set userMessage.button=##class(EF.ui.components.backend.button).%New(htmlID_"-button")
	set userMessage.button.label="x"
	set userMessage.button.buttonType="other"
	set userMessage.button.classes="close"
	do userMessage.button.addClass("ef-on-click-post")
	do userMessage.button.addAttribute("data-dismiss","alert")
	do userMessage.button.addAttribute("aria-label","Close")
	set messageUrl=..addParameterToURL("../../backend/home/markUserMessageAsRead.csp","messageID",message.messageID)
	set messageUrl=..addParameterToURL(messageUrl,"messageType",message.type)
	do userMessage.button.addAttribute("data-link-url",##class(shared.pCSPmanage).Link(messageUrl))
	return userMessage
]]></Implementation>
</Method>

<Method name="renderContents">
<Implementation><![CDATA[
	do ..button.render()
	&html<#(..rawHTML(..messageRawHTML))#>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.warningIcon">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.backend.warningIcon.CLS/EV.0
;vc; Component: CLS.EF.ui.components.backend.warningIcon
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.warningIcon.CLS/EV.0</td><td>CLS.EF.ui.components.backend.warningIcon</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.icon</Super>
<TimeChanged>63896,57945</TimeChanged>
<TimeCreated>63896,57511.973258</TimeCreated>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return "fa fa-exclamation-triangle ef-warning-icon"
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.backend.well">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.backend.well.CLS/EV.1
;vc; Component: CLS.EF.ui.components.backend.well
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.backend.well.CLS/EV.1</td><td>CLS.EF.ui.components.backend.well</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.ui.components.container</Super>
<TimeChanged>63403,64669</TimeChanged>
<TimeCreated>63362,34207.614826</TimeCreated>

<Property name="width">
<Description>
Width in columns (full width = 12)</Description>
<Type>%Integer</Type>
<InitialExpression>12</InitialExpression>
</Property>

<Method name="renderStart">
<Implementation><![CDATA[
	&HTML<
		<div class="well well-sm">
       		<div class="form-group">
	>
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[
	&HTML<
			</div>
		</div>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.base">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.base.CLS/EV.12
;vc; Component: CLS.EF.ui.components.base
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.base.CLS/EV.12</td><td>CLS.EF.ui.components.base</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject,EF.htmlGenerator</Super>
<TimeChanged>64182,41374.783484</TimeChanged>
<TimeCreated>63355,56488.955478</TimeCreated>

<Property name="htmlID">
<Type>%String</Type>
</Property>

<Property name="hasError">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="classes">
<Type>%String</Type>
</Property>

<Property name="childComponents">
<Type>EF.ui.components.base</Type>
<Collection>list</Collection>
</Property>

<Property name="parentComponent">
<Type>EF.ui.components.base</Type>
</Property>

<Property name="enableDisableDependencyList">
<Type>EF.ui.components.dependencyList</Type>
</Property>

<Property name="showHideDependencyList">
<Type>EF.ui.components.dependencyList</Type>
</Property>

<Property name="toggleClassDependencyList">
<Type>EF.ui.components.dependencyList</Type>
</Property>

<Property name="toggleClassDependencyClassName">
<Type>%String</Type>
</Property>

<Property name="containerClasses">
<Type>%String</Type>
</Property>

<Property name="isDisabled">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="extraAttributes">
<Type>EF.ui.components.attribute</Type>
<Collection>list</Collection>
</Property>

<Method name="getDefaultContainerClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ""
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>htmlID:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	If ($DATA(htmlID)) {
		Set ..htmlID=htmlID
	} else {
		Set ..htmlID="ef_control_"_$TR(##class(%SYSTEM.Util).CreateGUID(),"-","")
	}
	
	Set ..classes=..getDefaultClasses()
	
	set ..containerClasses=..getDefaultContainerClasses()
	
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="addChild">
<FormalSpec>uiComponent:EF.ui.components.base</FormalSpec>
<Implementation><![CDATA[
	
	do ..childComponents.Insert(uiComponent)
	set uiComponent.parentComponent=$this
]]></Implementation>
</Method>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ""
]]></Implementation>
</Method>

<Method name="addClass">
<FormalSpec>className</FormalSpec>
<Implementation><![CDATA[
	if $l(..classes) {
		set ..classes=..classes_" "_className
	} else {
		set ..classes=className
	}
]]></Implementation>
</Method>

<Method name="removeClass">
<FormalSpec>className</FormalSpec>
<Implementation><![CDATA[
	set updatedClasses=..classes
	for i=1:1:$length(updatedClasses," ") {
		if $piece(updatedClasses," ",i)=className {
			set $piece(updatedClasses," ",i,*)=$piece(updatedClasses," ",i+1,*)	
		}
	}
	set ..classes=updatedClasses
]]></Implementation>
</Method>

<Method name="renderChildren">
<Implementation><![CDATA[
	set key=""
	for {
		set uiComponent=..childComponents.GetNext(.key)
		if key="" quit
		if $IsObject(uiComponent) {
			do ..renderChildComponent(uiComponent)
		}
	}
]]></Implementation>
</Method>

<Method name="renderJSForElementAndChildren">
<Implementation><![CDATA[
	do ..renderJS()
	set key=""
	for {
		set uiComponent=..childComponents.GetNext(.key)
		if key="" quit
		if $IsObject(uiComponent) {
			do uiComponent.renderJSForElementAndChildren()
		}
	}
]]></Implementation>
</Method>

<Method name="renderChildComponent">
<FormalSpec>uiComponent:EF.ui.components.base</FormalSpec>
<Implementation><![CDATA[	do uiComponent.render()
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[	do ..renderChildren()
]]></Implementation>
</Method>

<Method name="getRendered">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set out=##class(EF.utils.outputRedirection).redirectMethodOutputToString($this,"render")
	quit out
]]></Implementation>
</Method>

<Method name="getRenderedJSForElementAndChildren">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set out=##class(EF.utils.outputRedirection).redirectMethodOutputToString($this,"renderJSForElementAndChildren")
	quit out
]]></Implementation>
</Method>

<Method name="renderJS">
</Method>

<Method name="addAttribute">
<FormalSpec>name,value</FormalSpec>
<Implementation><![CDATA[	do ##class(EF.ui.components.attribute).addAttributeToList(..extraAttributes,name,value)
]]></Implementation>
</Method>

<Method name="getExtraAttributes">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
	set attributes=""
	if $IsObject(..enableDisableDependencyList) {
		set dependencyListJSON=##class(shared.jsonFunctions).getObjectAsJSONString(..enableDisableDependencyList)
		set attributes="data-enable-disable-dependency-list="""_..encodeForHTMLAttribute(dependencyListJSON)_""" "
	}
	if $IsObject(..showHideDependencyList) {
		set dependencyListJSON=##class(shared.jsonFunctions).getObjectAsJSONString(..showHideDependencyList)
		set attributes=attributes_"data-show-hide-dependency-list="""_..encodeForHTMLAttribute(dependencyListJSON)_""" "
	}
	if $IsObject(..toggleClassDependencyList) {
		set dependencyListJSON=##class(shared.jsonFunctions).getObjectAsJSONString(..toggleClassDependencyList)
		set attributes=attributes_"data-toggle-class-dependency-list="""_..encodeForHTMLAttribute(dependencyListJSON)_""" "
		set attributes=attributes_"data-toggle-class-dependency-class-name="""_..encodeForHTMLAttribute(..toggleClassDependencyClassName)_""" "
	}
	return attributes_##class(EF.ui.components.attribute).getAttributesAsHTML(..extraAttributes)
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.buttonBase">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.buttonBase.CLS/EV.1
;vc; Component: CLS.EF.ui.components.buttonBase
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.buttonBase.CLS/EV.1</td><td>CLS.EF.ui.components.buttonBase</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.ui.components.container</Super>
<TimeChanged>63404,35070</TimeChanged>
<TimeCreated>63383,53118.756889</TimeCreated>

<Property name="isDisabled">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="label">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="title">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Method name="%OnNew">
<FormalSpec>htmlID:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	do ##super(htmlID)
	
    Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.checkbox">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.checkbox.CLS/EV.2
;vc; Component: CLS.EF.ui.components.checkbox
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.checkbox.CLS/EV.2</td><td>CLS.EF.ui.components.checkbox</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.inputBase</Super>
<TimeChanged>63950,44706</TimeChanged>
<TimeCreated>63355,62451.192017</TimeCreated>

<Method name="getDefaultValidator">
<ReturnType>EF.validator.singleLineText</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.validator.checkbox).%New()
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.checkboxGroup">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.checkboxGroup.CLS/EV.0
;vc; Component: CLS.EF.ui.components.checkboxGroup
;vc;  Location: SmallDev
;vc; Date/Time: 15-Jul-14 15:26
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.checkboxGroup.CLS/EV.0</td><td>CLS.EF.ui.components.checkboxGroup</td><td>SmallDev</td><td style='white-space: nowrap;'>15-Jul-14 15:26</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.base</Super>
<TimeChanged>63363,58658</TimeChanged>
<TimeCreated>63356,56840.078334</TimeCreated>

<Property name="label">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="checkboxes">
<Type>EF.ui.components.checkbox</Type>
<Collection>list</Collection>
</Property>

<Property name="columns">
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Method name="renderCheckboxes">
<Implementation><![CDATA[
	set rowCount=..getRowCount()
	set ind=""
	for column=1:1:..columns {
		do ..renderColumnStart()
		for row=1:1:rowCount {
			set checkbox=..checkboxes.GetAt($I(ind))
			if $IsObject(checkbox) {
				do ..renderCheckbox(checkbox)
			}
		}
		do ..renderColumnEnd()	
	}
]]></Implementation>
</Method>

<Method name="getRowCount">
<Implementation><![CDATA[
	set rowCount=..checkboxes.Count()\..columns
	if ..checkboxes.Count()#..columns {
		set rowCount=rowCount+1	
	}
	quit rowCount
]]></Implementation>
</Method>

<Method name="renderCheckbox">
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>

<Method name="renderColumnStart">
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>

<Method name="renderColumnEnd">
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.container">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.container.CLS/EV.2
;vc; Component: CLS.EF.ui.components.container
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.container.CLS/EV.2</td><td>CLS.EF.ui.components.container</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.ui.components.base</Super>
<TimeChanged>63405,55131</TimeChanged>
<TimeCreated>63361,62884.403633</TimeCreated>

<Method name="renderStart">
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	do ..renderStart()
	do ..renderContents()
	do ##super()
	do ..renderEnd()
]]></Implementation>
</Method>

<Method name="renderContents">
</Method>

<Method name="renderChildComponent">
<FormalSpec>uiComponent:EF.ui.components.base</FormalSpec>
<Implementation><![CDATA[	do uiComponent.render()
]]></Implementation>
</Method>

<Method name="getRenderedContents">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set out=##class(EF.utils.outputRedirection).redirectMethodOutputToString($this,"renderContents")
	quit out
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.dependencyItem">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.dependencyItem.CLS/EV.1
;vc; Component: CLS.EF.ui.components.dependencyItem
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.dependencyItem.CLS/EV.1</td><td>CLS.EF.ui.components.dependencyItem</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64112,47285</TimeChanged>
<TimeCreated>63729,54166.071134</TimeCreated>

<Property name="parentName">
<Type>%String</Type>
</Property>

<Property name="operator">
<Type>%String</Type>
<InitialExpression>"eq"</InitialExpression>
<Required>1</Required>
<Parameter name="VALUELIST" value="eq"/>
</Property>

<Property name="value">
<Type>%String</Type>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>parentName:%String="",value:%String,operator:%String="eq"</FormalSpec>
<ReturnType>EF.ui.components.dependencyItem</ReturnType>
<Implementation><![CDATA[
	set dependencyItem=..%New()
	
	if (parentName'="") {
		set dependencyItem.parentName=parentName
		set dependencyItem.operator=operator
		set dependencyItem.value=value
	}
	
	return dependencyItem
]]></Implementation>
</Method>

<Method name="isItemActive">
<FormalSpec>value</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if ..operator="eq" {
		if value=..value {
			return 1	
		}	
	}
	if ..operator="neq" {
		if value'=..value {
			return 1	
		}	
	}
	return 0
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.dependencyList">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.dependencyList.CLS/EV.0
;vc; Component: CLS.EF.ui.components.dependencyList
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.dependencyList.CLS/EV.0</td><td>CLS.EF.ui.components.dependencyList</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63950,56354</TimeChanged>
<TimeCreated>63949,56354.76695</TimeCreated>

<Property name="logic">
<Type>%String</Type>
<InitialExpression>"and"</InitialExpression>
<Required>1</Required>
<Parameter name="VALUELIST" value="and"/>
</Property>

<Property name="dependencies">
<Type>%RegisteredObject</Type>
<Collection>list</Collection>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>parentId:%String="",value:%String,operator:%String="eq",logic:%String="and"</FormalSpec>
<ReturnType>EF.ui.components.dependencyList</ReturnType>
<Implementation><![CDATA[
	set dependencyList=..%New()
	set dependencyList.logic=logic
	if (parentId'="") {
		do dependencyList.addDependencyItem(##class(EF.ui.components.dependencyItem).createNew(parentId,value,operator))
	}
	
	return dependencyList
]]></Implementation>
</Method>

<Method name="addDependencyItem">
<Description>
Item can either be a dependency or dependency list</Description>
<FormalSpec>item</FormalSpec>
<Implementation><![CDATA[
	Do ..dependencies.Insert(item)
	Return item
]]></Implementation>
</Method>

<Method name="isActiveFromRequest">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if ..logic="and" {
		for i=1:1:..dependencies.Count() {
			set dependency=..dependencies.GetAt(i)
			if dependency.%IsA("EF.ui.components.dependencyList") {
				set isActive=dependency.isActiveFromRequest()	
			} else {
				set isActive=dependency.isItemActive(%request.Get(dependency.parentName))
			}
			if 'isActive {
				return 0	
			}
		}
	}
	
	return 1
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.div">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.div.CLS/EV.1
;vc; Component: CLS.EF.ui.components.div
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.div.CLS/EV.1</td><td>CLS.EF.ui.components.div</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.container</Super>
<TimeChanged>63834,32512</TimeChanged>
<TimeCreated>63769,36373.317021</TimeCreated>

<Method name="renderStart">
<Implementation><![CDATA[
	&HTML<
		<div id="#(..htmlID)#" class="#(..classes)#" #(..rawHTML(..getExtraAttributes()))#>
	>
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[
	&HTML<
		</div>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.frontend.alternative">
<Description>
Hold the alternatives to dropdown, radios, multi check etc</Description>
<Super>EF.ui.components.alternative</Super>
<TimeChanged>64183,58926.068237</TimeChanged>
<TimeCreated>64183,58572.359354</TimeCreated>

<Property name="code">
<Type>%String</Type>
<Parameter name="MAXLEN" value="32000"/>
</Property>
</Class>


<Class name="EF.ui.components.frontend.button">
<Super>EF.ui.components.buttonBase</Super>
<TimeChanged>63778,57763.844964</TimeChanged>
<TimeCreated>63778,57303.629769</TimeCreated>

<Method name="render">
<Implementation><![CDATA[
	
	&html<
		<input type="button" id="#(..encodeHTMLAttribute(..htmlID))#" class="#(..encodeForHTMLAttribute(..classes))#" value="#(..encodeHTMLAttribute(..label))#" title="#(..encodeHTMLAttribute(..title))#" #(..rawHTML(..getExtraAttributes()))#>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.frontend.divider">
<Super>EF.ui.components.frontend.prowebBase</Super>
<TimeChanged>64183,54031.385852</TimeChanged>
<TimeCreated>64183,53112.09307</TimeCreated>

<Method name="render">
<Implementation><![CDATA[
	do ..renderRowOpening()
		do ..renderCellOpening()
			write "<hr class='ef_form_divider''>"
		do ..renderCellClosing()
	do ..renderRowClosing()
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.frontend.dropdown">
<Super>EF.ui.components.frontend.inputElement,EF.ui.components.listInput</Super>
<TimeChanged>64183,61432.960035</TimeChanged>
<TimeCreated>63355,56609.363142</TimeCreated>

<Method name="render">
<Implementation><![CDATA[
	do ..renderRowAndLabel()
	set selectClass=""
	&html<		
		<select class="#(..encodeForHTMLAttribute(selectClass))#" name="#(..encodeHTMLAttribute(..htmlName))#" id="#(..encodeHTMLAttribute(..htmlID))#" title="#(..encodeHTMLAttribute(..title))#" #(..rawHTML(..getDisabledString()))# >
    		#[do ..renderAlternatives()]#
        </select>
    >
	do ..renderHelpAndRowClosing()
]]></Implementation>
</Method>

<Method name="renderAlternatives">
<Implementation><![CDATA[
 
	set key=""
	for  {
		set alternative = ..alternatives.GetNext(.key)
		if key="" quit
		do ..renderAlternative(alternative)	
	}
]]></Implementation>
</Method>

<Method name="renderAlternative">
<FormalSpec>alternative:EF.ui.components.alternative</FormalSpec>
<Implementation><![CDATA[
	set selectedString=""
	if alternative.isSelected {
		set selectedString="selected="""""	
	}
	
	set disabledString=""
	if alternative.isDisabled {
		set disabledString="disabled"	
	}
	
	// The html bit
	&html<
        <option #(..rawHTML(selectedString))# #(..rawHTML(disabledString))# value="#(..encodeHTMLAttribute(alternative.value))#" >#(..encodeHTMLContent(alternative.label))#</option>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.frontend.inputElement">
<Super>EF.ui.components.frontend.prowebBase,EF.ui.components.inputBase</Super>
<TimeChanged>64183,60284.465548</TimeChanged>
<TimeCreated>64183,40678.260093</TimeCreated>

<Property name="alternatives">
<Type>EF.ui.components.frontend.alternative</Type>
<Collection>list</Collection>
</Property>

<Property name="hasMandatoryMarker">
<Type>%Boolean</Type>
</Property>

<Property name="helpText">
<Type>%String</Type>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Method name="renderRowAndLabel">
<Implementation><![CDATA[
	do ..renderRowOpening()
	if ..hasMandatoryMarker {
		do ..renderLabelCellOpeningMandatory()
	} else {
		do ..renderLabelCellOpening()
	}
	do ..renderLabel()
	do ..renderCellClosing()
	do ..renderInputElementCellOpening()
]]></Implementation>
</Method>

<Method name="renderHelpAndRowClosing">
<Implementation><![CDATA[
    Do ##class(sc.codItemMethods).outputHelpTextHTML(..helpText)
	do ..renderCellClosing()
	do ..renderRowClosing()
]]></Implementation>
</Method>

<Method name="renderLabel">
<Implementation><![CDATA[
	if $length(..label) {
		&html<<label class="control-label" for="#(..encodeForHTMLAttribute(..htmlID))#">#(..encodeForHTML(..label))#</label>>
	}
]]></Implementation>
</Method>

<Method name="getDisabledString">
<Implementation><![CDATA[
	set disabledString=""
	if ..isDisabled {
		set disabledString="disabled=""disabled"""
	}
	return disabledString
]]></Implementation>
</Method>

<Method name="getDefaultClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" form-control"
]]></Implementation>
</Method>

<Method name="getDefaultContainerClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##super()_" form-group"
]]></Implementation>
</Method>

<Method name="renderLabelCellOpeningMandatory">
<Implementation><![CDATA[	write "<div class='col-sm-4 ef_proweb_form_prompt ef-required-field'>"
]]></Implementation>
</Method>

<Method name="renderLabelCellOpening">
<Implementation><![CDATA[	write "<div class='col-sm-4 ef_proweb_form_prompt'>"
]]></Implementation>
</Method>

<Method name="renderInputElementCellOpening">
<Implementation><![CDATA[	write "<div class='col-sm-8 ef_proweb_form_prompt'>"
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.frontend.label">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.frontend.label.CLS/EV.3
;vc; Component: CLS.EF.ui.components.frontend.label
;vc;  Location: SmallDev
;vc; Date/Time: 07-Jun-16 12:39
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.frontend.label.CLS/EV.3</td><td>CLS.EF.ui.components.frontend.label</td><td>SmallDev</td><td style='white-space: nowrap;'>07-Jun-16 12:39</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.label</Super>
<TimeChanged>64037,52608</TimeChanged>
<TimeCreated>63489,37931.767392</TimeCreated>

<Property name="isMandatoryMarkerOnLeft">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="allowRawHTML">
<Description>
Required because we allow user defined raw html in the question text</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="createAndRender">
<ClassMethod>1</ClassMethod>
<FormalSpec>htmlID="",text,for="",isMandatory=0,eventID=""</FormalSpec>
<Implementation><![CDATA[
	set label=..%New(htmlID)
	set label.text=text
	set label.for=for
	set label.isMandatory=isMandatory
	if eventID {
		set label.isMandatoryMarkerOnLeft=##class(layout.methods).areMandatoryMarkersOnTheLeftForEventID(eventID)	
	}
	do label.render()
]]></Implementation>
</Method>

<Method name="renderFromEfLabelRule">
<Description>
Expected parameters
text - mandatory
for
ismandatory
eventid</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&params]]></FormalSpec>
<Implementation><![CDATA[	do ..createAndRender(,params("text"),$g(params("for")),+$g(params("ismandatory")),$g(params("eventid")))
]]></Implementation>
</Method>

<Method name="renderContents">
<Implementation><![CDATA[
	if ..isMandatory {
		if ..isMandatoryMarkerOnLeft {
			do ..renderMandatoryMarker()
			w "&nbsp;"
		}
	}
	if ..allowRawHTML {
		write ..rawHTML(..text)
	} else {
		do ##super()
	}
	if ..isMandatory {
		if '..isMandatoryMarkerOnLeft {
			w "&nbsp;"
			do ..renderMandatoryMarker()
		}
	}
]]></Implementation>
</Method>

<Method name="renderMandatoryMarker">
<Implementation><![CDATA[	&html<<span id="#(..encodeHTMLAttribute(..getMandatoryMarkerForHtmlID(..for)))#" class="mandatory">*</span>>
]]></Implementation>
</Method>

<Method name="getMandatoryMarkerForHtmlID">
<ClassMethod>1</ClassMethod>
<FormalSpec>htmlID</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return "efManMarker-"_htmlID
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.frontend.prowebBase">
<Super>EF.ui.components.base</Super>
<TimeChanged>64183,41819.123112</TimeChanged>
<TimeCreated>64183,41819.123112</TimeCreated>

<Method name="renderRowOpening">
<Implementation><![CDATA[	write "<div class='row draggableTR'>"
]]></Implementation>
</Method>

<Method name="renderCellOpening">
<Implementation><![CDATA[	write "<div class='col-sm-12'>"
]]></Implementation>
</Method>

<Method name="renderCellClosing">
<Implementation><![CDATA[	write "</div>"
]]></Implementation>
</Method>

<Method name="renderRowClosing">
<Implementation><![CDATA[		write "</div>"
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.frontend.textBlock">
<Super>EF.ui.components.frontend.prowebBase</Super>
<TimeChanged>64183,41875.095016</TimeChanged>
<TimeCreated>64183,38661.128484</TimeCreated>

<Property name="text">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000000"/>
</Property>

<Method name="render">
<Implementation><![CDATA[
	do ..renderRowOpening()
		do ..renderCellOpening()
			write ..rawHTML(..text)
		do ..renderCellClosing()
	do ..renderRowClosing()
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.frontend.textInput">
<Super>EF.ui.components.frontend.inputElement,EF.ui.components.textInput</Super>
<TimeChanged>64183,60710.183997</TimeChanged>
<TimeCreated>63357,57620.613738</TimeCreated>

<Parameter name="typeAttribute">
<Default>text</Default>
</Parameter>

<Method name="render">
<Implementation><![CDATA[
	do ..renderRowAndLabel()
	&html<
		    <input type="#(..encodeHTMLAttribute(..#typeAttribute))#" class="#(..encodeHTMLAttribute(..classes))#" #(..rawHTML(..getDisabledString()))# title="#(..encodeHTMLAttribute(..title))#" id="#(..encodeHTMLAttribute(..htmlID))#" name="#(..encodeHTMLAttribute(..htmlName))#" value="#(..encodeHTMLAttribute(..value))#" placeholder="#(..encodeHTMLAttribute(..placeHolder))#"  #(..rawHTML(..getExtraAttributes()))#>
    >
    do ..renderHelpAndRowClosing()
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.gridColumn">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.gridColumn.CLS/EV.4
;vc; Component: CLS.EF.ui.components.gridColumn
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.gridColumn.CLS/EV.4</td><td>CLS.EF.ui.components.gridColumn</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63817,44976</TimeChanged>
<TimeCreated>63722,39207.705145</TimeCreated>

<Property name="header">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="name">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="dataType">
<Type>%String</Type>
<InitialExpression>"text"</InitialExpression>
<Required>1</Required>
<Parameter name="VALUELIST" value=",text,number,date,long text,hidden,currency,timestamp"/>
</Property>

<Property name="alignment">
<Type>%String</Type>
<InitialExpression>"left"</InitialExpression>
<Required>1</Required>
<Parameter name="VALUELIST" value=",left,right,center"/>
</Property>

<Property name="isReadOnly">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
<Required>1</Required>
</Property>

<Property name="collation">
<Type>%String</Type>
<InitialExpression>"string"</InitialExpression>
<Required>1</Required>
<Parameter name="VALUELIST" value=",string,numeric,"/>
</Property>

<Property name="isVisible">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="isViewable">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="width">
<Type>%Integer</Type>
</Property>

<Property name="isSearchable">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<ReturnType>EF.ui.components.gridColumn</ReturnType>
<Implementation><![CDATA[
	set column = ..%New()
	
	return column
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.gridData">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.gridData.CLS/EV.11
;vc; Component: CLS.EF.ui.components.gridData
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.gridData.CLS/EV.11</td><td>CLS.EF.ui.components.gridData</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63956,61266</TimeChanged>
<TimeCreated>63722,39136.036572</TimeCreated>

<Property name="dataSet">
<Type>EF.dataCollections.dataSet</Type>
</Property>

<Property name="columns">
<Type>EF.ui.components.gridColumn</Type>
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="ouputDateFormat">
<Type>%Integer</Type>
</Property>

<Property name="isDebug">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="timer">
<Type>%StringTimeStamp</Type>
</Property>

<Property name="timerCount">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="timers">
<Type>%StringTimeStamp</Type>
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="startTime">
<Type>%StringTimeStamp</Type>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>outputDateFormat=44</FormalSpec>
<ReturnType>EF.ui.components.gridData</ReturnType>
<Implementation><![CDATA[
	set gridData = ..%New()
	set gridData.ouputDateFormat = outputDateFormat
	if $G(^xDEBUG)=1 {
		set gridData.isDebug=1
		set gridData.startTime = $Piece($Ztimestamp,",",2)
	}
	return gridData
]]></Implementation>
</Method>

<Method name="createColumns">
<Implementation><![CDATA[	throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>

<Method name="createColumn">
<FormalSpec>header:%String,columnName:%String,dataType,alignment,collation,isReadOnly,isSearchable,width,isVisible</FormalSpec>
<Implementation><![CDATA[
	#dim column as EF.ui.components.gridColumn
	
	set column = ##class(EF.ui.components.gridColumn).createNew()
	set column.header = header
	set column.name = columnName
	
	if $Get(dataType)'="" set column.dataType = dataType
	if $Get(alignment)'="" set column.alignment = alignment
	if $Get(collation)'="" set column.collation = collation
	if $Get(isReadOnly)'="" set column.isReadOnly = isReadOnly
	if $Get(isSearchable)'="" set column.isSearchable = isSearchable
	if $Get(width)'="" set column.width = width
	if $Get(isVisible)'="" set column.isVisible = isVisible
	
	do ..addColumn(column)
	kill column
]]></Implementation>
</Method>

<Method name="createHiddenColumn">
<FormalSpec>columnName:%String,dataType</FormalSpec>
<Implementation><![CDATA[
	#dim column as EF.ui.components.gridColumn
	
	set column = ##class(EF.ui.components.gridColumn).createNew()
	
	set column.name = columnName
	set column.dataType = dataType
	set column.isViewable = 0
	
	do ..addColumn(column)
	kill column
]]></Implementation>
</Method>

<Method name="addColumn">
<FormalSpec>column:EF.ui.components.gridColumn</FormalSpec>
<Implementation><![CDATA[
	#dim lastUsedIndex as %String
	set lastUsedIndex = $Order(..columns(""),-1)
	set ..columns(lastUsedIndex+1) = column
]]></Implementation>
</Method>

<Method name="populateDataSet">
<Implementation><![CDATA[	do ..saveColumnTimers()
]]></Implementation>
</Method>

<Method name="addRow">
<FormalSpec>root:EF.dataCollections.dataSetNodeTempGlobal</FormalSpec>
<ReturnType>EF.dataCollections.dataSetNodeTempGlobal</ReturnType>
<Implementation><![CDATA[
	set row=root.rootNode.createChild("")
	set ..timerCount = ..timerCount +1
	do ..updateColumnTimer("start new row")
	return row
]]></Implementation>
</Method>

<Method name="addCell">
<FormalSpec>row:EF.dataCollections.dataSetNodeTempGlobal,columnName:%String,value:%String</FormalSpec>
<Implementation><![CDATA[
	#dim cell As EF.dataCollections.dataSetNodeTempGlobal
	
	set cell=row.createChild(columnName)
	do cell.addValue(##class(EF.htmlGenerator).unescapeXSSFix(value))
	
	do ..updateColumnTimer(columnName)
]]></Implementation>
</Method>

<Method name="getColumnsAsJSON">
<ReturnType>%Library.ListOfObjects</ReturnType>
<Implementation><![CDATA[
	#dim col as %Integer
	#dim JSON as %String 
	
	set root = ##class(%Library.ListOfObjects).%New()
	set kendoDateFormat=##class(shared.dateFunctions).getKendoDateFormat(..ouputDateFormat)
	set kendoTimeFormat=##class(shared.timeFunctions).getKendoTimeFormat(##class(shared.timeFunctions).getBackendOutputTimeFormat())
	
	for col=1:1 {
		if '$data(..columns(col)) quit
		if ..columns(col).isViewable {
			set child = ##class(%ZEN.proxyObject).%New()
			set child.title = ..columns(col).header
			set child.field = ..columns(col).name
			set child.hidden = '..columns(col).isVisible
			
			if ..columns(col).dataType = "long text" {
				set subObject = ##class(%ZEN.proxyObject).%New()
				set subObject.class = "ef_overflow_ellipsis"
				set child.attributes = subObject
				set child.headerAttributes = subObject
				kill subObject
			}
					
			if ..columns(col).alignment = "right" {
				set subObject = ##class(%ZEN.proxyObject).%New()
				set subObject.class = "ef-text-right"
				set child.attributes = subObject
				set child.headerAttributes = subObject
				kill subObject
			}
			if ..columns(col).dataType = "currency" {
				set child.template = "# if (typeof currencySymbol !== ""undefined"") { # #:currencySymbol + kendo.toString("_child.field_",""n2"" ) # # } #" 
			}
			
			if ..columns(col).dataType = "date" {
				set child.format = "{0:"_kendoDateFormat_"}"
				
			} elseif ..columns(col).dataType = "timestamp" {
				if ##class(shared.timeFunctions).getBackendOutputTimeFormat()=12 {
					set child.format = "{0:"_kendoDateFormat_" "_kendoTimeFormat_"}"	
				} else {
					set child.format = "{0:"_kendoDateFormat_" "_kendoTimeFormat_"}"	
				}
				
			}	
			
			set child.isSearchable = ..columns(col).isSearchable
			
			set child.width = ..columns(col).width
			
			
			do root.Insert(child)
			kill child
		}
	}
	
	return root
]]></Implementation>
</Method>

<Method name="getColumnSchemaJSON">
<ReturnType>%Library.ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set schema=##class(%ZEN.proxyObject).%New()
	
	for col=1:1 {
		if '$data(..columns(col)) quit
		
		set typeObject=##class(%ZEN.proxyObject).%New()
		if (..columns(col).dataType="text")!(..columns(col).dataType="long text") {
			set typeObject.type = "string"
			
		} elseif ..columns(col).dataType = "currency" {
			set typeObject.type = "number"
			
		} elseif ..columns(col).dataType = "timestamp" {
			set typeObject.type = "date"
			
		} else {
			set typeObject.type = ..columns(col).dataType 
		}
		
		set columnName=..columns(col).name
		set $Property(schema,columnName) = typeObject
	}
	return schema
]]></Implementation>
</Method>

<Method name="getSearchColumnsJSON">
<ReturnType>%Library.ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set root=##class(%Library.ListOfObjects).%New()
	
	for col=1:1 {
		if '$data(..columns(col)) quit
		 
		
		if ..columns(col).isSearchable {
			set nameObject=##class(%ZEN.proxyObject).%New()
			set nameObject.name=..columns(col).name
			if (..columns(col).dataType="text")!(..columns(col).dataType="long text") {
				set nameObject.operator="contains"
			} else {
				set nameObject.operator="eq"
			}
			do root.Insert(nameObject)
		}
	
	}
	return root
]]></Implementation>
</Method>

<Method name="updateColumnTimer">
<FormalSpec>description=""</FormalSpec>
<Implementation><![CDATA[
	if ..isDebug {
		#dim now as %StringTimeStamp = $Piece($ZTimestamp,",",2)
		if ..timer'="" {
			#dim timeTakenSincelastTimer = (now - ..timer)
			set ..timers(description,..timerCount) = timeTakenSincelastTimer
		}
		set ..timer = now
	}
]]></Implementation>
</Method>

<Method name="saveColumnTimers">
<Implementation><![CDATA[
	if ..isDebug {
		#dim description as %String = ""
		#dim count as %Integer
		#dim total as %Numeric
		#dim numberOfItems as %Integer
		#dim now as %StringTimeStamp = $Piece($ZTimestamp,",",2)
		
		kill ^xGridTimers
		
		for  {
			set description = $Order(..timers(description))
			if description="" quit
			
			set count="",total=0,numberOfItems=0
			for  {
				set count=$Order(..timers(description,count))
				if count="" quit
				set numberOfItems=count
					
				set total = total + ..timers(description,count)				
			}
			set ^xGridTimers(description) = $FN((total/numberOfItems),"",4)
		}
		
		set ^xGridTimers("zzz Grand Total") = $FN(now-..startTime,"",4)
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.gridDataMock">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.gridDataMock.CLS/EV.0
;vc; Component: CLS.EF.ui.components.gridDataMock
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.gridDataMock.CLS/EV.0</td><td>CLS.EF.ui.components.gridDataMock</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.gridData</Super>
<TimeChanged>63728,56902</TimeChanged>
<TimeCreated>63722,39802.547574</TimeCreated>

<Property name="columnCount">
<Type>%Integer</Type>
<InitialExpression>5</InitialExpression>
<Private>1</Private>
</Property>

<Property name="rowCount">
<Type>%Integer</Type>
<InitialExpression>3</InitialExpression>
<Private>1</Private>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<ReturnType>EF.ui.components.gridData</ReturnType>
<Implementation><![CDATA[
	set gridData = ..%New()
	return gridData
]]></Implementation>
</Method>

<Method name="populateDataSet">
<Implementation><![CDATA[
	do ..createColumns()

	set ..dataSet = ##class(EF.dataCollections.dataSetTempGlobal).%New("grid data")
	for i=1:1:..rowCount {
		do ..createMockRow(..dataSet,i)	
	}
]]></Implementation>
</Method>

<Method name="createMockRow">
<FormalSpec>root,rowNumber</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	#dim value as %String
	
	set row = ..addRow(root)
	for col=1:1:..columnCount {
		set value = "Test Value "_rowNumber_"-"_col
		do ..addCell(row,"Column "_col,value)	
	}
]]></Implementation>
</Method>

<Method name="createColumns">
<Implementation><![CDATA[
	for columnNumber=1:1:..columnCount {
		if columnNumber=1 {
			do ..createColumn("Column "_columnNumber,"Column "_columnNumber, "number", "right", "numeric",0,1)
		} elseif columnNumber=2 {
			do ..createColumn("Column "_columnNumber,"Column "_columnNumber)
		} elseif columnNumber=3 {
			do ..createColumn("Column "_columnNumber,"Column "_columnNumber,"date", "center", "numeric", 1)
		} else {
			do ..createColumn("Column "_columnNumber,"Column "_columnNumber,"text", "left", "string", 0)
		}	
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.gridDataTestCase">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.gridDataTestCase.CLS/EV.1
;vc; Component: CLS.EF.ui.components.gridDataTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.gridDataTestCase.CLS/EV.1</td><td>CLS.EF.ui.components.gridDataTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63761,52694</TimeChanged>
<TimeCreated>63725,45096.640164</TimeCreated>

<Method name="Test01GridDataColumns">
<Implementation><![CDATA[
	#dim mock as EF.ui.components.gridDataMock
	
	set mock=##class(EF.ui.components.gridDataMock).createNew() 
	do mock.createColumns()
	
	do $$$AssertEquals(mock.columns(1).name,"Column 1")
	do $$$AssertEquals(mock.columns(1).dataType,"number")
	do $$$AssertEquals(mock.columns(1).alignment,"right")
	do $$$AssertEquals(mock.columns(1).collation,"numeric")
	do $$$AssertEquals(mock.columns(1).isReadOnly,"0")
	do $$$AssertEquals(mock.columns(1).isSearchable,"1")

	do $$$AssertEquals(mock.columns(2).name,"Column 2")
	do $$$AssertEquals(mock.columns(2).dataType,"text")
	do $$$AssertEquals(mock.columns(2).alignment,"left")
	do $$$AssertEquals(mock.columns(2).collation,"string")
	do $$$AssertEquals(mock.columns(2).isReadOnly,"1")
	do $$$AssertEquals(mock.columns(2).isSearchable,"0")
]]></Implementation>
</Method>

<Method name="Test01GridDataData">
<Implementation><![CDATA[
	set mock=##class(EF.ui.components.gridDataMock).createNew() 
	do mock.populateDataSet()
	
	set correctDataJSON = "[{""Column 1"" : ""Test Value 1-1"",""Column 2"" : ""Test Value 1-2"",""Column 3"" : ""Test Value 1-3"",""Column 4"" : ""Test Value 1-4"",""Column 5"" : ""Test Value 1-5""},{""Column 1"" : ""Test Value 2-1"",""Column 2"" : ""Test Value 2-2"",""Column 3"" : ""Test Value 2-3"",""Column 4"" : ""Test Value 2-4"",""Column 5"" : ""Test Value 2-5""},{""Column 1"" : ""Test Value 3-1"",""Column 2"" : ""Test Value 3-2"",""Column 3"" : ""Test Value 3-3"",""Column 4"" : ""Test Value 3-4"",""Column 5"" : ""Test Value 3-5""}]"
	set JSONStream = mock.dataSet.getJSONStream("grid data")
	set JSONString = JSONStream.Read(9999)
	
	do $$$AssertEquals(JSONString,correctDataJSON)
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.hiddenInput">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.hiddenInput.CLS/EV.0
;vc; Component: CLS.EF.ui.components.hiddenInput
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.hiddenInput.CLS/EV.0</td><td>CLS.EF.ui.components.hiddenInput</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.inputBase</Super>
<TimeChanged>63749,43343</TimeChanged>
<TimeCreated>63749,43343.498381</TimeCreated>

<Method name="render">
<Implementation><![CDATA[
	&html<
    	<input type="hidden" class="#(..encodeHTMLAttribute(..classes))#" id="#(..encodeHTMLAttribute(..htmlID))#" name="#(..encodeHTMLAttribute(..htmlName))#" value="#(..encodeHTMLAttribute(..value))#">
    >
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.icon">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.icon.CLS/EV.0
;vc; Component: CLS.EF.ui.components.icon
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.icon.CLS/EV.0</td><td>CLS.EF.ui.components.icon</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.container</Super>
<TimeChanged>63896,57348</TimeChanged>
<TimeCreated>63896,57348.299904</TimeCreated>

<Method name="renderStart">
<Implementation><![CDATA[
	&HTML<
		<i id="#(..htmlID)#" class="#(..classes)#" #(..rawHTML(..getExtraAttributes()))#>
	>
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[
	&HTML<
		</i>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.inputBase">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.inputBase.CLS/EV.0
;vc; Component: CLS.EF.ui.components.inputBase
;vc;  Location: SmallDev
;vc; Date/Time: 15-Jul-14 15:26
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.inputBase.CLS/EV.0</td><td>CLS.EF.ui.components.inputBase</td><td>SmallDev</td><td style='white-space: nowrap;'>15-Jul-14 15:26</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.base</Super>
<TimeChanged>63377,40396</TimeChanged>
<TimeCreated>63355,62977.338045</TimeCreated>

<Property name="value">
<Type>%String</Type>
</Property>

<Property name="isDisabled">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="label">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="htmlName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="validator">
<Type>EF.validator.base</Type>
</Property>

<Property name="title">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Method name="%OnNew">
<FormalSpec>htmlID:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	do ##super(htmlID)
	set ..htmlName=..htmlID
	set ..validator=..getDefaultValidator()
	
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="getDefaultValidator">
<ReturnType>EF.validator.base</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.validator.base).%New()
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.label">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.label.CLS/EV.0
;vc; Component: CLS.EF.ui.components.label
;vc;  Location: SmallDev
;vc; Date/Time: 17-Nov-14 15:37
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.label.CLS/EV.0</td><td>CLS.EF.ui.components.label</td><td>SmallDev</td><td style='white-space: nowrap;'>17-Nov-14 15:37</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.ui.components.text</Super>
<TimeChanged>63489,38276</TimeChanged>
<TimeCreated>63489,37359.280231</TimeCreated>

<Property name="isMandatory">
<Type>%Boolean</Type>
</Property>

<Property name="for">
<Type>%String</Type>
</Property>

<Method name="render">
<Implementation><![CDATA[
	&html<
		<label for="#(..encodeHTMLAttribute(..for))#">
			#[do ..renderContents()]#
		</label>
	>
]]></Implementation>
</Method>

<Method name="renderContents">
<Implementation><![CDATA[	write ..encodeHTMLContent(..text)
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.list">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.list.CLS/EV.0
;vc; Component: CLS.EF.ui.components.list
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.list.CLS/EV.0</td><td>CLS.EF.ui.components.list</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.ui.components.container</Super>
<TimeChanged>63405,46069</TimeChanged>
<TimeCreated>63405,42900.159558</TimeCreated>

<Property name="label">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="columns">
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Method name="getRowCount">
<Implementation><![CDATA[
	set rowCount=..childComponents.Count()\..columns
	if ..childComponents.Count()#..columns {
		set rowCount=rowCount+1	
	}
	quit rowCount
]]></Implementation>
</Method>

<Method name="renderCheckbox">
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>

<Method name="renderColumnStart">
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>

<Method name="renderColumnEnd">
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.listInput">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.listInput.CLS/EV.1
;vc; Component: CLS.EF.ui.components.listInput
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.listInput.CLS/EV.1</td><td>CLS.EF.ui.components.listInput</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.ui.components.inputBase</Super>
<TimeChanged>63833,64621</TimeChanged>
<TimeCreated>63355,57208.219893</TimeCreated>

<Property name="alternatives">
<Type>EF.ui.components.alternative</Type>
<Collection>list</Collection>
</Property>

<Method name="getDefaultValidator">
<ReturnType>EF.validator.singleLineText</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.validator.inList).%New()
]]></Implementation>
</Method>

<Method name="valueSet">
<FormalSpec>value</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	for altInd=1:1:..alternatives.Count() {
		set alternative=..alternatives.GetAt(altInd)
		if alternative.value=value {
			set i%value=value
		}
	}
	
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="addAlternative">
<FormalSpec>value,label,isDefault=0</FormalSpec>
<ReturnType>EF.ui.components.alternative</ReturnType>
<Implementation><![CDATA[
	set htmlID=..htmlID_"_"_(..alternatives.Count()+1)
	
	set alternative=##class(EF.ui.components.alternative).%New(htmlID)
	set alternative.label=label
	set alternative.value=value
	set alternative.isDefault=isDefault
	do ..alternatives.Insert(alternative)
	// Also add to the validator
	do ..validator.addAllowedValue(value)
	return alternative
]]></Implementation>
</Method>

<Method name="renderAlternatives">
<Implementation><![CDATA[
	for altInd=1:1:..alternatives.Count() {
		set alternative=..alternatives.GetAt(altInd)
		if ..value=alternative.value {
			set alternative.isSelected=1
		} else {
			set alternative.isSelected=0
		}
		if (..value="")&&(alternative.isDefault) {
			set alternative.isSelected=1
		}
		do ..renderAlternative(alternative)	
	}
]]></Implementation>
</Method>

<Method name="getAlternativeCount">
<ReturnType>%Integer</ReturnType>
</Method>

<Method name="renderAlternative">
<Implementation><![CDATA[	Throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.radio">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.radio.CLS/EV.1
;vc; Component: CLS.EF.ui.components.radio
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.radio.CLS/EV.1</td><td>CLS.EF.ui.components.radio</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.inputBase</Super>
<TimeChanged>64111,40158</TimeChanged>
<TimeCreated>63930,57669.150104</TimeCreated>

<Property name="isSelected">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="isDefault">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="render">
<Implementation><![CDATA[

	set disabledString=""
	if ..isDisabled {
		set disabledString="disabled"	
	}
	set selectedString="",activeString=""
	if ..isSelected {
		set selectedString="checked"
		do ..addClass("active")
	}
	
	if $l(..label) {
		&html<
			<label class="#(..encodeHTMLAttribute(..classes))#" #(..rawHTML(disabledString))#  #(..rawHTML(..getExtraAttributes()))# id="#(..encodeHTMLAttribute(..htmlID_"-label"))#">
		>
	}
	&html<<input type="radio" #(..rawHTML(selectedString))# #(..rawHTML(disabledString))#  #(..rawHTML(..getExtraAttributes()))# value="#(..encodeHTMLAttribute(..value))#" name="#(..encodeHTMLAttribute(..htmlName))#" id="#(..encodeHTMLAttribute(..htmlID))#">>
    if $l(..label) {
	    &html<&nbsp;#(..encodeHTMLContent(..label))#
        	</label>
        >
    }

	do ##super()
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.radioGroup">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.radioGroup.CLS/EV.0
;vc; Component: CLS.EF.ui.components.radioGroup
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.radioGroup.CLS/EV.0</td><td>CLS.EF.ui.components.radioGroup</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.container</Super>
<TimeChanged>63944,53735</TimeChanged>
<TimeCreated>63930,58511.107243</TimeCreated>

<Method name="renderStart">
<Implementation><![CDATA[
	&html<
		<div class="form-group">
			<ul class="inputs-list">
	>
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[
	&html<
			</ul>
		</div>
	>
]]></Implementation>
</Method>

<Method name="renderChildComponent">
<FormalSpec>uiComponent:EF.ui.components.base</FormalSpec>
<Implementation><![CDATA[
	&html<
		<li>
	>
	do ##super(uiComponent)
	&html<
		</li>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.span">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.components.span.CLS/EV.0
;vc; Component: CLS.EF.ui.components.span
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.span.CLS/EV.0</td><td>CLS.EF.ui.components.span</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.components.container</Super>
<TimeChanged>64131,59508</TimeChanged>
<TimeCreated>63769,36373.317021</TimeCreated>

<Method name="renderStart">
<Implementation><![CDATA[
	&HTML<
		<span id="#(..encodeForHTMLAttribute(..htmlID))#" class="#(..encodeForHTMLAttribute(..classes))#" #(..rawHTML(..getExtraAttributes()))#>
	>
]]></Implementation>
</Method>

<Method name="renderEnd">
<Implementation><![CDATA[
	&HTML<
		</span>
	>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.tableBase">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.tableBase.CLS/EV.0
;vc; Component: CLS.EF.ui.components.tableBase
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:35
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.tableBase.CLS/EV.0</td><td>CLS.EF.ui.components.tableBase</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:35</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.ui.components.base</Super>
<TimeChanged>63385,55780</TimeChanged>
<TimeCreated>63384,64347.730934</TimeCreated>

<Property name="headerRow">
<Type>EF.ui.components.tableRowBase</Type>
</Property>

<Property name="rows">
<Type>EF.ui.components.tableRowBase</Type>
<Collection>list</Collection>
</Property>

<Method name="%OnNew">
<FormalSpec>htmlID:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	do ##super(htmlID)
	set ..headerRow=##class(EF.ui.components.tableRowBase).%New()
	
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="renderRows">
<Implementation><![CDATA[
	for altInd=1:1:..rows.Count() {
		set row=..rows.GetAt(altInd)
		
		do row.render()	
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.tableCellBase">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.tableCellBase.CLS/EV.1
;vc; Component: CLS.EF.ui.components.tableCellBase
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.tableCellBase.CLS/EV.1</td><td>CLS.EF.ui.components.tableCellBase</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.ui.components.container</Super>
<TimeChanged>63405,48074</TimeChanged>
<TimeCreated>63384,64339.762692</TimeCreated>

<Property name="alignment">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",left,right,center"/>
</Property>

<Method name="addText">
<FormalSpec>text</FormalSpec>
<Implementation><![CDATA[
	set textComponent=##class(EF.ui.components.text).%New()
	set textComponent.text=text
	do ..childComponents.Insert(textComponent)
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.tableRowBase">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.tableRowBase.CLS/EV.0
;vc; Component: CLS.EF.ui.components.tableRowBase
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:35
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.tableRowBase.CLS/EV.0</td><td>CLS.EF.ui.components.tableRowBase</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:35</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.ui.components.base</Super>
<TimeChanged>63391,39321</TimeChanged>
<TimeCreated>63384,64343.531346</TimeCreated>

<Property name="cells">
<Type>EF.ui.components.tableCellBase</Type>
<Collection>list</Collection>
</Property>

<Method name="renderCells">
<Implementation><![CDATA[
	set key=""
	for {
		set cell=..cells.GetNext(.key)
		if key="" quit
		if $IsObject(cell) {
			do cell.render()
		}
	}
]]></Implementation>
</Method>

<Method name="applyIsMuted">
</Method>

<Method name="applyIsItalic">
</Method>
</Class>


<Class name="EF.ui.components.text">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.components.text.CLS/EV.1
;vc; Component: CLS.EF.ui.components.text
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:38
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.components.text.CLS/EV.1</td><td>CLS.EF.ui.components.text</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:38</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.ui.components.base</Super>
<TimeChanged>64183,49100.629313</TimeChanged>
<TimeCreated>63385,58841.261113</TimeCreated>

<Property name="text">
<Type>%String</Type>
</Property>

<Method name="render">
<Implementation><![CDATA[
	write ..encodeHTMLContent(..text)
	do ##super()
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.components.textInput">
<Super>EF.ui.components.frontend.inputElement</Super>
<TimeChanged>64183,60406.105424</TimeChanged>
<TimeCreated>63357,57556.566449</TimeCreated>

<Property name="placeHolder">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Method name="getDefaultValidator">
<ReturnType>EF.validator.base</ReturnType>
<Implementation><![CDATA[	quit ##class(EF.validator.singleLineText).%New()
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.cspRuleMethods">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.cspRuleMethods.CLS/EV.1
;vc; Component: CLS.EF.ui.cspRuleMethods
;vc;  Location: SmallDev
;vc; Date/Time: 23-Jun-15 16:23
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.cspRuleMethods.CLS/EV.1</td><td>CLS.EF.ui.cspRuleMethods</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Jun-15 16:23</td><td>AdrianM</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63727,38315.319156</TimeChanged>
<TimeCreated>63712,52859.465148</TimeCreated>

<Method name="linkStandatdURLAttributes">
<ClassMethod>1</ClassMethod>
<FormalSpec>rule:%CSP.Rule</FormalSpec>
<Implementation><![CDATA[
	for attribute="data-link-url","href" {
		if %this.IsDefined(attribute) {
			set tmpOut="#(..Link("_%this.QuoteAttribute(attribute)_"))#"
			do %this.SetAttribute(attribute,tmpOut)
		}	
	}
]]></Implementation>
</Method>

<Method name="htmlEncodeAllAttributes">
<ClassMethod>1</ClassMethod>
<FormalSpec>rule:%CSP.Rule</FormalSpec>
<Implementation><![CDATA[
	kill attributesOrdered
	do rule.GetAttributesOrdered(.attributesOrdered)
	set index=""
	for {
		set index=$o(attributesOrdered(index))
		if index="" quit
		set attr=$ZCVT($LIST(attributesOrdered(index),1),"L")
		if rule.HasValue(attr) {
			set tmpOut="#(..encodeForHTMLAttribute("_rule.QuoteAttribute(attr)_"))#"
			do rule.SetAttribute(attr,tmpOut)
		}
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.frontend.controls.fileItem">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.frontend.controls.fileItem.CLS/EV.9
;vc; Component: CLS.EF.ui.frontend.controls.fileItem
;vc;  Location: SmallDev
;vc; Date/Time: 18-Jul-16 17:26
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.frontend.controls.fileItem.CLS/EV.9</td><td>CLS.EF.ui.frontend.controls.fileItem</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Jul-16 17:26</td><td>RajibQ</td></tr></table>
]]></Description>
<Super>%RegisteredObject,EF.htmlGenerator</Super>
<TimeChanged>64117,41481</TimeChanged>
<TimeCreated>63134,52245.058816</TimeCreated>

<Property name="objectID">
<Type>%Integer</Type>
</Property>

<Property name="openURL">
<Type>%String</Type>
</Property>

<Property name="name">
<Type>%String</Type>
</Property>

<Property name="size">
<Type>%String</Type>
</Property>

<Property name="formattedDate">
<Type>%String</Type>
</Property>

<Property name="formattedTime">
<Type>%String</Type>
</Property>

<Property name="deleteURL">
<Type>%String</Type>
</Property>

<Method name="render">
<Implementation><![CDATA[	write ..getFileItemHTML(..name,..openURL,..size\1024,..formattedDate,..formattedTime,..deleteURL,..objectID)
]]></Implementation>
</Method>

<Method name="getFileItemHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>name,openURL,size,formattedDate,formattedTime,deleteURL,objectID</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out="<tr id=""ef_uploaded_file_"_objectID_""" class=""ef_file_wrapper"">"
	set out=out_"<td class=""black10px"">"
	set out=out_"<a target=""_blank"" href="""_openURL_""">"_name_"</a> "_size_" kB"
	set out=out_"</td>"
	set out=out_"<td class=""black9px"">"
	set out=out_formattedDate_"  "_formattedTime
	set out=out_"</td>"
	set out=out_"<td class=""black9px"">"
	set out=out_"<a class=""noWarn"" href="""_deleteURL_""">remove</a>"
	set out=out_"</td>"
	set out=out_"</tr>"
	quit out
]]></Implementation>
</Method>

<Method name="getFileItemJS">
<ClassMethod>1</ClassMethod>
<FormalSpec>parent</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set objectID="'+"_parent_".objectID+'"
	set openURL="'+"_parent_".openURL+'"
	set name="'+"_parent_".name+'"
	set size="'+Math.floor("_parent_".size/1024)+'"
	set formattedDate="'+"_parent_".formattedDate+'"
	set formattedTime="'+"_parent_".formattedTime+'"
	set deleteURL="'+"_parent_".deleteURL+'"
	set out=..getFileItemHTML(name, openURL, size, formattedDate, formattedTime, deleteURL, objectID)
	quit out
]]></Implementation>
</Method>

<Method name="removeFileJS">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set out=""
	set out=out_$CHAR(13,10)_"function removeFile(fileID,deleteURL) {"
	set out=out_$CHAR(13,10)_"	if (confirm('"_..encodeJS(##class(shared.pCSP).out("Are you sure that you want to delete this file?"))_"')) {"
	set out=out_$CHAR(13,10)_"		$.ajax({"
	set out=out_$CHAR(13,10)_"        	url: deleteURL,"
	set out=out_$CHAR(13,10)_"        	type: 'POST',"
	set out=out_$CHAR(13,10)_"        	dataType: 'json',"
	set out=out_$CHAR(13,10)_"        	success : function(data) {"
	set out=out_$CHAR(13,10)_"	        	if (data.status == 'error') {"
	set out=out_$CHAR(13,10)_"		        	alert (data.errorMsg);"
	set out=out_$CHAR(13,10)_"	        	} else {"
	set out=out_$CHAR(13,10)_"		        	$('#ef_uploaded_file_'+fileID).remove();"
	set out=out_$CHAR(13,10)_"	        	}"
	set out=out_$CHAR(13,10)_"        	}"
	set out=out_$CHAR(13,10)_"		});"
	set out=out_$CHAR(13,10)_"	}"
	set out=out_$CHAR(13,10)_"}"
	quit out
]]></Implementation>
</Method>

<Method name="uploadFile">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[uploadType,objectID,xEventID,xLangID,xDateFormat,&fileStream:%Stream]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set fullFileName=fileStream.FileName
	set fileName=$P(fullFileName,"\",$L(fullFileName,"\"))
	if uploadType="awards.tempEntryFile" {
		set fileObjectID=##class(awards.tempEntryFile).uploadFile(objectID,xEventID,xLangID,xDateFormat,fileName,.fileStream)
	} elseif uploadType="abstract.objFile" {
		set fileObjectID=##class(abstract.objFile).uploadFile(objectID,xEventID,xLangID,xDateFormat,fileName,.fileStream)
	} elseif uploadType="abstract.objPaper" {
		set fileObjectID=##class(abstract.objPaper).uploadFile(objectID,xEventID,xLangID,xDateFormat,fileName,.fileStream)
	}  else {
		throw ##class(shared.exceptions.generalException).%New("Unknown upload type")		
	}
	quit fileObjectID
]]></Implementation>
</Method>

<Method name="deleteFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>uploadType,objectID,personID="",ipAddress=""</FormalSpec>
<Implementation><![CDATA[
	if uploadType="awards.tempEntryFile" {
		set fileObjectID=##class(awards.tempEntryFile).deleteFile(objectID)
	} elseif uploadType="abstract.objFile" {
		set fileObjectID=##class(abstract.objFile).deleteFile(objectID,personID,ipAddress)
	} elseif uploadType="abstract.objPaper" {
		set fileObjectID=##class(abstract.objPaper).deleteFile(objectID,personID,ipAddress)
	}  else {
		throw ##class(shared.exceptions.generalException).%New("Unknown upload type")		
	}
	quit fileObjectID
]]></Implementation>
</Method>

<Method name="getFileItem">
<ClassMethod>1</ClassMethod>
<FormalSpec>uploadType,fileObjectID,xDateFormat,xTimeFormat</FormalSpec>
<ReturnType>EF.ui.frontend.controls.fileItem</ReturnType>
<Implementation><![CDATA[
	if uploadType="awards.tempEntryFile" {
		set fileItem=##class(awards.tempEntryFile).getFileItem(fileObjectID,xDateFormat,xTimeFormat)
	} elseif uploadType="abstract.objFile" {
		set fileItem=##class(abstract.objFile).getFileItem(fileObjectID,xDateFormat,xTimeFormat)
	} elseif uploadType="abstract.objPaper" {
		set fileItem=##class(abstract.objPaper).getFileItem(fileObjectID,xDateFormat,xTimeFormat)
	} else {
		throw ##class(shared.exceptions.generalException).%New("Unknown file type")		
	}
	quit fileItem
]]></Implementation>
</Method>

<Method name="uploadFilesFromRequest">
<ClassMethod>1</ClassMethod>
<FormalSpec>uploadItem,uploadType,objectID,xEventID,xLangID,xDateFormat</FormalSpec>
<Implementation><![CDATA[
	if $D(%request.MimeData(uploadItem)) {
		set index=""
		for {
			set index=$O(%request.MimeData(uploadItem,index))
			if index="" quit
			set fileStream=%request.MimeData(uploadItem,index)
			TSTART
			try {
				set fileObjectID=##class(EF.ui.frontend.controls.fileItem).uploadFile(uploadType,objectID,xEventID, xLangID, xDateFormat,.fileStream)
				TCOMMIT
			} catch errObj {
				TROLLBACK
				throw errObj
			}
		}
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.frontend.controls.fileList">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.frontend.controls.fileList.CLS/EV.1
;vc; Component: CLS.EF.ui.frontend.controls.fileList
;vc;  Location: SmallDev
;vc; Date/Time: 16-Nov-15 10:04
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.frontend.controls.fileList.CLS/EV.1</td><td>CLS.EF.ui.frontend.controls.fileList</td><td>SmallDev</td><td style='white-space: nowrap;'>16-Nov-15 10:04</td><td>RajibQ</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63495,59516</TimeChanged>
<TimeCreated>63134,56004.63318</TimeCreated>

<Property name="htmlID">
<Type>%String</Type>
</Property>

<Property name="fileItems">
<Type>fileItem</Type>
<Collection>list</Collection>
</Property>

<Method name="render">
<Description>
outputs the html and javascript required for a generic backeend image uploader. </Description>
<Implementation><![CDATA[
	w "<table class=""ef-table"" id='"_..htmlID_"'>"
	set key=""
	for {
		set fileItem = ..fileItems.GetNext(.key)
		if key="" quit
		do fileItem.render()
	}
	w "</table>"
]]></Implementation>
</Method>

<Method name="getFileCount">
<Implementation><![CDATA[	quit ..fileItems.Size
]]></Implementation>
</Method>

<Method name="getTotalFileSize">
<Implementation><![CDATA[
	set totalSize=""
	set key=""
	for {
		set fileItem = ..fileItems.GetNext(.key)
		if key="" quit
		set totalSize=totalSize+fileItem.size
	}	
	quit totalSize
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.frontend.controls.uploader">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.frontend.controls.uploader.CLS/EV.11
;vc; Component: CLS.EF.ui.frontend.controls.uploader
;vc;  Location: SmallDev
;vc; Date/Time: 18-Jul-16 17:26
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.frontend.controls.uploader.CLS/EV.11</td><td>CLS.EF.ui.frontend.controls.uploader</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Jul-16 17:26</td><td>RajibQ</td></tr></table>
]]></Description>
<Super>%RegisteredObject,EF.htmlGenerator</Super>
<TimeChanged>64117,41177</TimeChanged>
<TimeCreated>63134,55547.769132</TimeCreated>

<Property name="htmlName">
<Type>%String</Type>
</Property>

<Property name="objectID">
<Type>%Integer</Type>
</Property>

<Property name="objectType">
<Type>%String</Type>
</Property>

<Property name="buttonText">
<Type>%String</Type>
<InitialExpression>##class(shared.pCSP).out("Upload…")</InitialExpression>
</Property>

<Property name="uploaderTitle">
<Type>%String</Type>
<InitialExpression>##class(shared.pCSP).out("Uploaded Files")</InitialExpression>
</Property>

<Property name="acceptedFileTypes">
<Type>%String</Type>
<InitialExpression>"jpg,.gif,.png"</InitialExpression>
</Property>

<Method name="render">
<Description>
outputs the html and javascript required for a generic backeend image uploader. </Description>
<Implementation><![CDATA[
	do ..renderJS()
	do ..renderHTML()
]]></Implementation>
</Method>

<Method name="renderHTML">
<Implementation><![CDATA[
	// The html bit
	&html<
		<h3 style="float: left;">#(..encodeForHTML(..uploaderTitle))#</h3>
		<div id="#(..encodeForHTMLAttribute(..htmlName))#_container" class="ef_frontend_file_uploader k-content">
			<input type="file" name="#(..encodeForHTMLAttribute(..htmlName))#" id="#(..encodeForHTMLAttribute(..htmlName))#" title="#(..encodeForHTMLAttribute(##class(shared.pCSP).out("Upload")))#">
	 	</div>
	>
]]></Implementation>
</Method>

<Method name="renderJS">
<Implementation><![CDATA[
	do ..renderUploadingTemplate()
    &html<
		<script language='javascript'>
		var ef = ef || {};
		ef.fileUploader = ef.fileUploader || {};
		
	    $(document).ready(function() {
		    
		    var uploaderInput=$("##(..encodeForJavaScript(..htmlName))#");
	        uploaderInput.kendoUpload({
	        	complete : onComplete,
	        	upload: onUpload,
	        	success: onSuccess,
	        	error: onError,
	        	progress: onProgress,
	        	showFileList : true,
	        	multiple : true,
	        	localization : {
		        	select : '#(..encodeForJavaScript(..buttonText))#'
	        	},
			    async: {
			        #(..rawJS(..renderASyncURL()))#
			    },
                template: kendo.template($('#fileTemplate_#(..encodeForJavaScript(..htmlName))#').html())
	        });
	        
	        function onSuccess(e) {
				#(..rawJS(..renderOnSuccessJS()))#
			}
	        function onError(e) {
				#(..rawJS(..renderOnErrorJS()))#
			}
	        function onComplete(e) {
				#(..rawJS(..renderOnCompleteJS()))#
				if (typeof ef.fileUploader.onCompleteCallback === "function") {
					ef.fileUploader.onCompleteCallback()
				}
			}
	        function onUpload(e) {
				#(..rawJS(..renderOnUploadJS()))#
				if (typeof ef.fileUploader.onUploadCallback === "function") {
					ef.fileUploader.onUploadCallback()
				}
			}
			function onProgress(e) {
				#(..rawJS(..renderOnProgressJS()))#	
			}
	    });
		
				
	</script>
	>
]]></Implementation>
</Method>

<Method name="renderOnSuccessJS">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	&js<
		if (e.response.status == 'ok') {
		} else {
			alert(e.response.errorMsg);
		};
		
		$('.k-upload-files .k-file-success').remove();
	>
	
	quit ""
]]></Implementation>
</Method>

<Method name="renderOnErrorJS">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	&js<
		alert('#(..encodeForJavaScript(##class(shared.pCSP).out("There was a problem uploading your file")))#');
		$('.k-upload-files').remove();
	>
	quit ""
]]></Implementation>
</Method>

<Method name="renderASyncURL">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if ..objectID {
		&js<
			saveUrl: "#(##class(%CSP.Page).Link("fileUploader.csp?uploaderName="_..htmlName_"&uploadType="_..objectType_"&objectID="_..objectID))#"
		>
	}
	quit ""
]]></Implementation>
</Method>

<Method name="renderOnCompleteJS">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	&js<
	>
	quit ""
]]></Implementation>
</Method>

<Method name="renderOnUploadJS">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	&js<
	>
	
	quit ""
]]></Implementation>
</Method>

<Method name="renderOnProgressJS">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ""
]]></Implementation>
</Method>

<Method name="renderUploadingTemplate">
<Implementation><![CDATA[
	write "<script id='fileTemplate_"_..encodeForHTMLAttribute(..htmlName)_"' type='text/x-kendo-template'>",!
    write "  <div class='ef_frontend_file_upload_progress_container'>",!
    write "  	<div class='k-progress'>",!
    write "  	</div>",!
    write "  	<div class='ef_file_wrapper'>",!
    write "    		<span style='width:50%;' class='blackbold12px'>#=name# #=ef_uploader_show_file_size(size)#</span>",!
   	write "			<span style='width:50%; float:right;' class='blackbold12px' id='ef-kendo-uploader-processing'></span>",!
    write "  	</div>",!
    write "  </div>",!
    write "</script>",!
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.frontend.controls.uploaderWithFileList">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.frontend.controls.uploaderWithFileList.CLS/EV.5
;vc; Component: CLS.EF.ui.frontend.controls.uploaderWithFileList
;vc;  Location: SmallDev
;vc; Date/Time: 18-Jul-16 17:26
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.frontend.controls.uploaderWithFileList.CLS/EV.5</td><td>CLS.EF.ui.frontend.controls.uploaderWithFileList</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Jul-16 17:26</td><td>RajibQ</td></tr></table>
]]></Description>
<Super>uploader</Super>
<TimeChanged>64117,41312</TimeChanged>
<TimeCreated>63134,55396.007115</TimeCreated>

<Property name="fileList">
<Type>fileList</Type>
</Property>

<Method name="render">
<Description>
outputs the html and javascript required for a generic backeend image uploader. </Description>
<Implementation><![CDATA[
	do ##super()
	do ..fileList.render()
]]></Implementation>
</Method>

<Method name="renderOnSuccessJS">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	&js<
		if (e.response.status == 'ok') {
			$('.k-upload-status').remove();
			$('.k-upload-files').remove();
			var uploadedFileDiv='#(##class(EF.ui.frontend.controls.fileItem).getFileItemJS("e.response.fileItem"))#'
	 		$('##(..fileList.htmlID)#').append(uploadedFileDiv);
		} else {
			$('.k-upload-files').remove();
			alert(e.response.errorMsg)
		}
	>
	quit ""
]]></Implementation>
</Method>

<Method name="getFileUploaderForAbstractsFiles">
<ClassMethod>1</ClassMethod>
<FormalSpec>documentID,dateFormat,timeFormat</FormalSpec>
<ReturnType>uploaderWithFileList</ReturnType>
<Implementation><![CDATA[
	set fileUploader=..%New()
	set fileUploader.uploaderTitle=##class(shared.pCSP).out("Supporting Files")
	set fileUploader.htmlName="abstractUploader"
	set fileUploader.objectID=documentID
	set fileUploader.objectType="abstract.objFile"
	set fileUploader.fileList=##class(EF.ui.frontend.controls.fileList).%New()
	set fileUploader.fileList.htmlID="abstractFileUploads_"_documentID
	set fileUploader.fileList.fileItems=##class(abstract.objFile).getFileList(documentID,dateFormat,timeFormat)
	
	Return fileUploader
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.pageSections.abstractOverviewList">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.pageSections.abstractOverviewList.CLS/EV.3
;vc; Component: CLS.EF.ui.pageSections.abstractOverviewList
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.pageSections.abstractOverviewList.CLS/EV.3</td><td>CLS.EF.ui.pageSections.abstractOverviewList</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject,EF.htmlGenerator</Super>
<TimeChanged>63753,58204</TimeChanged>
<TimeCreated>63594,39123.318352</TimeCreated>

<Property name="sessionID">
<Type>%Integer</Type>
<Private>1</Private>
<Required>1</Required>
</Property>

<Property name="showPresentationTimes">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="isInPopup">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>sessionID</FormalSpec>
<ReturnType>EF.ui.pageSections.abstractOverviewList</ReturnType>
<Implementation><![CDATA[
	if 'sessionID throw ##class(shared.exceptions.generalException).%New("No sessionID")
	set abstractList=##class(EF.ui.pageSections.abstractOverviewList).%New()
	set abstractList.sessionID=sessionID
	
	return abstractList
]]></Implementation>
</Method>

<Method name="outputAllAbstractsRowsForSessionHTML">
<FormalSpec>extraClass="",colspan=1,openInPopupWindow=0</FormalSpec>
<Implementation><![CDATA[
	#dim documentTitle as %String=""
	#dim documentID as %Integer	
	
	set rsAbstracts=##class(%ResultSet).%New("abstract.objDocument:qAbstractsInSession")
	do rsAbstracts.Execute(..sessionID)
	while rsAbstracts.Next() {
		set documentID=rsAbstracts.Get("documentID")
		
		set objDocument=##class(abstract.objDocument).%OpenId(documentID)
				
		do objDocument.%Reload()
		
		set documentTitle=rsAbstracts.Get("title")
		if ##class(shared.callOuts).isCalloutInstalled("abstractTitle","tAbsDocument.csp") {
			set documentTitle=..rawHTML(documentTitle)
		} else {
			set documentTitle=..encodeForHTML(documentTitle)
		}		
		
		set presentationTimes=""
		if ..showPresentationTimes {
			set presentationTimes=##class(abstract.objDocument).getPresentationTimes(documentID)
		}
		set documentURL=##class(abstract.objDocument).getDocumentURL(documentID)
		if ..isInPopup=1 {
			set documentURL=documentURL_"&popup=1"	
		}
		
		write !,"<tr class='"_extraClass_"'>"
		write !,"	<td class='black10px  ef-abstract-time'>",..encodeHTMLContent(presentationTimes),"</td>"
		
		write !,"<td class='black10px ef-abstract-description' colspan=",colspan,">"
		
		set eventID=+objDocument.objTopic.objEvent
		if ##class(setup.objEventSetting).getParameter("abstracts","Show abstracts on the website",eventID) {
			set abstractNumber=objDocument.getAbstractNumber()
			If ($LENGTH($ZSTRIP(..encodeForHTML(abstractNumber),"<>WC"))) {
				write !," <span class=""ef-abstract-number"">("_..encodeForHTML(abstractNumber)_")</span> "
			}
		}
		
		if openInPopupWindow =1 {
			write !,"<a onclick='openInfo("""_..encodeHTMLAttribute(documentURL_"&supressBannerAndMenu=1")_""" );' href='javascript:void(0);'>",documentTitle,"</a></td>"
		}elseif openInPopupWindow=0 {
			write !,"	<a href='",..encodeHTMLAttribute(documentURL),"'>",documentTitle,"</a></td>"
		}
		write !,"</tr>"
		
		write !,"<tr class='"_extraClass_"'>"
		write !,"	<td class='black10px ef-author-name'></td>"
		
		write !,"	<td class='black10px  ef-author-name' colspan=",colspan,">"
		write !,"		",..rawHTML(##class(abstract.objDocument).getPresentingAuthorHTML(documentID))
		write !,"	</td>"
		write !,"</tr>"
		
		set objDocument=""
		kill objDocument
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.pageSections.basketContent">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.pageSections.basketContent.CLS/EV.23
;vc; Component: CLS.EF.ui.pageSections.basketContent
;vc;  Location: SmallDev
;vc; Date/Time: 23-Jun-16 11:05
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.pageSections.basketContent.CLS/EV.23</td><td>CLS.EF.ui.pageSections.basketContent</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Jun-16 11:05</td><td>AdrianM2</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<Super>shared.pCSP,EF.htmlGenerator</Super>
<TimeChanged>64092,40771.375173</TimeChanged>
<TimeCreated>63484,57634.758679</TimeCreated>

<Method name="renderBasket">
<Description>
renders the lines for the items, discounts, vats and totals that can be outputted in the basket or stored</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[xEventID,detailsID,xLangID,xDateFormat,sessionID,currencyID,&basketLines]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#define toggleBackground set backgroundColorToggle=backgroundColorToggle=0
	#define backgroundColour $S(backgroundColorToggle:"ef-row-odd",1:"ef-row-even")
	
	// accom v2.4 get all the bookings into an array so that we can group many basket items and show as one line:
	// - for example:
	// basketItem 1 = Hotel Islington Double Bedroom 1st Jan
	// basketItem 2 = Hotel Islington Double Bedroom 2nd Jan
	// basketItem 3 = Hotel Islington Double Bedroom 3rd Jan
	// basketItem 4 = Hotel Islington Single Bedroom 3rd Jan
	// - we will actually see:
	// basketItem 1 = Hotel Islington Double Bedroom 1st-3rd Jan
	// basketItem 4 = Hotel Islington Single Bedroom 3rd Jan
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	set ok=rs.Prepare(" SELECT * FROM accom.tempPersonBooking WHERE (active=1) AND (tempPerson->tempPurchase->sessionID=?) ORDER BY tempPerson ")
	set ok=rs.Execute(sessionID)
	while rs.Next()	{
		set tmpTempPersonBookingID=rs.Data("ID")
		// get the rooms for this booking line
		set rs2=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		do rs2.Prepare("SELECT * FROM accom.tempRoomTypeBooking WHERE (tempPersonBooking=?)")
		do rs2.Execute(tmpTempPersonBookingID)
		set startDate="",endDate="",roomTypeInstanceID=""
		while rs2.Next()	{
			// find the date range for this booking
			set roomDate=rs2.Data("roomDate")
			set numberOfPeople=rs2.Data("numberOfPeople")
			set roomTypeInstanceID=rs2.Data("roomTypeInstanceID")  // only need this once
			set basketItemID=rs2.Data("basketItemID")
			if startDate=""!(startDate>roomDate) set startDate=roomDate
			if endDate=""!(roomDate>endDate) set endDate=roomDate
	
			set roomData=##class(accom.objRoomTypeInstance).getVenueRoomAndDate(roomTypeInstanceID)
			set roomTypeDesc=$p(roomData,"|",2),hotelDesc=$p(roomData,"|",1)
			set roomBookings(basketItemID)=roomDate_"|"_roomTypeDesc_"|"_hotelDesc_"|"_numberOfPeople
		}
		// get the basket item (we only need one from all the rooms in this tempPersonBooking
		set roomData=##class(accom.objRoomTypeInstance).getVenueRoomAndDate(roomTypeInstanceID)
		set roomTypeDesc=$p(roomData,"|",2),hotelDesc=$p(roomData,"|",1)
		set roomBookings(basketItemID,tmpTempPersonBookingID)=startDate_"|"_endDate_"|"_roomTypeDesc_"|"_hotelDesc_"|"_numberOfPeople
	}
	
	/*
	THE new query allows for hotel bookings to be grouped together - and also duplicates the basket items if
	one basket item happens to be used for two hotel bookings (one person can book the same room for the same date 
	more than once). The accom logic in the loop later only shows one line for each tempPersonBooking.
	*/
	set xLine=0
	
	set isAwardsBooking=##class(eCom.tempPurchase).isAwardsBooking(sessionID)
	
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	if ##class(setup.objEvent).isAwardsEvent(xEventID) {
		set query="SELECT ID As tempBasketItemID,priceBeforeDiscounts AS subItemTotal,tempPerson, priceBeforeDiscounts,basketItemID,quantity AS quantity, isCancelled, priceDate,tempEntryID"
		set query=query_" FROM eCom.tempBasketItem "
		set query=query_" WHERE tempPurchase->sessionID = ? "
		set query=query_" ORDER BY ID "
	} else {
		set query="SELECT ID As tempBasketItemID,SUM(priceBeforeDiscounts) AS subItemTotal,tempPerson, priceBeforeDiscounts,basketItemID,SUM(quantity) AS quantity, isCancelled, priceDate"
		set query=query_" FROM eCom.tempBasketItem "
		set query=query_" WHERE tempPurchase->sessionID = ? "
		set query=query_" GROUP BY basketItemID,isCancelled,priceDate "
		set query=query_" ORDER BY ID "
	}
	set ok=rs.Prepare(query)
	do rs.Execute(sessionID)
	// used to work out whether to show the totals or not
	set objDetails=##class(setup.objEventDetails).%OpenId(detailsID)
	// Get the event VAT rate
	set purPriceDate=""
	&SQL(SELECT priceDate INTO :tmp FROM eCom.tempPurchase WHERE sessionID = :sessionID)
	if +SQLCODE=0 set purPriceDate=tmp
	if 'purPriceDate set purPriceDate=$ZTS
	
 	set vatTaxPoint=+##class(setup.objEvent).getCurrentLocalHorolog(xEventID)
 	if $D(%session) {
		// Save it into the session
		set vatTaxPoint=$G(%session.Data("eventsforce","frontend","vatTaxPointOverride"))
		if 'vatTaxPoint {
			set vatTaxPoint=$G(%session.Data("eventsforce","frontend","vatTaxPoint"))
		}
	} else {
		// If no session (bulk edit) 
		&SQL(SELECT purchaseID INTO :purchaseID FROM eCom.tempPurchase WHERE sessionID = :sessionID)
		if +SQLCODE=0 {
			set vatTaxPoint=##class(eCom.objPurchaseData).get(purchaseID,"calculatedVatTaxPoint")
			if 'vatTaxPoint {
				set vatTaxPoint=##class(eCom.objPurchaseData).get(purchaseID,"vatTaxPointOverride")
			}
		}
	}
	set eventVatRate=0,eventVatCode=""
 	if '##class(cod.objCondition).conditionMetForTempBooker("excludeVAT",sessionID,xEventID) {
		if ##class(eCom.objVatCode).isVatCodesEnabled() {
			set eventVatCodeID=##class(eCom.objVatCode).getDefaultEventVatCodeID(xEventID)
			&SQL(SELECT code INTO :tmp FROM eCom.objVatCode WHERE ID=:eventVatCodeID)
			if +SQLCODE=0 {
				set eventVatCode=tmp
				set eventVatRate=##class(eCom.objVatHistory).findCurrentRate(eventVatCodeID,vatTaxPoint)
			}
		} else {
			set eventVatRate=objDetails.objEvent.vat
		}
 	}
	
	set shownAtLeastOnePrice=0
	set showZeroValueItems=0
	if ##class(setup.objSetting).getParameter("basket","showZeroValueItems") set showZeroValueItems=1
	if ##class(setup.objEventSetting).getParameter("basket","showZeroValueItems",xEventID) set showZeroValueItems=1
	
	kill sortItems
	while rs.Next() {
		set basketItemID=rs.Get("basketItemID")
		set itemID=##class(setup.objItem).getItemID(basketItemID)
		set objItem=##class(setup.objItem).%OpenId(itemID)
		set accomBookingAmount=rs.Get("bookingAmount") // the total for a LINE = "islington double room 23rd-25th June" many basket items
		set numNights=rs.Get("numNights")
		set itemTotal=rs.Get("subItemTotal") // unformated
		set quantity=rs.Get("quantity")
		set itemPrice=rs.Get("priceBeforeDiscounts")
		set tempPersonBookingID=rs.Get("tempPerson")
		if quantity>1 set itemPrice=itemTotal/quantity
		set isCancelled=rs.Get("isCancelled")
		set priceDate=rs.Get("priceDate")
		if 'priceDate set priceDate=0
		set tempBasketItemID=rs.Get("tempBasketItemID")
		set vatRate=""
		if ##class(eCom.tempPurchase).hasAnyOverridingVAT(sessionID) {
			&SQL(SELECT percentage INTO :tmp
				FROM eCom.tempDiscount
				WHERE tempBasketItem = :tempBasketItemID
				AND overridingVAT=1
			)
			if +SQLCODE=0 {
				set vatRate=(tmp-1)*100
			}
		} else {
			set vatRate=eventVatRate	
		}
														
		set haveDiscounts=0
		set code=""
		if itemID set code=objItem.code
		if (code="eventGuestItem")!(code="eventDelegateItem")!(code="eventItem") set code=""
		set accomItem=0
		set tmpDate="",tmpTime=""
		set description=""
		set priceDateTimestamp=##class(shared.timeFunctions).convertHorologToTimestamp(priceDate)

		if ##class(eCom.objBasketItem).getBasketItemType(basketItemID)="award" {
			set description=##class(eCom.tempBasketItem).getAwardsDescription(tempBasketItemID) 
			
		} elseif ##class(eCom.objBasketItem).getBasketItemType(basketItemID)="accommodation" {  // is it an accommodation
			set accomItem=1
			set bookingData=roomBookings(basketItemID)
			set tmpDate=$P(bookingData,"|",1)
			set description=$P(bookingData,"|",3)_":"_$P(bookingData,"|",2)
			if ($P(bookingData,"|",4)=1) {
				set description=description_" "_##class(shared.pCSP).out("for {{{VAR01}}} person",,$P(bookingData,"|",4))
			} else {
				set description=description_" "_##class(shared.pCSP).out("for {{{VAR01}}} people",,$P(bookingData,"|",4))
			}
		} elseif "table,seat"[##class(eCom.objBasketItem).getBasketItemType(basketItemID) {  // is it an table booking
			if ##class(eCom.objBasketItem).getBasketItemType(basketItemID)="table" {
				set tableSize=""
				&SQL(SELECT description INTO :tableName FROM setup.objTable WHERE objBasketItem = :basketItemID)
				if +SQLCODE=0,tableName'?1.6N {
					set description = ##class(setup.objEventSetting).getParameter("table booking","basket line prefix",xEventID)_" "_tableName 
				} else {
					&SQL(SELECT tableSize INTO :tmp FROM eCom.objBasketitem WHERE ID = :basketItemID)
					if +SQLCODE=0 set tableSize=tmp
					set description=##class(shared.pCSP).out("Table for")_" "_tableSize
				}
			} else {
				set description=##class(shared.pCSP).out("Individual Seats")
			}
														
		} elseif ##class(eCom.objBasketItem).getBasketItemType(basketItemID)="quantityitem"	{
			// quantity booking item
			if ##class(setup.objSetting).getParameter("basket","show codItemName or proWebName")="codItemName" {
				set description=""
				set ticketID=##class(cod.objTicket).getTicketIDfromBasketItemID(basketItemID)
				&SQL(SELECT scCODitemID->objItemName->description INTO :tmp FROM cod.objTicket WHERE ID = :ticketID)
				if +SQLCODE=0 set description=tmp
			} else {
				set description=##class(cod.objTicket).getTicketDescription(basketItemID)
			}
		} else {
			// is it addtional items?
			if 'itemID {
				set extrasID=##class(cod.objAlternativeExtras).getExtrasIDfromBasketItemID(basketItemID)
				if +extrasID {
					//check if we want the codItemName or the proWeb version of it
					if ##class(setup.objSetting).getParameter("basket","show codItemName or proWebName")="codItemName" {
						&SQL(SELECT objItemAlternative->objItemName->description INTO :tmp1 FROM cod.objAlternativeExtras WHERE ID = :extrasID)
						&SQL(SELECT objItemAlternative->description INTO :tmp2 FROM cod.objAlternativeExtras WHERE ID = :extrasID)
						set description=tmp1_": "_tmp2
					} else {				
						set description=##class(cod.objAlternativeExtras).getFullDescription(extrasID,xLangID)
					}
				} 
			} else {
				// pick up the standard item description
				set description=##class(setup.objItemDetails).getDetails(itemID,xLangID)
				set isGuestItem=0	
				if objItem.objGuestBasketItem {  // add "guest" to description if desc doesn't already contain it
					if objItem.objGuestBasketItem.%Id()=basketItemID,$ZCVT(description,"U")'[##class(shared.pCSP).out("GUEST") {
						set description=description_" - "_##class(shared.pCSP).out("Guest")
						set isGuestItem=1
					}
				}
			
				// add the attendee description to the event item
				if ('isGuestItem)&&(objItem.code="eventItem") {
					#dim alternativeAttendeeDescription as %String = ##class(setup.objEventSetting).getParameter("frontend","delegate description",xEventID)
					if alternativeAttendeeDescription'="" {
						set description=description_": "_alternativeAttendeeDescription	
					} else {
						if '##class(setup.objEventSetting).getParameter("bookings","allow multi categories per booking",xEventID) {
							set eventCategoryID=##class(eCom.tempPurchase).getEventCategory(sessionID,tempPersonBookingID)
							set description=description_": "_##class(setup.objEventCategory).getDescription(eventCategoryID,xLangID)
						}
					} 
				}
			}
			
			// if accommodation booking, change the event description
			if ##class(setup.objEventSetting).getParameter("bookings","allow accommodation bookings",xEventID),basketItemID=objDetails.objEvent.objItem.objDelegateBasketItem.%Id() 	{
				set description=##class(shared.pCSP).out("Number of people registering")
			}
																
			set tmpDate=""
			if objItem {
				set tmpDate=objItem.objEvent.dateFrom+objItem.dayNumber-1
				
				// tmpTime only used for sorting sessions into time order
				set tmpTime=objItem.timeFrom
		
				// suppress the date for the event item an for day packages - Fred v 1.1.5
				if objItem.objSessionType.isSystem=1 set tmpDate="",tmpTime=""
			}
		}
		// get the currency for this item
		
		set tmpPrice=##class(eCom.objPrice).formatAmount(itemPrice,currencyID)
		set tmpTotal=##class(eCom.objPrice).formatAmount(itemTotal,currencyID)
		//
		// JAW 25MAY2004 - limit display of item line if value is zero itemTotal
		// showPrice = is the price for a line item displayed?
		// showTotals = are the total, vat, grand total displayed? Is ANY price has been shown, this is always shown
		set showPrice=0
		if itemTotal set showPrice=1
		if "table,seat"[##class(eCom.objBasketItem).getBasketItemType(basketItemID) set showPrice=1
		if showPrice set shownAtLeastOnePrice=1
		
		set showItem=0
		
		// suppress emtpy item unless setting
		if itemTotal set showItem=1
		if showZeroValueItems set showItem=1
		if "table,seat"[##class(eCom.objBasketItem).getBasketItemType(basketItemID) set showItem=1 
		if isAwardsBooking,rs.Get("type")="event",'itemTotal set showItem=0
		if tmpDate<=0 set tmpDate=" "
		if tmpTime<=0 set tmpTime=" "
		if description="" set description=" "
		if isCancelled set description=##class(shared.pCSP).out("Cancelled")_": "_description

		#dim lineItemTimestampHoro as %String
		set lineItemTimestampHoro=purPriceDate
		if ('isCancelled)&&(##class(eCom.objBasketItem).getBasketItemType(basketItemID)="award") { 
			if ##class(awards.tempEntry).isSubmitted(rs.Get("tempEntryID")) {
				set tempEntry=##class(awards.tempEntry).%OpenId(rs.Get("tempEntryID"))
				if $IsObject(tempEntry) {
					do tempEntry.%Reload()
					set lineItemTimestampHoro = ##class(shared.dateFunctions).timestampToHorolog(tempEntry.priceTimestamp)
				}
				kill tempEntry
			} else {
				set lineItemTimestampHoro=##class(shared.timeFunctions).getCurrentHorologUTC()	
			}
		}
		#dim lineItemDescription as %String = ##class(eCom.objPriceCurrency).getLineItemDescription(basketItemID,currencyID,lineItemTimestampHoro,isCancelled)
		set showDate=0
		if lineItemDescription'="" {
			set description = lineItemDescription
			
		} else {
			set showDate=1
		}
		// store the result into an array so that we can sort it correctly before outputting it
		// Strip HTML in index so it doesn't change the sorting order
		set tmpDescription=$E(##class(shared.stringFunctions).removeHTML(description),1,150)
		if tmpDescription="" set tmpDescription=" "
		
		set sortItems(isCancelled,accomItem,tmpDate,tmpTime,tmpDescription,basketItemID,+tempPersonBookingID,priceDate)=quantity_"|"_code_"|"_tmpPrice_"|"_tmpTotal_"|"_showPrice_"|"_$TR(description,"|","")_"|"_showItem_"|"_itemTotal_"|"_vatRate_"|"_rs.Get("tempEntryID")_"|"_showDate
	}
	// check whether zero value in same way as basket page
	&SQL(SELECT totalBeforeDiscounts INTO :tmp FROM eCom.tempPurchase WHERE sessionID = :sessionID)
	set isZeroValue=$S(+tmp=0:1,1:0)
	kill usedBasketItems,accomDiscount,totalVatPerCode
	set isCancelled="",backgroundColorToggle=1
	while $o(sortItems(isCancelled))'="" {
		set isCancelled=$o(sortItems(isCancelled))
		set accomItem=""
		while $o(sortItems(isCancelled,accomItem))'="" {
			set accomItem=$o(sortItems(isCancelled,accomItem))
			set tmpDate=""
			while $o(sortItems(isCancelled,accomItem,tmpDate))'="" {
				set tmpDate=$o(sortItems(isCancelled,accomItem,tmpDate))
				set tmpTime=""
				while $o(sortItems(isCancelled,accomItem,tmpDate,tmpTime))'="" {
					set tmpTime=$o(sortItems(isCancelled,accomItem,tmpDate,tmpTime))
					set tmpDescription=""
					set displayDate=$s(tmpDate=" ":"",1:##class(shared.dateFunctions).multiDate(tmpDate,xDateFormat))
					while $o(sortItems(isCancelled,accomItem,tmpDate,tmpTime,tmpDescription))'="" {
						set tmpDescription=$o(sortItems(isCancelled,accomItem,tmpDate,tmpTime,tmpDescription))
						set basketItemID=""
						while $o(sortItems(isCancelled,accomItem,tmpDate,tmpTime,tmpDescription,basketItemID))'="" {
							set basketItemID=$o(sortItems(isCancelled,accomItem,tmpDate,tmpTime,tmpDescription,basketItemID))
							set tempPersonBookingID=""
							while $o(sortItems(isCancelled,accomItem,tmpDate,tmpTime,tmpDescription,basketItemID,tempPersonBookingID))'="" {
								set tempPersonBookingID=$o(sortItems(isCancelled,accomItem,tmpDate,tmpTime,tmpDescription,basketItemID,tempPersonBookingID))
								set priceDate=""
								while $o(sortItems(isCancelled,accomItem,tmpDate,tmpTime,tmpDescription,basketItemID,tempPersonBookingID,priceDate))'="" {
									set priceDate=$o(sortItems(isCancelled,accomItem,tmpDate,tmpTime,tmpDescription,basketItemID,tempPersonBookingID,priceDate))
									set data=sortItems(isCancelled,accomItem,tmpDate,tmpTime,tmpDescription,basketItemID,tempPersonBookingID,priceDate)
									set quantity=$p(data,"|",1)
									set code=$p(data,"|",2)
									set tmpPrice=$p(data,"|",3)
									set tmpTotal=$p(data,"|",4)
									set showPrice=$p(data,"|",5)
									set description=$p(data,"|",6)
									set showItem=$p(data,"|",7)
									set vatRate=$p(data,"|",9)
									set loopTempEntryID=$p(data,"|",10)
									set showDate=$p(data,"|",11)
									if 'showDate {
										set displayDate=""	
									}
						
									if showItem	{
										$$$toggleBackground
										do ..addItemLine(.basketLines,data,displayDate,backgroundColorToggle)
				
										// Populate the copy of the receipt line
										set (extItemCode,extItemCode2)=""
										If (##class(setup.objSystemTypes).isModuleAllowed("External Item Codes")) {
											&SQL(SELECT extItemCode,extItemCode2 INTO :tmp,:tmp2 FROM eCom.objBasketItem WHERE ID=:basketItemID)
											if +SQLCODE=0 set extItemCode=tmp,extItemCode2=tmp2
										
											if extItemCode="" {
												// get default
												set extItemCodeDesc=##class(setup.objSetting).getParameter("basketItem","extItemCode")
												set extItemCode=##class(setup.objEventData).getDataFromDescription(xEventID,extItemCodeDesc)
											}
											if extItemCode2="" {
												// get default
												set extItemCode2Desc=##class(setup.objSetting).getParameter("basketItem","extItemCode2")
												set extItemCode2=##class(setup.objEventData).getDataFromDescription(xEventID,extItemCode2Desc)
											}
										}	
										//Add objbasketItem to tempReceiptLine,objReceiptLine and invoiceItem to aid reporting
										do ##class(eCom.tempReceiptLine).add(sessionID,"item",description,code,quantity,displayDate,$S(showPrice:tmpPrice,1:""),$S(showPrice:tmpTotal,1:""),extItemCode,extItemCode2,,vatRate,basketItemID)
									}
								
									//-- ============= item Discounts ==============-->
									set sqlStatement=##class(%SQL.Statement).%New()
									kill sqlParams
									set query="SELECT *,tempBasketItem->quantity,SUM(amount) AS totalAmount,COUNT(ID) AS discountCount,SUM(calculatedDiscount) As totalCalcDisc, SUM(tempBasketItem->quantity) As totalQuantity "
									set query=query_"FROM  eCom.tempDiscount "
									set query=query_"WHERE (tempBasketItem->basketItemID = ?) AND (tempBasketItem IN (SELECT ID FROM eCom.tempBasketItem WHERE  tempPurchase -> sessionID = ?)) AND (tempBasketItem->isCancelled = ?)"
									set sqlParams($I(sqlParams))=basketItemID
									set sqlParams($I(sqlParams))=sessionID
									set sqlParams($I(sqlParams))=isCancelled
									if priceDate {
										set query=query_" AND (tempBasketItem->priceDate = ? )"
										set sqlParams($I(sqlParams))=priceDate
									}
									if loopTempEntryID {
										// award entries are shown individually in the basket, so use the different tempEntryIDs to limit the discounts shown for that entry
										set query=query_" AND (tempBasketItem->tempEntryID = ?)"
										set sqlParams($I(sqlParams))=loopTempEntryID
									}
									set query=query_"GROUP BY tempBasketItem->basketItemID,discountHistoryID "
									set query=query_"ORDER BY percentage,ID "
									set sc=sqlStatement.%Prepare(query)
									set rs1=sqlStatement.%Execute(sqlParams...)
									while rs1.%Next() {
										set discountHistoryID=rs1.%Get("discountHistoryID")
										set amount=rs1.%Get("totalAmount")
										set percentage=rs1.%Get("percentage")
										set description=rs1.%Get("description")
										set quantity=rs1.%Get("quantity")
										set percentQualified=rs1.%Get("percentQualified")
										set totalCalcDisc=rs1.%Get("totalCalcDisc")
										set discountType=""
										&SQL(SELECT objDiscount->discountType INTO :tmp FROM eCom.objDiscountHistory WHERE ID = :discountHistoryID)
										if +SQLCODE=0 set discountType=tmp
										if percentQualified="" set percentQualified=1 // default to apply to all		
		
										set discountCount=rs1.%Get("discountCount")
										set unitAmount=rs1.%Get("amount") 
										set showDiscount=1
										// Show the calculated discount if percentage. Fred v 2.5
										if $L(percentage) {  // ADDED $L TO CATCH 0.00 == 100%
											set unitAmount=##class(eCom.objPrice).formatDiscount(amount,percentage,currencyID)
											// if it applies to a registration prompt then we need to show the number of people it has applied to
											if discountType'="codItem",discountType'="groupQuantity" set discountCount=""
											if discountType="individualQuantity" {
												set itemDiscount=##class(eCom.objPrice).formatAmount(-(rs1.%Get("calculatedDiscount")),currencyID)	
												if (rs1.%Get("calculatedDiscount"))<0 set itemDiscount="+"_itemDiscount																	
											} else {
												set itemDiscount=##class(eCom.objPrice).formatAmount(-(totalCalcDisc),currencyID)	
												if (totalCalcDisc)<0 set itemDiscount="+"_itemDiscount
											}
											// if no amount don't show the discount
											if 'totalCalcDisc set showDiscount=0
										} else {
											set amount=totalCalcDisc
											// The count for group quantities is the number of discount instances not the quantity in the basket line
											if $ZCVT(discountType,"L")'="groupquantity" {
												set discountCount=rs1.%Get("totalQuantity")	
											}
											
											set itemDiscount=##class(eCom.objPrice).formatDiscount(amount,percentage,currencyID)			
											if unitAmount {
											set unitAmount=##class(eCom.objPrice).formatAmount(unitAmount,currencyID) 
											}
										}
										
									
										if ##class(eCom.objVatCode).isVatCodesEnabled(),rs1.%Get("overridingVAT") {
											set vatCodeID=##class(eCom.objVatCode).getDefaultEventVatCodeID(xEventID)
											&SQL(SELECT objVatCode INTO :tmp FROM eCom.objBasketItem WHERE ID = :basketItemID)
											if +SQLCODE=0,tmp set vatCodeID=tmp
											if vatCodeID,totalCalcDisc {
												set totalVatPerCode(vatCodeID)=$G(totalVatPerCode(vatCodeID))-totalCalcDisc
										} else {
											set showDiscount = 0	
											}
											// always show if zero and parameter set
											if ##class(setup.objSetting).getParameter("VAT","Show zero VAT"),'accomItem,showItem set showDiscount=1
										}		
										
										
										if showDiscount {	
											// store VAT code totals
											// Add discountHistoryID parameter so discountID can be added to tempReceiptLine,objReceiptLine and invoiceItem to aid reporting
											do ..addDiscountLine(description,discountCount,unitAmount,itemDiscount,sessionID,.basketLines,rs1.%Get("overridingVAT"),vatRate,basketItemID,discountHistoryID,backgroundColorToggle)
										}
									}
								}
							}
						}
						
					}
				}
			}
		}
	}
	
	set (description,discountHistoryID)=""
	for {
		set description=$O(accomDiscount(description))
		if description="" quit
		for {
			set discountHistoryID=$O(accomDiscount(description,discountHistoryID))
			if discountHistoryID="" quit
			set amount=$P(accomDiscount(description,discountHistoryID),"|",1)
			set discountCount=$P(accomDiscount(description,discountHistoryID),"|",2)
			set unitAmount=$P(accomDiscount(description,discountHistoryID),"|",3)
			set itemDiscount=##class(eCom.objPrice).formatAmount(amount,currencyID)
			if amount>0 set itemDiscount="+"_itemDiscount
			// Add discountHistoryID parameter so discountID can be added to tempReceiptLine,objReceiptLine and invoiceItem to aid reporting
			do ..addDiscountLine(description,discountCount,unitAmount,itemDiscount,sessionID,.basketLines,,,,discountHistoryID)
		}
	}
	$$$toggleBackground
	set xLine=$ZPrevious(basketLines("")) 
	&SQL(SELECT totalBeforeDiscounts, totalAfterDiscounts, totalAfterVAT INTO :totalBeforeDiscounts, :totalAfterDiscounts, :totalAfterVAT FROM eCom.tempPurchase WHERE sessionID = :sessionID)
												
	//-- Basket Discounts EXCEPT payment method related ones -->
	set rs1=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	set query="SELECT *,discountHistoryID->objDiscount	FROM  eCom.tempDiscount	WHERE (tempPurchase->sessionID = ?) AND (discountHistoryID NOT IN (SELECT ID FROM eCom.objDiscountHistory WHERE objDiscount->discountType='payment method')) ORDER BY ID DESC"
	set ok=rs1.Prepare(query)
	do rs1.Execute(sessionID)
	while rs1.Next() {
		set discountID=rs1.Get("objDiscount")
		set amount=rs1.Get("amount")
		set percentage=rs1.Get("percentage")
		set description=rs1.Get("description")_": "
														
		set basketDiscount=##class(eCom.objPrice).formatDiscount(amount,percentage,currencyID)
														
		// if percenatge, move the percentage to the left col and show the calculated amount. Fred v 2.5
		if percentage {
			set description=description_$FN(-(1-percentage*100),"+")_"%"	
			set basketDiscount=##class(eCom.objPrice).formatAmount(-rs1.Get("calculatedDiscount"),currencyID)
			if rs1.Get("calculatedDiscount")<0 set basketDiscount="+"_basketDiscount
		}
		
		set basketLines($I(xLine))="					<tr class='"_$$$backgroundColour_" black10px'>"
		set basketLines($I(xLine))="						<td class='blackbold10px' height='30' colspan='3' align='right'>"_description_"</td>"
		set basketLines($I(xLine))="						<td class='black10px' height='30' align='right'>"_basketDiscount_"</td> "
		set basketLines($I(xLine))="					</tr>"
		// Populate the copy of the receipt line
		do ##class(eCom.tempReceiptLine).add(sessionID,"discount",description,,,,,basketDiscount,,,,eventVatRate,,discountID)
													
	}
	//-- Basket Discounts ONLY payment method related ones -->
	set rs1=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	set query="SELECT *	FROM  eCom.tempDiscount	WHERE (tempPurchase->sessionID = ?) AND (discountHistoryID IN (SELECT ID FROM eCom.objDiscountHistory WHERE objDiscount->discountType='payment method')) ORDER BY ID DESC"
	set ok=rs1.Prepare(query)
	do rs1.Execute(sessionID)
	set totalPaymentDiscount = 0, isPaymentDiscount =0
	while rs1.Next() {
		set isPaymentDiscount = 1
		set amount=rs1.Get("amount")
		set percentage=rs1.Get("percentage")
		set basketDiscount=amount
		// if percenatge, move the percentage to the left col and show the calculated amount. Fred v 2.5
		if percentage {
			set basketDiscount=(-rs1.Get("calculatedDiscount"))
		}
		set totalPaymentDiscount = totalPaymentDiscount + basketDiscount
	}	
	if isPaymentDiscount {
		set rs1=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		set query="SELECT *	FROM  eCom.tempDiscount	WHERE (tempPurchase->sessionID = ?) AND (discountHistoryID IN (SELECT ID FROM eCom.objDiscountHistory WHERE objDiscount->discountType='payment method')) ORDER BY ID DESC"
		set ok=rs1.Prepare(query)
		do rs1.Execute(sessionID)
		set tmpCounter = 0
		while rs1.Next() {
			if tmpCounter=0 {
				set tmpTotal=##class(eCom.objPrice).formatAmount((totalAfterDiscounts - totalPaymentDiscount),currencyID)
				set showTotals=1
				if shownAtLeastOnePrice=0&(+tmpTotal=0) set showTotals=0
				set overridingVAT=##class(eCom.tempPurchase).hasAnyOverridingVAT(sessionID)
				If showTotals {
					set basketLines($I(xLine))="						<tr class='"_$$$backgroundColour_"'>"
					set basketLines($I(xLine))="							<td class='blackbold10px' height='30' colspan='3' align='right'>"
																	
					if overridingVAT {
						set basketLines($I(xLine))=##class(shared.pCSP).out("Sub total (excluding VAT):")
					} else {
						set basketLines($I(xLine))=##class(shared.pCSP).out("Sub total:")
					}
					Set basketLines($I(xLine))="								</td>"
					set basketLines($I(xLine))="								<td class='black10px' height='30' align='right'>"_tmpTotal_"</td>" 
					set basketLines($I(xLine))="							</tr>"
				}
			}
			set tmpCounter = tmpCounter + 1		
			set amount=rs1.Get("amount")
			set percentage=rs1.Get("percentage")
			set description=rs1.Get("description")_": "
															
			set basketDiscount=##class(eCom.objPrice).formatDiscount(amount,percentage,currencyID)
															
			// if percenatge, move the percentage to the left col and show the calculated amount. Fred v 2.5
			if percentage {
				set description=description_$FN(-(1-percentage*100),"+")_"%"	
				set basketDiscount=##class(eCom.objPrice).formatAmount(-rs1.Get("calculatedDiscount"),currencyID)
				if rs1.Get("calculatedDiscount")<0 set basketDiscount="+"_basketDiscount
			}
			
			set basketLines($I(xLine))="					<tr class='"_$$$backgroundColour_" black10px'>"
			set basketLines($I(xLine))="						<td class='blackbold10px' height='30' colspan='3' align='right'>"_description_"</td>"
			set basketLines($I(xLine))="						<td class='black10px' height='30' align='right'>"_basketDiscount_"</td> "
			set basketLines($I(xLine))="					</tr>"
			// Populate the copy of the receipt line
			do ##class(eCom.tempReceiptLine).add(sessionID,"discount",description,,,,,basketDiscount,,,,eventVatRate)
														
		}
	}
	//- =========================== END ITEM/DISCOUNT LOOP ===============================-->
	set tmpTotal=##class(eCom.objPrice).formatAmount(totalAfterDiscounts,currencyID)
	set showTotals=1
	if shownAtLeastOnePrice=0&(+tmpTotal=0) set showTotals=0
	set overridingVAT=##class(eCom.tempPurchase).hasAnyOverridingVAT(sessionID)
	If showTotals {
		set basketLines($I(xLine))="						<tr class='"_$$$backgroundColour_"'>"
		set basketLines($I(xLine))="							<td class='blackbold10px' height='30' colspan='3' align='right'>"
														
		if overridingVAT {
			set basketLines($I(xLine))=##class(shared.pCSP).out("Total (excluding VAT)")_":"
		} else {
			set basketLines($I(xLine))=##class(shared.pCSP).out("Total")_":"
		}
		Set basketLines($I(xLine))="								</td>"
		set basketLines($I(xLine))="								<td class='black10px' height='30' align='right'>"_tmpTotal_"</td>" 
		set basketLines($I(xLine))="							</tr>"
		// Populate the copy of the receipt line
		Set tmpText=##class(shared.pCSP).out("Sub total:")
		if (overridingVAT) {
			Set tmpText=##class(shared.pCSP).out("Sub total (excluding VAT):")
		}
		do ##class(eCom.tempReceiptLine).add(sessionID,"subTotal",tmpText_" ",,,,,tmpTotal)
		
     	set vatRate=0,vatCode=""
     	if '##class(cod.objCondition).conditionMetForTempBooker("excludeVAT",sessionID,xEventID) {
			if ##class(eCom.objVatCode).isVatCodesEnabled() {
				set vatCodeID=##class(eCom.objVatCode).getDefaultEventVatCodeID(xEventID)
				&SQL(SELECT code INTO :tmp FROM eCom.objVatCode WHERE ID=:vatCodeID)
				if +SQLCODE=0 {
					set vatCode=tmp
					set vatRate=##class(eCom.objVatHistory).findCurrentRate(vatCodeID,vatTaxPoint)
				}
			} else {
				set vatRate=objDetails.objEvent.vat
			}
     	}
		
		set showOverride=0
		
		set (overridingPrice, overrideComment)=""
		&SQL(SELECT overridingPrice, overrideComment INTO :tmp,:tmp2 FROM eCom.tempPurchase WHERE sessionID = :sessionID)
		if +SQLCODE=0 SET overridingPrice=tmp, overrideComment=tmp2
		if overridingPrice'=$FN(totalAfterVAT,"",2),overridingPrice'="" {
			set showOverride=1
			// get the amount before VAT (totalAfterDiscounts)
			set totalAfterDiscounts=overridingPrice/((vatRate/100)+1)
			set totalAfterVAT=overridingPrice
			set tmpOverride=##class(eCom.objPrice).formatAmount(totalAfterDiscounts,currencyID)
			// overridingVAT should not be used for overridden prices
			set overridingVAT=0
		}
		if showOverride {
			set tmpDescription=##class(shared.pCSP).out("Overriding total")
			set basketLines($I(xLine))="							<tr class='"_$$$backgroundColour_"'>"
			set basketLines($I(xLine))="								<td class='blackbold10px' height='30' align='right' colspan=3>"_tmpDescription_":</td>"
			set basketLines($I(xLine))="								<td class='redbold10px' height='30' align='right'>"_tmpOverride_"</td>"
			set basketLines($I(xLine))="							</tr>"
			// Populate the copy of the receipt line
			do ##class(eCom.tempReceiptLine).add(sessionID,"override",tmpDescription_": ",,,,,tmpOverride)
		}
		
		set showVAT=0
		if totalAfterVAT'=totalAfterDiscounts set showVAT=1
		if overridingVAT set showVAT=1
										
		if showVAT {
			set tmpVAT=##class(eCom.objPrice).formatAmount(totalAfterVAT-totalAfterDiscounts,currencyID)
			set useVatCodes=##class(eCom.objVatCode).isVatCodesEnabled()
			if overridingVAT,useVatCodes,'##class(setup.objSetting).getParameter("basket","show single VAT total") {
				set vatCodeID=""
				for {
					set vatCodeID=$O(totalVatPerCode(vatCodeID))
					if vatCodeID="" quit
					set vatCode=""
					&SQL(SELECT code INTO :tmp FROM eCom.objVatCode WHERE ID = :vatCodeID)
					if +SQLCODE=0 set vatCode=tmp
					set vatPerCode=##class(eCom.objPrice).formatAmount(totalVatPerCode(vatCodeID),currencyID)
					set tmpRate=##class(eCom.objVatHistory).findCurrentRate(vatCodeID,vatTaxPoint)
					
					set basketLines($I(xLine))="						<tr class='"_$$$backgroundColour_"'>"
					set basketLines($I(xLine))="							<td class='blackbold10px' height='30' colspan='3' align='right'>"
					set tmpLine=##class(shared.pCSP).out("VAT")_": "_tmpRate_"%"
					if $l(vatCode) {
						set tmpLine=tmpLine_" ("_vatCode_")"
					}
					set basketLines($I(xLine))=tmpLine
					set basketLines($I(xLine))="							</td>"
					set basketLines($I(xLine))="							<td class='black10px' height='30' align='right'>"_vatPerCode_"</td> "
					set basketLines($I(xLine))="						</tr>"
					do ##class(eCom.tempReceiptLine).add(sessionID,"vat",tmpLine,,,,,vatPerCode)
				}
			} else {
				set basketLines($I(xLine))="						<tr class='"_$$$backgroundColour_"'>"
				set basketLines($I(xLine))="							<td class='blackbold10px' height='30' colspan='3' align='right'>"
				set unitPrice=""
				if overridingVAT {
					set tmpLine=##class(shared.pCSP).out("Total VAT")
					set basketLines($I(xLine))=tmpLine_":"
				} else {
					if ##class(setup.objSetting).getParameter("basket","show single VAT total") {
						// If this is price override, then we should show the VAT code, as it will not be anywhere else
						if showOverride,$l(vatCode) {
							set tmpLine=##class(shared.pCSP).out("VAT")_"("_vatCode_")"
							set basketLines($I(xLine))=tmpLine
							//needed for the CMPi invoicing
							set unitPrice="+"_vatRate_"%"
						} else {
							set tmpLine=##class(shared.pCSP).out("Total VAT")
							set basketLines($I(xLine))=tmpLine_":"
						}
					} else {
						set tempLineString = ##class(shared.pCSP).out("VAT")
						if $L(vatCode) set tempLineString=tempLineString_" ("_vatCode_")"
						set tempLineString=tempLineString_":"_vatRate_"%"
						set basketLines($I(xLine))=tempLineString
						set tmpLine=tempLineString
					}
				}
				set basketLines($I(xLine))="							</td>"
				set basketLines($I(xLine))="							<td class='black10px' height='30' align='right'>"_tmpVAT_"</td> "
				set basketLines($I(xLine))="						</tr>"	
	
				// Populate the copy of the receipt line
				do ##class(eCom.tempReceiptLine).add(sessionID,"vat",tmpLine,,,,unitPrice,tmpVAT)
			}
		}
		set tmpGrandTotal=##class(eCom.objPrice).formatAmount(totalAfterVAT,currencyID)
		set basketLines($I(xLine))="							<tr class='"_$$$backgroundColour_"'>"
		set basketLines($I(xLine))="								<td class='blackbold10px' colspan=3 height='30' align='right'>"_##class(shared.pCSP).out("Grand total:")_"</td>"
		set basketLines($I(xLine))="								<td class='blackbold10px' height='30' align='right'>"_tmpGrandTotal_"</td>"
		set basketLines($I(xLine))="							</tr>"
		// Populate the copy of the receipt line
		do ##class(eCom.tempReceiptLine).add(sessionID,"grandTotal",##class(shared.pCSP).out("Grand total:")_" ",,,,,tmpGrandTotal)
		set amountPaid=""
		&SQL(Select purchaseID INTO :purchaseID FROM eCom.tempPurchase WHERE sessionID = :sessionID)
		if +SQLCODE=0 {
			&SQL(SELECT amountPaid INTO :tmp FROM eCom.objPurchase WHERE ID = :purchaseID)
			if +SQLCODE=0 set amountPaid=tmp
		}
		set totalAfterVAT = $FNUMBER(totalAfterVAT,"",2)
		if amountPaid {
			if isAwardsBooking {
				set tmpAmountPaid=##class(eCom.objPrice).formatAmount(amountPaid,currencyID)
				set basketLines($I(xLine))="							<tr class='"_$$$backgroundColour_"'>"
				set basketLines($I(xLine))="								<td class='blackbold10px' colspan=3 height='30' align='right'>"_##class(shared.pCSP).out("Amount Paid")_":</td>"
				set basketLines($I(xLine))="								<td class='blackbold10px' height='30' align='right'>"_tmpAmountPaid_"</td>"
				set basketLines($I(xLine))="							</tr>"
			}
		}
		set tmpOutstanding=##class(eCom.objPrice).formatAmount(totalAfterVAT-amountPaid,currencyID)
		set basketLines($I(xLine))="							<tr class='"_$$$backgroundColour_"'>"
		set basketLines($I(xLine))="								<td class='blackbold10px' colspan=3 height='30' align='right'>"_##class(shared.pCSP).out("Outstanding")_":</td>"
		set basketLines($I(xLine))="								<td class='blackbold10px' height='30' align='right'>"_tmpOutstanding_"</td>"
		set basketLines($I(xLine))="							</tr>"
	}
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// output a item line 

]]></Content>
</UDLText>

<Method name="addItemLine">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&basketLines,data,sessionDate,backgroundColorToggle]]></FormalSpec>
<Implementation><![CDATA[
	#define backgroundColour $S(backgroundColorToggle:"ef-row-odd",1:"ef-row-even")
	set xLine=$ZPrevious(basketLines(""))
	
	set quantity=$p(data,"|",1)
	set unitPrice=$p(data,"|",3)
	set lineTotal=$p(data,"|",4)
	set showPrice=$p(data,"|",5)
	set description=$p(data,"|",6)
	
	set basketLines($I(xLine))="		<tr class='"_$$$backgroundColour_" grey'>"
	set basketLines($I(xLine))="			<td class='ef-basket-item black10px'>"_description
	if $l(sessionDate) {
		set basketLines($I(xLine))="<span class='ef-basket-item-date'>"_sessionDate_"</span>"
	}
	set basketLines($I(xLine))="            </td>"
	set basketLines($I(xLine))="			<td class='black10px' align='center'>"_quantity_"</td>"
	set basketLines($I(xLine))="			<td class='black10px' align='right'>"
	if showPrice {
		set basketLines($I(xLine))=unitPrice
	}
	set basketLines($I(xLine))="			</td>"
	set basketLines($I(xLine))="			<td class='black10px' align='right'>"
		if showPrice {
		set basketLines($I(xLine))=lineTotal
	}
	set basketLines($I(xLine))="			</td>"
	set basketLines($I(xLine))="		</tr>"
]]></Implementation>
</Method>

<Method name="addDiscountLine">
<Description>
Create the HTML for a discount line and add to tempReceiptLine
Add discountHistoryID parameter so discountID can be added to tempReceiptLine,objReceiptLine and invoiceItem to aid reporting</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[description,discountCount,unitAmount,itemDiscount,sessionID,&basketLines,isOverridingVAT,vatRate,basketItemID="",discountHistoryID="",backgroundColorToggle]]></FormalSpec>
<Implementation><![CDATA[
	set xLine=$ZPrevious(basketLines(""))
	set basketLines($I(xLine))="		<tr class='"_$S(backgroundColorToggle:"ef-row-odd",1:"ef-row-even")_" yellow'>"
	set basketLines($I(xLine))="			<td class='ef-item-discount black10px'>"
	if description["VAT" {
	set tmpType=""
		set basketLines($I(xLine))=description
	} elseif $E(unitAmount)'="-" {
		set tmpType=##class(shared.pCSP).out("Surcharge")_": "
		set basketLines($I(xLine))=##class(shared.pCSP).out("Surcharge")_": "_description
	} else {
		set tmpType=##class(shared.pCSP).out("Discount")_": "
		set basketLines($I(xLine))=##class(shared.pCSP).out("Discount")_": "_description
	}
	set basketLines($I(xLine))="			</td>"
	set basketLines($I(xLine))="			<td class='black10px' align='center' class='black10px'>"_discountCount_"</td>"
	set basketLines($I(xLine))="			<td class='black10px' align='right' class='black10px'>"_unitAmount_"</td>"
	set basketLines($I(xLine))="			<td class='black10px' align='right'>"_itemDiscount_"</td>"
	set basketLines($I(xLine))="		</tr>"	
	// Populate the copy of the receipt line
	if isOverridingVAT set vatRate=""
	// Add discountID parameter so discountID can be added to tempReceiptLine,objReceiptLine and invoiceItem to aid reporting		
	set discountID=""
	&SQL(SELECT objDiscount INTO :tmp
		FROM eCom.objDiscountHistory
		WHERE ID = :discountHistoryID
	)
	if +SQLCODE=0 {
		set discountID=tmp	
	}
	do ##class(eCom.tempReceiptLine).add(sessionID,"discount",tmpType_description,,discountCount,,unitAmount,itemDiscount,,,isOverridingVAT,vatRate,basketItemID,discountID)
]]></Implementation>
</Method>

<Method name="renderGotoRegPageSelectorHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>contextData:EF.contextDataRegistration,bookerOrAttendee</FormalSpec>
<Implementation><![CDATA[
	#dim tmpDisplayOrder as %String =""
	#dim attendeeCategoryID as %Integer =##class(eCom.tempPurchase).getEventCategory(contextData.sessionID,contextData.tempPersonID)
	
	do ##class(setup.lnkCategoryEvent).getAllRegPages(contextData.eventID,contextData.languageID,contextData.isBackendBooking,.allRegPages,.allRegPageIDs) 

	if bookerOrAttendee="booker" {
		&HTML<	
			<select name="gotoRegPage" class="black9px ef_element ef_element_dropdown EF_inputBox ef-select-on-change-redirect" size=1  data-link-url="#(..encodeForHTMLAttribute(..Link("editBooker.csp")))#" data-redirect-param-name="gotoPageID">
		>
	} elseif bookerOrAttendee="attendee" {
		&HTML<	
			<select name="gotoRegPage" class="black9px ef_element ef_element_dropdown EF_inputBox ef-select-on-change-redirect" size=1  data-link-url="#(..encodeForHTMLAttribute(..Link("editDelegate.csp?tempPersonID="_contextData.tempPersonID)))#" data-redirect-param-name="gotoPageID">	
		>
	}
	&HTML<<option><tx>--Please select--</tx></option>>
	for  {
		set tmpDisplayOrder=$O(allRegPages(attendeeCategoryID,tmpDisplayOrder))
		if tmpDisplayOrder="" quit
		
		set tmpPageID=allRegPages(attendeeCategoryID,tmpDisplayOrder)
		set desc=##class(setup.lnkCategoryEvent).getPageDescription(contextData.eventID,attendeeCategoryID,tmpPageID)
		&HTML<
			<option value="#(..encodeForHTMLAttribute(tmpPageID))#">#(..encodeForHTML(desc))#</option>
		>
	}
	&HTML<</select>>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.pageSections.dailyAgendaGridViewAbstractList">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.pageSections.dailyAgendaGridViewAbstractList.CLS/EV.3
;vc; Component: CLS.EF.ui.pageSections.dailyAgendaGridViewAbstractList
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.pageSections.dailyAgendaGridViewAbstractList.CLS/EV.3</td><td>CLS.EF.ui.pageSections.dailyAgendaGridViewAbstractList</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject,EF.htmlGenerator</Super>
<TimeChanged>63748,52358</TimeChanged>
<TimeCreated>63594,38345.587538</TimeCreated>

<Property name="eventID">
<Type>%Integer</Type>
<Private>1</Private>
<Required>1</Required>
</Property>

<Property name="sessionID">
<Type>%Integer</Type>
<Private>1</Private>
<Required>1</Required>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>sessionID</FormalSpec>
<ReturnType>EF.ui.pageSections.dailyAgendaGridViewAbstractList</ReturnType>
<Implementation><![CDATA[
	if 'sessionID throw ##class(shared.exceptions.generalException).%New("No sessionID")
	set abstractList=..%New()
	set abstractList.eventID=##class(setup.objItem).getEventIDFromSessionID(sessionID)
	set abstractList.sessionID=sessionID
	
	return abstractList
]]></Implementation>
</Method>

<Method name="getAbstractRowsHTML">
<FormalSpec>openInPopupWindow=0</FormalSpec>
<Implementation><![CDATA[
	#dim result as %String=""
	#dim documentTitle as %String=""
	#dim documentID as %Integer
	#dim documentURL as %String
	
	set rsAbstracts=##class(%ResultSet).%New("abstract.objDocument:qAbstractsInSession")
	do rsAbstracts.Execute(..sessionID)
	while rsAbstracts.Next() {
		set documentID=rsAbstracts.Get("documentID")
		
		set documentTitle=rsAbstracts.Get("title")
		if ##class(shared.callOuts).isCalloutInstalled("abstractTitle","tAbsDocument.csp") {
			set documentTitle=..rawHTML(documentTitle)
		} else {
			set documentTitle=..encodeForHTML(documentTitle)
		}
		
		set documentURL=..encodeURL(##class(abstract.objDocument).getDocumentURL(documentID))
		set result=result_"<div class='ef-session-details-sub-row'>"
		if openInPopupWindow=1 {
			set result=result_"<a onclick='openInfo("""_..encodeHTMLAttribute(documentURL_"&supressBannerAndMenu=1")_""" );' href='javascript:void(0);'>"_documentTitle_"</a></div>"
		} elseif openInPopupWindow=0 {
			set result=result_"<a href='"_documentURL_"'>"_documentTitle_"</a></div>"
		}
		set result=result_"<div class='ef-author-name'>"_..rawHTML(##class(abstract.objDocument).getPresentingAuthorHTML(documentID))_"</div>"
	}	
	return result
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.pageSections.frontendAddressBlock">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.pageSections.frontendAddressBlock.CLS/EV.1
;vc; Component: CLS.EF.ui.pageSections.frontendAddressBlock
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.pageSections.frontendAddressBlock.CLS/EV.1</td><td>CLS.EF.ui.pageSections.frontendAddressBlock</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<Super>%RegisteredObject</Super>
<TimeChanged>63755,61155</TimeChanged>
<TimeCreated>63664,36358.552368</TimeCreated>

<Property name="eventID">
<Type>%Integer</Type>
<Private>1</Private>
<Required>1</Required>
</Property>

<Property name="languageID">
<Type>%Integer</Type>
<InitialExpression>"1"</InitialExpression>
<Private>1</Private>
<Required>1</Required>
</Property>

<Property name="arrayOfDatabaseItems">
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
<Private>1</Private>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>contextData:EF.contextData</FormalSpec>
<ReturnType>EF.ui.pageSections.frontendAddressBlock</ReturnType>
<Implementation><![CDATA[
	set addressBlock=..%New()
	set addressBlock.eventID=contextData.eventID
	set addressBlock.languageID=contextData.languageID
	return addressBlock
]]></Implementation>
</Method>

<Method name="getListOfApplicableDatabaseItems">
<Private>1</Private>
<Implementation><![CDATA[
	#dim databaseItems as %List = ##class(cod.objItemName).getListOfFrontendAddressItems()
	#dim databaseItem as %String
	#dim count as %Integer
	
	for count=1:1:$ListLength(databaseItems) {
		set databaseItem=$ListGet(databaseItems,count)
		if ##class(setup.objEventSetting).getParameter("show address details in basket/receipt",databaseItem,..eventID) {
			set ..arrayOfDatabaseItems(count)=databaseItem
		}
	}
]]></Implementation>
</Method>

<Method name="outputAddressBlockHTML">
<Implementation><![CDATA[
	#dim databaseItem as %String
	#dim data as %String
	#dim classname as %String
	#dim count as %String=""
	
	do ..getListOfApplicableDatabaseItems()
	
	write !,"<div class='ef-address-block'>"
	for  {
		set count=$O(..arrayOfDatabaseItems(count))
		if count="" quit
		set databaseItem=..arrayOfDatabaseItems(count)
		
		set data=..getData(databaseItem)
		if data'="" {
			set classname="ef-registration-contact-"_$ZSTRIP($ZCVT(databaseItem,"L"),"*W")
			&html<
				<span class="#(##class(EF.htmlGenerator).encodeForHTMLAttribute(classname))#">
				#(##class(EF.htmlGenerator).encodeForHTML(data))#
				</span>
				<BR>
			>
		}	
	}				
	write !,"</div>"
]]></Implementation>
</Method>

<Method name="getData">
<FormalSpec>databaseItem</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// stub method - implented by child classes
	throw ##class(shared.exceptions.generalException).%New("Not implemented")
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.pageSections.frontendAddressBlockBasket">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.pageSections.frontendAddressBlockBasket.CLS/EV.3
;vc; Component: CLS.EF.ui.pageSections.frontendAddressBlockBasket
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.pageSections.frontendAddressBlockBasket.CLS/EV.3</td><td>CLS.EF.ui.pageSections.frontendAddressBlockBasket</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.pageSections.frontendAddressBlock</Super>
<TimeChanged>63755,61193</TimeChanged>
<TimeCreated>63664,36632.872933</TimeCreated>

<Property name="tempPersonID">
<Type>%Integer</Type>
<Private>1</Private>
<Required>1</Required>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>contextData:EF.contextData</FormalSpec>
<ReturnType>EF.ui.pageSections.frontendAddressBlock</ReturnType>
<Implementation><![CDATA[
 
	#dim tempPersonID as %Integer
	
	set tempPersonID=##class(eCom.tempPerson).getBookerIDfromTempPurchaseID(contextData.tempPurchaseID)
	set addressBlock=##super(contextData)
	set addressBlock.tempPersonID=tempPersonID	
	return addressBlock
]]></Implementation>
</Method>

<Method name="getData">
<FormalSpec>databaseItem</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if ..tempPersonID {
		return ##class(eCom.tempCodData).get(..tempPersonID,databaseItem)	
	} else {
		return ""
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.pageSections.frontendAddressBlockReceipt">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.pageSections.frontendAddressBlockReceipt.CLS/EV.1
;vc; Component: CLS.EF.ui.pageSections.frontendAddressBlockReceipt
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.pageSections.frontendAddressBlockReceipt.CLS/EV.1</td><td>CLS.EF.ui.pageSections.frontendAddressBlockReceipt</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.pageSections.frontendAddressBlock</Super>
<TimeChanged>63755,62353</TimeChanged>
<TimeCreated>63664,36621.247706</TimeCreated>

<Property name="personID">
<Type>%Integer</Type>
<Private>1</Private>
<Required>1</Required>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>contextData:EF.contextData,personID</FormalSpec>
<ReturnType>EF.ui.pageSections.frontendAddressBlock</ReturnType>
<Implementation><![CDATA[
	if 'personID {
		throw ##class(shared.exceptions.generalException).%New("No personID")
	}	
	set addressBlock=##super(contextData)
	set addressBlock.personID=personID	
	return addressBlock
]]></Implementation>
</Method>

<Method name="getData">
<FormalSpec>databaseItem</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ##class(cod.objItemData).get(..personID,databaseItem)
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.pageSections.frontendMeetingDetails">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.pageSections.frontendMeetingDetails.CLS/EV.0
;vc; Component: CLS.EF.ui.pageSections.frontendMeetingDetails
;vc;  Location: SmallDev
;vc; Date/Time: 07-Jun-16 12:39
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.pageSections.frontendMeetingDetails.CLS/EV.0</td><td>CLS.EF.ui.pageSections.frontendMeetingDetails</td><td>SmallDev</td><td style='white-space: nowrap;'>07-Jun-16 12:39</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject,EF.htmlGenerator</Super>
<TimeChanged>64048,38673</TimeChanged>
<TimeCreated>64043,46044.539068</TimeCreated>

<Property name="day">
<Type>%String</Type>
</Property>

<Property name="time">
<Type>%String</Type>
</Property>

<Property name="meetingName">
<Type>%String</Type>
</Property>

<Property name="attendeeCategory">
<Type>%String</Type>
</Property>

<Property name="validStatuses">
<Type>%String</Type>
</Property>

<Property name="attendees">
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="isOpenMeeting">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="languageID">
<Type>%Integer</Type>
</Property>

<Method name="setAttendeesForMeeting">
<FormalSpec><![CDATA[meetingID,diaryID,&attendeeCount]]></FormalSpec>
<Implementation><![CDATA[
	set attendeeCount=0
	set isOwner=##class(meetMan.objMeeting).isOwner(meetingID,diaryID)
	if isOwner {
		set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		do rs.Prepare("SELECT status,objDiary->objPerson FROM meetman.lnkMeetingDiary WHERE objMeeting = ? AND objDiary <> ?")
		do rs.Execute(meetingID,diaryID)
		while rs.Next() {
			set tmpPersonID=rs.Get("objPerson")
			set attendees(rs.Get("status"),tmpPersonID)=..getDescriptionForPersonID(tmpPersonID)
			if (rs.Get("status")="Meeting Booked")!(rs.Get("status")="Meeting Requested")!(rs.Get("status")="Meeting Pending") {
				set attendeeCount=attendeeCount+1	
			}
		}
	} else {
		&SQL(SELECT objDiary->objPerson INTO :tmpPersonID
			FROM meetMan.lnkMeetingDiary
			WHERE objMeeting=:meetingID
			AND objDiary = objMeeting->ownerDiaryID
		)
		if +SQLCODE=0 {
			&SQL(SELECT status INTO :tmp2
				FROM meetMan.lnkMeetingDiary
				WHERE objMeeting=:meetingID
				AND objDiary = :diaryID
			)
			if +SQLCODE=0 {
				if tmp2="Meeting Pending" set tmp2="Meeting Requested"
				
				set attendees(tmp2,tmpPersonID)=..getDescriptionForPersonID(tmpPersonID)
				if (tmp2="Meeting Booked")!(tmp2="Meeting Requested")!(tmp2="Meeting Pending") {
					set attendeeCount=attendeeCount+1	
				}
			}
		}
	}
	merge ..attendees=attendees
]]></Implementation>
</Method>

<Method name="getDescriptionForPersonID">
<ClassMethod>1</ClassMethod>
<FormalSpec>personID</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set description=##class(cod.objItemData).get(personID,"firstname")_" "_##class(cod.objItemData).get(personID,"lastname")
	set company=##class(cod.objItemData).get(personID,"company")
	if $l(company) {
		set tmpDesc=description_", "_company
	}
	
	return description
]]></Implementation>
</Method>

<Method name="render">
<Implementation><![CDATA[
	set xLangID=..languageID
	&html<
	<table class="ef-info-table" width="100%">
		<tr>
			<td class="blackbold10px ef_proweb_form_prompt">
				#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("Day:",xLangID)))#
			</td>
			<td class="black10px" align="left">
				#(..encodeForHTML(..day))#
			</td>
		</tr>
		<tr>
			<td class="blackbold10px ef_proweb_form_prompt">
				#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("Time:",xLangID)))#
			</td>
			<td class="black10px" align="left">
				#(..encodeForHTML(..time))#
			</td>
		</tr>
	>
	if ..isOpenMeeting {
		&html<
			<tr>
				<td class="blackbold10px ef_proweb_form_prompt">
					#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("Meeting name:",xLangID)))#
				</td>
				<td class="black10px" align="left">
					#(..encodeForHTML(..meetingName))#
				</td>
			</tr>
		>
		if $l(..attendeeCategory) {
			&html<
				<tr>
					<td class="blackbold10px ef_proweb_form_prompt">
						#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("Restricted to attendee category:",xLangID)))#
					</td>
					<td class="black10px" align="left">
						#(..encodeForHTML(..attendeeCategory))#
					</td>
				</tr>
			>
		}
	}
	
	merge attendees=..attendees
	
	set ind=0
	set attendeeCount=1
	set personCount=0
	set statuses="Meeting Booked|Meeting Requested|Meeting Pending|Meeting Cancelled|Meeting Declined"
	
	while ($l($P(statuses,"|",$I(ind)))) {
		set status=$P(statuses,"|",ind)
		set attendeePersonID=""
		while $o(attendees(status,attendeePersonID)) {
			set attendeePersonID=$o(attendees(status,attendeePersonID))
			set description=attendees(status,attendeePersonID)
			if ind<=3 set attendeeCount=attendeeCount+1
			set personCount=personCount+1
			&html<
			<tr>
				<td class="blackbold10px ef_proweb_form_prompt" align="left">
			>
			if personCount=1 {
				write ..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("Meeting with:",xLangID))
			}
			&html<
				</td>
				<td class="black10px" align="left">
					#(..encodeForHTML(description))#
				<td>
			>
			if '..isOpenMeeting {
				if ind=1 {
					&html<<td class="black10px" align="left">#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("Confirmed",xLangID)))#</td>>
				} elseif ind=2 {
					&html<<td class="red9px" align="left">#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("Awaiting your response",xLangID)))#</td>>
				} elseif ind=3 {
					&html<<td class="red9px" align="left">#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("Awaiting a decision",xLangID)))#</td>>
				} elseif ind=4 {
					&html<<td class="red9px" align="left">#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("Cancelled",xLangID)))#</td>>
				} else {
					&html<<td class="red9px" align="left">#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("Declined",xLangID)))#</td>>
				}
			}
		}
	}
	if (('attendeeCount)&..isOpenMeeting) {
		&html<
			<tr>
				<td class="blackbold10px" align="left">
					#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("Meeting with:",xLangID)))#
				</td>
				<td class="black10px" align="left">
					#(..encodeForHTML(##class(translations.objPhraseWebsite).translatePhrase("No attendees have booked",xLangID)))#
				<td>
			</tr>
		>
	}
	&html<</table>>
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.pageSections.sessionDetailsListView">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.pageSections.sessionDetailsListView.CLS/EV.6
;vc; Component: CLS.EF.ui.pageSections.sessionDetailsListView
;vc;  Location: SmallDev
;vc; Date/Time: 22-Apr-16 16:43
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.pageSections.sessionDetailsListView.CLS/EV.6</td><td>CLS.EF.ui.pageSections.sessionDetailsListView</td><td>SmallDev</td><td style='white-space: nowrap;'>22-Apr-16 16:43</td><td>RajibQ</td></tr></table>
]]></Description>
<Super>%RegisteredObject,EF.htmlGenerator</Super>
<TimeChanged>64030,61809.834524</TimeChanged>
<TimeCreated>63589,44386.130181</TimeCreated>

<Property name="sessionID">
<Type>%Integer</Type>
<Private>1</Private>
<Required>1</Required>
</Property>

<Property name="languageID">
<Type>%Integer</Type>
<Private>1</Private>
<Required>1</Required>
</Property>

<Property name="eventID">
<Type>%Integer</Type>
<Private>1</Private>
<Required>1</Required>
</Property>

<Property name="objSession">
<Type>setup.objItem</Type>
<Private>1</Private>
<Required>1</Required>
</Property>

<Property name="isAgendaOrRegistration">
<Type>%String</Type>
<Private>1</Private>
<Required>1</Required>
</Property>

<Property name="orderingMode">
<Type>%String</Type>
<Private>1</Private>
<Required>1</Required>
<Parameter name="VALUELIST" value=",&quot;order by location&quot; ,&quot;order by date&quot;"/>
</Property>

<Property name="isBackendBooking">
<Type>%Boolean</Type>
<InitialExpression>"0"</InitialExpression>
<Private>1</Private>
</Property>

<Property name="contextData">
<Type>EF.contextData</Type>
<Private>1</Private>
<Required>1</Required>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>sessionID="",contextData:EF.contextData</FormalSpec>
<ReturnType>EF.ui.pageSections.sessionDetailsListView</ReturnType>
<Implementation><![CDATA[
	#dim tempPurchaseID as %Integer 
	if 'sessionID throw ##class(shared.exceptions.generalException).%New("No sessionID")
	if 'contextData.languageID throw ##class(shared.exceptions.generalException).%New("No langID")
	if (contextData.context'="agenda") && ( contextData.context'="registration") throw ##class(shared.exceptions.generalException).%New("Incorrect isAgendaOrRegistration")
	
	set sessionDetails=..%New()
	set sessionDetails.languageID=contextData.languageID 
	set sessionDetails.eventID=contextData.eventID
	set sessionDetails.sessionID=sessionID
	set sessionDetails.objSession=##class(setup.objItem).%OpenId(sessionID)
	if contextData.context="registration" {
		set sessionDetails.isAgendaOrRegistration="register"
		set sessionDetails.isBackendBooking=+contextData.isBackendBooking
	} else {
		set sessionDetails.isAgendaOrRegistration="agenda"
	}
	
	if ##class(setup.objEventSetting).getParameter("daily agenda","order by date",sessionDetails.eventID) {
		set sessionDetails.orderingMode="order by date"
	} else {
		set sessionDetails.orderingMode="order by location"
	}
	
	set sessionDetails.contextData=contextData
	return sessionDetails
]]></Implementation>
</Method>

<Method name="outputSessionDetailsHTML">
<FormalSpec>isOddRow=1</FormalSpec>
<Implementation><![CDATA[
	#dim tagTR as %String
	#dim backgroundClass as %String
	#dim rowClasses as %String=""
	#dim orderedByDate as %Boolean
	#dim colspan as %Integer = 1
		 
	set (rowClasses,backgroundClass)=$S(isOddRow:"grey ef-row-odd",1:"yellow ef-row-even")
	if ..showSessionNamesAsIfWithAbstracts(..sessionID) {
		set rowClasses=rowClasses_" ef-session-name-with-abstracts"	
	}
	
	set description=##class(setup.objItemDetails).getDetails(..sessionID,..languageID)
	set location=##class(setup.objLocationDetails).getDetails(..objSession.objLocation.%Id(),..languageID)
	set sessionType=##class(setup.objSessionType).getDetails(..objSession.objSessionType.%Id())
	set orderedByDate=##class(setup.objEventSetting).getParameter("daily agenda","order by date",..eventID)
	
	set tagTR="<tr class='"_rowClasses_"'>"	
	write !,tagTR
	do ..outputSessionTimesHTML()
	write !,"<td class='black10px ef-session-name'>"
		if ..objSession.objIcon'="" {
			write !,"	<img src='shared.StreamServer.cls?STREAMOID=",##class(shared.pCSP).encodeURL(##class(shared.pCSP).Encrypt(..objSession.objIcon.imgFileStream.GetStreamId())),"' border=0>"
		}
		if ##class(setup.objItem).showLinkToSessionDetailsPage(..sessionID,..languageID) {
			do ..outputSessionLinkHTML()
		} else {
			write !,##class(EF.htmlGenerator).encodeHTMLContent(description)
		}
	write !,"</td>"
	if orderedByDate {
		write !,"<td class='black10px  ef-session-location'>"
		if '..objSession.spanAllLocations {
			write ##class(EF.htmlGenerator).encodeHTMLContent(location)
		}
		write !,"</td>"
	}
]]></Implementation>
</Method>

<Method name="outputSessionAbstracts">
<FormalSpec>isOddRow=1</FormalSpec>
<Implementation><![CDATA[
	#dim backgroundClass as %String = $S(isOddRow:"grey ef-row-odd",1:"yellow ef-row-even")
	#dim openInPopupWindow as %Boolean 
	if ..isAgendaOrRegistration="register" { // JS popup
		set openInPopupWindow=1
	} elseif ..isAgendaOrRegistration="agenda" { // same window
		set openInPopupWindow=0
	}	
	
	if ##class(setup.objEventSetting).getParameter("abstracts","Show abstracts on the website",..eventID) {
		if ..objSession.hasAnyAbstractsToShow() {
			set colspan=20
			do ..outputChairHTML(backgroundClass,colspan)
			
			set abstractList=##class(EF.ui.pageSections.abstractOverviewList).createNew(..sessionID)
			do abstractList.outputAllAbstractsRowsForSessionHTML(backgroundClass,colspan,openInPopupWindow)
		}
	}
]]></Implementation>
</Method>

<Method name="outputSessionTimesHTML">
<Private>1</Private>
<Implementation><![CDATA[
	set suppressEndTime=..objSession.suppressEndTime
	set timeString=##class(setup.objItem).getSessionTimes(..sessionID)
		
	write !,"	<td class=""black10px ef-session-time"">"
	write !,"		<span class=""ef-no-wrap"">",..encodeHTMLContent($Piece(timeString," - ",1))," -</span> <span class=""ef-no-wrap"">",..encodeHTMLContent($Piece(timeString," - ",2)),"</span>"
	if ..orderingMode="order by location" {
		if ..hasMultipleDays() {
			set dayNumber=##class(setup.objItem).getDayNumber(..sessionID)
			write "<br>",..encodeHTMLContent(##class(setup.objItem).getDayDescription(..eventID,dayNumber,..languageID))	
		}
	}
	write !,"	</td>"
]]></Implementation>
</Method>

<Method name="hasMultipleDays">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	#dim dayCount as %Integer = 0
	
	set rsDays=##class(%ResultSet).%New("setup.objItem:qDayNumbersWithAtLeastOneSession")
	do rsDays.Execute(..eventID,..isBackendBooking)
	while rsDays.Next() {
		set dayCount=dayCount+1
	}
	return dayCount>1
]]></Implementation>
</Method>

<Method name="showSessionNamesAsIfWithAbstracts">
<FormalSpec>sessionID</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if ##class(setup.objEventSetting).getParameter("abstracts","Show abstracts on the website",..eventID) {	
		if ##class(setup.agendaMethods).hasAnyAbstractsAssignedToSessions(..eventID) {
			return 1	
		}
	}
	return 0
]]></Implementation>
</Method>

<Method name="outputChairHTML">
<FormalSpec>extraClass,colspan</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	#dim openInPopupWindow as %Boolean 
	if ..isAgendaOrRegistration="register" { // JS popup
		set openInPopupWindow=1
	} elseif ..isAgendaOrRegistration="agenda" { // same window
		set openInPopupWindow=0
	}
	
	set chairHTML=##class(setup.objItem).getPresenterListHTML(..sessionID,,openInPopupWindow)
	if $l(chairHTML) {
		set chairHTML=##class(shared.pCSP).out("Chair:")_" "_chairHTML
	}
	write !,"<tr class='",extraClass,"'>"	
	write !,"	<td class='black10px ef-presenter'></td>"
	write !,"	<td class='black10px ef-presenter' colspan=",colspan,">",..rawHTML(chairHTML),"</td>"
	write !,"</tr>"
]]></Implementation>
</Method>

<Method name="outputSessionLinkHTML">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim pageID AS %Integer = ##class(setup.objItemDetails).getPageID(..sessionID,..languageID)
	#dim description as %String = ##class(setup.objItemDetails).getDetails(..sessionID,..languageID)
	
	if ..isAgendaOrRegistration="register" { // JS popup
		#dim popupURL as %String = "../../system/proweb/start.csp?popup=1&supressBannerAndMenu=1"
		
		set popupURL=popupURL_"&pageID="_pageID_"&eventID="_..eventID
		write !,"<a  onclick='openInfo(""",##class(EF.htmlGenerator).encodeHTMLAttribute(##class(shared.pCSP).Link(popupURL)),""");' href='javascript:void(0);'>",##class(EF.htmlGenerator).encodeHTMLContent(description),"</a>"
		
	} elseif ..isAgendaOrRegistration="agenda" { // same window
		write !,"	<a target='_self' href='../../system/proweb/start.csp?pageID=",##class(EF.htmlGenerator).encodeHTMLAttribute(pageID),"'>",##class(EF.htmlGenerator).encodeHTMLContent(description),"</a>"
			
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.pageSections.sessionDetailsListViewAgenda">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.pageSections.sessionDetailsListViewAgenda.CLS/EV.1
;vc; Component: CLS.EF.ui.pageSections.sessionDetailsListViewAgenda
;vc;  Location: SmallDev
;vc; Date/Time: 25-Aug-15 10:27
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.pageSections.sessionDetailsListViewAgenda.CLS/EV.1</td><td>CLS.EF.ui.pageSections.sessionDetailsListViewAgenda</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Aug-15 10:27</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ui.pageSections.sessionDetailsListView</Super>
<TimeChanged>63755,60751</TimeChanged>
<TimeCreated>63631,38111.341501</TimeCreated>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>sessionID,contextData:EF.contextData</FormalSpec>
<ReturnType>EF.ui.pageSections.sessionDetailsListViewAgenda</ReturnType>
<Implementation><![CDATA[
	set sessionDetails=##super(sessionID,contextData)
	
	return sessionDetails
]]></Implementation>
</Method>

<Method name="outputSessionDetailsHTML">
<FormalSpec>isOddRow=1</FormalSpec>
<Implementation><![CDATA[
	do ##super(isOddRow)
	do ..outputSessionAbstracts(isOddRow)
	write !,"</tr>"
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.pageSections.sessionDetailsListViewRegistration">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.pageSections.sessionDetailsListViewRegistration.CLS/EV.2
;vc; Component: CLS.EF.ui.pageSections.sessionDetailsListViewRegistration
;vc;  Location: SmallDev
;vc; Date/Time: 03-Nov-15 09:28
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.pageSections.sessionDetailsListViewRegistration.CLS/EV.2</td><td>CLS.EF.ui.pageSections.sessionDetailsListViewRegistration</td><td>SmallDev</td><td style='white-space: nowrap;'>03-Nov-15 09:28</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.ui.pageSections.sessionDetailsListView</Super>
<TimeChanged>63859,34271.958538</TimeChanged>
<TimeCreated>63631,38214.782193</TimeCreated>

<Property name="delegatePrice">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="isAmendment">
<Type>%Boolean</Type>
<InitialExpression>"0"</InitialExpression>
<Private>1</Private>
</Property>

<Property name="attendeeCategoryID">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="currencyID">
<Type>%Integer</Type>
<Private>1</Private>
</Property>

<Property name="tempPersonID">
<Type>%Integer</Type>
<Private>1</Private>
</Property>

<Property name="guestCount">
<Type>%Integer</Type>
<Private>1</Private>
</Property>

<Property name="tempPurchaseID">
<Type>%Integer</Type>
<Private>1</Private>
</Property>

<Property name="delegateBasketItemID">
<Type>%Integer</Type>
<Private>1</Private>
</Property>

<Property name="pricingHorologUTC">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="guestBasketItemID">
<Type>%Integer</Type>
<Private>1</Private>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>sessionID,contextData:EF.contextData</FormalSpec>
<ReturnType>EF.ui.pageSections.sessionDetailsListViewRegistration</ReturnType>
<Implementation><![CDATA[
	set sessionDetails=##super(sessionID,contextData)
	set sessionDetails.attendeeCategoryID=contextData.attendeeCategoryID
	set sessionDetails.currencyID=contextData.currencyID
	set sessionDetails.tempPersonID=contextData.tempPersonID
	set sessionDetails.isAmendment=contextData.isAmendment
	set sessionDetails.tempPurchaseID=contextData.tempPurchaseID
	set sessionDetails.pricingHorologUTC=contextData.pricingHorologUTC
	set sessionDetails.guestCount=##class(eCom.tempPerson).getGuestCount(contextData.tempPersonID)
	set sessionDetails.guestBasketItemID=##class(setup.objItem).getGuestBasketItemID(sessionID)
	
	if contextData.attendeeCategoryID {
		set sessionDetails.delegateBasketItemID=##class(setup.objItem).getDelegateBasketItemID(sessionID,contextData.attendeeCategoryID)
	} else {
		set sessionDetails.delegateBasketItemID=##class(setup.objItem).getDelegateBasketItemID(sessionID)
	}	
	
	return sessionDetails
]]></Implementation>
</Method>

<Method name="outputSessionDetailsHTML">
<FormalSpec>isOddRow=1</FormalSpec>
<Implementation><![CDATA[
	do ##super(isOddRow)
	if ..isAgendaOrRegistration="register" {
		do ..outputOneCheckboxHTML(..tempPersonID, "Delegate")
		do ..outputGuestCheckboxes()
		do ..outputCapacityAndBookingLevelsHTML()
	}
	write !,"</tr>"
	do ..outputSessionAbstracts(isOddRow)
]]></Implementation>
</Method>

<Method name="outputGuestCheckboxes">
<Private>1</Private>
<Implementation><![CDATA[
	set rsGuests=##class(%ResultSet).%New("eCom.tempPerson:qTempGuestIDsByTempPersonID")
	do rsGuests.Execute(..tempPersonID)
	while rsGuests.Next() {
		do ..outputOneCheckboxHTML(rsGuests.Get("guestTempPersonID"),"Guest")	
	}
]]></Implementation>
</Method>

<Method name="outputOneCheckboxHTML">
<FormalSpec>tempDelegateOrGuestID,delegateOrGuest</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	#dim controlStatus as String = "active" // active/disabled/dontShow
	#dim priceCaption as %String = ""
	#dim basketItemID as %Integer
	#dim isChecked as %String = "" // null or 'checked'
	#dim title as String
	#dim extraIdentiferForGuests as %String = ""
	#dim checkboxName as %String
	#dim CSSclassForPrice as %String = "black10px ef-session-price"
	
	if delegateOrGuest="Delegate" {
		set basketItemID=..delegateBasketItemID
	} elseif delegateOrGuest="Guest" {
		set basketItemID=..guestBasketItemID
		set extraIdentiferForGuests=tempDelegateOrGuestID_"_"
	}
	
	if (+..objSession.delegateCanBook=0) && (delegateOrGuest="Delegate") {
		set controlStatus="dontShow"
	}
	if (+..objSession.guestCanBook=0) && (delegateOrGuest="Guest") {
		set controlStatus="dontShow"
	}
	if ..objSession.noMoreBookings=1 {
		set controlStatus="disabled"
	}
	if ##class(setup.objItem).fullyBooked(..sessionID) {
		set controlStatus="disabled"
	}
	if (controlStatus="disabled") && (..isBackendBooking) {
		set controlStatus="active"
	}
	if ##class(eCom.tempChosenDay).isChosen(tempDelegateOrGuestID,..objSession.dayNumber) = 0 { // the day may not be chosen if 'view by location'
		 set controlStatus="disabled"
	}		
	if ##class(eCom.tempBasketItem).isChosen(tempDelegateOrGuestID,basketItemID) {  // override if person has already booked - otherwise they cannot UNBOOK
		set controlStatus="active"
		set isChecked="checked"
	}
	if ##class(setup.lnkEventCategoryItem).mustAttend(..attendeeCategoryID,..sessionID) {
		set controlStatus="disabled" 
		set isChecked="checked"
	}
	if ..isAmendment {
		if ..isBackendBooking = 0 {
			if ##class(setup.eventBookingMethods).areFrontendAmendmentsAllowed(..eventID)  = 0 {
				if ##class(setup.eventBookingMethods).areFrontendSessionAmendmentsAllowed(..eventID) = 0 {
					set controlStatus="disabled"
				} else {
					if ##class(eCom.objBasketItem).getPrice(..eventID,basketItemID,..pricingHorologUTC,..currencyID) > 0 {
						set controlStatus="disabled"	
					}
				}
			}
		}
	}
	
	write !,"<td class='black10px ef-session-price noPrint "_..getCollisionWarning(tempDelegateOrGuestID)_"'>"
	set checkboxName="'chk_"_delegateOrGuest_"_"_extraIdentiferForGuests_..sessionID_"'"
	
	if controlStatus="active" {
		write !,"<input type='checkbox' name="_checkboxName_" id="_checkboxName_" value=1 class='ef-session-booking-checkbox' ",isChecked,">"
		
	} elseif controlStatus="disabled" {
		if isChecked="checked" {
			set title=##class(shared.pCSP).out("You must attend this session")
			write !,"<div class='ef-session-booking-checkbox-ticked' title='",..encodeHTMLAttribute(title),"'></div>"
			write !,"<input type='hidden' value=1 name="_checkboxName_">"
		} else {
			set title=##class(shared.pCSP).out("This session is not available")
			write !,"<div class='ef-session-booking-checkbox-disabled' title='",..encodeHTMLAttribute(title),"'></div>"																
		}
	}
	
	if ..showSessionNamesAsIfWithAbstracts(..sessionID)  {
		set CSSclassForPrice="black10px ef-session-abstract-price"	
	}
	write !,"<label for="_checkboxName_">"
	if controlStatus="active" {
		if ##class(setup.objEventSetting).getParameter("chooseItems","show prices",..eventID) {
			set priceCaption=##class(eCom.objBasketItem).getPrice(..eventID,basketItemID,,..currencyID,1,1) 
			if (priceCaption="") ! (priceCaption["No Price") { 
				set priceCaption=##class(eCom.objBasketItem).getNoPriceCaptionForSessions(..eventID,..languageID)
			} 
			write !,..encodeHTMLContent(priceCaption)
		}
	}
	write !,"</label></td>"
]]></Implementation>
</Method>

<Method name="getCollisionWarning">
<FormalSpec>tempDelegateOrGuestID</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim m as %String = ""
	#dim result as %String = ""
	
	if ..contextData.isTestMode=0 {  						// allow tests to be run without a %Session
		for collisionMode="timeCollisions","codeCollisions" {
			for {
				set m=$O(%session.Data("eventsforce","frontend",collisionMode,m))
				if m=""	quit
				if ($P(m,"|",1)=tempDelegateOrGuestID) {
					if (($P(m,"|",2)=..sessionID)!(%session.Data("eventsforce","frontend",collisionMode,m)=..sessionID)){
						set result="ef-session-collision"
					}
				}
			}
		}
	}
	return result
]]></Implementation>
</Method>

<Method name="outputCapacityAndBookingLevelsHTML">
<Implementation><![CDATA[
	#dim bookingLevel as %String =""
	#dim capacity as %String=""
	#dim CSSclassForPrice as %String = "black10px ef-session-boookingLevel-capacity"
	#dim showCapacity as %Boolean = 0
	#dim showBookingLevel as %Boolean = 0
	
	set bookingLevel=+##class(setup.objItem).bookingLevelV2(..sessionID,..tempPurchaseID,1)		
	set capacity=+..objSession.capacity	
	
	if ..showSessionNamesAsIfWithAbstracts(..sessionID)  {
		set CSSclassForPrice="black10px ef-session-abstract-boookingLevel-capacity"	
	}
	write !,"<td class='"_CSSclassForPrice_"'>"
	if (..objSession.delegateCanBook) ! (..objSession.guestCanBook) {
		if ##class(setup.objEventSetting).getParameter("sessions","show booking level when booking",..eventID) {
			set showBookingLevel=1	
		}
		if ##class(setup.objEventSetting).getParameter("sessions","show capacity when booking",..eventID) {
			set showCapacity=1
		}
		
		if (showCapacity) && (showBookingLevel) {
			write !,..encodeHTMLContent(bookingLevel_"/"_capacity)
		} elseif (showCapacity) && ('showBookingLevel) {
			write !,..encodeHTMLContent(capacity)
		} elseif ('showCapacity) && (showBookingLevel) {
			write !,..encodeHTMLContent(bookingLevel)
		} 
	}
	write !,"</td>"
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.pageSections.sessionList">
<Description><![CDATA[
Used to output the list view version of the session
<!-- ;vc;
;vc;    Object: EF.ui.pageSections.sessionList.CLS/EV.3
;vc; Component: CLS.EF.ui.pageSections.sessionList
;vc;  Location: SmallDev
;vc; Date/Time: 19-Apr-16 14:50
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.pageSections.sessionList.CLS/EV.3</td><td>CLS.EF.ui.pageSections.sessionList</td><td>SmallDev</td><td style='white-space: nowrap;'>19-Apr-16 14:50</td><td>FredG</td></tr></table>
]]></Description>
<Super>%RegisteredObject,EF.htmlGenerator</Super>
<TimeChanged>64027,55519.088964</TimeChanged>
<TimeCreated>63627,41720.911673</TimeCreated>

<Property name="languageID">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="eventID">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="includeBackendOnly">
<Type>%Boolean</Type>
<InitialExpression>"0"</InitialExpression>
<Required>1</Required>
</Property>

<Property name="contextData">
<Type>EF.contextData</Type>
<Required>1</Required>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>contextData:EF.contextData</FormalSpec>
<ReturnType>EF.ui.pageSections.sessionListByTime</ReturnType>
<Implementation><![CDATA[
	if 'contextData.eventID throw ##class(shared.exceptions.generalException).%New("No eventID")
	if 'contextData.languageID throw ##class(shared.exceptions.generalException).%New("No languageID")
	if (contextData.context'="agenda") && (contextData.context'="registration") throw ##class(shared.exceptions.generalException).%New("Incorrect context")
	
	set sessionList=..%New()
	set sessionList.eventID=contextData.eventID
	set sessionList.languageID=contextData.languageID
	if contextData.context="registration" {
		set sessionList.includeBackendOnly=+contextData.isBackendBooking
	}
	set sessionList.contextData=contextData
	
	return sessionList
]]></Implementation>
</Method>

<Method name="outputTableTopHTML">
<Private>1</Private>
<Implementation><![CDATA[	write !,"<table class='ef-table ef-agenda-table' id='ef-sessions-table' cellspacing=0 border=0>"
]]></Implementation>
</Method>

<Method name="outputTableBottomHTML">
<Private>1</Private>
<Implementation><![CDATA[	write !,"</table>"
]]></Implementation>
</Method>

<Method name="outputHeaderForDelegateBookingHTML">
<FormalSpec>CSSclassesForTD</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	#dim caption as %String=""
	
	write !,"<td class='"_CSSclassesForTD_"'>"
		set caption=##class(shared.pCSP).out("Book")
		write ..encodeHTMLContent(caption)
	write "</td>"
]]></Implementation>
</Method>

<Method name="outputHeadersForGuestHTML">
<FormalSpec>CSSclassesForTD</FormalSpec>
<Implementation><![CDATA[
	set numberOfGuests=##class(eCom.tempPerson).getGuestCount(..contextData.tempPersonID)
	for guestCount=1:1:numberOfGuests {
		write !,"<td class='"_CSSclassesForTD_"'>"
		set guestCaption=##class(shared.pCSP).out("Guest")_$select(numberOfGuests>1:" "_guestCount,1:"")
		write ..encodeHTMLContent(guestCaption)
		write "</td>"
	}
]]></Implementation>
</Method>

<Method name="outputHeadersForCapacityLevelsHTML">
<FormalSpec>CSSclasses</FormalSpec>
<Implementation><![CDATA[
	#dim showBookingLevel as %Boolean = 0
	#dim showCapacity as %Boolean = 0
	#dim headerCaption as %String = ""
	
	if ##class(setup.objEventSetting).getParameter("sessions","show booking level when booking",..eventID) {
		set showBookingLevel=1		
	}
	
	if ##class(setup.objEventSetting).getParameter("sessions","show capacity when booking",..eventID) {
		set showCapacity=1
	}
	write !,"<td class='"_CSSclasses_" ef-session-boookingLevel-capacity'>"
		if (showCapacity) && (showBookingLevel) {
			write !,..encodeHTMLContent(##class(shared.pCSP).out("Bookings")),"/<br>",..encodeHTMLContent(##class(shared.pCSP).out("Capacity"))
		} elseif (showCapacity) && ('showBookingLevel) {
			write !,..encodeHTMLContent(##class(shared.pCSP).out("Capacity"))
		} elseif ('showCapacity) && (showBookingLevel) {
			write !,..encodeHTMLContent(##class(shared.pCSP).out("Bookings"))
		} 
	w !,"</td>"
]]></Implementation>
</Method>

<Method name="isPersonAllowedToSeeSession">
<FormalSpec>sessionItemID</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	#dim dayNumber as %Integer
	set dayNumber=##class(setup.objItem).getDayNumber(sessionItemID)

	set allowedToSee=1
	if (..contextData.attendeeCategoryID)	{
		set allowedToSee=0
		set isDayAllowed=0
		// check the day item as this will override the session
		if (..contextData.context="agenda") {
			set tmpDayItemID=##class(setup.objItem).getDayItemID(..contextData.eventID,dayNumber)
			set isDayAllowed=+##class(setup.lnkEventCategoryItem).allow(..contextData.attendeeCategoryID,tmpDayItemID)
		} elseif (..contextData.context="registration") {
			set isDayAllowed=##class(eCom.tempChosenDay).isChosen(..contextData.tempPersonID,dayNumber)
		}

		if isDayAllowed {
			if ..contextData.attendeeCategoryID {
				set allowedToSee=+##class(setup.lnkEventCategoryItem).allow(..contextData.attendeeCategoryID,sessionItemID)
			} else {
				set allowedToSee=1 
			}
		}
	}
	
	return allowedToSee
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.pageSections.sessionListByLocation">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.pageSections.sessionListByLocation.CLS/EV.3
;vc; Component: CLS.EF.ui.pageSections.sessionListByLocation
;vc;  Location: SmallDev
;vc; Date/Time: 22-Jan-16 13:55
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.pageSections.sessionListByLocation.CLS/EV.3</td><td>CLS.EF.ui.pageSections.sessionListByLocation</td><td>SmallDev</td><td style='white-space: nowrap;'>22-Jan-16 13:55</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.ui.pageSections.sessionList</Super>
<TimeChanged>63938,46684</TimeChanged>
<TimeCreated>63627,53335.134726</TimeCreated>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>contextData:EF.contextData</FormalSpec>
<ReturnType>EF.ui.pageSections.sessionListByTime</ReturnType>
<Implementation><![CDATA[
	set sessionList=##super(contextData)
	
	return sessionList
]]></Implementation>
</Method>

<Method name="renderTableHTML">
<Implementation><![CDATA[
	#dim locationID as %Integer
	#dim sessionTypeID as %Integer
	#dim numberOfGuests as %Integer = 0
	#dim guestCaption as %String =""
	#dim CSSclassesForTD As %String = "location blackbold10px ef-table-sub-heading"
	
	do ..outputTableTopHTML()

	set rsSessionTypes=##class(%ResultSet).%New("setup.objItem:qSessionTypesByEvent")
	do rsSessionTypes.Execute(..eventID, ..includeBackendOnly)
	while rsSessionTypes.Next() {
		set sessionTypeID=rsSessionTypes.Get("sessionTypeID")
		if ..anySessionsOfThisSessionType(sessionTypeID) {
			write !,"<tr class='red ef-table-header'>"
			write !,"	<td class='whitebold10px' colspan=20>"
			write !,		..encodeHTMLContent(rsSessionTypes.Get("sessionTypeName"))
			write !,"	</td>"
			write "</tr>"									
			
			set rsLocations=##class(%ResultSet).%New("setup.objItem:qLocationsByType")
			do rsLocations.Execute(..eventID, ..includeBackendOnly, rsSessionTypes.Get("sessionTypeID"))
			while rsLocations.Next() {
				set locationID=rsLocations.Get("ID")
				if ..anySessionsInThisLocationAndType(locationID,sessionTypeID) {
					write !,"<tr>"
					write !,"	<td class='"_CSSclassesForTD_"' colspan=2>"
					write !,		..encodeHTMLContent(##class(setup.objLocationDetails).getDetails(locationID,..languageID))
					write !,"	</td>"
					if ..contextData.context="registration" {
						do ..outputHeaderForDelegateBookingHTML(CSSclassesForTD)
						do ..outputHeadersForGuestHTML(CSSclassesForTD)
						do ..outputHeadersForCapacityLevelsHTML(CSSclassesForTD)
					}
					write "</tr>"				
					
					do ..outputSessionsByTypeAndLocation(locationID,sessionTypeID)
				}
			}
		}
	}
	
	do ..outputTableBottomHTML()
]]></Implementation>
</Method>

<Method name="outputSessionsByTypeAndLocation">
<FormalSpec>locationID,sessionTypeID</FormalSpec>
<Implementation><![CDATA[
	#dim sessionItemID as %Integer
	#dim categoryID as %Integer
	#dim oddOrEvenRow as %Boolean = 0

	set rsSession=##class(%ResultSet).%New("setup.objItem:qSessionsByTypeAndLocation")  
	do rsSession.Execute(locationID,..eventID, ..includeBackendOnly,sessionTypeID,..languageID)
	while rsSession.Next() {
		set sessionItemID=rsSession.Get("sessionID")
		if (..isPersonAllowedToSeeSession(sessionItemID))	{
			set oddOrEvenRow=oddOrEvenRow=0
			if ..contextData.context="registration" {
				set sessionDetails=##class(EF.ui.pageSections.sessionDetailsListViewRegistration).createNew(sessionItemID,..contextData)
			} elseif ..contextData.context="agenda" {
				set sessionDetails=##class(EF.ui.pageSections.sessionDetailsListViewAgenda).createNew(sessionItemID,..contextData)
			}
			do sessionDetails.outputSessionDetailsHTML(oddOrEvenRow)
		}
	}
]]></Implementation>
</Method>

<Method name="anySessionsInThisLocationAndType">
<FormalSpec>locationID,sessionTypeID</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	#dim result as %Boolean = 0
	#dim sessionItemID as %Integer

	set rsSession=##class(%ResultSet).%New("setup.objItem:qSessionsByTypeAndLocation")  
	do rsSession.Execute(locationID,..eventID, ..includeBackendOnly,sessionTypeID)
	while rsSession.Next() {
		set sessionItemID=rsSession.Get("sessionID")
		if (..isPersonAllowedToSeeSession(sessionItemID))	{
			set result=1
		}
	}
	return result
]]></Implementation>
</Method>

<Method name="anySessionsOfThisSessionType">
<FormalSpec>sessionTypeID</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	#dim result as %Boolean = 0
	#dim sessionItemID as %Integer
	
	set rsSession=##class(%ResultSet).%New("setup.objItem:qSessionsBySessionTypeID")  
	do rsSession.Execute(..eventID,..includeBackendOnly,sessionTypeID)
	while rsSession.Next() {
		set sessionItemID=rsSession.Get("sessionID")
		if (..isPersonAllowedToSeeSession(sessionItemID))	{
			set result=1
		}
	}
	return result
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.pageSections.sessionListByTime">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.pageSections.sessionListByTime.CLS/EV.3
;vc; Component: CLS.EF.ui.pageSections.sessionListByTime
;vc;  Location: SmallDev
;vc; Date/Time: 22-Jan-16 13:55
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.pageSections.sessionListByTime.CLS/EV.3</td><td>CLS.EF.ui.pageSections.sessionListByTime</td><td>SmallDev</td><td style='white-space: nowrap;'>22-Jan-16 13:55</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.ui.pageSections.sessionList</Super>
<TimeChanged>63938,45946</TimeChanged>
<TimeCreated>63627,42511.251283</TimeCreated>

<Property name="sessions">
<Type>EF.ui.pageSections.sessionDetailsListView</Type>
<Collection>list</Collection>
</Property>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>contextData:EF.contextData</FormalSpec>
<ReturnType>EF.ui.pageSections.sessionListByTime</ReturnType>
<Implementation><![CDATA[
	set sessionList=##super(contextData)
	return sessionList
]]></Implementation>
</Method>

<Method name="renderTableHTML">
<Implementation><![CDATA[
	#dim dayNumber as %Integer
	#dim CSSclassesForTD As %String = "whitebold10px"
	
	do ..outputTableTopHTML()

	set rsDays=##class(%ResultSet).%New("setup.objItem:qDayNumbersWithAtLeastOneSession")
	do rsDays.Execute(..eventID,..includeBackendOnly)
	while rsDays.Next() {
		set dayNumber=rsDays.Get("dayNumber")
		if ..anySessionsOnThisDay(dayNumber) {
			do ..sessions.Clear()
			
			write !,"<tr class='red ef-table-header'>"
				write !,"	<td class='"_CSSclassesForTD_"' colspan=2>"
				write !,		..encodeHTMLContent(##class(setup.objItem).getDayDescription(..eventID, dayNumber,..languageID))
				write !,"	</td>"
				write !,"	<td class='"_CSSclassesForTD_"'>"
				write !,"		",..encodeHTMLContent(##class(shared.pCSP).out("Location"))
				write !,"	</td>"
				if ..contextData.context="registration" {
					do ..outputHeaderForDelegateBookingHTML(CSSclassesForTD)
					do ..outputHeadersForGuestHTML(CSSclassesForTD)
					do ..outputHeadersForCapacityLevelsHTML(CSSclassesForTD)	
				}
			write "</tr>"									

			do ..populateSessions(dayNumber)
			do ..outputSessions()
		}
	}	
	do ..outputTableBottomHTML()
]]></Implementation>
</Method>

<Method name="populateSessions">
<FormalSpec>dayNumber</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	#dim sessionID as %Integer

	set rsSession=##class(%ResultSet).%New("setup.objItem:qActiveSessionsByDay") 
	do rsSession.Execute(..eventID,dayNumber,..includeBackendOnly,..languageID)
	while rsSession.Next() {
		set sessionItemID=rsSession.Get("sessionID")
		if ..isPersonAllowedToSeeSession(sessionItemID)	{
			if ..contextData.context="registration" {
				set sessionDetails=##class(EF.ui.pageSections.sessionDetailsListViewRegistration).createNew(sessionItemID,..contextData)
			} elseif ..contextData.context="agenda" {
					set sessionDetails=##class(EF.ui.pageSections.sessionDetailsListViewAgenda).createNew(sessionItemID,..contextData)
			}
			do ..sessions.Insert(sessionDetails)
		}
	}
]]></Implementation>
</Method>

<Method name="outputSessions">
<Private>1</Private>
<Implementation><![CDATA[
	#dim oddOrEvenRow as %Boolean = 0
	for count=1:1:..sessions.Count() {
		set oddOrEvenRow=oddOrEvenRow=0
		do ..sessions.GetAt(count).outputSessionDetailsHTML(oddOrEvenRow)
	}
]]></Implementation>
</Method>

<Method name="anySessionsOnThisDay">
<FormalSpec>dayNumber</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	#dim result as %Boolean = 0
	
	set rsSession=##class(%ResultSet).%New("setup.objItem:qActiveSessionsByDay") 
	do rsSession.Execute(..eventID,dayNumber,..includeBackendOnly)
	while rsSession.Next() {
		set sessionItemID=rsSession.Get("sessionID")
		if ..isPersonAllowedToSeeSession(sessionItemID)	{
			set result=1
		}
	}
	return result
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.pageSections.showErrorMessage">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.pageSections.showErrorMessage.CLS/EV.0
;vc; Component: CLS.EF.ui.pageSections.showErrorMessage
;vc;  Location: SmallDev
;vc; Date/Time: 28-Dec-14 01:11
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.pageSections.showErrorMessage.CLS/EV.0</td><td>CLS.EF.ui.pageSections.showErrorMessage</td><td>SmallDev</td><td style='white-space: nowrap;'>28-Dec-14 01:11</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63533,46566</TimeChanged>
<TimeCreated>63533,46538.856044</TimeCreated>

<Method name="render">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	if $G(%session.Data("eventsforce","frontend","errString"))'="" {
		write !,"<sc"_"ript language='javas"_"cript'>"
		set errString=%session.Data("eventsforce","frontend","errString")
		set temp=""
		for i=1:1:$L(errString,"|") set temp=temp_$p(errString,"|",i)_$c(10)
		write !,"alert("_##class(shared.pCSP).QuoteJS(temp)_");"
		write !,"</sc"_"ript>"
		kill %session.Data("eventsforce","frontend","errString")
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.pageSections.textDetailsMoxieStyles">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.ui.pageSections.textDetailsMoxieStyles.CLS/EV.3
;vc; Component: CLS.EF.ui.pageSections.textDetailsMoxieStyles
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.pageSections.textDetailsMoxieStyles.CLS/EV.3</td><td>CLS.EF.ui.pageSections.textDetailsMoxieStyles</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63966,57665</TimeChanged>
<TimeCreated>63489,33839.538999</TimeCreated>

<Method name="outputStylesForMoxie">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<Implementation><![CDATA[
	
	set contentCSSStr=##class(%CSP.Page).Link("../../frontEnd/reg/frontendStyles.csp?fromEditor=1&noStyleTags=1&eventID="_eventID)
	set templateID=##class(layout.objTemplate).getLayoutForEvent(eventID)
	set tPath=##class(layout.objTemplate).getPath(templateID)
	if $L(tPath) set tPath="/templates/"_tPath
	set fontURLStr=""
	set styleSource=##class(layout.objTemplate).getStyleSource(templateID)
	if styleSource="template" {
		&SQL(SELECT originalFilename INTO :originalFilename
			FROM layout.objTemplate
			WHERE ID=:templateID)
		If (+SQLCODE'=0) {
			Throw ##class(shared.exceptions.generalSQLException).CreateFromSQLCODE(SQLCODE,$GET(%msg))
		}
		
	  	set tmpstream=##class(%FileCharacterStream).%New()
	  	set tmpstream.Filename=originalFilename
		
		set (currentLine,fontURL)=""
			
    	do tmpstream.Rewind()
		while 'tmpstream.AtEnd {
			set currentLine=tmpstream.ReadLine()
			if (currentLine["fonts.googleapis.com") { 
				set tmpStr1 = $P(currentLine,"fonts.googleapis.com",2)
				set delim = """" // assume double quote delimiter
				if ('($L(tmpStr1,delim))){ // fall back to single quote delimiter
					set delim = "'"
				}
				set tmpStr2=$P(tmpStr1,delim,1)
				if ($L(tmpStr2)){
					if (##class(shared.pageMethods).isRequestSecure()) {
						set prefix="https://"
					} else {
						set prefix="http://"
					}
					// font URL will be in form such as http://fonts.googleapis.com/css?family=Telex|Buenard:400,700|Maven+Pro:400,700
					// the commas will trip up moxie so split into multiple css calls with one family + font-size per call
					set tmpStr3=prefix_"fonts.googleapis.com"_tmpStr2 // http://fonts.googleapis.com/css?family=Telex|Buenard:400,700|Maven+Pro:400,700
					set baseURL=$P(tmpStr3,"=",1) // http://fonts.googleapis.com/css?family
					set baseURL=baseURL_"="
					set params=$P(tmpStr3,"=",2) // Telex|Buenard:400,700|Maven+Pro:400,700
					set max=$L(params,"|")
					for index=1:1:max { // Buenard:400,700 ! Buenard:400 ! Buenard
						set tmpStr4=$P(params,"|",index)
						set fontFamily=$P(tmpStr4,":",1)
						set fontSizeStr=$P(tmpStr4,":",2)
						if ($L(fontSizeStr)) {
							if (fontSizeStr[",") { // multiple font sizes
								set max1=$L(fontSizeStr,",")
								for index1=1:1:max1 {
									set fontSize=$P(fontSizeStr,",",index1)
									if ($L(fontSize)) {
										if ($L(fontURLStr)) {
											set fontURLStr=fontURLStr_","_baseURL_fontFamily_":"_fontSize
										} else {
											set fontURLStr=fontURLStr_baseURL_fontFamily_":"_fontSize
										}
									}
								}
							} else { // single font size
								if ($L(fontURLStr)) {
									set fontURLStr=fontURLStr_","_baseURL_fontFamily_":"_fontSizeStr
								} else {
									set fontURLStr=fontURLStr_baseURL_fontFamily_":"_fontSizeStr
								}
							}
						} else {
							if ($L(fontURLStr)) {
								set fontURLStr=fontURLStr_","_baseURL_fontFamily
							} else {
								set fontURLStr=fontURLStr_baseURL_fontFamily
							}
						}
					}
				}
				quit	
			}
		}
		kill tmpstream
		kill orgStream
	}

	if ($L(fontURLStr)) {
		set contentCSSStr=fontURLStr_","_contentCSSStr
	}	
	
	return contentCSSStr
]]></Implementation>
</Method>
</Class>


<Class name="EF.ui.templateComponents.efLogo">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.ui.templateComponents.efLogo.CLS/EV.2
;vc; Component: CLS.EF.ui.templateComponents.efLogo
;vc;  Location: SmallDev
;vc; Date/Time: 11-Feb-15 10:12
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.ui.templateComponents.efLogo.CLS/EV.2</td><td>CLS.EF.ui.templateComponents.efLogo</td><td>SmallDev</td><td style='white-space: nowrap;'>11-Feb-15 10:12</td><td>FredG</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<Super>EF.htmlGenerator</Super>
<TimeChanged>63594,34798</TimeChanged>
<TimeCreated>63477,47033.992435</TimeCreated>

<Method name="outputLogoHTML">
<Description>
Four scenarios at present:
1. template does not have the logo designed into the template (e.g. client templates)
2. template does have the logo designed into the template (e.g. standard/default designs maybe some Dan templates)
3. client account is set to whitelabelled: don't show efText or efLogo
4. client account is set to show efText instead of efLogo (per event probably if an event template has a big problem with showing the logo?)
outputSourceType = we could call this method twice for a page: if the template has [[ef_logo]] then the frontendBottom.csp will also call this</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>xEventID</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set ns=$ZNSPACE
	set whiteLabelled=..isWhiteLabelled()
	set isEFlogoInTemplate=..isLogoInTemplateForEvent(xEventID)
	if 'whiteLabelled {
		if isEFlogoInTemplate {
			&html<
				<div id="eflogodiv" class="ef-logo">
					#[do ..outputEFLogoImageHTML(ns)]#
				</div>
			>
		} else {  // where we have to force to logo html onto the page at the bottom with minimal impact on the client template
			&html<
				<br style="clear:both;"/>
				<div id="eflogodiv" style="padding-top:30px;padding-left:15px;padding-bottom:10px;padding-right:15px;">
					#[do ..outputEFLogoImageHTML(ns)]#
				</div>
			>
		}
	}
		
	quit
]]></Implementation>
</Method>

<Method name="outputLogoHTMLautomatically">
<Description>
called from frontendBottom.csp to output the logo when not included in a template (and to stop it appearing if whitelabelled)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>xEventID</FormalSpec>
<Implementation><![CDATA[
	set isEFlogoInTemplate=..isLogoInTemplateForEvent(xEventID)
	if isEFlogoInTemplate	{  // do this check so that we only output the logo once on the page
		// do nothing as the template code or template source will write it out...
		if ..isWhiteLabelled()	{
			//  - unless we're whitelabelled:
			//      the template may not have [[ef_logo]] but may have the ef logo code embedded
			//      so we want to output some styles to stop the eflogo appearing.
			//      If we make sure no template has the ef logo html code then we can remove this exception
			&html<
				<style>
				#eflogodiv { visibility: hidden;}
				</style>
			>
		}
	} else {
		do ..outputLogoHTML(xEventID)
	}
]]></Implementation>
</Method>

<Method name="outputLogoHTMLfromTemplateTag">
<Description>
this is called from the ef_logo logic in layout.objTemplate</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>xEventID</FormalSpec>
<Implementation><![CDATA[
	set isEFlogoInTemplate=..isLogoInTemplateForEvent(xEventID)
	if isEFlogoInTemplate	{  // do this check so that we only output the logo once on the page
		do ..outputLogoHTML(xEventID)
	} else {
		// do nothing as the frontendBottom.csp will write it out
	}
]]></Implementation>
</Method>

<Method name="isWhiteLabelled">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set whiteLabelled=0
	if ##class(setup.objSystemTypes).isModuleAllowed("Removal of Eventsforce Logo") set whiteLabelled=1
	quit whiteLabelled
]]></Implementation>
</Method>

<Method name="isLogoInTemplateForEvent">
<ClassMethod>1</ClassMethod>
<FormalSpec>xEventID</FormalSpec>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set isEFlogoInTemplate=0
	set templateID=##class(layout.objTemplate).getLayoutForEvent(xEventID)
	set isEFlogoInTemplate=+##class(layout.objTemplate).isEFLogoInTemplate(templateID)
	quit isEFlogoInTemplate
]]></Implementation>
</Method>

<Method name="outputEFLogoImageHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>utmsource</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	&html<
		<a id="eflogoa" href="#(..rawURL(..getEFWebsiteURL(utmsource)))#" border="0" target="_blank">
			<img id="eflogoimg" src="../../media/images/english/default/frontend/ef_powered_by.png?v=2" alt="Powered by Eventsforce" border="0" />
		</a>
	>
]]></Implementation>
</Method>

<Method name="getEFWebsiteURL">
<ClassMethod>1</ClassMethod>
<FormalSpec>source</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "http://www.eventsforce.com/?utm_source="_..encodeURLParameter(source)_"&utm_medium=PoweredByEventsforce&utm_campaign=PBlogo"
]]></Implementation>
</Method>

<Method name="convertEFLogoSettingToModule">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	if '##class(setup.objSetting).getParameter("layout","show EF footer") {
		set licenseID=##class(EF.licensing.objLicense).getCurrentLicenseID()
		if licenseID {
			do ##class(EF.licensing.objLicensedPackage).add("P3000",licenseID,1)
		}
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.backgroundJobInfo">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.utils.backgroundJobInfo.CLS/EV.1
;vc; Component: CLS.EF.utils.backgroundJobInfo
;vc;  Location: SmallDev
;vc; Date/Time: 17-Mar-14 11:47
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.backgroundJobInfo.CLS/EV.1</td><td>CLS.EF.utils.backgroundJobInfo</td><td>SmallDev</td><td style='white-space: nowrap;'>17-Mar-14 11:47</td><td>RajibQ</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63263,42524.324268</TimeChanged>
<TimeCreated>63218,64204.159532</TimeCreated>

<Property name="idx">
<Type>%Integer</Type>
</Property>

<Property name="securityToken">
<Type>%String</Type>
<ReadOnly>1</ReadOnly>
</Property>

<Method name="securityTokenGet">
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	Quit $GET(^CacheTemp(..idx,"securityToken"))
]]></Implementation>
</Method>

<Method name="createSecurityToken">
<Private>1</Private>
<Implementation><![CDATA[
	Set ^CacheTemp(..idx,"securityToken")=##class(EF.security.token).getNonceToken()
	Quit $$$OK
]]></Implementation>
</Method>

<Property name="jobID">
<Type>%String</Type>
</Property>

<Method name="jobIDGet">
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	Quit $GET(^CacheTemp(..idx,"jobID"))
]]></Implementation>
</Method>

<Method name="jobIDSet">
<FormalSpec>jobID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ^CacheTemp(..idx,"jobID")=jobID
	
	Quit $$$OK
]]></Implementation>
</Method>

<Property name="started">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="startedGet">
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	Quit $GET(^CacheTemp(..idx,"started"))
]]></Implementation>
</Method>

<Method name="startedSet">
<FormalSpec>started:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ^CacheTemp(..idx,"started")=started
	
	Quit $$$OK
]]></Implementation>
</Method>

<Property name="completed">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="completedGet">
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	Quit $GET(^CacheTemp(..idx,"completed"))
]]></Implementation>
</Method>

<Method name="completedSet">
<FormalSpec>completed:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ^CacheTemp(..idx,"completed")=completed
	
	Quit $$$OK
]]></Implementation>
</Method>

<Property name="stopped">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="stoppedGet">
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	Quit $GET(^CacheTemp(..idx,"stopped"))
]]></Implementation>
</Method>

<Method name="stoppedSet">
<FormalSpec>stopped:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ^CacheTemp(..idx,"stopped")=stopped
	
	Quit $$$OK
]]></Implementation>
</Method>

<Property name="crashed">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="crashedGet">
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	Quit $GET(^CacheTemp(..idx,"crashed"))
]]></Implementation>
</Method>

<Method name="crashedSet">
<FormalSpec>crashed:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ^CacheTemp(..idx,"crashed")=crashed
	
	Quit $$$OK
]]></Implementation>
</Method>

<Property name="progressPercentage">
<Type>%Double</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="progressPercentageGet">
<ReturnType>%Double</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	Quit $GET(^CacheTemp(..idx,"progressPercentage"))
]]></Implementation>
</Method>

<Method name="progressPercentageSet">
<FormalSpec>progressPercentage:%Double</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ^CacheTemp(..idx,"progressPercentage")=progressPercentage
	
	Quit $$$OK
]]></Implementation>
</Method>

<Property name="progressText">
<Type>%String</Type>
</Property>

<Method name="progressTextGet">
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	Quit $GET(^CacheTemp(..idx,"progressText"))
]]></Implementation>
</Method>

<Method name="progressTextSet">
<FormalSpec>progressText:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ^CacheTemp(..idx,"progressText")=progressText
	Quit $$$OK
]]></Implementation>
</Method>

<Property name="statusText">
<Type>%String</Type>
</Property>

<Method name="statusTextGet">
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	Quit $GET(^CacheTemp(..idx,"statusText"))
]]></Implementation>
</Method>

<Method name="statusTextSet">
<FormalSpec>statusText:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ^CacheTemp(..idx,"statusText")=statusText
	Quit $$$OK
]]></Implementation>
</Method>

<Property name="errorText">
<Type>%String</Type>
</Property>

<Method name="errorTextGet">
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	Quit $GET(^CacheTemp(..idx,"errorText"))
]]></Implementation>
</Method>

<Method name="errorTextSet">
<FormalSpec>errorText:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ^CacheTemp(..idx,"errorText")=errorText
	Quit $$$OK
]]></Implementation>
</Method>

<Property name="stopRequested">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="stopRequestedGet">
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	Quit $GET(^CacheTemp(..idx,"stopRequested"))
]]></Implementation>
</Method>

<Method name="stopRequestedSet">
<FormalSpec>stopRequested:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ^CacheTemp(..idx,"stopRequested")=stopRequested
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<ReturnType>backgroundJobInfo</ReturnType>
<Implementation><![CDATA[
	Set ret=..%New()
	
	Set ret.idx=$I(^CacheTemp)
	Do ret.createSecurityToken()
	
	Quit ret
]]></Implementation>
</Method>

<Method name="loadFromIdx">
<ClassMethod>1</ClassMethod>
<FormalSpec>idx,securityToken</FormalSpec>
<ReturnType>backgroundJobInfo</ReturnType>
<Implementation><![CDATA[
	Set ret=..%New()
	
	Set ret.idx=idx
	
	If (ret.securityToken '= securityToken) {
		Set ret=""
		Throw ##class(shared.exceptions.generalException).%New("Invalid security token")
	}
	
	Quit ret
]]></Implementation>
</Method>

<Method name="delete">
<Implementation><![CDATA[	Kill ^CacheTemp(..idx)
]]></Implementation>
</Method>

<Method name="setInfo">
<FormalSpec>key,value</FormalSpec>
<Implementation><![CDATA[	Set ^CacheTemp(..idx,"info",key)=value
]]></Implementation>
</Method>

<Method name="getInfo">
<FormalSpec>key</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $GET(^CacheTemp(..idx,"info",key))
]]></Implementation>
</Method>

<Method name="deleteInfo">
<FormalSpec>key=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If (key="") {
		Kill ^CacheTemp(..idx,"info")
	} else {
		Kill ^CacheTemp(..idx,"info",key)
	}
]]></Implementation>
</Method>

<Method name="setInfoArray">
<FormalSpec><![CDATA[key="",&infoArray]]></FormalSpec>
<Implementation><![CDATA[
	Do ..deleteInfo(key)
	Do ..mergeInfoArray(key, .infoArray)
]]></Implementation>
</Method>

<Method name="mergeInfoArray">
<FormalSpec><![CDATA[key="",&infoArray]]></FormalSpec>
<Implementation><![CDATA[
	If (key="") {
		Merge ^CacheTemp(..idx,"info")=infoArray
	} else {
		Merge ^CacheTemp(..idx,"info",key)=infoArray
	}
]]></Implementation>
</Method>

<Method name="getInfoArray">
<FormalSpec><![CDATA[key="",&infoArray]]></FormalSpec>
<Implementation><![CDATA[
	Kill infoArray
	
	If (key="") {
		Merge infoArray=^CacheTemp(..idx,"info")
	} else {
		Merge infoArray=^CacheTemp(..idx,"info",key)
	}
]]></Implementation>
</Method>

<Method name="clearInfo">
<Implementation><![CDATA[	Kill ^CacheTemp(..idx,"info")
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.classes">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.utils.classes.CLS/EV.3
;vc; Component: CLS.EF.utils.classes
;vc;  Location: SmallDev
;vc; Date/Time: 05-May-16 15:52
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.classes.CLS/EV.3</td><td>CLS.EF.utils.classes</td><td>SmallDev</td><td style='white-space: nowrap;'>05-May-16 15:52</td><td>FredG</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>64043,57861.032849</TimeChanged>
<TimeCreated>63018,36402.204876</TimeCreated>

<Method name="classExists">
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set ret=0
	
	&SQL(SELECT COUNT(ID) INTO :tmp FROM %Dictionary.ClassDefinition WHERE Name=:className)
	
	If (+SQLCODE=0) {
		If (tmp>0) {
			Set ret=1
		}
	}
	
	Quit ret
]]></Implementation>
</Method>

<Method name="getFullTableRefFromFullClassName">
<Description>
maybe this can be replaced with some built-in function in the future?</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fullClassName:%String</FormalSpec>
<Implementation><![CDATA[
	Set ret=""
	
	Set tableName=""
	Set schemaName=""
	
	// first try class dictionary
	&SQL(SELECT SqlTableName, SqlSchemaName INTO :tmp, :tmp2 FROM %Dictionary.CompiledClass WHERE Name=:fullClassName)
	If +(SQLCODE=0) {
		Set tableName=tmp
		Set schemaName=tmp2
	}
	
	If ($LENGTH(schemaName) > 0) {
		Set ret=schemaName_"."_tableName
	} else {
		Set ret=tableName
	}
	Quit ret
]]></Implementation>
</Method>

<Method name="getPropertyValue">
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String,propName:%String,objectID:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set object = $ClassMethod(className,"%OpenId",objectID)
	if $IsObject(object) {
		return $Property(object,propName)
	} else {
		throw ##class(shared.exceptions.generalException).%New("Invalid object in getPropertyValue")	
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.codDataUtils">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.utils.codDataUtils.CLS/EV.3
;vc; Component: CLS.EF.utils.codDataUtils
;vc;  Location: SmallDev
;vc; Date/Time: 17-Apr-15 16:42
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.codDataUtils.CLS/EV.3</td><td>CLS.EF.utils.codDataUtils</td><td>SmallDev</td><td style='white-space: nowrap;'>17-Apr-15 16:42</td><td>AdrianM</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63629,56141</TimeChanged>
<TimeCreated>63315,44001.541915</TimeCreated>

<Method name="adhocUpdateAllDataMatchingForEventSpanningItem">
<ClassMethod>1</ClassMethod>
<FormalSpec>codItemName,fromValue,toValue</FormalSpec>
<Implementation><![CDATA[
	write !,"Are you absolutely sure that you want to update the '"_codItemName_"' field from '"_fromValue_"' to '"_toValue_"' for all people on the database? <N>"
	read ans
	if $ZCVT(ans,"L")'?1"y".e quit
	
	if ##class(cod.objItemName).getCarryOver(codItemName)'=1 write !!,"Error: The item is not spanning events, aborting" quit
	set itemNameID=##class(cod.objItemName).getIDFromDescriptionNoEvent(codItemName)
	
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare("SELECT * FROM cod.objItemData WHERE (objItemName->description= ? ) AND (result = ?)")
	do rs.Execute(itemNameID,fromValue)
	set counter=0
	while rs.Next() {
		set personID=rs.Get("objPerson")
		do ##class(cod.objItemData).set(personID,codItemName,toValue,,,,0)
		set counter=counter+1
	}
	write !,counter," records updated"
]]></Implementation>
</Method>

<Method name="anonymiseData">
<Description>
This can be used on test to anonymise the data from live</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	if '##class(shared.generalMethods).isThisTest() {
		w "Please don't try and tun this in live",!
		quit
	}
	set anonymise("password")=""
	set anonymise("company")=""
	
	// Items to change
	set sqltext="SELECT * FROM cod.objItemName WHERE type='text' AND hidden=0 AND noBackendChanges=0"
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare(sqltext)
	do rs.Execute()
	while rs.Next()	{
		set itemNameID=rs.Get("ID")
		set itemName=rs.Get("description")
		if ($ZCVT(itemName,"L")["passport")!($ZCVT(itemName,"L")["credit")!($ZCVT(itemName,"L")["address line")!($ZCVT(itemName,"L")["email")!( $ZCVT(itemName,"L")["phone")!($ZCVT(itemName,"L")["lastname")!($ZCVT(itemName,"L")["last name")!($ZCVT(itemName,"L")["firstname")!($ZCVT(itemName,"L")["first name")!($ZCVT(itemName,"L")["postcode") {
			set anonymise(itemNameID)=itemName
		}
	}
	set sqltext="SELECT ID FROM cod.objPerson WHERE ID > 1 ORDER BY ID"
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare(sqltext)
	do rs.Execute()
	while rs.Next()	{
		set personID=rs.Get("ID")
		set itemNameID=""
		for {
			set itemNameID=$O(anonymise(itemNameID))
			if itemNameID="" quit
			set itemName=anonymise(itemNameID)
			set sqltext="SELECT * FROM cod.objItemData WHERE (objPerson = ?) AND (objItemName = ?) ORDER BY ID"
			set rs2=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
			do rs2.Prepare(sqltext)
			do rs2.Execute(personID,itemNameID)
			while rs2.Next() {
				set result=rs2.Get("result")
				set itemDataID=rs2.Get("ID")
				if $l(result) {
					//w !,"personID:",personID,",","itemName:",itemName,",oldResult:",result
					set newResult=..anonymise(itemName,personID)
					//w ",newResult:",newResult,!
					// Update the itemData directly, no need to use the extra logic in cod.objItemData
					&SQL(UPDATE cod.objItemData 
						SET result = :newResult
						WHERE ID=:itemDataID
					)
				}
			}
		}
	}
	&SQL(DELETE FROM cod.objChanges)
	&SQL(DELETE FROM accom.objChange)
	&SQL(DELETE FROM eCom.objPurchaseAudit)
	set sqltext="SELECT ID,objPurchase,eventID FROM eCom.objInvoice ORDER BY ID"
	set rsInvoices=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rsInvoices.Prepare(sqltext)
	do rsInvoices.Execute()
	while rsInvoices.Next()	{
		set invoiceID=rsInvoices.Get("ID")
		set purchaseID=rsInvoices.Get("objPurchase")
		set personID=##class(eCom.objPurchase).getBookerID(purchaseID)
		set xEventID=rsInvoices.Get("eventID")
		set xControllerID=##class(setup.objEvent).getControllerID(xEventID)
		
		set objInvoice=##class(eCom.objInvoice).%OpenId(invoiceID)
		set objInvoice.firstname=##class(cod.objItemData).get(personID,"firstname")
		set objInvoice.lastname=##class(cod.objItemData).get(personID,"lastname")
		set objInvoice.jobTitle=##class(cod.objItemData).get(personID,"Job Title")
		set objInvoice.company=##class(cod.objItemData).get(personID,"company")
		set objInvoice.telephone=##class(cod.objItemData).get(personID,"Work Telephone No.")
		set objInvoice.addressLine1=##class(cod.objItemData).get(personID,"Address Line 1")
		set objInvoice.addressLine2=##class(cod.objItemData).get(personID,"Address Line 2")
		set objInvoice.addressLine3=##class(cod.objItemData).get(personID,"Address Line 3")
		set objInvoice.town=##class(cod.objItemData).get(personID,"town")
		set objInvoice.postcode=##class(cod.objItemData).get(personID,"postcode")
		set objInvoice.county=##class(cod.objItemData).get(personID,"county")
		set objInvoice.email=##class(cod.objItemData).get(personID,"email")
		set objInvoice.country=##class(cod.objItemData).get(personID,"country")
		// For Organisers they need all the invoice details copying or none
		if ##class(setup.objSetting).getParameter("invoice","do not include booker's details in invoice address") {
			// In this mode if we have Invoice Details Address Line 1, override with all invoice details
			if $l(##class(cod.objItemData).get(personID,"Invoice Details Address Line 1",xControllerID)) {
				set objInvoice.salutation=##class(cod.objItemData).get(personID,"Invoice Details Salutation",xControllerID)
				set objInvoice.firstname=##class(cod.objItemData).get(personID,"Invoice Details Firstname",xControllerID)
				set objInvoice.lastname=##class(cod.objItemData).get(personID,"Invoice Details Lastname",xControllerID)
				set objInvoice.jobTitle=##class(cod.objItemData).get(personID,"Invoice Details Job Title",xControllerID)
				set objInvoice.company=##class(cod.objItemData).get(personID,"Invoice Details Company",xControllerID)
				set objInvoice.telephone=##class(cod.objItemData).get(personID,"Invoice Details Work Telephone No.",xControllerID)
				set objInvoice.addressLine1=##class(cod.objItemData).get(personID,"Invoice Details Address Line 1",xControllerID)
				set objInvoice.addressLine2=##class(cod.objItemData).get(personID,"Invoice Details Address Line 2",xControllerID)
				set objInvoice.addressLine3=##class(cod.objItemData).get(personID,"Invoice Details Address Line 3",xControllerID)
				set objInvoice.town=##class(cod.objItemData).get(personID,"Invoice Details Town",xControllerID)
				set objInvoice.postcode=##class(cod.objItemData).get(personID,"Invoice Details Postcode",xControllerID)
				set objInvoice.county=##class(cod.objItemData).get(personID,"Invoice Details County",xControllerID)
				set objInvoice.email=##class(cod.objItemData).get(personID,"Invoice Details Email",xControllerID)
				set objInvoice.country=##class(cod.objItemData).get(personID,"Invoice Details Country",xControllerID)
			}
		} else {
			// Check if we have overrides for personal details
			if $l(##class(cod.objItemData).get(personID,"Invoice Details Lastname",xControllerID)) {
				set objInvoice.salutation=##class(cod.objItemData).get(personID,"Invoice Details Salutation",xControllerID)
				set objInvoice.firstname=##class(cod.objItemData).get(personID,"Invoice Details Firstname",xControllerID)
				set objInvoice.lastname=##class(cod.objItemData).get(personID,"Invoice Details Lastname",xControllerID)
				set objInvoice.jobTitle=##class(cod.objItemData).get(personID,"Invoice Details Job Title",xControllerID)
			}
			// Check if we have overrides for company
			if $l(##class(cod.objItemData).get(personID,"Invoice Details Company",xControllerID)) {
				set objInvoice.company=##class(cod.objItemData).get(personID,"Invoice Details Company",xControllerID)
			}
			// Check if we have overrides for telephone no
			if $l(##class(cod.objItemData).get(personID,"Invoice Details Work Telephone No.",xControllerID)) {
				set objInvoice.telephone=##class(cod.objItemData).get(personID,"Invoice Details Work Telephone No.",xControllerID)
			}
			// Check if we have overrides for address details
			if $l(##class(cod.objItemData).get(personID,"Invoice Details Address Line 1",xControllerID)) {
				set objInvoice.addressLine1=##class(cod.objItemData).get(personID,"Invoice Details Address Line 1",xControllerID)
				set objInvoice.addressLine2=##class(cod.objItemData).get(personID,"Invoice Details Address Line 2",xControllerID)
				set objInvoice.addressLine3=##class(cod.objItemData).get(personID,"Invoice Details Address Line 3",xControllerID)
				set objInvoice.town=##class(cod.objItemData).get(personID,"Invoice Details Town",xControllerID)
				set objInvoice.postcode=##class(cod.objItemData).get(personID,"Invoice Details Postcode",xControllerID)
				if '$L(objInvoice.postcode) set objInvoice.postcode=##class(cod.objItemData).get(personID,"Invoice Postcode",xControllerID)
				set objInvoice.county=##class(cod.objItemData).get(personID,"Invoice Details County",xControllerID)
			}
			// Check if we have overrides for email
			if $l(##class(cod.objItemData).get(personID,"Invoice Details Email",xControllerID)) {
				set objInvoice.email=##class(cod.objItemData).get(personID,"Invoice Details Email",xControllerID)
			}
			// Check if we have overrides for country
			if $l(##class(cod.objItemData).get(personID,"Invoice Details Country",xControllerID)) {
				set objInvoice.country=##class(cod.objItemData).get(personID,"Invoice Details Country",xControllerID)
			}
		}
		// get the country code
		set country=objInvoice.country
		&SQL(SELECT code INTO :countryCode FROM cod.objItemAlternatives WHERE (objItemName->description = 'Country') AND (description = :country))	
		if +SQLCODE=0 {
			set objInvoice.countryCode=countryCode
		}
		
		set objInvoice.VATregistrationNumber=##class(cod.objItemData).get(personID,"VAT Registration Number")
		set objInvoice.taxExemptCertificate=##class(cod.objItemData).get(personID,"Tax Exempt Certificate")
		set objInvoice.customerPOnumber=##class(cod.objItemData).get(personID,"Customer PO Number",xControllerID)
		set objInvoice.creditController=##class(setup.objEventData).getDataFromDescription(xEventID,"Credit Controller")
		set objInvoice.businessUnit=##class(setup.objEventData).getDataFromDescription(xEventID,"Business Unit")
		set objInvoice.venue=##class(setup.objEventData).getDataFromDescription(xEventID,"Venue Name")
		set objInvoice.dueDays=##class(setup.objEventData).getDataFromDescription(xEventID,"Invoice Due Days")
		&SQL(SELECT COUNT(DISTINCT objPerson) INTO :tmp FROM links.lnkPersonPurchase WHERE (objPurchase=:purchaseID) AND (personType <> 'booker'))
		if +SQLCODE=0 set objInvoice.numberOfAttendees=tmp
		
		// get all attendees and store into attendeeList - that field is only 300 chars long so it'll only store up to about 20 names
		set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
		set ok=rs.Prepare("SELECT objPerson FROM links.lnkPersonPurchase WHERE (objPurchase=?) AND (personType <> 'booker') AND (personType <> 'cancelledDelegate') ORDER BY ID")
		do rs.Execute(purchaseID)
		set attendeeList=""
		while rs.Next() {
			set tmpPersonID=rs.Data("objPerson")
			set tmpFN=##class(cod.objItemData).get(tmpPersonID,"firstname")
			set tmpLN=##class(cod.objItemData).get(tmpPersonID,"lastname")
			set attendeeList=attendeeList_$S($L(attendeeList):", ",1:"")_tmpFN_" "_tmpLN
		}
		set objInvoice.attendeeList=attendeeList
		do objInvoice.%Save()
	}
	
	// Mail
	&SQL(UPDATE mail.mailObjects SET messageHTML = '', messageText = '', toAddress = 'email@hidd.den')
]]></Implementation>
</Method>

<Method name="anonymise">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemName,personID</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if $ZCVT(itemName,"L")["passport" {
		quit "XXXXX"
	}
	if $ZCVT(itemName,"L")["credit" {
		quit "1234123412341234"
	}
	if $ZCVT(itemName,"L")["password" {
		quit "1234"
	}
	if $ZCVT(itemName,"L")["company" {
		quit ##class(%Library.PopulateUtils).Company()
	}
	if ($ZCVT(itemName,"L")["firstname")!($ZCVT(itemName,"L")["first name") {
		quit ##class(%Library.PopulateUtils).FirstName()
	}
	if ($ZCVT(itemName,"L")["lastname")!($ZCVT(itemName,"L")["last name") {
		quit ##class(%Library.PopulateUtils).LastName()
	}
	if ($ZCVT(itemName,"L")["address line 1") {
		quit ##class(%Library.PopulateUtils).Street()
	}
	if ($ZCVT(itemName,"L")["address line 2") {
		quit ##class(%Library.PopulateUtils).City()
	}
	if ($ZCVT(itemName,"L")["address line 3") {
		quit ##class(%Library.PopulateUtils).City()
	}
	if $ZCVT(itemName,"L")="email" {
		quit "email_"_personID_"@test.tes"
	}
	if $ZCVT(itemName,"L")="email2" {
		quit "email2_"_personID_"@test.tes"
	}
	if $ZCVT(itemName,"L")="cc email" {
		quit "paemail_"_personID_"@test.pa"	
	}
	if $ZCVT(itemName,"L")["email" {
		quit "other_"_personID_"@other.oth"	
	}
	if $ZCVT(itemName,"L")["username" {
		quit "user"_personID
	}
	if $ZCVT(itemName,"L")["phone" {
		quit ##class(%Library.PopulateUtils).USPhone()
	}
	if $ZCVT(itemName,"L")["postcode" {
		quit ##class(%PopulateUtils).USZip()
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.codeAnalyser">
<Super>%RegisteredObject</Super>
<TimeChanged>63691,34950.662512</TimeChanged>
<TimeCreated>63691,32993.973156</TimeCreated>

<Method name="findNonPrivateBackendPages">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	#dim className as %String
	#dim count as %Integer = 0
	#dim isPrivate as %Boolean
	
	Set result = ##class(%Library.ResultSet).%New("%Dictionary.ClassDefinition:Summary")
	Do result.Execute()
	While (result.Next()) {
		set className=result.Data("Name")
		Set cdef = ##class(%Dictionary.ClassDefinition).%OpenId(className) 
		if className["cspRealEV.backend." {
			
			set isPrivate=0
			&SQL(SELECT _Default INTO :isPrivate FROM %Dictionary.ParameterDefinition where (parent=:className) AND (Name='PRIVATE'))
			if (+SQLCODE=0) {
				if isPrivate=0 {
					set count=count+1
					write !,count,?5,className
				}
			}
		}
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.colorMethods">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.utils.colorMethods.CLS/EV.0
;vc; Component: CLS.EF.utils.colorMethods
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-13 17:08
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.colorMethods.CLS/EV.0</td><td>CLS.EF.utils.colorMethods</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-13 17:08</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63014,40520</TimeChanged>
<TimeCreated>63012,43703.916772</TimeCreated>

<Method name="calculateColorOffsetHex">
<Description>
returns a variation of the passed in the hex color. It will be darker for light colors and lighter for dark colors.
//Pass in offset value 0-255. Negative value will also work but reverse the darken/lighten logic.
Pass in offset as percentage (-100 to 100) (negative offsets will invert darken/lighten logic)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>hexColor,saturationChange=0,lightChange=0</FormalSpec>
<Implementation><![CDATA[
	set out=""
	do ..calculateRGBFromHexColor(hexColor,.red,.green,.blue)
	do ..calculateHSLFromRGB(red,green,blue,.hComp,.sComp,.lComp)
	
	// change saturation
	Set sCompP = (sComp * 100)
	if saturationChange["%" {
		Set sCompP = sCompP*(1+(saturationChange/100))
	} else {
		Set sCompP = sCompP+saturationChange
	}
	If (sCompP > 100) Set sCompP=100 //sCompP#100
	If (sCompP < 0) Set sCompP=0 //(sCompP*-1)#100
	Set sComp=sCompP/100
	
	// change lightness
	Set lCompP = (lComp * 100)
	if lightChange["%" {
		Set lCompP = lCompP*(1+(lightChange/100))
	} else {
		Set lCompP = lCompP+lightChange
	}
	If (lCompP > 100) Set lCompP=100 //lCompP#100
	If (lCompP < 0) Set lCompP=0 //(lCompP*-1)#100
	Set lComp=lCompP/100
	
	do ..calculateRGBFromHSL(hComp,sComp,lComp,.red,.green,.blue)
	set out=..calculateHexFromRGBColor(red,green,blue)
	quit out
]]></Implementation>
</Method>

<Method name="isHexColorDarkOrLight">
<Description>
returns 'dark' or 'light' depending on threshold</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>hexColor</FormalSpec>
<Implementation><![CDATA[
	do ..calculateRGBFromHexColor(hexColor,.red,.green,.blue)
	do ..calculateHSLFromRGB(red,green,blue,.hComp,.sComp,.lComp)
	if (lComp >= 0.65) {
		set out="light"
	} else {
		set out="dark"	
	}
	quit out
]]></Implementation>
</Method>

<Method name="calculateTextColorFromGradientColorsHex">
<ClassMethod>1</ClassMethod>
<FormalSpec>hexColor1,hexColor2</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	do ..calculateRGBFromHexColor(hexColor1,.red1,.green1,.blue1)
	do ..calculateRGBFromHexColor(hexColor2,.red2,.green2,.blue2)
	
	set color=..calculateTextColorFromGradientColorsRGB(red1,green1,blue1,red2,green2,blue2)
	
	quit color
]]></Implementation>
</Method>

<Method name="calculateTextColorFromGradientColorsRGB">
<ClassMethod>1</ClassMethod>
<FormalSpec>red1,green1,blue1,red2,green2,blue2</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// get a color based on the average values of the gradient
	set red=(red1+red2)/2
	set green=(green1+green2)/2
	set blue=(blue1+blue2)/2
	
	
	// Use this calculated color to determine the text color 
	set color=..calculateTextColorFromBackgroundColorRGB(red,green,blue)
	
	quit color
]]></Implementation>
</Method>

<Method name="calculateTextColorFromBackgroundColorHex">
<ClassMethod>1</ClassMethod>
<FormalSpec>hexColor</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if ..isHexColorDarkOrLight(hexColor)="dark" {
		set color="#FFFFFF"	
	} else {
		set color="#111111"
	}
	quit color
]]></Implementation>
</Method>

<Method name="calculateTextColorFromBackgroundColorRGB">
<ClassMethod>1</ClassMethod>
<FormalSpec>red,green,blue</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set brightness=..calculateBrightnessY(red,green,blue)
	set color=..calculateTextColorFromBackgroundBrightness(brightness)
	
	quit color
]]></Implementation>
</Method>

<Method name="calculateBrightnessY">
<ClassMethod>1</ClassMethod>
<FormalSpec>red,green,blue</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=((red*299)+(green*587)+(blue*114))/255000
	quit out
]]></Implementation>
</Method>

<Method name="calculateTextColorFromBackgroundBrightness">
<ClassMethod>1</ClassMethod>
<FormalSpec>brightness</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if (brightness >= 0.65) {
		set color="#000000"
	} else {
		set color="#FFFFFF"
	}
	quit color
]]></Implementation>
</Method>

<Method name="calculateBorderColorFromBackgroundColor">
<Description><![CDATA[
Uses logic from here to create a border color based on background color:				<br />
	http://www.easyrgb.com/index.php?X=MATH&H=18#text18										<br />
																							<br />
	Expects input in #NNN or #NNNNNN format													<br />
																							<br />
Defaults to the input color if conversion fails											<br />]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inColor:%String,lChangeFactor:%String="0.9"</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ret=""
	
	Set ret2=..calculateRGBFromHexColor(inColor,.rComp,.gComp,.bComp)
	
	Set rComp2=rComp-((1-lChangeFactor)*255)
	Set gComp2=gComp-((1-lChangeFactor)*255)
	Set bComp2=bComp-((1-lChangeFactor)*255)
	
	If rComp2 < 0 Set rComp2=0
	If gComp2 < 0 Set gComp2=0
	If bComp2 < 0 Set bComp2=0
	
	Set ret=..calculateHexFromRGBColor(rComp2,gComp2,bComp2)
	
	Quit ret
]]></Implementation>
</Method>

<Method name="calculateRGBFromHexColor">
<Description>
Input hex color as either (#)NNN or (#)NNNNNN format
rComp,gComp,bComp will contain the component values
Method returns "rgb(r,g,b)" as string</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[inColor:%String,&rComp:%String="",&gComp:%String="",&bComp:%String=""]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ret="",rHex="",gHex="",bHex=""
	
	If (inColor?0.1"#"3AN) {
		Set rHex=$E(inColor,2,2)
		Set gHex=$E(inColor,3,3)
		Set bHex=$E(inColor,4,4)
	} elseif (inColor?0.1"#"6AN) {
		Set rHex=$E(inColor,2,3)
		Set gHex=$E(inColor,4,5)
		Set bHex=$E(inColor,6,7)
	} else {
		// invalid input - leave them as blank
	}
	
	If ((rHex'="") && (gHex'="") && (bHex'="")) {
		Set rComp=+$ZHEX(rHex)
		Set gComp=+$ZHEX(gHex)
		Set bComp=+$ZHEX(bHex)
		Set ret="rgb("_rComp_","_gComp_","_bComp_")"
	}
	
	Quit ret
]]></Implementation>
</Method>

<Method name="calculateRGBComponents">
<Description>
Input either "r,g,b" in first param (can be any format as long as there are 3 sequences of digits)
or separate RGB values in 3 params</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[rCompOrRGB:%String="",gCompOpt:%String="",bCompOpt:%String="",&rComp:%String="",&gComp:%String="",&bComp:%String="",&isValidRGB:%Boolean=0]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ret=""
	
	Set rComp="",gComp="",bComp=""
	if (((rCompOrRGB)?1.3N0.1"."0.N) && ((gCompOpt)?1.3N0.1"."0.N) && ((bCompOpt)?1.3N0.1"."0.N)) {
		// 3-param input
		Set rComp=+rCompOrRGB
		Set gComp=+gCompOpt
		Set bComp=+bCompOpt
	} else {
		// extract digits for r g b
		Set pos=0
		For idx=1:1:$LENGTH(rCompOrRGB) {
			Set char=$EXTRACT(rCompOrRGB,idx,idx)
			If ((char?1N)!(char?1".")) {
				if (pos<2) {
					set pos=1
					set rComp=rComp_char
				} elseif (pos=2) {
					set gComp=gComp_char
				} elseif (pos=3) {
					set bComp=bComp_char
				}
			} else {
				if (pos>0) {
					set pos=pos+1
				}
			}
		}
	}
	
	If ((0<=(+rComp)<=255) && (0<=(+gComp)<=255) && (0<=(+bComp)<=255)) {
		Set isValidRGB=1
	}
		
	Set ret="rgb("_$NUM(rComp,0)_","_$NUM(gComp,0)_","_$NUM(bComp,0)_")"
		
	Quit ret
]]></Implementation>
</Method>

<Method name="calculateHexFromRGBColor">
<Description>
Input either "r,g,b" in first param (can be any format as long as there are 3 sequences of digits)
or separate RGB values in 3 params</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>rCompOrRGB:%String="",gCompOpt:%String="",bCompOpt:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ret=""
	
	Set rComp="",gComp="",bComp="",isValidRGB=""
	
	Set ret=..calculateRGBComponents(rCompOrRGB,gCompOpt,bCompOpt,.rComp,.gComp,.bComp,.isValidRGB)

	If isValidRGB {
		Set rComp=+rComp
		Set gComp=+gComp
		Set bComp=+bComp

		Set rHex=$ZHEX(+$NUM(rComp,0))
		Set gHex=$ZHEX(+$NUM(gComp,0))
		Set bHex=$ZHEX(+$NUM(bComp,0))
		
		// pad with leading zero if needed
		If $LENGTH(rHex)<2 Set rHex="0"_rHex
		If $LENGTH(gHex)<2 Set gHex="0"_gHex
		If $LENGTH(bHex)<2 Set bHex="0"_bHex
		
		Set ret="#"_rHex_gHex_bHex
	} else {
		// invalid input, returns blank
		Set ret=""
	}
	
	Quit ret
]]></Implementation>
</Method>

<Method name="calculateHSLFromRGB">
<Description>
Input rComp, gComp, bComp as integers 0-255
Output hComp, sComp, lComp as fractions (0-1)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[rComp,gComp,bComp,&hComp,&sComp,&lComp]]></FormalSpec>
<Implementation><![CDATA[
	Set rComp=+rComp
	Set gComp=+gComp
	Set bComp=+bComp
	
	If (	((rComp < 0) ! (rComp > 255))
		!	((gComp < 0) ! (gComp > 255))
		!	((bComp < 0) ! (bComp > 255))
	) {
		Throw ##class(shared.exceptions.generalException).%New("Invalid input data. R, G, B values must be in the range of 0-255")
	}
	
    Set r=rComp/255
    Set g=gComp/255
    Set b=bComp/255
    
    Kill hComp
    Kill sComp
    Kill bComp

	Set varMin=r
	If (g<varMin) Set varMin=g
	If (b<varMin) Set varMin=b
	
	Set varMax=r
	If (g>varMax) Set varMax=g
	If (b>varMax) Set varMax=b
	
	Set delMax=varMax-varMin	

    Set lComp = ((varMax + varMin) / 2)

    If (delMax = 0) {
		Set hComp = 0
		Set sComp = 0
    } else {
		if (lComp < 0.5) {
		        Set sComp = delMax / (varMax + varMin)
		} else {
		        Set sComp = delMax / (2 - varMax - varMin)
		}

		Set delR = (((varMax - r) / 6) + (delMax / 2)) / delMax
		Set delG = (((varMax - g) / 6) + (delMax / 2)) / delMax
		Set delB = (((varMax - b) / 6) + (delMax / 2)) / delMax

		If (r = varMax) {
		        Set hComp = delB - delG
		} elseif (g = varMax) {
		        Set hComp = (1 / 3) + delR - delB
		} elseif (b = varMax) {
		        Set hComp = (2 / 3) + delG - delR
		}
		if (hComp < 0) {
		        Set hComp = hComp + 1
		}
		if (hComp > 1) {
		        Set hComp = hComp - 1
		}
    }
]]></Implementation>
</Method>

<Method name="calculateRGBFromHSL">
<Description>
Input hComp, sComp, lComp as fractions (0-1)
Output rComp, gComp, bComp as integers 0-255</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[hComp,sComp,lComp,&rComp,&gComp,&bComp]]></FormalSpec>
<Implementation><![CDATA[
	Set h=+hComp
	Set s=+sComp
	Set l=+lComp
	
	If (	((h < 0) ! (h > 1))
		!	((s < 0) ! (s > 1))
		!	((l < 0) ! (l > 1))
	) {
		Throw ##class(shared.exceptions.generalException).%New("Invalid input data. H, S, L values must be in the range of 0-1")
	}
	
	Kill rComp
	Kill gComp
	Kill bComp
	
	If (s = 0) {
		Set rComp = l * 255
		Set gComp = l * 255
		Set bComp = l * 255
	} else {
		
		If (l < 0.5) {
			Set var2 = l * (1 + s)
		} else {
			Set var2 = (l + s) - (s * l)
		}
		
		Set var1 = (2 * l) - var2
		Set rComp = 255 * ..getRGBCompFromHue(var1,var2,h + (1 / 3))
		Set gComp = 255 * ..getRGBCompFromHue(var1,var2,h)
		Set bComp = 255 * ..getRGBCompFromHue(var1,var2,h - (1 / 3))
	}
]]></Implementation>
</Method>

<Method name="getRGBCompFromHue">
<ClassMethod>1</ClassMethod>
<FormalSpec>v1,v2,vH</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If (vH < 0) {
		Set vH = vH + 1
	}
	
	If (vH > 1) {
		Set vH = vH - 1
	}

	If ((6 * vH) < 1) {
		Quit (v1 + ((v2 - v1) * 6 * vH))
	}

	If ((2 * vH) < 1) {
		Quit v2
	}
	
	If ((3 * vH) < 2) {
		Quit (v1 + ((v2 - v1) * (((2 / 3) - vH) * 6)))
	}
	
	Quit v1
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.commandLineMethods">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.utils.commandLineMethods.CLS/EV.0
;vc; Component: CLS.EF.utils.commandLineMethods
;vc;  Location: SmallDev
;vc; Date/Time: 12-Dec-14 11:19
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.commandLineMethods.CLS/EV.0</td><td>CLS.EF.utils.commandLineMethods</td><td>SmallDev</td><td style='white-space: nowrap;'>12-Dec-14 11:19</td><td>FredG</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63533,40810.998251</TimeChanged>
<TimeCreated>63533,40618.812781</TimeCreated>

<Method name="outputCounter">
<ClassMethod>1</ClassMethod>
<FormalSpec>currentCount,refreshInterval=100</FormalSpec>
<Implementation><![CDATA[
	if currentCount#refreshInterval=0 {
		write ?10,$c(8),$c(8),$c(8),$c(8),$c(8),$c(8),$c(8),$c(8),$c(8),$c(8),currentCount	
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.cspRequest">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.utils.cspRequest.CLS/EV.0
;vc; Component: CLS.EF.utils.cspRequest
;vc;  Location: SmallDev
;vc; Date/Time: 14-Jul-13 21:15
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.cspRequest.CLS/EV.0</td><td>CLS.EF.utils.cspRequest</td><td>SmallDev</td><td style='white-space: nowrap;'>14-Jul-13 21:15</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63006,45947</TimeChanged>
<TimeCreated>63006,45947.02922</TimeCreated>

<Method name="getOrderedRequestData">
<Description>
Pass in %request.Data and it returns ordereredRequestDataArray indexed by the order parameters </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&requestDataArray,&ordereredRequestDataArray]]></FormalSpec>
<Implementation><![CDATA[
	kill ordereredRequestDataArray
	set field=""
	for {
		set field=$O(requestDataArray(field))
		if field="" quit
		set index=requestDataArray(field,1,"O")
		set data=$G(requestDataArray(field,1))
		set ordereredRequestDataArray(index,field)=data	
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.dataValidation">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.utils.dataValidation.CLS/EV.11
;vc; Component: CLS.EF.utils.dataValidation
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.dataValidation.CLS/EV.11</td><td>CLS.EF.utils.dataValidation</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<ProcedureBlock>1</ProcedureBlock>
<Super>api.v2.errors,api.v2.common</Super>
<TimeChanged>63930,43235</TimeChanged>
<TimeCreated>63000,51705.959345</TimeCreated>

<Method name="getInternalFormat">
<ClassMethod>1</ClassMethod>
<FormalSpec>dataType,data</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=data
	if '$l(data) {
		//
	} elseif dataType="floatingPointNumber" {
		set out=..getInternalFormatFloatingPointNumber(data)
	}
	quit out
]]></Implementation>
</Method>

<Method name="getInternalFormatFloatingPointNumber">
<ClassMethod>1</ClassMethod>
<FormalSpec>data</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=$TR(data,",",".")
	quit out
]]></Implementation>
</Method>

<Method name="frontEndValidateInputData">
<Description>
Validates time, emailAddress, multiEmailAddress, phoneNumber, integer,floatingPointNumber, webAddress server side in the frontend</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[dataType,data,promptName,eventID="",&errorMessage]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set out=1, errorMessage=""
	if '$l(data) {
		//
	} elseif dataType="time" {
		set timeFormat=##class(setup.objEventSetting).getParameter("system","time format",eventID)
		if 'timeFormat set timeFormat=24
		if '..isValidTime(data,timeFormat) {
			set errorMessage=$case(timeFormat,12:##class(shared.pCSP).out("{{{VAR01}}} must be a valid 12 hour time",,promptName),24:##class(shared.pCSP).out("{{{VAR01}}} must be a valid 24 hour time",,promptName),:##class(shared.pCSP).out("{{{VAR01}}} invalid time format",,promptName))
		}
	} elseif dataType="emailAddress" {
		if '..isValidEmailAddress(data) {
			set errorMessage=##class(shared.pCSP).out("{{{VAR01}}} must be a valid email address",,promptName)
		}
	} elseif dataType="emailAddressWithName" {
		if '..isValidEmailAddressWithName(data) {
			set errorMessage=##class(shared.pCSP).out("{{{VAR01}}} must be a valid email address with an optional name",,promptName)
		}
	} elseif dataType="multiEmailAddress" {
		if '..isValidMultiEmailAddress(data) {
			set errorMessage=##class(shared.pCSP).out("{{{VAR01}}} must be a valid list of email addresses",,promptName)
		}
	} elseif dataType="phoneNumber" {
		if '..isValidPhoneNumber(data) {
			set errorMessage=##class(shared.pCSP).out("{{{VAR01}}} must be a valid phone number",,promptName)	
		}
	} elseif dataType="integer" {
		if '..isValidInteger(data) {
			set errorMessage=##class(shared.pCSP).out("{{{VAR01}}} must be a valid whole number",,promptName)	
		}
	} elseif dataType="floatingPointNumber" {
		if '..isValidFloatingPointNumber(data) {
			set errorMessage=##class(shared.pCSP).out("{{{VAR01}}} must be a valid decimal number",,promptName)	
		}
	} elseif dataType="webAddress" {
		if '..isValidWebAddress(data) {
			set errorMessage=##class(shared.pCSP).out("{{{VAR01}}} must be a valid web address",,promptName)	
		}
	} elseif dataType="dateRange" {
		/* DO NOT UNCOMMENT! It breaks date ranges. https://www.pivotaltracker.com/story/show/80538576
		if '..isValidDateRange(data) {
			set errorMessage=##class(shared.pCSP).out("{{{VAR01}}} must be a valid date range",,promptName)	
		}
		*/
	}
	if $l(errorMessage) set out=0
	quit out
]]></Implementation>
</Method>

<Method name="backEndValidateInputData">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[dataType,data,promptName,eventID="",&errorMessage]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ..frontEndValidateInputData(dataType, data, promptName, eventID, .errorMessage)
]]></Implementation>
</Method>

<Method name="isValidDataType">
<Description>
validates the passed in data against the data type of the cod item - lowest level of validation, called from objItemData.set()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>itemNameID,data</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set out=1
	if $L(data) {
		set dataType=##class(cod.objItemName).getTypeById(itemNameID)
		
		if dataType="text" {
			
		} elseif dataType="textarea" {
			
		} elseif dataType="radiobutton" {
			
		} elseif dataType="checkbox" {
			
		} elseif dataType="dropdown" {
			
		} elseif dataType="password" {
			
		} elseif dataType="multibox" {
			
		} elseif dataType="date" {
			
		} elseif dataType="time" {
			
		} elseif dataType="timestamp" {
			
		} elseif dataType="fileupload" {
			
		} elseif dataType="emailAddress" {
			set out=..isValidEmailAddress(data)
			
		} elseif dataType="multiEmailAddress" {
			set out=..isValidMultiEmailAddress(data)
			
		} elseif dataType="phoneNumber" {
			set out=..isValidPhoneNumber(data)
			
		} elseif dataType="integer" {
			set out=..isValidInteger(data)
			
		} elseif dataType="floatingPointNumber" {
			set out=..isValidFloatingPointNumber(data)
		
		} elseif dataType="webAddress" {
			set out=..isValidWebAddress(data)

		} elseif dataType="timestamp" {
			
		} elseif dataType="dateRange" {
			set out=..isValidDateRange(data)			
		}
	}
	
	quit out
]]></Implementation>
</Method>

<Method name="isValidInputDataFromAPI">
<Description>
data validation used from the API</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>itemName,data,eventID=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if data="EF_DELETE_DATA" return 1
	
	if data'="" {
		
		set itemID=##class(cod.objItemName).getIDFromDescriptionAndEvent(itemName,eventID)

		if ..isValidDataType(itemID,data)=0 return 0
	
		if ##class(cod.objItemName).hasAlternatives(itemID) {
			if ..isValidFixedAlternatives(itemID,data)=0 return 0	
		}
		
		set dataType=##class(cod.objItemName).getTypeById(itemID)
		if dataType="text" {
			if $L(data)>32000 return 0

		} elseif dataType="textarea" {
			if $L(data)>32000 return 0

		} elseif dataType="checkbox" {
			if ..isValidCheckbox(data) = 0 return 0			

		} elseif dataType="time" {
			if ..isValidTime(data,24) = 0 return 0 // force 24 hour format in API
			
		} elseif dataType="date" {
			if data'?4N1"-"2N1"-"2N return 0 // force ISO 8601 in API

		} elseif dataType="timestamp" {
			if data'?4N1"-"2N1"-"2N1"T"2N1":"2N1":"2N1"Z" return 0 // force ISO 8601 in API, must be converted to our timestamp format befvore saving

		}
		
	} else {
		do ..throwAPIGeneralException(..#EFErrCodeAPIsubmittedDataIsNull,"Key: "_itemName)	
	}
		
	quit 1
]]></Implementation>
</Method>

<Method name="isValidFixedAlternatives">
<Description>
make sure the passed in data in one of the valid alternatives</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>itemID,data</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	
	if ##class(cod.objItemName).getTypeById(itemID)="multibox" {
		for i=1:1:$L(data,"|") {
			set piece=$p(data,"|",i)
			if ..isAnAlternativeValid(itemID,piece)=0 return 0
		}
		
	} else {
		return ..isAnAlternativeValid(itemID,data)
	}
	quit 1
]]></Implementation>
</Method>

<Method name="isAnAlternativeValid">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemID,data</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set out=0
	
	if ##class(cod.objItemAlternatives).getIDFromDescription(itemID, data) {
		set out=1
	}
	quit out
]]></Implementation>
</Method>

<Method name="correctAlternativeCase">
<Description>
converts the passed in alternative text into the same text but with the correct upper/lower case
note: It WILL let invalid alternatives through</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>itemID,data</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set out=data
	
	set itemAlternativeID=##class(cod.objItemAlternatives).getIDFromDescription(itemID, data)
	if itemAlternativeID {
		set out=##class(cod.objItemAlternatives).getDescriptionByID(itemAlternativeID)	
	}
	
	quit out
]]></Implementation>
</Method>

<Method name="getValidationPatternForDataType">
<ClassMethod>1</ClassMethod>
<FormalSpec>dataType:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ret=""
	
	if ((dataType = "emailAddress") ! (dataType = "multiEmailAddress") ! (dataType = "emailAddressWithName")) {
		Set emailPattern="(([a-zA-Z0-9_\-\.\']+)(\+[a-zA-Z0-9_\-\.\']+){0,1}@(([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,63}|[0-9]{1,3}))"
	}
	
	if (dataType = "emailAddress") {
		Set ret="^"_emailPattern_"$"
	} if (dataType = "emailAddressWithName") {
		Set ret="("_emailPattern_")|(((""[^""]+"")|([^""\<]+))(\s)+\<"_emailPattern_"\>)"
	} elseif (dataType = "multiEmailAddress") {
		Set ret="^"_emailPattern_"(\s*[;\,]\s*"_emailPattern_")*$"
	} elseif (dataType="phoneNumber") {
		Set ret="^(?!(.*\-(\s)*\-.*))(?!(.*\.(\s)*\..*))(?=.*[\d\)](\s)*$)(?=.*(\d)+.*)(\+(\d){1,3}){0,1}(?=\s*([\d\(]).*)(([\d\s\-\.])|(\(([\d\-\.\s])+\)))*(\s)*$"
	} elseif (dataType="integer") {
		Set ret="^([\+\-]){0,1}\d+$"
	} elseif (dataType="floatingPointNumber") {
		Set ret="^[+-]?(?:\d+[,\.]?\d*|\d*[,\.]?\d+)[\r\n]*$"
	} elseif (dataType="webAddress") {
		Set ret="^(?:https?\:\/\/)?(?:\S+(?::\S*)?@)?(?:(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/.*)?$"
	}
	
	Quit ret
]]></Implementation>
</Method>

<Method name="isValidCheckbox">
<ClassMethod>1</ClassMethod>
<FormalSpec>inVal:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if (inVal="true") ! (inVal="false") return 1
	return 0
]]></Implementation>
</Method>

<Method name="isValidEmailAddress">
<ClassMethod>1</ClassMethod>
<FormalSpec>inVal:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit $MATCH(inVal,..getValidationPatternForDataType("emailAddress"))
]]></Implementation>
</Method>

<Method name="isValidEmailAddressWithName">
<ClassMethod>1</ClassMethod>
<FormalSpec>inVal:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit $MATCH(inVal,..getValidationPatternForDataType("emailAddressWithName"))
]]></Implementation>
</Method>

<Method name="isValidMultiEmailAddress">
<ClassMethod>1</ClassMethod>
<FormalSpec>inVal:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit $MATCH(inVal,..getValidationPatternForDataType("multiEmailAddress"))
]]></Implementation>
</Method>

<Method name="isValidPhoneNumber">
<ClassMethod>1</ClassMethod>
<FormalSpec>inVal:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit $MATCH(inVal,..getValidationPatternForDataType("phoneNumber"))
]]></Implementation>
</Method>

<Method name="isValidInteger">
<ClassMethod>1</ClassMethod>
<FormalSpec>inVal:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit $MATCH(inVal,..getValidationPatternForDataType("integer"))
]]></Implementation>
</Method>

<Method name="isValidFloatingPointNumber">
<ClassMethod>1</ClassMethod>
<FormalSpec>inVal:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit $MATCH(inVal,..getValidationPatternForDataType("floatingPointNumber"))
]]></Implementation>
</Method>

<Method name="isValidWebAddress">
<ClassMethod>1</ClassMethod>
<FormalSpec>inVal:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit $MATCH(inVal,..getValidationPatternForDataType("webAddress"))
]]></Implementation>
</Method>

<Method name="isValidTime">
<Description>
**This should be replaced by EF.validator.timeInput**</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inVal,xTimeFormat=24</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set out=$case(xTimeFormat,
		12:..isValidTime12hr(inVal),
		24:..isValidTime24hr(inVal),
		:0
	)
	
	quit out
]]></Implementation>
</Method>

<Method name="isValidTime12hr">
<ClassMethod>1</ClassMethod>
<FormalSpec>inVal</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set out=1
	if inVal="00:00" {
		set out=0
	} else {
		set timeH=$ZTH(inVal,4,"")
		if timeH=""  {
			set out=0
		}
	}
	quit out
]]></Implementation>
</Method>

<Method name="isValidTime24hr">
<ClassMethod>1</ClassMethod>
<FormalSpec>inVal</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set out=1
	set timeH=$ZTH(inVal,2,"")
	if timeH="" {
		set out=0
	}
	quit out
]]></Implementation>
</Method>

<Method name="isValidDateRange">
<ClassMethod>1</ClassMethod>
<FormalSpec>inVal</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if inVal'?4N1"-"2N1"-"2N1"/"4N1"-"2N1"-"2N return 0

	set date1=##class(shared.dateFunctions).multiDate($p(inVal,"/",1),1)
	set date2=##class(shared.dateFunctions).multiDate($p(inVal,"/",2),1)
	if (date1="") ! (date2="") return 0
	
	if date1>date2 return 0
	
	return 1
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.dataValidationTestCase">
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63453,55322.882349</TimeChanged>
<TimeCreated>63453,43264.752726</TimeCreated>

<Method name="TestIsValidDateRange">
<Implementation><![CDATA[
	Do $$$AssertTrue(##class(dataValidation).isValidDateRange("2014-03-01/2014-03-20"))
	Do $$$AssertTrue(##class(dataValidation).isValidDateRange("2014-01-01/2014-12-31"))
	Do $$$AssertTrue(##class(dataValidation).isValidDateRange("2014-01-01/2014-01-01"))
	
	Do $$$AssertNotTrue(##class(dataValidation).isValidDateRange("2014-12-31/2014-12-24"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidDateRange("20140301/20140320"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidDateRange("01-01-2014/20-02-2014"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidDateRange("01-01-2014-20-02-2014"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidDateRange("2014-01-01-2014-12-31"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidDateRange("2014-01-01/"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidDateRange("2014-01-01"))
]]></Implementation>
</Method>

<Method name="TestIsValidEmailAddress">
<Implementation><![CDATA[
	Do $$$AssertTrue(##class(dataValidation).isValidEmailAddress("niceandsimple@example.com"))
	Do $$$AssertTrue(##class(dataValidation).isValidEmailAddress("very.common@example.com"))
	Do $$$AssertTrue(##class(dataValidation).isValidEmailAddress("a.little.lengthy.but.fine@dept.example.com"))
	Do $$$AssertTrue(##class(dataValidation).isValidEmailAddress("joe@moo.co"))
	Do $$$AssertTrue(##class(dataValidation).isValidEmailAddress("joe+tag@moo.co"))
	Do $$$AssertTrue(##class(dataValidation).isValidEmailAddress("joe+123@moo.co"))
	
	Do $$$AssertNotTrue(##class(dataValidation).isValidEmailAddress("bad @example.com"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidEmailAddress("bad.commonexample.com"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidEmailAddress("joe@dsds@dsds.com"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidEmailAddress("joe@moo.c"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidEmailAddress("joe+@moo.c"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidEmailAddress("+tag@moo.c"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidEmailAddress("joe+t ag@moo.c"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidEmailAddress("joe+tag+123@moo.c"))
]]></Implementation>
</Method>

<Method name="TestIsValidEmailAddressWithName">
<Implementation><![CDATA[
	Do $$$AssertTrue(##class(dataValidation).isValidEmailAddressWithName("""joe shmo"" <niceandsimple@example.com>"))
	Do $$$AssertTrue(##class(dataValidation).isValidEmailAddressWithName("joe schmo <very.common+tag@example.com>"))
	Do $$$AssertTrue(##class(dataValidation).isValidEmailAddressWithName("joe <a.little.lengthy.but.fine@dept.example.com>"))
	Do $$$AssertTrue(##class(dataValidation).isValidEmailAddressWithName("joe@moo.co"))
	
	Do $$$AssertNotTrue(##class(dataValidation).isValidEmailAddressWithName("""joe shmo <niceandsimple@example.com>"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidEmailAddressWithName("joe schmo very.common@example.com>"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidEmailAddressWithName("joe <a.little.lengthy.but.fine@dept.example.com"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidEmailAddressWithName("<joe@moo.co>"))
]]></Implementation>
</Method>

<Method name="TestIsValidMultiEmailAddress">
<Implementation><![CDATA[
	Do $$$AssertTrue(##class(dataValidation).isValidMultiEmailAddress("joe@moo.com"))
	Do $$$AssertTrue(##class(dataValidation).isValidMultiEmailAddress("joe@moo.com; perr@cow.org"))
	Do $$$AssertTrue(##class(dataValidation).isValidMultiEmailAddress("joe+tag@moo.com, perr@cow.org"))
	Do $$$AssertTrue(##class(dataValidation).isValidMultiEmailAddress("joe@moo.com; perr@cow.org; dsadas+123@dsadasd.com"))
	Do $$$AssertTrue(##class(dataValidation).isValidMultiEmailAddress("joe@moo.com, perr@cow.org, weqwedasdcxzczc@dsadasd.com"))
	Do $$$AssertTrue(##class(dataValidation).isValidMultiEmailAddress("joe@moo.com; perr@cow.org, dsadas@dsadasd.com"))
	
	Do $$$AssertNotTrue(##class(dataValidation).isValidMultiEmailAddress("joe@moo.com perr@cow.org; weqwe@dasdasd.com"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidMultiEmailAddress("joe@moo.com, perr@cow.org weqwedasdcxzczc@dsadasd.com"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidMultiEmailAddress("joe@moo.com perr@cow.org"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidMultiEmailAddress("joe@moo.com perr@cow.org weqwe@dasdasd.com"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidMultiEmailAddress("joe@mo o.com; perrcow.org"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidMultiEmailAddress("joe@moo.com; ""Joe Cow"" <moo@perrcow.org>"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidMultiEmailAddress("joe@moo.com-perr@cow.org"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidMultiEmailAddress("joe@moo.com/perr@cow.org"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidMultiEmailAddress("joe@moo.com; perr@co w.org; dsadas@dsadasd.com"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidMultiEmailAddress("joe@moo.com perr@cow.org weqwe@da sdasd.com"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidMultiEmailAddress("joe@moo.com, perr +@cow.org, weqwedas dcxzczc@dsadasd.com"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidMultiEmailAddress("joe@moo.com; pe+r+r@c ow.org, dsadas@dsadasd.com"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidMultiEmailAddress("joe@moo.com perr@cow.o; weqwe@dasdasd.com"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidMultiEmailAddress("joe@moo.com, per r@cow.org weqwedasd  cxzczc@dsadasd.com"))
]]></Implementation>
</Method>

<Method name="TestIsValidPhoneNumber">
<Implementation><![CDATA[
	Do $$$AssertTrue(##class(dataValidation).isValidPhoneNumber("404-808-2251"))
	Do $$$AssertTrue(##class(dataValidation).isValidPhoneNumber("(404)-808-2251"))
	Do $$$AssertTrue(##class(dataValidation).isValidPhoneNumber("404.808.2251"))
	Do $$$AssertTrue(##class(dataValidation).isValidPhoneNumber("+44 077774194658"))
	Do $$$AssertTrue(##class(dataValidation).isValidPhoneNumber("+44 (0) 77774194658"))
	Do $$$AssertTrue(##class(dataValidation).isValidPhoneNumber("+12"))
	Do $$$AssertTrue(##class(dataValidation).isValidPhoneNumber("1"))
	Do $$$AssertTrue(##class(dataValidation).isValidPhoneNumber("(404-808)-2251"))
	Do $$$AssertTrue(##class(dataValidation).isValidPhoneNumber("( 404 )808-2251"))
	Do $$$AssertTrue(##class(dataValidation).isValidPhoneNumber("404-808-(2251)"))
	
	Do $$$AssertNotTrue(##class(dataValidation).isValidPhoneNumber("404-808-"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidPhoneNumber("404-808."))
	Do $$$AssertNotTrue(##class(dataValidation).isValidPhoneNumber("()-808-2251"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidPhoneNumber("((404)-808-2251"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidPhoneNumber("((404))-808-2251"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidPhoneNumber("(404)--808-2251"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidPhoneNumber("(404)..808..2251"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidPhoneNumber("1-800-BUY-CARS"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidPhoneNumber("+1"))
]]></Implementation>
</Method>

<Method name="TestIsValidInteger">
<Implementation><![CDATA[
	Do $$$AssertTrue(##class(dataValidation).isValidInteger("1"))
	Do $$$AssertTrue(##class(dataValidation).isValidInteger("123"))
	Do $$$AssertTrue(##class(dataValidation).isValidInteger("0"))
	Do $$$AssertTrue(##class(dataValidation).isValidInteger("1123123213213"))
	Do $$$AssertTrue(##class(dataValidation).isValidInteger("-1"))
	Do $$$AssertTrue(##class(dataValidation).isValidInteger("-21"))
	Do $$$AssertTrue(##class(dataValidation).isValidInteger("-2131231"))
	
	Do $$$AssertNotTrue(##class(dataValidation).isValidInteger("1.2"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidInteger("1AA"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidInteger("AA1"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidInteger("one"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidInteger("two"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidInteger("-1.2"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidInteger("234."))
	Do $$$AssertNotTrue(##class(dataValidation).isValidInteger("12E10"))
]]></Implementation>
</Method>

<Method name="TestIsValidFloatingPointNumber">
<Implementation><![CDATA[
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("1"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("123"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("0"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("1123123213213"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("-1"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("-21"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("-2131231"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("1.22"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("123.121"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("0.0"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("1123123213213.213213213"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("-1.213123"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("-21.2312321"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("-2131231.213543243"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber(".1234"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("1234."))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("1,22"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("123,121"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("1,22"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("0,0"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("1123123213213,213213213"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("-1,213123"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("-21,2312321"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("-2131231,213543243"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber(",1234"))
	Do $$$AssertTrue(##class(dataValidation).isValidFloatingPointNumber("1234"))
	
	Do $$$AssertNotTrue(##class(dataValidation).isValidFloatingPointNumber("."))
	Do $$$AssertNotTrue(##class(dataValidation).isValidFloatingPointNumber("1234.1323.2312312"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidFloatingPointNumber("1.23E10"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidFloatingPointNumber("1.23AAA"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidFloatingPointNumber("AAA1.23"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidFloatingPointNumber("1..23"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidFloatingPointNumber("..23"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidFloatingPointNumber("23.."))
	Do $$$AssertNotTrue(##class(dataValidation).isValidFloatingPointNumber(","))
	Do $$$AssertNotTrue(##class(dataValidation).isValidFloatingPointNumber("1234,1323,2312312"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidFloatingPointNumber("1,23E10"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidFloatingPointNumber(",,23"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidFloatingPointNumber("23,,"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidFloatingPointNumber(",,23"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidFloatingPointNumber(",."))
	Do $$$AssertNotTrue(##class(dataValidation).isValidFloatingPointNumber(".,"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidFloatingPointNumber("1234,1323.2312312"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidFloatingPointNumber("1234.1323,2312312"))
]]></Implementation>
</Method>

<Method name="TestIsValidWebAddress">
<Implementation><![CDATA[
	Do $$$AssertTrue(##class(dataValidation).isValidWebAddress("www.google.com/dsdsd"))
	Do $$$AssertTrue(##class(dataValidation).isValidWebAddress("www.google.com/dsad dasddsa dasdasd"))
	Do $$$AssertTrue(##class(dataValidation).isValidWebAddress("http://www.google.com"))
	Do $$$AssertTrue(##class(dataValidation).isValidWebAddress("https://www.google.com"))
	Do $$$AssertTrue(##class(dataValidation).isValidWebAddress("http://192.168.1.1/moo.html"))
	Do $$$AssertTrue(##class(dataValidation).isValidWebAddress("https://user:pass@192.168.1.1/moo.html"))
	
	Do $$$AssertNotTrue(##class(dataValidation).isValidWebAddress("ftp://www.google.com"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidWebAddress("http:/www.google.com"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidWebAddress("http://-dsadasd.com"))
	Do $$$AssertNotTrue(##class(dataValidation).isValidWebAddress("www.google.c"))
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.efCallout">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.utils.efCallout.CLS/EV.2
;vc; Component: CLS.EF.utils.efCallout
;vc;  Location: SmallDev
;vc; Date/Time: 05-Jun-15 10:21
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.efCallout.CLS/EV.2</td><td>CLS.EF.utils.efCallout</td><td>SmallDev</td><td style='white-space: nowrap;'>05-Jun-15 10:21</td><td>RajibQ</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63708,38499.54514</TimeChanged>
<TimeCreated>63256,61873.677183</TimeCreated>

<Method name="getDLLFullPath">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return ##class(%SYSTEM.Util).BinaryDirectory()_"\EFCalloutDLL.dll"
]]></Implementation>
</Method>

<Method name="checkValidDLLDateTimeValue">
<ClassMethod>1</ClassMethod>
<FormalSpec>inDateTime=""</FormalSpec>
<Implementation><![CDATA[
	// Only checks pattern, not value range!
	If ('(##class(shared.dateFunctions).isValidHorologDateTime(inDateTime))) {
		Throw ##class(shared.exceptions.generalException).%New("Invalid date/time value")
	}
]]></Implementation>
</Method>

<Method name="efConvertTimeFromUTC">
<ClassMethod>1</ClassMethod>
<FormalSpec>inDateTime,inDestinationTimeZone</FormalSpec>
<Implementation><![CDATA[
	Do ..checkValidDLLDateTimeValue(inDateTime)
	Return $ZF(-3, ..getDLLFullPath(), "EFConvertTimeFromUTC", inDateTime, inDestinationTimeZone)
]]></Implementation>
</Method>

<Method name="efConvertTimeToUTC">
<ClassMethod>1</ClassMethod>
<FormalSpec>inDateTime,inSourceTimeZone</FormalSpec>
<Implementation><![CDATA[
	Do ..checkValidDLLDateTimeValue(inDateTime)
	Return $ZF(-3, ..getDLLFullPath(), "EFConvertTimeToUTC", inDateTime, inSourceTimeZone)
]]></Implementation>
</Method>

<Method name="efConvertTime">
<ClassMethod>1</ClassMethod>
<FormalSpec>inDateTime,inSourceTimeZone,inDestinationTimeZone</FormalSpec>
<Implementation><![CDATA[
	Do ..checkValidDLLDateTimeValue(inDateTime)
	Return $ZF(-3, ..getDLLFullPath(), "EFConvertTime", inDateTime, inSourceTimeZone, inDestinationTimeZone)
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.httpRequest">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.utils.httpRequest.CLS/EV.4
;vc; Component: CLS.EF.utils.httpRequest
;vc;  Location: SmallDev
;vc; Date/Time: 12-Jun-15 13:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.httpRequest.CLS/EV.4</td><td>CLS.EF.utils.httpRequest</td><td>SmallDev</td><td style='white-space: nowrap;'>12-Jun-15 13:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63715,48296.401209</TimeChanged>
<TimeCreated>62987,41013.776291</TimeCreated>

<Method name="createHttpRequestSSLcache">
<Description>
create and return a SSL http request object that uses the cache SSL </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>debugProxyReference=""</FormalSpec>
<ReturnType>%Net.HttpRequest</ReturnType>
<Implementation><![CDATA[
	
	set httprequest=##class(%Net.HttpRequest).%New()
	set httprequest.FollowRedirect=0
	set httprequest.Timeout="5"
	set httprequest.Https=1
	set httprequest.SSLConfiguration="defaultSSL"
	if $l(debugProxyReference) {
		if $D(^xDebugProxy(debugProxyReference,"server")) {
			set httprequest.ProxyServer=^xDebugProxy(debugProxyReference,"server")
			set httprequest.ProxyPort=^xDebugProxy(debugProxyReference,"port")
			set httprequest.ProxyHTTPS=1
			set httprequest.ProxyTunnel=1
		}
	}
	quit httprequest
]]></Implementation>
</Method>

<Method name="SSLForSoap">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&soapClient:%SOAP.WebClient,debugProxyReference=""]]></FormalSpec>
<Implementation><![CDATA[
	set soapClient.Timeout="5"
	set soapClient.HttpProxyHTTPS=1
	set soapClient.SSLConfiguration="defaultSSL"
	
	if $l(debugProxyReference) {
		if $D(^xDebugProxy(debugProxyReference,"server")) {
			set soapClient.HttpProxyServer=^xDebugProxy(debugProxyReference,"server")
			set soapClient.HttpProxyPort=^xDebugProxy(debugProxyReference,"port")
		}
	}
]]></Implementation>
</Method>

<Method name="createHttpRequest">
<Description>
create and return a non-SSL http request object</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Net.HttpRequest</ReturnType>
<Implementation><![CDATA[
	set httprequest=##class(%Net.HttpRequest).%New()
	set httprequest.FollowRedirect=0
	set httprequest.Timeout="5"
	if $L(##class(setup.objSetting).getParameter("proxy","nonSSL server"))	{  // Aviva only I think at present
		set httprequest.ProxyServer=##class(setup.objSetting).getParameter("proxy","nonSSL server")
		set httprequest.ProxyPort=##class(setup.objSetting).getParameter("proxy","nonSSL port")
	} 
	
	quit httprequest
]]></Implementation>
</Method>

<Method name="createRedirectsHttpRequest">
<Description>
special case for redirects - sometimes want to get local (eg aviva)</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Net.HttpRequest</ReturnType>
<Implementation><![CDATA[
	set httprequest=..createHttpRequestSSLcache()
	set httprequest.Server=##class(EF.config.server).getRedirectsDomain()
	quit httprequest
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.lists">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.utils.lists.CLS/EV.0
;vc; Component: CLS.EF.utils.lists
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.lists.CLS/EV.0</td><td>CLS.EF.utils.lists</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63929,37559</TimeChanged>
<TimeCreated>63929,36837.383575</TimeCreated>

<Method name="appendToList">
<Description>
Appends list2 to list 1</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&list:%Collection.AbstractListOfObj,list2:%Collection.AbstractListOfObj]]></FormalSpec>
<Implementation><![CDATA[
	for i=1:1:list2.Count() {
		do list.Insert(list2.GetAt(i))
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.moduleStats">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.utils.moduleStats.CLS/EV.2
;vc; Component: CLS.EF.utils.moduleStats
;vc;  Location: SmallDev
;vc; Date/Time: 17-Apr-15 16:42
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.moduleStats.CLS/EV.2</td><td>CLS.EF.utils.moduleStats</td><td>SmallDev</td><td style='white-space: nowrap;'>17-Apr-15 16:42</td><td>AdrianM</td></tr></table>
]]></Description>
<Super>%Persistent</Super>
<TimeChanged>63574,54926</TimeChanged>
<TimeCreated>63238,51751.046057</TimeCreated>

<Method name="exportModuleUsageForAllClients">
<ClassMethod>1</ClassMethod>
<FormalSpec>filename="d:\temp\exportModuleUsageForAllClients.csv"</FormalSpec>
<Implementation><![CDATA[	// ### needs to be rewritten for the new module classes ###
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^EF.utils.moduleStatsD</DataLocation>
<DefaultData>moduleStatsDefaultData</DefaultData>
<IdLocation>^EF.utils.moduleStatsD</IdLocation>
<IndexLocation>^EF.utils.moduleStatsI</IndexLocation>
<StreamLocation>^EF.utils.moduleStatsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="moduleStatsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.utils.outputRedirection">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.utils.outputRedirection.CLS/EV.3
;vc; Component: CLS.EF.utils.outputRedirection
;vc;  Location: SmallDev
;vc; Date/Time: 25-Apr-16 14:48
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.outputRedirection.CLS/EV.3</td><td>CLS.EF.utils.outputRedirection</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Apr-16 14:48</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%Persistent</Super>
<TimeChanged>63994,61238</TimeChanged>
<TimeCreated>63392,38313.437337</TimeCreated>

<Method name="redirectMethodOutputToString">
<Description>
The ProcedureBlock = 0 is important
 it allows for calling of labels within the ClassMethod</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>object,methodName,arg1=""</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	new (object, methodName, %request, arg1)
	//redirects to out
	set out="" 
   //Redirect IO to the current routine - makes use of the labels defined below
   use $io::("^"_$ZNAME)
   //Enable redirection
   do ##class(%Device).ReDirectIO(1)
   //Any write statements here will be redirected to the labels defined below
   if arg1="" {
   	do $method(object,methodName)
   } else {
	do $method(object,methodName,arg1)
   }
   //Disable redirection
   do ##class(%Device).ReDirectIO(0)
   quit out
   //Labels that allow for IO redirection
   //Read Character - we don't care about reading
rchr(c)      quit
   //Read a string - we don't care about reading
rstr(sz,to)  quit
   //Write a character - call the output label
wchr(s)      do output($char(s))  quit
   //Write a form feed - call the output label
wff()        do output($char(12))  quit
   //Write a newline - call the output label
wnl()        do output($char(13,10))  quit
   //Write a string - call the output label
wstr(s)      do output(s)  quit
   //Write a tab - call the output label
wtab(s)      do output($char(9))  quit
   //Output label - this is where you would handle what you actually want to do.
   //  in our case, we want to write to myStream
output(s)    set out=out_s  quit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^EF.utils.outputRedirectionD</DataLocation>
<DefaultData>outputRedirectionDefaultData</DefaultData>
<IdLocation>^EF.utils.outputRedirectionD</IdLocation>
<IndexLocation>^EF.utils.outputRedirectionI</IndexLocation>
<StreamLocation>^EF.utils.outputRedirectionS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="outputRedirectionDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="EF.utils.outputRedirectionStream">
<Abstract>1</Abstract>
<TimeChanged>64023,55142.451622</TimeChanged>
<TimeCreated>64023,52764.638847</TimeCreated>

<Method name="topbit">
<ClassMethod>1</ClassMethod>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[
	do ##class(shared.pageMethods).createBackendVariables()	
	
	set isExcel=+%request.Get("isExcel")
	set isPrint=+%request.Get("isPrint")
	set isCSV=+%request.Get("isCSV")
	
	set profileID=%request.Get("profileID")
	if isCSV=1	{
		set %response.Redirect="dynaRepResultsCSV.csp?profileID="_profileID
		quit 0     
	}
	
	do ##class(reports.methods).outputReportHTTPHeader($S(isExcel:"excel",1:""),profileID)
	set reportRunID=%request.Get("reportRunID")
	
	if reportRunID {
		&SQL(SELECT objProfile INTO :tmp FROM reports.objReportRun WHERE ID = :reportRunID)
		if +SQLCODE=0 {	
			set profileID=tmp
			set %session.Data("eventsforce","backend","reportRunID")=reportRunID
		}
	}
	
	if profileID="" set profileID=$G(%session.Data("eventsforce","backend","profileID"))
	set %session.Data("eventsforce","backend","profileID")=profileID
	set reportRunID=$G(%session.Data("eventsforce","backend","reportRunID"))
	
	if 'reportRunID {
		&SQL(SELECT ID INTO :reportRunID FROM reports.objReportRun WHERE (sessionID = :sessionID) AND (objProfile = :profileID) ORDER BY ID DESC)
	}
	
	set reportEventID=##class(reports.methods).getEventIDForReportRunID(reportRunID)
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.populate.abstractEvent">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.utils.populate.abstractEvent.CLS/EV.4
;vc; Component: CLS.EF.utils.populate.abstractEvent
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.populate.abstractEvent.CLS/EV.4</td><td>CLS.EF.utils.populate.abstractEvent</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64082,60664</TimeChanged>
<TimeCreated>63414,36832.599847</TimeCreated>

<Method name="populateAbstractEvent">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID,submitterCount,maxSubmissions,submissionDateYYYYMMDD=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set submissionCount=0
	for submitter=1:1:submitterCount {
		set personID=##class(EF.utils.populate.codPeople).createRandomPerson(eventID)
		
		for entry=1:1:(1+$Random(5)) {
			TSTART
			try {
				set documentID=..createRandomAbstractEntry(personID,eventID)
				if submissionDateYYYYMMDD {
					do ..updateSubmissionDate(documentID,submissionDateYYYYMMDD)
				}
				
			} catch errObj {
				TROLLBACK
				throw errObj	
			}
			TCOMMIT
			set submissionCount=submissionCount+1
			if maxSubmissions {
				if submissionCount>=maxSubmissions {
					return submissionCount
				}
			}
		
		}
	}
	return submissionCount
	/*
	for reviewer=1:1:((submitterCount\5)+1) {
		set reviewerID=..createRandomreviewer(eventID)
		do ..createReviewsForEveryEntry(reviewerID,eventID)
	}
	*/
]]></Implementation>
</Method>

<Method name="updateSubmissionDate">
<ClassMethod>1</ClassMethod>
<FormalSpec>documentID,submissionDateYYYYMMDD</FormalSpec>
<Implementation><![CDATA[
	set objDocument = ##class(abstract.objDocument).%OpenId(documentID)
	set objDocument.xCRstamp = ##class(shared.dateFunctions).multiDate(submissionDateYYYYMMDD,25)_" 12:00:00"
	do objDocument.%Save()
]]></Implementation>
</Method>

<Method name="createRandomAbstractEntry">
<ClassMethod>1</ClassMethod>
<FormalSpec>personID,eventID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	#dim document as abstract.objDocument
	#dim documentID as %Integer
	
	
	set document = ##class(abstract.objDocument).createNew()
	set document.abstractNumber = $Select(..sometimes():$Random(1000),1:"")
	set document.active = $Select(..sometimes(80):1,1:0)
	do document.objAssignedPresentationMethodSetObjectId(..getRandomPresentationMethodID())
	do document.objPreferredPresentationMethodSetObjectId(..getRandomPresentationMethodID())
	set document.authorID=personID
	set document.description=..getRandomDocumentTitle()
	do document.objLanguageSetObjectId(1)
	do document.objStatusSetObjectId(..getRandomStatusID())
	do document.objTopicSetObjectId(..getRandomTopicID(eventID))
	set document.submitterID=personID
	
	try {
		do document.%Save()
	} catch error {
		throw ##class(shared.exceptions.generalException).%New("could not save abstarct")	
	}
	set documentID=document.%Id()

	do ##class(abstract.objItemData).set(documentID,##class(cod.objItemName).getIDFromDescriptionNoEvent("Presenting Author ID"),personID)

	do document.%Close()
	
	do ##class(abstract.objDocumentSectionDefinition).getDocumentActiveSectionsArray(eventID,.sectionIDs)
	set defaultSectionID = sectionIDs(1)
	do ##class(abstract.objDocumentSectionData).save(documentID,defaultSectionID,..getRandomHTML())

	return documentID
]]></Implementation>
</Method>

<Method name="getRandomHTML">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return "Lorem ipsum dolor sit amet, nam tincidunt quis malesuada, integer erat ipsum nunc penatibus vivamus. Pulvinar hendrerit, velit elit malesuada rutrum, suspendisse sapien eu erat cras ut. Rutrum volutpat velit eget. Magna diam praesent commodo lacus. In massa cras massa, nibh tempus sed consequat iaculis donec. Montes in, eleifend a elit vestibulum morbi nec, adipiscing pulvinar lectus, vitae quis, tristique sem id. Voluptate ut habitant eleifend felis, donec tellus varius sapien, sollicitudin phasellus quis sodales neque, quam fermentum dapibus cum porttitor integer ante, curabitur ac."
]]></Implementation>
</Method>

<Method name="getRandomPresentationMethodID">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim random as %Integer
	
	set random = $random(100)+1
	
	if random < 50 {
		return ##class(abstract.objPresentationMethod).getIDfromDescription("oral")	
	} elseif random<70 {
		return ##class(abstract.objPresentationMethod).getIDfromDescription("poster")
	} elseif random<90 {
		return ##class(abstract.objPresentationMethod).getIDfromDescription("either")
	} else {
		return ""
	}
]]></Implementation>
</Method>

<Method name="getRandomStatusID">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim random as %Integer
	
	set random = $random(100)+1
	if random < 80 {
		return 2 //complete
	} else {
		return 1 //incomplete
	}
]]></Implementation>
</Method>

<Method name="sometimes">
<ClassMethod>1</ClassMethod>
<FormalSpec>chance:%String="50%"</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set chance = +chance
	set result = $Random(100)+1
	if result < chance {
		return 1
	} else {
		return 0
	}
]]></Implementation>
</Method>

<Method name="getRandomTopicID">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare("SELECT * FROM abstract.objTopic WHERE (objEvent = ?) AND (active=1)")
	do rs.Execute(eventID)
	set count=0
	while rs.Next() {
		set topicID=rs.Get("ID")
		set count=count+1
		set topics(count)=topicID
	}
	set selectedNumber=($Random(count)+1)
	set randomTopicID = topics(selectedNumber)
	
	return randomTopicID
]]></Implementation>
</Method>

<Method name="createReviewsForEveryEntry">
<ClassMethod>1</ClassMethod>
<FormalSpec>reviewerID,eventID</FormalSpec>
<Implementation><![CDATA[
	/*
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare("SELECT * FROM awards.objEntry WHERE (objEvent = ?) AND (active=1)")
	do rs.Execute(eventID)
	set count=0
	while rs.Next() {
		set entryID=rs.Get("ID")
		do ..createRandomReviews(entryID,eventID,reviewerID)
	}
	*/
]]></Implementation>
</Method>

<Method name="createRandomReviews">
<ClassMethod>1</ClassMethod>
<FormalSpec>entryID,eventID,reviewerID</FormalSpec>
<Implementation><![CDATA[
	/*
	set gradeCount=##class(setup.objEventSetting).getParameter("awards","grade count",eventID)
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare("SELECT * FROM awards.objCriteria WHERE (objEvent = ?) AND (active=1)")
	do rs.Execute(eventID)
	set count=0
	while rs.Next() {
		set criteriaID=rs.Get("ID")
	
		do ##class(awards.objReview).saveReviewGrade(reviewerID,entryID,$R(gradeCount)+1,criteriaID)
		do ##class(awards.objReview).saveReviewComment(reviewerID,entryID,..getRandomReviewComment(),criteriaID)
	}
	*/
]]></Implementation>
</Method>

<Method name="addReview">
<ClassMethod>1</ClassMethod>
<FormalSpec>documentID,reviewerID,grade,review,isPaper</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	&SQL(INSERT INTO abstract.objReview 
		(objDocument,objPerson,grade,description,isReviewOfPaper,isComplete) 
		VALUES (:documentID,:reviewerID,:grade,:review,:isPaper,1))
	return %ROWID
]]></Implementation>
</Method>

<Method name="createRandomreviewer">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	/*
	set personID=##class(EF.utils.populate.codPeople).createRandomPerson(eventID)
	set panelID=..getRandomJudgingPanelID(eventID)
	&SQL(INSERT INTO awards.lnkPanelPerson (objPanel,objPerson) VALUES (:panelID,:personID))
	
	return personID
	*/
]]></Implementation>
</Method>

<Method name="getRandomDocumentTitle">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	return ##class(%PopulateUtils).Mission()
]]></Implementation>
</Method>

<Method name="getRandomReviewComment">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[

 Set t1=$LB("","Somewhat ","Very ","Incredible ","A little ","Not very ","Average ","Tremendously ")
 Set t2=$LB("good","bad","orginal","mediocre","pointless","brilliant","boring","exiting","unusual","precise","consise","fluffy","focused","middle of the road","ground breaking","dim witted","interesting")

 Quit $LI(t1,$Random($LL(t1))+1)_$LI(t2,$random($LL(t2))+1)
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.populate.accom">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.utils.populate.accom.CLS/EV.0
;vc; Component: CLS.EF.utils.populate.accom
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.populate.accom.CLS/EV.0</td><td>CLS.EF.utils.populate.accom</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<Super>%RegisteredObject</Super>
<TimeChanged>64083,42406</TimeChanged>
<TimeCreated>64083,34578.521535</TimeCreated>

<Method name="createAccomEvent">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventName</FormalSpec>
<ReturnType>setup.eventConfiguration</ReturnType>
<Implementation><![CDATA[
	#dim eventConfiguration As setup.eventConfiguration = ##class(setup.eventConfiguration).createForNewEvent()
	
	do eventConfiguration.setMainEventName(eventName)
	do eventConfiguration.setEventStartTimeStamp("2025-12-25 09:00:00")
	do eventConfiguration.setEventEndTimeStamp("2025-12-27 17:00:00")
	do eventConfiguration.setHasAccommodation(1)
	do eventConfiguration.setHasCost(1)
	do eventConfiguration.setIdentifier("anonymous")
	do eventConfiguration.save()
	set eventID=eventConfiguration.getEventID()
	
	do ##class(setup.objEventSetting).setParameter("accommodation","get guest names",1,eventID)
	do ##class(setup.objEventSetting).setParameter("system","do not use email",1,eventID)
	
	return eventConfiguration
]]></Implementation>
</Method>

<Method name="createHotel">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[eventConfiguration:setup.eventConfiguration,name="Test Hotel",town="test town",country="test country",&roomTypeID]]></FormalSpec>
<Implementation><![CDATA[
	set eventID=eventConfiguration.getEventID()
	set venueID=##class(accom.objVenue).add()

	do ##class(accom.objVenueItemData).set(venueID,"description",name)
	do ##class(accom.objVenueItemData).set(venueID,"town",town)
	do ##class(accom.objVenueItemData).set(venueID,"country",country)
	
	set roomCategoryID=##class(accom.objRoomCategory).add(venueID,"rooms")
	set roomTypeID=##class(accom.objRoomType).add(roomCategoryID,"double",2,1)
	
	set eventHotelID=##class(accom.objEventHotel).add(eventID,venueID)
	
	set eventStartDate=eventConfiguration.getEventStartDateHoro()
	set currencyID=##class(setup.objEvent).getBaseCurrency(eventID)
	set roomDateFrom=eventStartDate-10
	set roomDateTo=eventStartDate+10
	
	do ##class(accom.objRoomTypeInstance).updateRange(eventHotelID,roomTypeID,roomDateFrom,roomDateTo,5,10,1,1,10)
	do ##class(accom.objRoomTypeInstance).updateRange(eventHotelID,roomTypeID,roomDateFrom,roomDateTo,5,20,1,2,20)
	do ##class(accom.objRoomTypeInstance).updateBasketCodes(eventHotelID,roomTypeID)
	
	return eventHotelID
]]></Implementation>
</Method>

<Method name="createAccomBooking">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventConfiguration:setup.eventConfiguration,eventHotelID,roomTypeID</FormalSpec>
<Implementation><![CDATA[
	set eventID=eventConfiguration.getEventID()
	#define paymentMethodID 1
	#define newAmountPaid ""
	#define sendEmails 0 
	#define markSessionComplete 1
	#define fromPaymentPortal 0
	#define updateAwardsPaymentStatus 0
	set sessionID="EF-testGroupBookings"_$ZTS
	set tempPurchaseID=##class(EF.utils.populate.tempPurchase).createTempPurchase(sessionID,eventID)
	set tempPersonID=##class(EF.utils.populate.tempPurchase).createTempPerson(eventID,tempPurchaseID,1,1,0,"test booker firstname","test booker lastname","test.booker@xxx.xxx")
	do ##class(eCom.tempCodData).set(tempPersonID,"Address Line 1","test booker address line 1")
	do ##class(eCom.tempCodData).set(tempPersonID,"Address Line 2","test booker address line 2")
	&SQL( INSERT INTO accom.tempPersonBooking (tempPerson,active) VALUES (:tempPersonID,1) )
	set tempPersonBookingID=%ROWID
	set numberOfPeople=2
	for roomDate=eventConfiguration.getEventStartDateHoro():1:eventConfiguration.getEventStartDateHoro()+1 {
		// create a tempRoomTypeBooking for each day (and the basketItem)
		set roomTypeInstanceID=##class(accom.tempRoomTypeBooking).getRoomTypeInstance(eventHotelID,roomDate,roomTypeID)
		set basketItemID=##class(accom.objRoomTypeInstance).getBasketItem(roomTypeInstanceID,numberOfPeople)
		set ok=##class(eCom.tempBasketItem).add(eventID,tempPersonID,basketItemID,1)
		&SQL( INSERT INTO accom.tempRoomTypeBooking (tempPersonBooking,roomDate,roomTypeInstanceID,numberOfPeople,basketItemID) 
			VALUES 
			(:tempPersonBookingID,:roomDate,:roomTypeInstanceID,:numberOfPeople,:basketItemID) 
		)
	}
	
	for i=1:1:numberOfPeople {
		set tempRoomGuestPersonID=##class(eCom.tempPerson).add(sessionID,0,0,0,"","",0,1)
		&SQL(INSERT INTO accom.tempRoomGuest (active,tempPerson,tempPersonBooking) 
			VALUES (1,:tempRoomGuestPersonID,:tempPersonBookingID))
		do ##class(eCom.tempCodData).set(tempRoomGuestPersonID,"Firstname","room guest"_i)
	}
	do ##class(EF.utils.populate.tempPurchase).updateTempPurchase(tempPurchaseID)
	set purchaseID=##class(eCom.tempPurchase).createPurchase(sessionID,0,$$$sendEmails,$$$markSessionComplete,$$$fromPaymentPortal,$$$updateAwardsPaymentStatus)
	return purchaseID
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.populate.awards">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.utils.populate.awards.CLS/EV.1
;vc; Component: CLS.EF.utils.populate.awards
;vc;  Location: SmallDev
;vc; Date/Time: 18-Nov-15 15:16
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.populate.awards.CLS/EV.1</td><td>CLS.EF.utils.populate.awards</td><td>SmallDev</td><td style='white-space: nowrap;'>18-Nov-15 15:16</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63840,55742</TimeChanged>
<TimeCreated>63414,36832.599847</TimeCreated>

<Method name="populateAwardsEvent">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID,submitterCount,submissionDateYYYYMMDD=""</FormalSpec>
<Implementation><![CDATA[
	TSTART
	for submitter=1:1:submitterCount {
		set personID=##class(EF.utils.populate.codPeople).createRandomPerson(eventID)
		
		for entry=1:1:(1+$R(5)) {
			set entryID=..createRandomAwardEntry(personID,eventID)
			if submissionDateYYYYMMDD {
				do ##class(awards.objItemData).set(entryID,"Award Submission date",##class(shared.dateFunctions).multiDate(submissionDateYYYYMMDD,25)_" 12:00:00")	
			}
		}
	}

	for judge=1:1:((submitterCount\5)+1) {
		set judgeID=..createRandomJudge(eventID)
		do ..createReviewsForEveryEntry(judgeID,eventID)
	}
	TCOMMIT
]]></Implementation>
</Method>

<Method name="createReviewsForEveryEntry">
<ClassMethod>1</ClassMethod>
<FormalSpec>judgeID,eventID</FormalSpec>
<Implementation><![CDATA[
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare("SELECT * FROM awards.objEntry WHERE (objEvent = ?) AND (active=1)")
	do rs.Execute(eventID)
	set count=0
	while rs.Next() {
		set entryID=rs.Get("ID")
		do ..createRandomReviews(entryID,eventID,judgeID)
	}
]]></Implementation>
</Method>

<Method name="createRandomReviews">
<ClassMethod>1</ClassMethod>
<FormalSpec>entryID,eventID,judgeID</FormalSpec>
<Implementation><![CDATA[
	set gradeCount=##class(setup.objEventSetting).getParameter("awards","grade count",eventID)
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare("SELECT * FROM awards.objCriteria WHERE (objEvent = ?) AND (active=1)")
	do rs.Execute(eventID)
	set count=0
	while rs.Next() {
		set criteriaID=rs.Get("ID")
	
		do ##class(awards.objReview).saveReviewGrade(judgeID,entryID,$R(gradeCount)+1,criteriaID)
		do ##class(awards.objReview).saveReviewComment(judgeID,entryID,..getRandomReviewComment(),criteriaID)
	}
]]></Implementation>
</Method>

<Method name="getRandomJudgingPanelID">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare("SELECT * FROM awards.objPanel WHERE (objEvent = ?) AND (active=1)")
	do rs.Execute(eventID)
	set count=0
	while rs.Next() {
		set panelID=rs.Get("ID")
		set count=count+1
		set panels(count)=panelID
	}
	set selectedNumber=($Random(count)+1)
	set randomPanelID=panels(selectedNumber)
	
	return randomPanelID
]]></Implementation>
</Method>

<Method name="createRandomJudge">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set personID=##class(EF.utils.populate.codPeople).createRandomPerson(eventID)
	set panelID=..getRandomJudgingPanelID(eventID)
	&SQL(INSERT INTO awards.lnkPanelPerson (objPanel,objPerson) VALUES (:panelID,:personID))
	
	return personID
]]></Implementation>
</Method>

<Method name="createRandomAwardEntry">
<ClassMethod>1</ClassMethod>
<FormalSpec>personID,eventID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	#define isSubmitted 1
	#define isIncomplete 0
	#define isPaid 1
	#define isReadyForJudging 1
	#define isReadyForSubmission 1
	
	set categoryID=..getRandomCategoryID(eventID)
	set projectName=..getRandomProjectName()
	set entryNumber=$Random(100000)
	set entryID=##class(awards.objEntry).add(personID,categoryID,eventID,entryNumber,$$$isSubmitted,$$$isIncomplete,$$$isPaid,$$$isReadyForJudging)
	set now=##class(shared.timeFunctions).getCurrentTimestampUTC()
	
	do ##class(awards.objItemData).set(entryID,"Award Submission Date",now)
	do ##class(awards.objItemData).set(entryID,"Project Name",projectName)
	do ##class(awards.objItemData).set(entryID,"Awards ready for submission",$$$isReadyForSubmission)
	return entryID
]]></Implementation>
</Method>

<Method name="getRandomCategoryID">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	do rs.Prepare("SELECT * FROM awards.objCategory WHERE (objEvent = ?) AND (active=1)")
	do rs.Execute(eventID)
	set count=0
	while rs.Next() {
		set categoryID=rs.Get("ID")
		set count=count+1
		set categories(count)=categoryID
	}
	set selectedNumber=($Random(count)+1)
	set randomCategoryID=categories(selectedNumber)
	
	return randomCategoryID
]]></Implementation>
</Method>

<Method name="getRandomProjectName">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	return ##class(%PopulateUtils).Mission()
]]></Implementation>
</Method>

<Method name="getRandomReviewComment">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[

 Set t1=$LB("","Somewhat ","Very ","Incredible ","A little ","Not very ","Average ","Tremendously ")
 Set t2=$LB("good","bad","orginal","mediocre","pointless","brilliant","boring","exiting","unusual","precise","consise","fluffy","focused","middle of the road","ground breaking","dim witted","interesting")

 Quit $LI(t1,$Random($LL(t1))+1)_$LI(t2,$random($LL(t2))+1)
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.populate.codPeople">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.utils.populate.codPeople.CLS/EV.3
;vc; Component: CLS.EF.utils.populate.codPeople
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.populate.codPeople.CLS/EV.3</td><td>CLS.EF.utils.populate.codPeople</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64077,55687</TimeChanged>
<TimeCreated>63414,36832.599847</TimeCreated>

<Method name="createRandomPerson">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID=""</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	
	set fn=##class(%PopulateUtils).FirstName()
	set ln=##class(%PopulateUtils).LastName()
	set cm=##class(%PopulateUtils).Company()
	set em=fn_"."_ln_"@"_$TR(cm,". ")_".pop"
	set em=$replace(em," ","")
	set personID=..createPerson(fn,ln,em,eventID)
	
	do ##class(cod.objItemData).set(personID,"Address Line 1",##class(%PopulateUtils).Street())
	do ##class(cod.objItemData).set(personID,"Town",##class(%PopulateUtils).City())
	do ##class(cod.objItemData).set(personID,"Job Title",##class(%PopulateUtils).Title())
	do ##class(cod.objItemData).set(personID,"Work Telephone No.",##class(%PopulateUtils).USPhone())
	do ##class(cod.objItemData).set(personID,"Company",cm)
	do ##class(cod.objItemData).set(personID,"Sex",##class(%PopulateUtils).ValueList(",M,F"))
	do ##class(cod.objItemData).set(personID,"Postcode",##class(%PopulateUtils).USZip())
	
	
	return personID
]]></Implementation>
</Method>

<Method name="createPerson">
<ClassMethod>1</ClassMethod>
<FormalSpec>firstname,lastname,email,company,eventID=""</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set personID=##class(cod.objPerson).add()
	if eventID {
		set controllerID=##class(setup.objEvent).getControllerID(eventID)
		do ##class(cod.objItemData).set(personID,"objController",controllerID)
	}

	// create new person
	do ##class(cod.objItemData).set(personID,"cod origin","auto-populate")
	do ##class(cod.objItemData).set(personID,"firstname",firstname)
	do ##class(cod.objItemData).set(personID,"lastname",lastname)
	do ##class(cod.objItemData).set(personID,"company",company)
	do ##class(cod.objItemData).set(personID,"email",email)
	
	return personID
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.populate.event">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.utils.populate.event.CLS/EV.4
;vc; Component: CLS.EF.utils.populate.event
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.populate.event.CLS/EV.4</td><td>CLS.EF.utils.populate.event</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64084,43504</TimeChanged>
<TimeCreated>63802,45892.965408</TimeCreated>

<Method name="createEvents">
<ClassMethod>1</ClassMethod>
<FormalSpec>numberOfEvents</FormalSpec>
<Implementation><![CDATA[
	// this is just a hacked copy of eventSettingsBasic, should be replaced by a proper creation method
	
	#dim counter as %Integer = 0	
	#dim eventName as %String
	#dim eventStartDateHoro as %Integer
	#dim eventEndDateHoro as %Integer
	#dim eventConfiguration as setup.eventConfiguration
	
	for counter=1:1:numberOfEvents {
		set eventName = "Auto Generated: "_##class(%Library.PopulateUtils).Mission()
		if $L(eventName)>98 set eventName=$E(eventName,1,95)_"..."
		set (eventStartDate,eventEndDate) = $ZD(+$H + ($Random(180)-90),3) // plus/minus 90 days of today	
		set eventConfiguration=##class(setup.eventConfiguration).createForNewEvent()
		do eventConfiguration.setMainEventName(eventName)
		do eventConfiguration.setEventStartTimeStamp(eventStartDate_" 09:00:00")
		do eventConfiguration.setEventEndTimeStamp(eventEndDate_" 17:00:00")
		do eventConfiguration.save()
		do ##class(EF.utils.commandLineMethods).outputCounter(counter,1)
		kill (counter,numberOfEvents)
	}
]]></Implementation>
</Method>

<Method name="addEventPrice">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<Implementation><![CDATA[
	set objPriceDescriptor=##class(eCom.objPriceDescriptor).%New()
	set objEvent=##class(setup.objEvent).%OpenId(eventID)
	set controllerID=##class(setup.objEvent).getControllerID(eventID)
	set displayOrder=""
	&SQL(SELECT displayOrder INTO :displayOrder FROM eCom.objPriceDescriptor ORDER BY displayOrder DESC)
	set displayOrder=displayOrder+1

	set objPriceDescriptor.active=1
	set objPriceDescriptor.displayOrder=displayOrder
	do objPriceDescriptor.objControllerSetObjectId(controllerID)
	set objPriceDescriptor.description="Test event price"

	set objEvent.objItem.objGuestBasketItem.objPriceDescriptor=objPriceDescriptor
	set objEvent.objItem.priceByAttendeeCategory=0
	set objEvent.objItem.objDelegateBasketItem.objPriceDescriptor=objPriceDescriptor

	set objPriceDescriptor.priceType="event"
	set objPriceDescriptor.appliesTo="delegate"
	set ok=objPriceDescriptor.%Save()
	if ok set ok=objEvent.%Save()

	set itemID=objEvent.objItem.%Id()


	set objPrice=##class(eCom.objPrice).%New()
	set objPrice.dateFrom=$H-1
		
	set objPrice.objPriceDescriptor=objPriceDescriptor

	&SQL(SELECT objDelegateBasketItem INTO :tmp FROM setup.objItem WHERE ID=:itemID)
	if +SQLCODE=0 {
		set basketItemID=tmp
		set objPrice.objBasketItem=##class(eCom.objBasketItem).%OpenId(basketItemID)
	}
	set ok=objPrice.%Save()

	set objPriceCurrency=##class(eCom.objPriceCurrency).%New()
	set objPriceCurrency.amount=100
	do objPriceCurrency.objCurrencySetObjectId(1)
	
		
	set objPriceCurrency.objPrice=objPrice
	set objPriceCurrency.lineItemDescription = "Test event price"

	set objPriceCurrency.isCancellationPrice=0

	set ok=objPriceCurrency.%Save()
		
	kill objPriceDescriptor,objEvent
]]></Implementation>
</Method>

<Method name="createDummyStripeAccount">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set paymentMethodID=##class(eCom.objPaymentMethod).getIDfromInternalName("Stripe")
	set objAccount=##class(paymentPortal.stripe.objAccount).%New()
	do objAccount.objEventSetObjectId(eventID)
	do objAccount.objPaymentMethodSetObjectId(paymentMethodID)
	set objAccount.publishableKey="dummy"
	set objAccount.secretKey="dummy"
	set objAccount.organisationName="dummy"
	set objAccount.description="dummy"
	set objAccount.isTest=1
	do objAccount.%Save()
	return objAccount.%Id()
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.populate.registrationQuestion">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.utils.populate.registrationQuestion.CLS/EV.1
;vc; Component: CLS.EF.utils.populate.registrationQuestion
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.populate.registrationQuestion.CLS/EV.1</td><td>CLS.EF.utils.populate.registrationQuestion</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64084,46657</TimeChanged>
<TimeCreated>63802,42165.819864</TimeCreated>

<Method name="set">
<ClassMethod>1</ClassMethod>
<FormalSpec>personID,scItemID</FormalSpec>
<Implementation><![CDATA[
		#dim answer as %String
		#dim controllerID as %Integer = ""
		#dim altCount as %Integer = 0
		#dim alts
		set question = ##class(sc.xModules.objCODitem).%OpenId(scItemID)
		
		if ##class(cod.objItemName).hasAlternatives(question.objItemName.%Id()) {
			set rsAlts=##class(%ResultSet).%New("cod.objItemAlternatives:qAlternativesForCodItem")
			do rsAlts.Execute(question.objItemName.%Id())
			while rsAlts.Next() {
				set altCount = altCount +1
				set alts(altCount) = rsAlts.Get("description") 	
			}
			set answer = alts($Random(altCount)+1)
			
		} else {
			set answer = ##class(%PopulateUtils).City()
		}
		do ##class(cod.objItemData).set(personID,question.objItemName.description,answer,controllerID,##class(sc.xModules.objCODitem).getPageIDforQuestion(scItemID))
]]></Implementation>
</Method>

<Method name="addABIToRegistrationPage">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID,itemName,altName</FormalSpec>
<Implementation><![CDATA[
	set controllerID=##class(setup.objEvent).getControllerID(eventID)
	set currencyID=##class(setup.objEvent).getBaseCurrency(eventID)
	set itemNameID=##class(cod.objItemName).addSingleEventQuestion(itemName,"dropdown","Additional",eventID)
	set ok=##class(setup.lnkCategoryEvent).getAllRegPages(eventID,1,1,.allRegPages,.allRegPageIDs,.allReg)
	set eventCategoryID=$O(allRegPages(""))
	set displayOrder=$O(allRegPages(eventCategoryID,""))
	
	set pageID=allRegPages(eventCategoryID,displayOrder)
	set listID=##class(sc.methods).getListIDfromPageIDlistName(pageID,"Main List")
	set scID=##class(sc.xModules.objCODitem).add(itemNameID,"ABI",listID,,,,"dropdown",0,,"","", 1,0,0,1)
	set itemAlternativeID=##class(cod.objItemAlternatives).create(itemNameID, altName)
	
	set extrasID=##class(cod.objAlternativeExtras).add(itemAlternativeID,scID)
 	do ##class(cod.objAlternativeExtras).update(extrasID)
	
	set basketItemID=##class(eCom.objBasketItem).add(,controllerID,"additional",extrasID)
	do ##class(cod.objAlternativeExtras).updateBasketItem(extrasID,basketItemID,"")
	
	do ##class(eCom.objBasketItem).updatePrices(basketItemID,35,"",currencyID)
	return extrasID
]]></Implementation>
</Method>

<Method name="addTicketToRegistrationPage">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID,itemName</FormalSpec>
<Implementation><![CDATA[
	set controllerID=##class(setup.objEvent).getControllerID(eventID)
	set currencyID=##class(setup.objEvent).getBaseCurrency(eventID)
	set itemNameID=##class(cod.objItemName).addSingleEventQuestion(itemName,"dropdown","Additional",eventID)
	set ok=##class(setup.lnkCategoryEvent).getAllRegPages(eventID,1,1,.allRegPages,.allRegPageIDs,.allReg)
	set eventCategoryID=$O(allRegPages(""))
	set displayOrder=$O(allRegPages(eventCategoryID,""))
	
	set pageID=allRegPages(eventCategoryID,displayOrder)
	set listID=##class(sc.methods).getListIDfromPageIDlistName(pageID,"Main List")
	set scID=##class(sc.xModules.objCODitem).add(itemNameID,"Ticket",listID,,,,"dropdown",0,,"","", 1,0,0,1)
	
	set ticketID=##class(cod.objTicket).add(scID,eventID,controllerID)
	if 'ticketID {
		throw ##class(shared.exceptions.generalException).%New("Unable to create Ticket")	
	}
	set basketItemID=##class(eCom.objBasketItem).add(,controllerID,"quantityitem",,,ticketID)
 	do ##class(cod.objTicket).updateBasketItem(ticketID,basketItemID,"")
 	do ##class(eCom.objBasketItem).updatePrices(basketItemID,60,"",currencyID)
	
	return ticketID
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.populate.registrations">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.utils.populate.registrations.CLS/EV.4
;vc; Component: CLS.EF.utils.populate.registrations
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.populate.registrations.CLS/EV.4</td><td>CLS.EF.utils.populate.registrations</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64084,43491</TimeChanged>
<TimeCreated>63414,36832.599847</TimeCreated>

<Method name="populateRegistrations">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID,numberOfRegistrations,regDateYYYYMMDD=""</FormalSpec>
<Implementation><![CDATA[
	#define currencyID ""
	#define langID 1
	#define paymentMethodID 1
	#define newAmountPaid ""
	#define sendEmails 0 
	#define markSessionComplete 1
	#define fromPaymentPortal 0
	#define updateAwardsPaymentStatus 0
	
	&SQL(SELECT COUNT(ID) INTO :attCatCount FROM setup.lnkAttendeeCategoryDetailsEvent WHERE objEvent = :eventID)

	set contextData=##class(EF.contextDataRegistration).createMock()
	for count=1:1:numberOfRegistrations {
		TSTART

		set sessionID="populateRegistrations"_count_"-"_$ZTS
		set tempPurchaseID=##class(EF.utils.populate.tempPurchase).createRandomTempPurchase(eventID,count)
		
		&SQL(UPDATE eCom.tempPurchase SET sessionID = :sessionID WHERE ID = :tempPurchaseID)
		try {
			set tempPersonID=##class(EF.utils.populate.tempPurchase).createRandomTempPerson(eventID,tempPurchaseID)
			do ##class(eCom.tempCodData).set(tempPersonID,"cod origin","EF.utils.populate.registrations","",eventID)
			
			set attendeeCategoryID=..getRandomAttendeeCategoryID(eventID,attCatCount) 
			&SQL(UPDATE eCom.tempPurchase SET eventCategoryID=:attendeeCategoryID WHERE ID = :tempPurchaseID )
			
			set eventDetailsID=##class(setup.objEventDetails).getDetailsID(eventID,$$$langID)
			set dateFormat=##class(shared.dateFunctions).getFrontendInputDateFormat(eventID)
			
			do ##class(eCom.tempPurchase).calculateBasket(eventID,$$$langID,sessionID,,$$$currencyID,$$$paymentMethodID,,,,,contextData)
			&SQL(DELETE FROM eCom.tempReceiptLine WHERE tempPurchase = :tempPurchaseID)
			do ##class(eCom.tempPurchase).renderBasket(eventID,eventDetailsID,$$$langID,dateFormat,sessionID,$$$currencyID)
			set realPurchaseID=##class(eCom.tempPurchase).createPurchase(sessionID,$$$newAmountPaid,$$$sendEmails,$$$markSessionComplete,$$$fromPaymentPortal,$$$updateAwardsPaymentStatus)
			
			if regDateYYYYMMDD {
				do ..updateTimeStamps(realPurchaseID,regDateYYYYMMDD)	
			}
			do ##class(EF.utils.commandLineMethods).outputCounter(count,1)
			
			TCOMMIT
		} catch error {
			TROLLBACK
		}
		
	}
]]></Implementation>
</Method>

<Method name="getRandomAttendeeCategoryID">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID,numberOfActiveAttCats</FormalSpec>
<Implementation><![CDATA[
	set attCatNumber = $Random(numberOfActiveAttCats)+1
	set rs=##class(%ResultSet).%New()
	do rs.Prepare("SELECT * FROM setup.lnkAttendeeCategoryDetailsEvent WHERE objEvent = ?")
	do rs.Execute(eventID)
	for i=1:1:attCatNumber {
		do rs.Next()
		set result = rs.Get("objEventCategory")	
	}
	return result
]]></Implementation>
</Method>

<Method name="updateTimeStamps">
<ClassMethod>1</ClassMethod>
<FormalSpec>purchaseID,regDateYYYYMMDD</FormalSpec>
<Implementation><![CDATA[
	
	set purchase=##class(eCom.objPurchase).%OpenId(purchaseID)
	set (purchase.xCRstamp,timestamp) = ##class(shared.dateFunctions).multiDate(regDateYYYYMMDD,25)_" 12:00:00"
	do purchase.%Save()
	kill purchase
]]></Implementation>
</Method>

<Method name="createDummyStripeTransaction">
<ClassMethod>1</ClassMethod>
<FormalSpec>purchaseID,sessionID,transactionIdentifier</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	
	set objTransaction=##class(paymentPortal.stripe.objTransaction).%New()
	do objTransaction.createTransactionDetails(purchaseID,sessionID,100,"a")
	set objTransaction.transactionIdentifier="DUMMY TRANS"
	set objTransaction.status="Completed"
	do objTransaction.%Save()
	return objTransaction.%Id()
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.populate.sessions">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.utils.populate.sessions.CLS/EV.0
;vc; Component: CLS.EF.utils.populate.sessions
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.populate.sessions.CLS/EV.0</td><td>CLS.EF.utils.populate.sessions</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<IncludeCode>EF.common.macros</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeChanged>64079,64276</TimeChanged>
<TimeCreated>64077,56674.572087</TimeCreated>

<Method name="createSessionForEvent">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID,sessionName,sessionCode,additionalInformation</FormalSpec>
<Implementation><![CDATA[
	set controllerID=##class(setup.objEvent).getControllerID(eventID)
	set objItem=##class(setup.objItem).%New()
	do objItem.objEventSetObjectId(eventID)
	
	// set mandatory props
	set objItem.dayNumber=1
	set objItem.timeFrom=$ZTH("09:00",1)
	set objItem.timeTo=$ZTH("12:00",1)
	
	set objItem.suppressEndTime=0

	set objItem.objSessionType=##class(setup.objSessionType).getObjFromDesc("Conference")
	
	// store colors
	set objItem.foregroundColor=""
	set objItem.backgroundColor=""
	
	&SQL(SELECT ID INTO :firstLocation FROM setup.objLocation WHERE (active=1) AND (objEvent = :eventID) ORDER BY displayOrder)
	do objItem.objLocationSetObjectId(firstLocation)
	set objItem.spanAllLocations=1
	
	// save to get the ID
	set sc=objItem.%Save()
	if 'sc throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
	set itemID=objItem.%Id()
	
	// create basket item if there isn't one - one to one relationship
	set objBasketItem=##class(eCom.objBasketItem).%New()
	do objBasketItem.objControllerSetObjectId(controllerID)
	set objBasketItem.type="item"
	do objBasketItem.objItemSetObjectId(itemID)
	set objItem.objDelegateBasketItem=objBasketItem
	set sc=objItem.%Save()
	if 'sc throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)

	// create basket item if there isn't one - one to one relationship
	set objBasketItem=##class(eCom.objBasketItem).%New()
	do objBasketItem.objControllerSetObjectId(controllerID)
	set objBasketItem.type="item"
	do objBasketItem.objItemSetObjectId(itemID)
	set objItem.objGuestBasketItem=objBasketItem
	set sc=objItem.%Save()
	if 'sc throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)

	
	
	set objItem.dontSendReminder=0
	
	set objItem.code=sessionCode
	set objItem.displayCategory=""
	set objItem.internalOnly=0
	
	set oldDelegateCanBook=objItem.delegateCanBook
	set oldGuestCanBook=objItem.guestCanBook
	set objItem.delegateCanBook=1
	set objItem.guestCanBook=+1

	set objItem.notification=0
	set objItem.notificationLevel=""


	set objItem.noMoreBookings=0
	set objItem.capacity=100
	
	set objItem.overBooking=0

	do objItem.objIconSetObjectId("")


	set objItem.overridingVAT=""
	set objItem.priceByAttendeeCategory=0
	
	set sc=objItem.%Save()
	if 'sc throw ##class(shared.exceptions.generalStatusException).CreateFromStatus(sc)
	
	set itemDetailsID=##class(setup.objItemDetails).addDetails(itemID,eventID,$$$efEnglishLangID,sessionName)
	do ##class(setup.objItemDetails).setAdditionalInfo(itemDetailsID,.additionalInformation)

	return objItem
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.populate.survey">
<Super>%RegisteredObject</Super>
<TimeChanged>63802,42850.947534</TimeChanged>
<TimeCreated>63802,40803.606368</TimeCreated>

<Method name="populateSurvey">
<ClassMethod>1</ClassMethod>
<FormalSpec>surveyID,numberOfReplies</FormalSpec>
<Implementation><![CDATA[
	
	
	for count=1:1:numberOfReplies {
		TSTART
			set personID=##class(EF.utils.populate.codPeople).createRandomPerson()
			do ##class(cod.objItemData).set(personID,"cod origin","EF.utils.populate.survey")
			
			set rsQuestions=##class(%ResultSet).%New()
			do rsQuestions.Prepare("select * from sc_xModules.objCodItem where parent->parent->parent = ?")
			do rsQuestions.Execute(surveyID)
			while rsQuestions.Next() {
				do ##class(EF.utils.populate.registrationQuestion).set(personID,rsQuestions.Get("ID"))
			}
			
			do ##class(EF.utils.commandLineMethods).outputCounter(count,1)
		TCOMMIT
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.populate.tableBooking">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.utils.populate.tableBooking.CLS/EV.0
;vc; Component: CLS.EF.utils.populate.tableBooking
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.populate.tableBooking.CLS/EV.0</td><td>CLS.EF.utils.populate.tableBooking</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<Super>%RegisteredObject</Super>
<TimeChanged>64083,54439</TimeChanged>
<TimeCreated>64083,46883.840297</TimeCreated>

<Method name="createTableBookingEvent">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventName</FormalSpec>
<ReturnType>setup.eventConfiguration</ReturnType>
<Implementation><![CDATA[
	#dim eventConfiguration As setup.eventConfiguration = ##class(setup.eventConfiguration).createForNewEvent()
	
	do eventConfiguration.setMainEventName(eventName)
	do eventConfiguration.setEventStartTimeStamp("2025-12-25 09:00:00")
	do eventConfiguration.setEventEndTimeStamp("2025-12-27 17:00:00")
	do eventConfiguration.setAllowGroupBookings(1)
	do eventConfiguration.setHasTableBooking(1)
	do eventConfiguration.setHasCost(1)
	do eventConfiguration.setIdentifier("anonymous")
	do eventConfiguration.save()
	set eventID=eventConfiguration.getEventID()
	
	do ##class(setup.objEventSetting).setParameter("system","do not use email",1,eventID)
	do ##class(setup.objEventSetting).setParameter("table bookings","enable entire tables",1,eventID)
	
	return eventConfiguration
]]></Implementation>
</Method>

<Method name="createTable">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventConfiguration:setup.eventConfiguration,tableSize,tablePrice,seatPrice</FormalSpec>
<Implementation><![CDATA[
	set eventID=eventConfiguration.getEventID()
	set currencyID=##class(setup.objEvent).getBaseCurrency(eventID)
	set tableID=##class(setup.objTable).add(eventID,,,tableSize,,"",1,0)
	&SQL(SELECT objBasketItem INTO :basketItemID FROM setup.objTable WHERE ID=:tableID)
	if +SQLCODE=0 {
		do ##class(eCom.objBasketItem).updatePrices(basketItemID,tablePrice,"",currencyID,"","")
	}
	&SQL(SELECT objBasketItem INTO :seatBasketItemID FROM setup.objSeat WHERE objTable=:tableID)
	if +SQLCODE=0 {
		do ##class(eCom.objBasketItem).updatePrices(seatBasketItemID,seatPrice,"",currencyID,"","")
	}
	return tableID
]]></Implementation>
</Method>

<Method name="createTableBooking">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventConfiguration:setup.eventConfiguration,tableSize,tablePrice,seatPrice</FormalSpec>
<Implementation><![CDATA[
	set eventID=eventConfiguration.getEventID()
	#define paymentMethodID 1
	#define newAmountPaid ""
	#define sendEmails 0 
	#define markSessionComplete 1
	#define fromPaymentPortal 0
	#define updateAwardsPaymentStatus 0
	set sessionID="EF-testTableBookings"_$ZTS
	set tempPurchaseID=##class(EF.utils.populate.tempPurchase).createTempPurchase(sessionID,eventID)
	set tempPersonID=##class(EF.utils.populate.tempPurchase).createTempPerson(eventID,tempPurchaseID,1,0,0,"test booker firstname","test booker lastname","test.booker@xxx.xxx")
	do ##class(eCom.tempCodData).set(tempPersonID,"Address Line 1","test booker address line 1")
	do ##class(eCom.tempCodData).set(tempPersonID,"Address Line 2","test booker address line 2")
	set currencyID=##class(setup.objEvent).getBaseCurrency(eventID)
	
	do ##class(setup.objTable).allocateTable(eventID,tableSize,1,.tablesBooked,tablePrice,,currencyID,"")
		
	do ##class(setup.objSeat).allocateSeat(eventID,1,.tablesBooked,.seatsBooked,seatPrice,,currencyID,,tempPurchaseID)

	
	set peopleCount=0
	set tableID=""
	for  {
		set tableID=$o(tablesBooked(tableID))
		if tableID="" quit
		set peopleCount=peopleCount+tablesBooked(tableID)
		// instanciate the tempTables and it's seats
		set ok=##class(eCom.tempTable).createTempTable(sessionID,eventID,tempPersonID,tableSize,1,tableID)

		// put the table into the basket
		do ##class(eCom.tempTable).addToBasket(eventID,sessionID,,tempPersonID,1,tableID)		
	}
	set seatID=""
	for  {
		set seatID=$o(seatsBooked(seatID))
		if seatID="" quit
		set peopleCount=peopleCount+1
		// instanciate the individiual seats 
		set ok=##class(eCom.tempSeat).createTempSeats(sessionID,eventID,1,,seatID)

		// add the seat basketItem
		do ##class(eCom.tempSeat).addToBasket(eventID,sessionID,tempPersonID,1,seatID) 	
	}

	// create the tempPersons necessary
	for num=1:1:peopleCount {
		set isTableGuest=1,(isBooker,isDelegate,isGuest)=0
		set tempPersonID=##class(eCom.tempPerson).add(sessionID,isBooker,isDelegate,isGuest,"","",isTableGuest)
		do ##class(eCom.tempCodData).set(tempPersonID,"firstname","table guest first: "_num)
		do ##class(eCom.tempCodData).set(tempPersonID,"lastname","table guest last: "_num)
	}
	set ok=##class(eCom.tempSeat).placeAllPeople(sessionID,eventID)
	
	
	do ##class(EF.utils.populate.tempPurchase).updateTempPurchase(tempPurchaseID)
	set purchaseID=##class(eCom.tempPurchase).createPurchase(sessionID,0,$$$sendEmails,$$$markSessionComplete,$$$fromPaymentPortal,$$$updateAwardsPaymentStatus)
	return purchaseID
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.populate.tempPurchase">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.utils.populate.tempPurchase.CLS/EV.3
;vc; Component: CLS.EF.utils.populate.tempPurchase
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.populate.tempPurchase.CLS/EV.3</td><td>CLS.EF.utils.populate.tempPurchase</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64127,42199</TimeChanged>
<TimeCreated>63414,36832.599847</TimeCreated>

<Method name="populateTempPurchase">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID,purchaseCount</FormalSpec>
<Implementation><![CDATA[
	TSTART
	w !
	for submitter=1:1:purchaseCount {
		set tempPurchaseID=..createRandomTempPurchase(eventID,submitter)
		set tempPersonID=..createRandomTempPerson(eventID,tempPurchaseID)
		do ##class(EF.utils.commandLineMethods).outputCounter(submitter,100)
	}

	TCOMMIT
]]></Implementation>
</Method>

<Method name="createRandomTempPurchase">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID,counter</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	#define currencyID 1
	#define langID 1
	#define paymentMethodID 

	set sessionID="populateRegistrations"_counter
	set tempPurchaseID=..createTempPurchase(sessionID,eventID)

	try {
		set tempPersonID=##class(EF.utils.populate.tempPurchase).createRandomTempPerson(eventID,tempPurchaseID)
		
		do ..updateTempPurchase(tempPurchaseID,$$$langID,$$$currencyID, $$$paymentMethodID)
		

		do ##class(EF.utils.commandLineMethods).outputCounter(counter,10)

	} catch error {
		// possbble invalid email address				
	}



	return tempPurchaseID
]]></Implementation>
</Method>

<Method name="createTempPurchase">
<ClassMethod>1</ClassMethod>
<FormalSpec>sessionID,eventID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set tempPurchaseID=##class(eCom.tempPurchase).new(sessionID,$$$currencyID,eventID,$$$langID)
	set priceTimeStampUTC=##class(shared.timeFunctions).getCurrentHorologUTC()
	
	&SQL(UPDATE eCom.tempPurchase SET priceDate=:priceTimeStampUTC, backendBooking=0, backEndUserID=1, isAwards=0
		WHERE ID = :tempPurchaseID)
	
	return tempPurchaseID
]]></Implementation>
</Method>

<Method name="updateTempPurchase">
<ClassMethod>1</ClassMethod>
<FormalSpec>tempPurchaseID,langID=1,currencyID=1,paymentMethodID=""</FormalSpec>
<Implementation><![CDATA[
	set eventID=##class(eCom.tempPurchase).getEventID(tempPurchaseID)
	set eventDetailsID=##class(setup.objEventDetails).getDetailsID(eventID,langID)
	set dateFormat=##class(shared.dateFunctions).getFrontendInputDateFormat(eventID)
	&SQL(SELECT sessionID INTO :sessionID FROM eCom.tempPurchase WHERE ID = :tempPurchaseID)
	if +SQLCODE'=0 throw ##class(shared.exceptions.generalSQLException).CreateFromSQLCODE(SQLCODE,$G(%msg))
	
	set tempPersonID=##class(eCom.tempPerson).getBookerIDfromTempPurchaseID(tempPurchaseID)
	set contextData=##class(EF.contextDataRegistration).createFromTempPersonID(tempPersonID, langID, 0)
	
	do ##class(eCom.tempPurchase).calculateBasket(eventID,langID,sessionID,,currencyID,paymentMethodID,,,,,contextData)
	&SQL(DELETE FROM eCom.tempReceiptLine WHERE tempPurchase = :tempPurchaseID)
	do ##class(eCom.tempPurchase).renderBasket(eventID,eventDetailsID,langID,dateFormat,sessionID,currencyID)
]]></Implementation>
</Method>

<Method name="createRandomTempPerson">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID,tempPurchaseID</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	#define isBooker 1
	#define isAttendee 1
	#define isGuest 0
	
	set fn=##class(%PopulateUtils).FirstName()
	set ln=##class(%PopulateUtils).LastName()
	set cm=##class(%PopulateUtils).Company()
	set em=fn_"."_ln_"@"_$TR(cm,". ")_".pop"
	
	set tempPersonID=..createTempPerson(eventID, tempPurchaseID,$$$isBooker,$$$isAttendee,$$$isGuest,fn,ln,em,cm)
	
	do ##class(eCom.tempCodData).set(tempPersonID,"Address Line 1",##class(%PopulateUtils).Street())
	do ##class(eCom.tempCodData).set(tempPersonID,"Town",##class(%PopulateUtils).City())
	do ##class(eCom.tempCodData).set(tempPersonID,"Job Title",##class(%PopulateUtils).Title())
	do ##class(eCom.tempCodData).set(tempPersonID,"Work Telephone No.",##class(%PopulateUtils).USPhone())
	do ##class(eCom.tempCodData).set(tempPersonID,"Sex",##class(%PopulateUtils).ValueList(",M,F"))
	do ##class(eCom.tempCodData).set(tempPersonID,"Postcode",##class(%PopulateUtils).USZip())
	do ##class(eCom.tempCodData).set(tempPersonID,"cod origin","EF.utils.populate.tempPurchase","",eventID)
	
	
	return tempPersonID
]]></Implementation>
</Method>

<Method name="createTempPerson">
<ClassMethod>1</ClassMethod>
<FormalSpec>eventID,tempPurchaseID,isBooker,isAttendee,isGuest,firstname,lastname,email,company=""</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	#dim eventConfiguration As setup.eventConfiguration = ##class(setup.eventConfiguration).createForEventID(eventID)
	
	set controllerID=##class(setup.objEvent).getControllerID(eventID)
	&SQL(SELECT sessionID INTO :mockSessionID FROM eCom.tempPurchase WHERE ID = :tempPurchaseID)
	if +SQLCODE'=0 throw ##class(shared.exceptions.generalSQLException).CreateFromSQLCODE(SQLCODE,$G(%msg))
	
	// create new person
	set tempPersonID=##class(eCom.tempPerson).add(mockSessionID,isBooker,isAttendee,isGuest)
	
	
	do ##class(eCom.tempCodData).set(tempPersonID,"firstname",firstname)
	do ##class(eCom.tempCodData).set(tempPersonID,"lastname",lastname)
	if ##class(setup.objEventSetting).getParameter("system","identifying field",eventID)="anonymous" {
		do ##class(eCom.tempCodData).set(tempPersonID,"email2",email)
	} else {
		do ##class(eCom.tempCodData).set(tempPersonID,"email",email)	
	}
	do ##class(eCom.tempCodData).set(tempPersonID,"company",company)
	do ##class(eCom.tempCodData).set(tempPersonID,"cod origin","EF.utils.populate.tempPurchase","",eventID)
	
	if isAttendee {
		do ##class(eCom.tempChosenDay).selectAll(tempPersonID,eventConfiguration)
	}
	
	&SQL(UPDATE eCom.tempPerson SET personIsComplete = 1 WHERE ID = :tempPersonID)
	
	return tempPersonID
]]></Implementation>
</Method>

<Method name="bookSession">
<ClassMethod>1</ClassMethod>
<FormalSpec>tempPersonID,sessionItemID,eventID,currencyID=1</FormalSpec>
<Implementation><![CDATA[
	set basketItemID=##class(setup.objItem).getDelegateBasketItemID(sessionItemID)
	set ok=##class(eCom.tempBasketItem).add(eventID,tempPersonID,basketItemID,1,currencyID)
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.queueMethods">
<Abstract>1</Abstract>
<TimeChanged>63265,41495.969621</TimeChanged>
<TimeCreated>63263,43773.289532</TimeCreated>
</Class>


<Class name="EF.utils.regex">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.utils.regex.CLS/EV.1
;vc; Component: CLS.EF.utils.regex
;vc;  Location: SmallDev
;vc; Date/Time: 16-Mar-16 12:21
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.regex.CLS/EV.1</td><td>CLS.EF.utils.regex</td><td>SmallDev</td><td style='white-space: nowrap;'>16-Mar-16 12:21</td><td>AdrianM2</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63993,45316.345489</TimeChanged>
<TimeCreated>63348,34949.619312</TimeCreated>

<Method name="replaceAll">
<ClassMethod>1</ClassMethod>
<FormalSpec>inString,pattern,replacementString,ignoreCase=0</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set outString=inString
	if $l(inString) {
		set modifier="(?m)"
		if ignoreCase set modifier="(?im)"
		set matcher=##class(%Regex.Matcher).%New(modifier_pattern,inString)
		set outString=matcher.ReplaceAll(replacementString)
	}
	
	quit outString
]]></Implementation>
</Method>

<Method name="findAll">
<ClassMethod>1</ClassMethod>
<FormalSpec>inString,pattern,ignoreCase=0</FormalSpec>
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[
	set listOfDataTypes=##class(%ListOfDataTypes).%New()
	set outString=inString
	if $l(inString) {
		set modifier="(?m)"
		if ignoreCase set modifier="(?im)"
		set matcher=##class(%Regex.Matcher).%New(modifier_pattern,inString)
		while matcher.Locate() {
			set foundString=$e(inString,matcher.Start,matcher.End-1)
			do listOfDataTypes.Insert(foundString)
		}
	}
	
	return listOfDataTypes
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.releases">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.utils.releases.CLS/EV.93
;vc; Component: CLS.EF.utils.releases
;vc;  Location: SmallDev
;vc; Date/Time: 04-Sep-16 09:58
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.releases.CLS/EV.93</td><td>CLS.EF.utils.releases</td><td>SmallDev</td><td style='white-space: nowrap;'>04-Sep-16 09:58</td><td>FredG</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>64165,35782</TimeChanged>
<TimeCreated>63259,59875.393745</TimeCreated>

<Parameter name="numberOfConcurrentJobs">
<Default>8</Default>
</Parameter>

<Method name="runUpgradeCode">
<Description>
Jobs the upgrade code off in every namespace</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>releaseSet,codeToRun,removeStopApplication=0</FormalSpec>
<Implementation><![CDATA[
	kill currentlyRunningJobs
	if ##class(EF.config.server).isThisDev() {
		do ..jobOffUpgradeCodeForNamespace(releaseSet, codeToRun,removeStopApplication)
	} else {
		set curNS=$ZNSPACE
		set ns=""
		for  {
			set ns=$O(^%ZCSPAPPS(ns))
			if ns="" quit
			zn ns
			do ..jobOffUpgradeCodeForNamespace(releaseSet, codeToRun, removeStopApplication, .currentlyRunningJobs)
			while ..updateCurrentlyRunningJobs(.currentlyRunningJobs) >= ..#numberOfConcurrentJobs {
				h 0.1
			}
		}
		zn curNS
		while ..updateCurrentlyRunningJobs(.currentlyRunningJobs) > 0 {
			h 0.1
		}
	}
]]></Implementation>
</Method>

<Method name="jobOffUpgradeCodeForNamespace">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[releaseSet,codeToRun,removeStopApplication,&currentlyRunningJobs]]></FormalSpec>
<Implementation><![CDATA[
	w "Namespace: ",$ZNSPACE," Code: ",codeToRun,!
	if $G(^%zUpgradeCodeLog(releaseSet,$ZNSPACE,codeToRun,"completed")) {
		w "Already Completed",!
		return
	}
	
	set upgradeLogPath=##class(EF.config.server).getLogPath()
	do ##class(%File).CreateDirectoryChain(upgradeLogPath)
	set fileName=releaseSet_"-"_$ZNSPACE_".txt"
	set file=upgradeLogPath_fileName
	open file:"WSA"
	
	job ##class(EF.utils.releases).runUpgradeCodeForNamespace(releaseSet,codeToRun,removeStopApplication):(:::file)
	// save the id of the jobbed process
	set currentlyRunningJobs($ZCHILD)=$ZNSPACE
	set currentlyRunningJobs($ZCHILD,"releaseSet")=releaseSet
	set currentlyRunningJobs($ZCHILD,"codeToRun")=codeToRun
	
	close file
	quit
]]></Implementation>
</Method>

<Method name="updateCurrentlyRunningJobs">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&currentlyRunningJobs]]></FormalSpec>
<Implementation><![CDATA[
	set jobCount=0
	set jobID=""
	for {
		set jobID=$O(currentlyRunningJobs(jobID))
		if jobID="" quit
		set nameSpace=currentlyRunningJobs(jobID)
		set releaseSet=currentlyRunningJobs(jobID,"releaseSet")
		set codeToRun=currentlyRunningJobs(jobID,"codeToRun")
		if $D(^$JOB(jobID)) {
			set jobCount=jobCount+1
		} else { 
			if '$G(^%zUpgradeCodeLog(releaseSet,nameSpace,codeToRun,"completed")) {
				w "Error: "_$G(^%zUpgradeCodeLog(releaseSet,nameSpace,codeToRun,"error"))
				throw ##class(shared.exceptions.generalException).%New("Upgrade Error")
			} else {
				w "Completed code for namespace: ",nameSpace," Code: ",codeToRun,!
			}
			kill currentlyRunningJobs(jobID)
		}
	}
	return jobCount
]]></Implementation>
</Method>

<Method name="runUpgradeCodeForNamespace">
<ClassMethod>1</ClassMethod>
<FormalSpec>releaseSet,codeToRun,removeStopApplication=0</FormalSpec>
<Implementation><![CDATA[
	if '$G(^%zUpgradeCodeLog(releaseSet,$ZNSPACE,codeToRun,"completed")) {
		w !,"Starting ",codeToRun," for "_$ZNSPACE_" at ",$ZDT($ZTS,3),!
		try {
			set ^%zUpgradeCodeLog(releaseSet,$ZNSPACE,codeToRun,"started")=$ZTS
			kill ^%zUpgradeCodeLog(releaseSet,$ZNSPACE,codeToRun,"error")
			x codeToRun
		} catch errObj {
			set ^%zUpgradeCodeLog(releaseSet,$ZNSPACE,codeToRun,"error")=errObj.DisplayString()
			w !,"Error: "_errObj.DisplayString(),!
			throw errObj
		}
		set ^%zUpgradeCodeLog(releaseSet,$ZNSPACE,codeToRun,"completed")=$ZTS
		if removeStopApplication kill ^%ZStopApplication($ZNSPACE)
		w !,"Completed at ",$ZDT($ZTS,3),!
	}
]]></Implementation>
</Method>

<Method name="stopApplication">
<Description>
Call runUpgradeCode with removeStopApplication=1 to remove</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set ns=""
	for i=1:1 {
		set ns=$O(^%ZCSPAPPS(ns))
		if ns="" quit
		w !,"Stopping:  ",ns
		set ^%ZStopApplication(ns)=1
	}
]]></Implementation>
</Method>

<Method name="updateReportDefinitions">
<ClassMethod>1</ClassMethod>
<FormalSpec>releaseSet</FormalSpec>
<Implementation><![CDATA[	do ..runUpgradeCode(releaseSet,"do ##class(reports.install).updateAll()")
]]></Implementation>
</Method>

<Method name="updateTranslations">
<ClassMethod>1</ClassMethod>
<FormalSpec>releaseSet</FormalSpec>
<Implementation><![CDATA[
	do ..runUpgradeCode(releaseSet,"do ##class(translations.objTranslation).importStandardTranslationFiles()")
	do ..runUpgradeCode(releaseSet,"do ##class(translations.objPhrase).findAllPhrases(0,1)")
]]></Implementation>
</Method>

<Method name="addIndices">
<ClassMethod>1</ClassMethod>
<FormalSpec>classNameToAddIndicesTo:%String,listOfNewIndices:%List</FormalSpec>
<Implementation><![CDATA[
	set ok=$CLASSMETHOD(classNameToAddIndicesTo,"%BuildIndices", listOfNewIndices)
	
	do $SYSTEM.SQL.Purge()
]]></Implementation>
</Method>

<Method name="reloadCSPPages">
<Description>
Loads pages for eventsforce and proweb</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set sourceCodeNamespace=##class(EF.config.server).getSourceCodeNameSpace()
	if $ZCVT(sourceCodeNamespace,"U")'=$ZCVT($ZNSPACE,"U") {
		throw ##class(shared.exceptions.generalException).%New("CSP pages must only be re-compiled in the source code namespace: "_sourceCodeNamespace)
	}
	set cspAppName=##class(EF.config.server).getAppNameForCSPPages()
	for dir="system","backEnd","frontEnd" {
		w dir,!
	    set ok=$system.CSP.LoadPageDir("\"_cspAppName_"\"_dir)
	    if 'ok {
		 	throw ##class(shared.exceptions.generalException).%New("Failed to reload pages for \"_cspAppName_"\"_dir)   
	    }
	}
]]></Implementation>
</Method>

<Method name="LREL20150607">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	//recompileall
	set releaseSet="LREL20150607"
	do ..runUpgradeCode(releaseSet,"do ##class(EF.licensing.module).updateModuleName(""Event Management"",""Event Management - Enterprise Ireland"")")  ;L91009912
	do ..runUpgradeCode(releaseSet,"do ##class(EF.licensing.module).updateModuleName(""Organisational Units"",""Organisational Units - Aviva Only"")")  ;L91108706
	do ..runUpgradeCode(releaseSet,"do ##class(abstract.disposableMethods).distributeAbstractReviewerLoginPage()")  ;S88994848
	do ..runUpgradeCode(releaseSet,"do ##class(eCom.disposableMethods).updateEuroSymbol()")  ;S94933886
	do ..runUpgradeCode(releaseSet,"do ##class(layout.methods).reloadAll()")  ;S86794774 S87621954
	do ..runUpgradeCode(releaseSet,"do ##class(EF.licensing.objLicense).clearModuleCache()")  // always run this?
]]></Implementation>
</Method>

<Method name="SREL20150517">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	//S90094108 - recompileall
	set releaseSet="SREL20150517"
	do ..runUpgradeCode(releaseSet,"do ##class(cod.creationMethods).populateCODitems()")	//S93004710
	do ..runUpgradeCode(releaseSet,"do ##class(eCom.paymentMethodMethods).installPaymentMethods()")	//S91613188
	do ..runUpgradeCode(releaseSet,"do ##class(cod.disposableMethods).defaultAllAddressFieldsForAllEvents()")	//S89269302
	do ..runUpgradeCode(releaseSet,"do ##class(reports.install).updateAll()")	//S93323394
	do ..runUpgradeCode(releaseSet,"do ##class(reports.distribute).addIsActiveTrueFilterToAwardsDetails()")	//S93323394
	do ..runUpgradeCode(releaseSet,"do ##class(translations.objTranslation).importStandardTranslationFiles()") // always run this?
	do ..runUpgradeCode(releaseSet,"do ##class(EF.licensing.objLicense).clearModuleCache()")  // always run this?
]]></Implementation>
</Method>

<Method name="LREL20141228">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="LREL20141228"
	do ..runUpgradeCode(releaseSet,"do ##class(EF.licensing.objCustomPackageModules).deleteCustomModules(""Add Registration Prompts"")")
	do ..runUpgradeCode(releaseSet,"do ##class(sc.disposableMethods).movePaymentPages()")
	do ..runUpgradeCode(releaseSet,"do ##class(links.lnkEventPaymentMethod).populateObjLanguageIfNull()")
	do ..runUpgradeCode(releaseSet,"do ##class(links.lnkEventPaymentMethod).updateAllPaymentPageNames()")
	do ..runUpgradeCode(releaseSet,"do ##class(EF.licensing.objLicense).clearModuleCache()")  // always run this?
	do ..runUpgradeCode(releaseSet,"do ##class(cod.objChanges).convertStoredTimeToHorolog()")
]]></Implementation>
</Method>

<Method name="SREL20150104a">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20150104a"
	do ..runUpgradeCode(releaseSet,"do ##class(mail.objFileAttachment).moveUnusedPDFS()")
]]></Implementation>
</Method>

<Method name="SREL20150104b">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20150104b"
	do ..runUpgradeCode(releaseSet,"do ##class(mail.objFileAttachment).convertExistingAttachmentsToStreams()")
]]></Implementation>
</Method>

<Method name="SREL20150208">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20150208"
	do ..runUpgradeCode(releaseSet,"do ##class(EF.ui.templateComponents.efLogo).convertEFLogoSettingToModule()")
	do ..runUpgradeCode(releaseSet,"do ##class(reports.matrixColumn).addNewIndex()")
	do ..runUpgradeCode(releaseSet,"do ##class(cod.disposableMethods).convertCodOriginCase()")
	do ..updateReportDefinitions(releaseSet)
]]></Implementation>
</Method>

<Method name="SREL20150118">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20150118"
	do ..runUpgradeCode(releaseSet,"do ##class(cod.creationMethods).populateCODitems()")
]]></Implementation>
</Method>

<Method name="SREL20141228">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20141228"
	do ..runUpgradeCode(releaseSet,"do ##class(EF.licensing.objCustomPackageModules).deleteCustomModules(""Booker - Amend Registration Email"")")
	do ..runUpgradeCode(releaseSet,"do ##class(EF.licensing.objCustomPackageModules).deleteCustomModules(""Booker - Cancel Registration Email"")")
	do ..runUpgradeCode(releaseSet,"do ##class(EF.licensing.objCustomPackageModules).deleteCustomModules(""Booker - New Registration Email"")")
	do ..runUpgradeCode(releaseSet,"do ##class(cod.objItemData).convertAllTimeToHorolog()")
	do ..runUpgradeCode(releaseSet,"do ##class(EF.licensing.objLicense).clearModuleCache()")  // always run this?
]]></Implementation>
</Method>

<Method name="SREL20141228b">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20141228b"
	do ..runUpgradeCode(releaseSet,"do ##class(cod.creationMethods).updatePasswordToHidden()")
	do ..runUpgradeCode(releaseSet,"do ##class(EF.licensing.objLicense).clearModuleCache()")  // always run this?
]]></Implementation>
</Method>

<Method name="SREL20140921">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20140921"
	set codeToRun="do ##class(EF.licensing.objCustomPackageModules).deleteCustomModules(""Front-end maximum word/character count"")"
	do ..runUpgradeCode(releaseSet,codeToRun)
	set codeToRun="do ##class(cod.creationMethods).populateCODitems()"
	do ..runUpgradeCode(releaseSet,codeToRun)
	set codeToRun="do ##class(EF.extSys.salesforce.objAccountSF).installEnvironmentProperty()"
	do ..runUpgradeCode(releaseSet,codeToRun)
	set codeToRun="do ##class(translations.objPhrase).updatePhrase(""Add additional details to this abstract to make it a complete"",""Add additional details to complete this abstract submission"")"
	do ..runUpgradeCode(releaseSet,codeToRun)
	set codeToRun="do ##class(access.objFunction).deleteByAccessID(""EVLICOLD"")"
	do ..runUpgradeCode(releaseSet,codeToRun)
]]></Implementation>
</Method>

<Method name="LARGEABSTRACTSECTIONRELEASE">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="LARGEABSTRACTSECTIONRELEASE"
	do ..runUpgradeCode(releaseSet,"do ##class(reports.install).updateAll()")
	do ..runUpgradeCode(releaseSet,"do ##class(abstract.methods).setDefaultAbstractSettingsIfNotSet()")
	do ..runUpgradeCode(releaseSet,"do ##class(abstract.objDocumentSectionData).convertAllDocumentsToUseSections()")
	do ..runUpgradeCode(releaseSet,"do ##class(EF.licensing.objCustomPackageModules).deleteCustomModules(""Abstract Paper Submission"")")
]]></Implementation>
</Method>

<Method name="badTestReleaseSet">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="badTestReleaseSet"
	set codeToRun="write ""badTestReleaseSet"",!"
	do ..runUpgradeCode(releaseSet,codeToRun)
	set codeToRun="write 2/0"
	do ..runUpgradeCode(releaseSet,codeToRun)
]]></Implementation>
</Method>

<Method name="goodTestReleaseSet">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="goodTestReleaseSet"	
	set codeToRun="write ""test 1"" h 2"
	do ..runUpgradeCode(releaseSet,codeToRun)
	set codeToRun="write ""test 2"" h 4"
	do ..runUpgradeCode(releaseSet,codeToRun)
	set codeToRun="write ""test 3"" h 12"
	do ..runUpgradeCode(releaseSet,codeToRun)
	set codeToRun="write ""test 4"" h 1"
	do ..runUpgradeCode(releaseSet,codeToRun)
]]></Implementation>
</Method>

<Method name="SREL20140810">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20140810"
	set codeToRun="do ##class(cod.creationMethods).updateEmailAddressType()"
	do ..runUpgradeCode(releaseSet,codeToRun)
]]></Implementation>
</Method>

<Method name="LREL20140810">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="LREL20140810"
	set codeToRun="do ##class(setup.objLicense).convertOldToNew()"
	do ..runUpgradeCode(releaseSet,codeToRun)
]]></Implementation>
</Method>

<Method name="SREL20140831">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20140831"
	set codeToRun="do ##class(sc.methods).moveAwardsDataToMainList()"
	do ..runUpgradeCode(releaseSet,codeToRun)
	set codeToRun="do ##class(cod.creationMethods).addDashboardItems()"
	do ..runUpgradeCode(releaseSet,codeToRun)
]]></Implementation>
</Method>

<Method name="SREL20141012">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20141012"
	
	set codeToRun="do ##class(EF.licensing.objCustomPackageModules).deleteCustomModules(""PA email"")"
	do ..runUpgradeCode(releaseSet,codeToRun)
	
	set codeToRun="do ##class(cod.creationMethods).migratePAEmailToCcEmail()"
	do ..runUpgradeCode(releaseSet,codeToRun)
]]></Implementation>
</Method>

<Method name="LREL20141123">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="LREL20141123"
	
	// ###### COMPILE ALL #######
	/*
	   L81851912 - Some images missing in VC/m 
		Do not release this until you have manually deleted the images in all live locations first.
		Otherwise the release will fail as it does not expect the image to be there at all.	
	*/

	for module="Banner section","Menu Section","Right Hand Section","Footer Section","Vertical Answer Alternatives" {
		set codeToRun="do ##class(EF.licensing.objCustomPackageModules).deleteCustomModules("""_module_""")"
		do ..runUpgradeCode(releaseSet,codeToRun)
	}	
	set codeToRun="do ##class(sc.disposableMethods).convertInputFieldsToPixels()"
	do ..runUpgradeCode(releaseSet,codeToRun)
	
	set codeToRun="do ##class(cod.creationMethods).populateCODitems()"
	do ..runUpgradeCode(releaseSet,codeToRun)
		
	set codeToRun="do ##class(layout.methods).reloadAll()"
	do ..runUpgradeCode(releaseSet,codeToRun)

	set codeToRun="do ##class(layout.methods).moveResponsiveStandardDesignToTop()"
	do ..runUpgradeCode(releaseSet,codeToRun)
	
	set codeToRun="do ##class(layout.methods).updateDefaultTemplate()"
	do ..runUpgradeCode(releaseSet,codeToRun)
	
	set codeToRun="do ##class(abstract.disposableMethods).setFlagForShowingClosingDateForAllEvents()"
	do ..runUpgradeCode(releaseSet,codeToRun)
	
	set codeToRun="do ##class(reports.objHardcodedExport).deleteReport(""Raisers Edge Export"")"
	do ..runUpgradeCode(releaseSet,codeToRun)
	
	set codeToRun="do ##class(sc.disposableMethods).populateObjEventAndObjLanguage()"
	do ..runUpgradeCode(releaseSet,codeToRun)
	/* L77622758 - Add eventID and languageID to all proweb items
		To check the data run
		do ##class(sc.disposableMethods).verifyLanguageAndEvents()
		and check
		%verifyLanguageAndEvents
	*/
		

	
	/* L78563490 - IFRAMES in IE: sometimes it goes to home page not reg process
 		IIS needs to be changed for this. 
		Go to HTTP Response Headers at the highest level of the tree.
		Add a new entry:
		Name: P3P
		Value: CP="Internet Explorer requires this in order to set session cookies"

		This can be done at any time before the release or after the release as there is no dependent code, it just fixes IE in the IFRAME.	
			
	*/
]]></Implementation>
</Method>

<Method name="SREL20141214">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20141214"
	for module="Import Alternatives from CSV","Default Value for Registration Questions","HTML styling of registration questions"
	set codeToRun="do ##class(EF.licensing.objCustomPackageModules).deleteCustomModules("""_module_""")"
	do ..runUpgradeCode(releaseSet,codeToRun)
	
	//set codeToRun="do ##class(cod.creationMethods).updatePasswordToHidden()" // not to be released yet
	//do ..runUpgradeCode(releaseSet,codeToRun)
	
	set codeToRun="d ##class(cod.objItemName).updateDefaultCODItemTypes()"
	do ..runUpgradeCode(releaseSet,codeToRun)
]]></Implementation>
</Method>

<Method name="SREL20141214b">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20141214b"
	for module="Import Alternatives from CSV","Default Value for Registration Questions","HTML styling of registration questions" {
		set codeToRun="do ##class(EF.licensing.objCustomPackageModules).deleteCustomModules("""_module_""")"
		do ..runUpgradeCode(releaseSet,codeToRun)
	}
]]></Implementation>
</Method>

<Method name="C84605008">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="C84605008"
	for codItem="date of birth","phone number","email2" {
		set codeToRun="do ##class(sc.codItemMethods).correctTypeForCodItem("""_codItem_""")"
		do ..runUpgradeCode(releaseSet,codeToRun)
	}
]]></Implementation>
</Method>

<Method name="L84562406">
<Description>
method for deleting the data for the old setup.objModule classes</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 
	kill ^setup.objModuleGroupD	
	kill ^setup.objModulesD
	kill ^setup.objModulesI	
	kill ^setup.lnkSystemTypesModulesD
	kill ^setup.lnkSystemTypesModulesI
]]></Implementation>
</Method>

<Method name="SREL20150301">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20150301"
	set codeToRun="do ##class(reports.methods).updateTrasactionIDsColumnDefinition()"
	do ..runUpgradeCode(releaseSet,codeToRun)
	
	set codeToRun="do ##class(EF.security.websiteAccessHandlerPrivate).convertXtLogin()"
	do ..runUpgradeCode(releaseSet,codeToRun)
]]></Implementation>
</Method>

<Method name="LREL20150419">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="LREL20150419"
	//L89999522
	do ..runUpgradeCode(releaseSet,"do ##class(translations.objPhrase).%BuildIndices($ListBuild(""typeIndex""),0)")
	do ..runUpgradeCode(releaseSet,"do ##class(translations.objPhrase).convertPhrases()")
	do ..runUpgradeCode(releaseSet,"do ##class(translations.objPhrase).findAllPhrases(0,1)")
	do ..runUpgradeCode(releaseSet,"do ##class(translations.objTranslation).importStandardTranslationFiles()")
	
	//L84562406
	do ..runUpgradeCode(releaseSet,"do ##class(EF.utils.releases).L84562406()")
	//L71687384 & L88495906
	do ..runUpgradeCode(releaseSet,"do ##class(abstract.disposableMethods).setFlagForShowingAbstractsForAllEvents()")
	//L81204112
	do ..runUpgradeCode(releaseSet,"do ##class(admin.adhoc).removeFlightModuleCode()")
	//L88149366
	do ..runUpgradeCode(releaseSet,"do ##class(mail.methods).updateWordExportTemplatePurpose()")
	
	do ..runUpgradeCode(releaseSet,"do ##class(EF.licensing.objLicense).clearModuleCache()")
]]></Implementation>
</Method>

<Method name="SREL20150628">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20150628"
	do ..runUpgradeCode(releaseSet,"do ##class(translations.disposableMethods).copyPaymentMethodTranslations(0)")
	do ..runUpgradeCode(releaseSet,"do ##class(EF.lib.google.components.analytics).convertOldSettingToNewSetting()")
	do ..updateReportDefinitions(releaseSet)
]]></Implementation>
</Method>

<Method name="SREL20150628b">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20150628b"
	do ##class(setup.disposableMethods).fixDuplicatePagesForSessions()
]]></Implementation>
</Method>

<Method name="SREL20150719">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20150719"
	do ..runUpgradeCode(releaseSet,"do ##class(reports.methods).fixBackendAuditReportMatrixSource()")
	do ..updateReportDefinitions(releaseSet)
	do ..updateTranslations(releaseSet)
]]></Implementation>
</Method>

<Method name="SREL20150816">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20150816"
	do ..runUpgradeCode(releaseSet,"do ##class(awards.disposableMethods).fixAllDuplicatedEntryNumbers()")
]]></Implementation>
</Method>

<Method name="LREL20150830">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="LREL20150830"

	//L97388234, L99041076
	do ..runUpgradeCode(releaseSet,"do ##class(abstract.disposableMethods).convertPresentationOrder()")

	//S99425108
	do ..runUpgradeCode(releaseSet,"do ##class(eCom.paymentMethodMethods).installPaymentMethods()")

	//L100026860
	do ..runUpgradeCode(releaseSet,"do ##class(EF.licensing.module).updateModuleName(""Concealed Data Items"",""Concealed Data Items - TFI"")")
	do ..runUpgradeCode(releaseSet,"do ##class(access.objFunction).populateFunctionsFromXML()")

	//L97721374
	do ..runUpgradeCode(releaseSet,"do ##class(cod.creationMethods).populateCODitems()")

	//S98928860, S99887482, L100026860, L99041076
	do ..runUpgradeCode(releaseSet,"do ##class(reports.install).updateAll()")

	//L100026860
	do ..runUpgradeCode(releaseSet,"do ##class(EF.licensing.objLicense).clearModuleCache()")

	//S100503134
	do ..runUpgradeCode(releaseSet,"do ##class(access.disposableMethods).deleteAccessObjBackendPageClickData()")
]]></Implementation>
</Method>

<Method name="LREL20150830B">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="LREL20150830B"	
	do ..updateTranslations(releaseSet)
]]></Implementation>
</Method>

<Method name="SREL20150920">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set releaseSet="SREL20150920"
]]></Implementation>
</Method>

<Method name="SREL20151101">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20151101"
	do ..runUpgradeCode(releaseSet,"do ##class(eCom.paymentMethodMethods).installPaymentMethods()")
	do ..runUpgradeCode(releaseSet,"do ##class(layout.disposableMethods).recreateAllCustomTemplatesAndStore()")
]]></Implementation>
</Method>

<Method name="LREL20151122BeforeStartApplication">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	
	//S107029270
	do ##class(eCom.objCurrency).%BuildIndices()
	do ##class(links.lnkPersonPurchase).%BuildIndices($ListBuild("personTypeIndex"),0)
	do ##class(setup.objEventDetails).%BuildIndices($ListBuild("objEventIndex"),0)
	//L104900546
	do ##class(abstract.objTopic).%BuildIndices($ListBuild("objEventIndex"),0)
	
	//S107042268
	do ##class(paymentPortal.disposableMethods).installGatewayReference()
	
	
	//L106859112
	do ##class(setup.objEvent).%BuildIndices($ListBuild("isAwardsEvent"),0)
	do ##class(setup.disposableMethods).populateIsAwardsPropertyForObjEvent()
	
	
	//L93552704
	do ##class(setup.objSetting).setParameter("feature flags","use legacy dashboard",1)
	//L104521484
	do ##class(setup.objSetting).setParameter("registrations","use legacy admin registrations page",1)
]]></Implementation>
</Method>

<Method name="LREL20151122">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	
	set releaseSet="LREL20151122"
	
	do ..runUpgradeCode(releaseSet,"do ..LREL20151122BeforeStartApplication()",1)
	
	//L93102940
	do ..runUpgradeCode(releaseSet,"do ##class(access.objFunction).populateFunctionsFromXML()")
	do ..runUpgradeCode(releaseSet,"do ##class(access.disposableMethods).addNewFunctionToRolesWhoHaveOldFunction(""REGISTRATIONLIST"",""VIEWBOOK"")")
	
	//S106105006
	do ..runUpgradeCode(releaseSet,"do ##class(sc.disposableMethods).fixFlaglessRegistrationPrompts()")	
	
	//L104165268
	do ..runUpgradeCode(releaseSet,"do ##class(sc.disposableMethods).removeWebsiteSearchPageFromMenu()")
	//L104305928
	do ..runUpgradeCode(releaseSet,"do ##class(commidea.objTransaction).decommission()")

	do ##class(EF.utils.releases).updateReportDefinitions(releaseSet)
	do ..updateTranslations(releaseSet)
	
	//L103102302
	do ..runUpgradeCode(releaseSet,"do ##class(access.objFunction).deleteByAccessID(""EVCAL"")")
	do ..runUpgradeCode(releaseSet,"do ##class(cod.disposableMethods).hideSomeDatabaseItems()")
	
	//S84661858
	if $D(^%ZCSPAPPS("EVAWID")) {
		ZN "EVAWID"
		do ..runUpgradeCodeForNamespace(releaseSet, "do ##class(cod.creationMethods).addIfNotExists(""Is AWID Member"",0,""text"",,1,0,0,,0,0,0)")
	}
]]></Implementation>
</Method>

<Method name="SREL20151213">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20151213"
	do ..runUpgradeCode(releaseSet,"do ##class(reports.install).updateAll()")
	do ..runUpgradeCode(releaseSet,"do ##class(cod.creationMethods).populateCODitems()")
]]></Implementation>
</Method>

<Method name="S111408038">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	do ##class(access.objAccessTokenPersonalEvent).%BuildIndices()
	do ##class(access.objAccessTokenPersonalRegistration).%BuildIndices()
	do ##class(access.objAccessTokenPersonalRegistrationAmend).%BuildIndices()
	do ##class(access.objAccessTokenPersonalDecline).%BuildIndices()
]]></Implementation>
</Method>

<Method name="SREL20160207">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20160207"
	// do a full compilation first
	do ..runUpgradeCode("S111408038","do ..S111408038()")
	do ..runUpgradeCode(releaseSet,"do ##class(abstract.disposableMethods).fixDisplayOrderOfPresentationMethods()")
]]></Implementation>
</Method>

<Method name="LREL20160228">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="LREL20160228"

	// STOP EF FROM RUNNING BEFORE COMPILING:
	// do a full compilation: L110397270, L92120850, S106200922

 	do ..runUpgradeCode(releaseSet,"do ##class(setup.objSetting).setParameter(""feature flags"",""use legacy event properties page"",1)")
 	do ..runUpgradeCode(releaseSet,"do ##class(setup.objSetting).setParameter(""feature flags"",""use legacy registration options page"",1)")

	do ..runUpgradeCode(releaseSet,"do ##class(eCom.objBasketItem).%BuildIndices($ListBuild(""controllerIndex""),0)")  ; L111518366
	do ..runUpgradeCode(releaseSet,"do ##class(eCom.objPriceDescriptor).%BuildIndices($ListBuild(""controllerIndex""),0)")  ; L111518366

	do ..runUpgradeCode(releaseSet,"do ##class(setup.disposableMethods).populateStartTimeStampAndEndTimeStampForAllEvents()")  ; L92120850
	do ..runUpgradeCode(releaseSet,"do ##class(setup.disposableMethods).eventSettingsRegistrationUpgrade()",1)  ; L92124898
	// EF WILL NOW BE RUNNING
	
	do ..runUpgradeCode(releaseSet,"do ##class(sc.disposableMethods).addPagesForRequestPasswordPageToAllEvents()")  ; L106195478
	do ..runUpgradeCode(releaseSet,"do ##class(EF.pageController.element).clearAllPageControllerData()")  ; L111299186
	do ..runUpgradeCode(releaseSet,"do ##class(setup.disposableMethods).deleteURLAndImageSoftEventPrompts()")  ; L111689352

	do ..runUpgradeCode(releaseSet,"do ##class(reports.objHardcodedExport).initialSetup()")  ; L109182468
	do ..runUpgradeCode(releaseSet,"do ##class(reports.install).updateAll()")  ; S113350389
	do ..runUpgradeCode(releaseSet,"do ##class(layout.methods).loadResponsiveStandardTemplates()")  ; L82024742
	do ..runUpgradeCode(releaseSet,"do ##class(layout.methods).updateTemplateCSSFileAll()")  ; L109034672
	do ..runUpgradeCode(releaseSet,"do ##class(redirects.pageMethods).convertHardcodedRootRedirects() ")  ; L112501721

	;ONLY FOR BRIT COUN: do ..runUpgradeCode(releaseSet,"do ##class(shared.disposableMethods).addLanguagesForBritishCouncil()")  ; S113256503  // ********????????????????
]]></Implementation>
</Method>

<Method name="SREL20160320initAwardsOriginalEntryIDs">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	do ##class(awards.objEntry).%BuildIndices($ListBuild("originalEntryIDIndex"))
	do ##class(awards.tempEntry).%BuildIndices($ListBuild("originalEntryIDIndex"))
	do ##class(awards.disposableMethods).applyOriginalEntryIDs()
]]></Implementation>
</Method>

<Method name="SREL20160320">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20160320"
	do ..runUpgradeCode(releaseSet,"do ..SREL20160320initAwardsOriginalEntryIDs()",1) // Release the stop application
	do ..runUpgradeCode(releaseSet,"do ##class(abstract.disposableMethods).initialiseSubmissionTimestamp()")
	do ..runUpgradeCode(releaseSet,"do ##class(mail.disposableMethods).convertSoftEventPromptEventTimes()")
	do ..runUpgradeCode(releaseSet,"do ##class(setup.disposableMethods).updateCreationTimeStampForlnkPersonEvent()")
	do ##class(EF.utils.releases).updateTranslations("SREL20160320")
]]></Implementation>
</Method>

<Method name="SREL20160410">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20160410"
	do ..runUpgradeCode(releaseSet,"do ##class(cod.creationMethods).populateCODitems()")
	do ..runUpgradeCode(releaseSet,"do ##class(setup.objSetting).setParameter(""feature flags"",""use legacy event properties page"",0)")
	do ..runUpgradeCode(releaseSet,"do ##class(setup.objSetting).setParameter(""feature flags"",""use legacy registration options page"",0)")
	do ##class(EF.utils.releases).updateTranslations(releaseSet)
]]></Implementation>
</Method>

<Method name="LREL20160501">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="LREL20160501"

	// STOP EF FROM RUNNING BEFORE COMPILING:
	// do a full compilation
	do ..runUpgradeCode(releaseSet,"do ##class(awards.objEntry).%BuildIndices($LB(""objPersonIndex"",""objEventIndex""),1)",1)  ; L111518366
	// EF WILL NOW BE RUNNING
	do ..runUpgradeCode(releaseSet,"do ##class(reports.install).updateAll()")  ; S116219151 S117077819
	do ##class(EF.utils.releases).updateTranslations(releaseSet)
	// Schroders only: do ##class(shared.callOuts).delete("mail.objMailShot","afterbuildmail","1")  ; L116519539
]]></Implementation>
</Method>

<Method name="SREL20160522">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20160522"
	do ..runUpgradeCode(releaseSet,"do ##class(reports.matrixColumn).rename(""Grade"",""Grade~Abstract Reviews"")")
	do ..runUpgradeCode(releaseSet,"do ##class(sc.disposableMethods).deleteMeetingManagerNotesDetailsPage()")
	do ..runUpgradeCode(releaseSet,"do ##class(eCom.disposableMethods).updateNullVatValuesToZero()")
	do ..runUpgradeCode(releaseSet,"do ##class(paymentPortal.disposableMethods).decomissionAuthorizeAndDatacash()")
	do ..runUpgradeCode(releaseSet,"do ##class(customCode.install.disposableMethods).deleteCSMCrownNominee()")
	do ..updateReportDefinitions(releaseSet)
	do ..updateTranslations(releaseSet)
]]></Implementation>
</Method>

<Method name="C120286465">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="C120286465"
	do ..runUpgradeCode(releaseSet,"do ##class(mail.objMailTemplate).%BuildIndices(),$SYSTEM.SQL.Purge()",1)
]]></Implementation>
</Method>

<Method name="LREL20160612">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="LREL20160612"
	do ..runUpgradeCode(releaseSet,"do ##class(storage.disposableMethods).upgradeRSAuthURL()")  ;L113264975
	do ..runUpgradeCode(releaseSet,"do ##class(setup.disposableMethods).fixCustomEventCheckBoxes()")  ;S119269469
	do ..runUpgradeCode(releaseSet,"do ##class(layout.methods).loadResponsiveStandardTemplates()")  ;S118924273
	do ..updateReportDefinitions(releaseSet)
	do ..updateTranslations(releaseSet)
]]></Implementation>
</Method>

<Method name="SREL20160703">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20160703"
	do ..runUpgradeCode(releaseSet,"do ##class(cod.disposableMethods).deleteBackendPasswordData()")		;S119985611
	do ..updateTranslations(releaseSet)
]]></Implementation>
</Method>

<Method name="C126321575">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="C126321575"
	do ..runUpgradeCode(releaseSet,"do ##class(storage.disposableMethods).upgradeRSAuthURL()")
	do ..runUpgradeCode(releaseSet,"do ##class(storage.methods).activateCloudStorageForNS()")
]]></Implementation>
</Method>

<Method name="SREL20160724a">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20160724a"
	do ..runUpgradeCode(releaseSet,"do ##class(eCom.paymentMethodMethods).installPaymentMethods()")
]]></Implementation>
</Method>

<Method name="SREL20160724b">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20160724b"
	do ..runUpgradeCode(releaseSet,"do ##class(abstract.disposableMethods).compareSanitisedHTML()")
]]></Implementation>
</Method>

<Method name="SREL20160814">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="SREL20160814"
	do ..runUpgradeCode(releaseSet,"do ##class(reports.distribute).renameCreationDateToCreationTime()")
	do ..updateReportDefinitions(releaseSet)
	do ..updateTranslations(releaseSet)
]]></Implementation>
</Method>

<Method name="LREL20160904">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set releaseSet="LREL20160904"
	
	do ##class(EF.utils.releases).updateReportDefinitions("S121853743")
	do ##class(EF.utils.releases).runUpgradeCode(releaseSet,"do ##class(EF.utils.releases).addIndices(""mail.objMailTemplate"",$ListBuild(""purposeIndex"",""objLanguageIndex""))")
	do ##class(EF.utils.releases).runUpgradeCode(releaseSet,"do ##class(mail.disposableMethods).fixAbstractExportTemplateForReviewers()")
	do ##class(EF.utils.releases).runUpgradeCode(releaseSet,"do ##class(mail.disposableMethods).deleteAllNonEnglishWordExportTemplates()")
	do ##class(EF.utils.releases).runUpgradeCode(releaseSet,"do ##class(mail.disposableMethods).upgradeScheduledBatchInvitationsErrors()")
	
	do ##class(EF.utils.releases).runUpgradeCode(releaseSet,"do ##class(setup.disposableMethods).populateRegistrationStatusForDays()")
	do ##class(EF.utils.releases).runUpgradeCode(releaseSet,"do ##class(setup.objSetting).setParameter(""feature flags"",""use legacy event attendee categories page"",1)",1)
	do ##class(EF.utils.releases).runUpgradeCode(releaseSet,"do ##class(layout.methods).loadResponsiveStandardTemplates()")
	do ##class(EF.utils.releases).runUpgradeCode(releaseSet,"do ##class(layout.disposableMethods).updateDefaultTemplate()")
]]></Implementation>
</Method>

<Method name="LREL20160904B">
<Description>
needs to be separate to work in staging</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	do ..updateTranslations("LREL20160904B")
]]></Implementation>
</Method>

<Method name="LREL20160904C">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	do ##class(EF.utils.releases).runUpgradeCode("LREL20160904C","do ##class(setup.objSetting).setParameter(""feature flags"",""use legacy event capacity page"",1)")
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.taskscheduler">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.utils.taskscheduler.CLS/EV.2
;vc; Component: CLS.EF.utils.taskscheduler
;vc;  Location: SmallDev
;vc; Date/Time: 02-Nov-15 21:25
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.taskscheduler.CLS/EV.2</td><td>CLS.EF.utils.taskscheduler</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Nov-15 21:25</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>63858,60926</TimeChanged>
<TimeCreated>63798,45169.776203</TimeCreated>

<Method name="getBaseNameForTasksForNamespace">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "zEmail_"_namespace
]]></Implementation>
</Method>

<Method name="getAllScheduledTasksForNS">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[namespace,&taskArray]]></FormalSpec>
<Implementation><![CDATA[
	kill taskArray
	set baseName=..getBaseNameForTasksForNamespace(namespace)
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	set query="SELECT * FROM %SYS.Task WHERE (Name LIKE ?)"
	do rs.Prepare(query)
	do rs.Execute(baseName_"%")
	while rs.Next() {
		set taskID=rs.Get("ID")
		set taskName=rs.Get("Name")
		if $E(taskName,1,6)'="zEmail" continue
		set profileID=$p(taskName,"_",5)
		
		set codeToRun=$LG(rs.Get("Settings"),2)
		if $L(codeToRun)=0 continue
		
		set taskArray(taskID)=taskName
		set taskArray(taskID,"DayNextScheduled")=rs.Get("DayNextScheduled")
		set taskArray(taskID,"DailyStartTime")=rs.Get("DailyStartTime")
		set taskArray(taskID,"Description")=rs.Get("Description")
		set taskArray(taskID,"Name")=rs.Get("Name")
		set taskArray(taskID,"NameSpace")=rs.Get("NameSpace")
		set taskArray(taskID,"Settings")=codeToRun
		set taskArray(taskID,"TimePeriod")=rs.Get("TimePeriod")
		set taskArray(taskID,"TimePeriodDay")=rs.Get("TimePeriodDay")
		set taskArray(taskID,"TimePeriodEvery")=rs.Get("TimePeriodEvery")
		set taskArray(taskID,"EndDate")=rs.Get("EndDate")
		
	}
	quit
]]></Implementation>
</Method>

<Method name="outputCreationCodeForCurrentTasks">
<Description>
used for migration of customers from one server to another
run in a terminal and capture the output, then paste into the new server when database is set up and ready</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace</FormalSpec>
<Implementation><![CDATA[
	set namespace=$ZCVT(namespace,"U")
	ZN namespace
	
	do ..getAllScheduledTasksForNS(namespace,.taskArray)
	
	set oldTaskID=""
	for  {
		set oldTaskID=$O(taskArray(oldTaskID))
		if oldTaskID="" quit
		
		if $L(taskArray(oldTaskID,"DayNextScheduled"))=0 set taskArray(oldTaskID,"DayNextScheduled")=1+$ZTS
		
		set cmdstr="set newTaskID=##class(EF.utils.taskscheduler).createNewTask("
		set cmdstr=cmdstr_""""_taskArray(oldTaskID,"DayNextScheduled")_""","
		set cmdstr=cmdstr_""""_taskArray(oldTaskID,"DailyStartTime")_""","
		set cmdstr=cmdstr_""""_taskArray(oldTaskID,"Description")_""","
		set cmdstr=cmdstr_""""_taskArray(oldTaskID,"Name")_""","
		set cmdstr=cmdstr_""""_taskArray(oldTaskID,"NameSpace")_""","
		set cmdstr=cmdstr_""""_$REPLACE(taskArray(oldTaskID,"Settings"),$C(34),$C(34)_$C(34))_""","
		set cmdstr=cmdstr_""""_taskArray(oldTaskID,"TimePeriod")_""","
		set cmdstr=cmdstr_""""_taskArray(oldTaskID,"TimePeriodDay")_""","
		set cmdstr=cmdstr_""""_taskArray(oldTaskID,"TimePeriodEvery")_""","
		set cmdstr=cmdstr_""""_taskArray(oldTaskID,"EndDate")_""")"
		w !,cmdstr
		
		// determine if this is a preRegEmail or Report
		if taskArray(oldTaskID,"Settings")["objPreRegister" {
			set cmdstr="do ##class(EF.utils.taskscheduler).replacePreRegProfileWithNewTaskID("_oldTaskID_",newTaskID)"
			w !,cmdstr
		} elseif taskArray(oldTaskID,"Settings")["emailReport" {
			set cmdstr="do ##class(EF.utils.taskscheduler).replaceReportProfileWithNewTaskID("_oldTaskID_",newTaskID)"
			w !,cmdstr
		} else {
			// assume it's a self contained job like the ones for CMPI, Haymarket and ABHI so nothing else to update the newTaskID with
		}
		
	}
]]></Implementation>
</Method>

<Method name="createNewTask">
<ClassMethod>1</ClassMethod>
<FormalSpec>schedNextStartDate,schedTime,description,taskName,nameSpace,codeToRun,timePeriod,timePeriodDay,timePeriodEvery,schedEndDate</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set taskSettings=$LB("ExecuteCode",codeToRun)
	&SQL(
		INSERT INTO %SYS.Task (DailyEndTime,DailyStartTime,Description,Name,NameSpace,RunAsUser,Settings,TaskClass,TimePeriod,TimePeriodDay,TimePeriodEvery,EndDate) 
		VALUES (:schedTime,:schedTime,:description,:taskName,:nameSpace,'UnknownUser',:taskSettings,'%SYS.Task.RunLegacyTask',:timePeriod,:timePeriodDay,:timePeriodEvery,:schedEndDate)
	)
	set taskID=%ROWID
	if schedNextStartDate do ..scheduleTheActualTask(taskID,schedNextStartDate)
	quit taskID
]]></Implementation>
</Method>

<Method name="scheduleTheActualTask">
<ClassMethod>1</ClassMethod>
<FormalSpec>taskID,schedDate</FormalSpec>
<Implementation><![CDATA[
	// Schedule the task
	set objTask=##class(%SYS.Task).%OpenId(taskID)
	do objTask.StartDateSet(schedDate)
	do objTask.%Save()
	kill objTask
	quit
]]></Implementation>
</Method>

<Method name="replaceReportProfileWithNewTaskID">
<Description>
for the migration</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oldTaskID,newTaskID</FormalSpec>
<Implementation><![CDATA[	&SQL(UPDATE reports.objProfile SET taskID=:newTaskID WHERE taskID=:oldTaskID)
]]></Implementation>
</Method>

<Method name="replacePreRegProfileWithNewTaskID">
<Description>
for the migration</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oldTaskID,newTaskID</FormalSpec>
<Implementation><![CDATA[
	set taskSearchString=oldTaskID_"|%"
	&SQL(SELECT ID,settingValue,setting,objEvent INTO :tmp1,:tmp2,:tmp3,:tmp4 FROM setup.objEventSetting WHERE (settingGroup='emails') AND (settingValue LIKE :taskSearchString) )
	if +SQLCODE=0 {
		set settingID=tmp1
		set settingValue=tmp2
		set setting=tmp3
		set eventID=tmp4
		set newSettingValue=newTaskID_"|"_$P(settingValue,"|",2,999)
		do ##class(setup.objEventSetting).setParameter("emails",setting,newSettingValue,eventID)
	}
]]></Implementation>
</Method>

<Method name="checkForFailedScheduledTasks">
<Description>
Used to check the the task scheduler - moved from qCheckSchedTasks.MAC</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	// find out where we are running
	set server=$ZUTIL(131,0)
	if $P(server,"-",2)'="" set server=$p(server,"-",2) // maroon and olive have names like "108061-MAROON". Not sure why.
	
	set toAddress="tech@eventsforce.com"
	set fromAddress="support@eventsforce.co.uk"
	set subject="Error on Scheduled Task on "_server
	
	set emailSent=0
	
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	set query="SELECT * FROM %SYS.TASK WHERE Status <> 1 AND suspended = 1"
	set rs.RuntimeMode=0
	do rs.Prepare(query)
	do rs.Execute()
	while rs.Next() {
		// create new system level mailmessage object
 		set objMail=##class(%Net.MailMessage).%New()
 	
 		// set basic props
 		do objMail.To.Insert(toAddress)
 		set objMail.From=fromAddress
 		set objMail.Subject=subject
 
 		set content=objMail.AttachNewMessage()
	
		// Do the multipart messages
		set content.IsAlternative=1 // new prop from patch
 	
 		// The text version	
		set newBlock1=content.AttachNewMessage()
		set newBlock1.IsHTML=0
		do newBlock1.TextData.Write("Task ID: "_rs.Get("ID")_$C(13,10)_"Name: "_rs.Get("Name")_$C(13,10)_"Description: "_rs.Get("Description")_$C(13,10)_"Error: "_rs.Get("Error"))
		
		// The html Version
 		set newBlock2=content.AttachNewMessage()
		set newBlock2.IsHTML=1
		do newBlock2.TextData.Write("Task ID: "_rs.Get("ID")_"<br/>"_"Name: "_rs.Get("Name")_"<br/>"_"Description: "_rs.Get("Description")_"<br/>"_"Error: "_##class(shared.pCSPmanage).EscapeHTML(rs.Get("Error")))

		set ok=##class(mail.smtpMethods).sendEmail(objMail,,1)
		
		kill objMail
		kill objSMTP
		
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.text">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.utils.text.CLS/EV.5
;vc; Component: CLS.EF.utils.text
;vc;  Location: SmallDev
;vc; Date/Time: 25-Jul-16 17:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.text.CLS/EV.5</td><td>CLS.EF.utils.text</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Jul-16 17:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>64124,62249.724401</TimeChanged>
<TimeCreated>63348,34874.972247</TimeCreated>

<Method name="countWords">
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set string=inString
    // Deal with some spaces
	set string=##class(EF.utils.regex).replaceAll(string,"[\u200B-\u200D\uFEFF]", " ")

    // Deal with hyphens and dashes
	set string=##class(EF.utils.regex).replaceAll(string,"[\u002D\u2010-\u2015\uFE58\uFE63\uFF0D]", "")

    // Deal with bullets and leaders
	set string=##class(EF.utils.regex).replaceAll(string,"[\u2020-\u2025]", "")
    // Find all the runs of spaces
    if $l(string) {
	    // Replace all non whitespace groups of characters with a - and then count them
	    // E.g. "one two three" -> "- - -"
	    set words=$l(##class(EF.utils.regex).replaceAll(string,"(\S)+","-"),"-")-1

	} else {
        set words=0
    }
    quit words
]]></Implementation>
</Method>

<Method name="countCharacters">
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	// make sure we count enter as one character
	set string=##class(EF.htmlGenerator).unescapeXSSFix(inString)
	set string=$Replace(string,$Char(13,10),$Char(13))
	return $Length(string)
]]></Implementation>
</Method>

<Method name="countCharactersAfterRemovingHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set stringWithoutHTML=##class(EF.conversions.htmlToText).stripHTML(inString)
	set stringWithoutHTML=$TR(stringWithoutHTML,$C(13,10),"")  // remove CRLF for counting character purposes
	return +..countCharacters(stringWithoutHTML)
]]></Implementation>
</Method>

<Method name="countWordsAfterRemovingHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>inString</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set stringWithoutHTML=##class(EF.conversions.htmlToText).stripHTML(inString)
	return +..countWords(stringWithoutHTML)
]]></Implementation>
</Method>
</Class>


<Class name="EF.utils.zClean">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.utils.zClean.CLS/EV.12
;vc; Component: CLS.EF.utils.zClean
;vc;  Location: SmallDev
;vc; Date/Time: 02-Sep-16 14:24
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.utils.zClean.CLS/EV.12</td><td>CLS.EF.utils.zClean</td><td>SmallDev</td><td style='white-space: nowrap;'>02-Sep-16 14:24</td><td>JeremyW</td></tr></table>
]]></Description>
<Abstract>1</Abstract>
<TimeChanged>64163,39850</TimeChanged>
<TimeCreated>63319,48314.59613</TimeCreated>

<Method name="START">
<ClassMethod>1</ClassMethod>
<FormalSpec>NS</FormalSpec>
<Implementation><![CDATA[
	set xxT1=$P($ZTS,",",2)
	set ^%ZCLEAN(+$ZTS,xxT1)="START"
	//w !,xxT1
	
	D LOW^%PRIO  // make this a low priority process
 
 	//set oldZT=$ZT
	//set $ZT="ERR"
	set curns=$ZNSPACE
 
	// do just one NS if passed in else loop through all
	if $L($G(NS))	{
		set ns=NS
		zn ns
		do ..EACHNS(ns,xxT1)
	} else {
		set ns=""
		for  {
			set ns=$O(^%ZCSPAPPS(ns))
			if ns="" quit
			if '..TIMEOK(xxT1) quit
			zn ns
			do ..EACHNS(ns,xxT1)
		}
	}
 
	zn curns

	set xxT3=$P($ZTS,",",2)
	set ^%ZCLEAN(+$ZTS,xxT3)="FINISH"
	quit
]]></Implementation>
</Method>

<Method name="ERR">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set ^%ZCLEAN(+$ZTS,"ERROR")=$ZE
	//set $ZT=oldZT
	quit
]]></Implementation>
</Method>

<Method name="getEmailArchiveDirectory">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set outputRoot=##class(setup.objSetting).getParameter("zclean","output root dir")
	if $L($ZSTRIP(outputRoot,"<>W"))=0 {
		set outputRoot="D:\archive"
	}
	if $E(outputRoot,$L(outputRoot))="\" set outputRoot=$E(outputRoot,1,$L(outputRoot)-1)
	set outputRoot=outputRoot_"\mail\"
	return outputRoot
]]></Implementation>
</Method>

<Method name="EACHNS">
<ClassMethod>1</ClassMethod>
<FormalSpec>ns,xxT1</FormalSpec>
<Implementation><![CDATA[
	if '##class(setup.objSetting).getParameter("zclean","if set to 1 then it will be cleaned") quit
	set ^%ZCLEAN(+$ZTS,xxT1,ns)=""
 
	// do 1 month for pagenav and mail sent
	set enddate=..MONTHSAGO(+$ZTS,1)
 
	// remove the xPageNav
	set i=""
	for  {
		set i=$O(^xPageNav(i))
		if i="" quit
		if i<enddate kill ^xPageNav(i)
	}
 
	// remove the xImportLog
	set enddate=-##class(shared.dateFunctions).multiDate(enddate,18)_"000000.000"
	set i=""
	for  {
		set i=$O(^xImportLog(i))
		if i="" quit
		if i>enddate kill ^xImportLog(i)
	}
 
	// remove the debug things
	kill ^xJAW,^xJAWtranslation
	kill ^xfg,^xfg2
	kill ^xAdrian,^xpjc
	kill ^%xNoEv,^%xNoEvOld,^%xNoEvOLD
	kill ^%zStartSession,^%zStartSessionNS,^%zStartSessionSS,^%zStartSessionTS
	kill ^xAPIDEBUG,^xAPIDEBUGLOG
 
	// remove the mailsent
	kill ^xMailSent  // JAW 09DEC2009 - kill it - no use and not used anymore
	
	// remove the admin.objLog data from n months ago
	do ..LOGFILES()
	
	// change sessionIDs in tempPurchase to avoid re loading old data
	do ..SESSID()
	
	// remove the xPage global from n months ago
	do ..XPAGE()
 
	// remove the emails from n months ago and store in files
	if '..TIMEOK(xxT1) quit
	do ..EMAILS(1,xxT1)
	
	if '..TIMEOK(xxT1) quit
 	do ..storageLogs()
 	
 	do ..tempImports()
 	
	if '..TIMEOK(xxT1) quit
 	do ..runtimeColumnRowData()
 	
	if '..TIMEOK(xxT1) quit
 	do ..tempPurchase(xxT1)

	do ##class(reports.emailMethods).clearDownOldTasks()

	do ..clearDownAPIlog()
	quit
]]></Implementation>
</Method>

<Method name="clearDownAPIlog">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set length=1
	set enddate=..MONTHSAGO(+$ZTS,length)
 
	// convert to timestamp
	set enddate=##class(shared.dateFunctions).multiDate(enddate,25)_" 00:00:00" //"2001-10-01 12:00:00"
 
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	set sqltext="DELETE FROM api_v2.objLog WHERE (xCRstamp<?)"
	set ok=rs.Prepare(sqltext)
	if ok set ok=rs.Execute(enddate)
	do rs.%Close()
	do rs.Close()
	kill rs
	quit
]]></Implementation>
</Method>

<Method name="isSessionDead">
<ClassMethod>1</ClassMethod>
<FormalSpec>sessionID</FormalSpec>
<Implementation><![CDATA[
	if $D(^%cspSession(sessionID)) quit 0
	quit 1
]]></Implementation>
</Method>

<Method name="EMAILS">
<ClassMethod>1</ClassMethod>
<FormalSpec>remove,xxT1</FormalSpec>
<Implementation><![CDATA[
	// remove the email contents (if parameter remove=1)
	// if remove is not set to 1 then the emails are just extracted to the files
 
	set remove=+$G(remove)
	
	set outputRoot=..getEmailArchiveDirectory()
	set dir=outputRoot_$ZNSPACE_"\"

	//FIND CUR VALUES: s ns="" f  {s ns=$O(^%ZCSPAPPS(ns)) q:ns=""  zn ns s em=##class(setup.objSetting).getParameter("zclean","emails: months to keep") w:(em'=6) !,ns,":","emails:",em}
	// get number of months to keep
	set length=##class(setup.objSetting).getParameter("zclean","emails: months to keep")
	if 'length set length=6
	
	set enddate=..MONTHSAGO(+$ZTS,length)
 
	// convert to timestamp
	set enddate=##class(shared.dateFunctions).multiDate(enddate,25)_" 00:00:00" //"2001-10-01 12:00:00"
 
 	set maxFileSize=3   // MB
 	
	// dynamic queries are ok in a %routine as long as the objects exist in the namespace when it gets there
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	set sqltext="SELECT ID FROM mail.mailObjects WHERE (xCRstamp<?) AND ((messageHTML IS NOT NULL) OR (messageText IS NOT NULL))"
	set ok=rs.Prepare(sqltext)
	if ok set ok=rs.Execute(enddate)
	if ok	{
		while (rs.Next()&..TIMEOK(xxT1))	{
			set mailID=rs.Data("ID")
			set ob=##class(mail.objMail).%OpenId(mailID)
			set exportThis=1
			if (ob.messageText.Size=0)&(ob.messageHTML.Size=0) set exportThis=0
			
			if exportThis	{
				set prefix=$E(##class(shared.dateFunctions).multiDate($P(ob.xCRstamp," ",1),18,"",25),1,6)
				set ok=##class(%Library.File).CreateDirectoryChain(dir)
				
				// find a file to use
				set i=0
				for  {
					set i=i+1
					if i>9999 quit
					set count=$TR($J(i,4)," ","0")
					set filename=prefix_"_"_count_".txt"
					// check the size (this works even if not existing) is less than 5MB
					if ##class(%File).GetFileSize(dir_filename)<(maxFileSize*1024*1024)	{
						quit
					}
				}
				if ##class(%File).Exists(dir_filename)	{
					// existing file - append
					set tmpfileTXT=##class(%File).%New(dir_filename)
					set ok=tmpfileTXT.Open("RWSA")
				} else {
					// new file
					set tmpfileTXT=##class(%File).%New(dir_filename)
					set ok=tmpfileTXT.Open("WSN")
				}
				// find a file to use
				set i=0
				for  {
					set i=i+1
					if i>9999 quit
					set count=$TR($J(i,4)," ","0")
					set filename=prefix_"_"_count_".htm"
					// check the size (this works even if not existing) is less than 5MB
					if ##class(%File).GetFileSize(dir_filename)<(maxFileSize*1024*1024)	{
						quit
					}
				}
				if ##class(%File).Exists(dir_filename)	{
					// existing file - append
					set tmpfileHTM=##class(%File).%New(dir_filename)
					set ok=tmpfileHTM.Open("RWSA")
				} else {
					// new file
					set tmpfileHTM=##class(%File).%New(dir_filename)
					set ok=tmpfileHTM.Open("WSN")
				}
	 
				do tmpfileTXT.WriteLine(" ")
				do tmpfileTXT.WriteLine(" ")
				do tmpfileTXT.WriteLine("=====================================================")
				do tmpfileTXT.WriteLine("  mailID="_mailID)
				do tmpfileTXT.WriteLine("  date="_##class(shared.dateFunctions).multiDate($P(ob.xCRstamp," ",1),18,"",25)_" time="_$P(ob.xCRstamp," ",2))
				do tmpfileTXT.WriteLine("=====================================================")
				do tmpfileTXT.WriteLine(" ")
				set ok=tmpfileTXT.CopyFrom(ob.messageText)
				do tmpfileTXT.Close()
				do tmpfileTXT.%Close()
	 
				do tmpfileHTM.WriteLine("<p clear=""left"">")
				do tmpfileHTM.WriteLine("<hr>")
				do tmpfileHTM.WriteLine("  mailID="_mailID_"<br>")
				do tmpfileHTM.WriteLine("  date="_##class(shared.dateFunctions).multiDate($P(ob.xCRstamp," ",1),18,"",25)_" time="_$P(ob.xCRstamp," ",2))
				do tmpfileHTM.WriteLine("<hr>")
				do tmpfileHTM.WriteLine("</p>")
				// remove the html body stuff
				set aa=ob.messageHTML.Read(12)
				do tmpfileHTM.WriteLine(ob.messageHTML.Read(ob.messageHTML.Size-12-14))
				//set ok=tmpfileHTM.CopyFrom(ob.messageHTML)
				do tmpfileHTM.Close()
				do tmpfileHTM.%Close()
	 
				if remove	{
					do ob.messageHTML.Clear()
					do ob.messageText.Clear()
					set ok=ob.%Save()
				}
			}
			k ob,tmpfileHTM,tmpfileTXT
			
			// archive the attachments
			if ##class(mail.objFileAttachment).anyAttachmentsWithStreamContents(mailID)	{
				do ##class(mail.objFileAttachment).moveAllToArchive(mailID)
			}
			
		}
	}
	do rs.%Close()
	do rs.Close()
	kill rs
	
	quit
]]></Implementation>
</Method>

<Method name="LOGFILES">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	; remove the admin.objLog for n months ago
 
	//FIND CUR VALUES: s ns="" f  {s ns=$O(^%ZCSPAPPS(ns)) q:ns=""  zn ns w !,ns,":","logfiles:",##class(setup.objSetting).getParameter("zclean","admin.objLog: months to keep")}
	// get number of months to keep
	//set length=##class(setup.objSetting).getParameter("zclean","admin.objLog: months to keep")
	set length=3  // hardcode now, no need to have this different across clients - JAW MAY2013
	if 'length set length=3
	
	set enddate=..MONTHSAGO(+$ZTS,length)
 
	// convert to timestamp
	set enddate=##class(shared.dateFunctions).multiDate(enddate,25)_" 00:00:00" //"2001-10-01 12:00:00"
 
	// dynamic queries are ok in a %routine as long as the objects exist in the namespace when it gets there
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	set sqltext="DELETE FROM admin.objLog WHERE (xCRstamp<?)"
	set ok=rs.Prepare(sqltext)
	if ok set ok=rs.Execute(enddate)
	do rs.%Close()
	do rs.Close()
	kill rs

	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	set sqltext="DELETE FROM admin.objLogBackend WHERE (xCRstamp<?)"
	set ok=rs.Prepare(sqltext)
	if ok set ok=rs.Execute(enddate)
	do rs.%Close()
	do rs.Close()
	kill rs
	
	quit
]]></Implementation>
</Method>

<Method name="XPAGE">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	//FIND CUR VALUES: s ns="" f  {s ns=$O(^%ZCSPAPPS(ns)) q:ns=""  zn ns w !,ns,":","xPage:",##class(setup.objSetting).getParameter("zclean","xPage: months to keep")}
	// get number of months to keep
	//set length=##class(setup.objSetting).getParameter("zclean","xPage: months to keep")
	set length=3  // hardcode now, no need to have this different across clients - JAW MAY2013
	if 'length set length=3
	
	set enddate=..MONTHSAGO(+$ZTS,length)
 
	// remove the xPage
	set i=""
	for  {
		set i=$O(^xPage(i))
		if i="" quit
		if i'?5N {
			kill ^xPage(i)   // remove the old session legs
		} elseif i<enddate {
			kill ^xPage(i)
		}
	}
 
	quit
]]></Implementation>
</Method>

<Method name="SESSID">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	//FIND CUR VALUES: s ns="" f  {s ns=$O(^%ZCSPAPPS(ns)) q:ns=""  zn ns w !,ns,":","sessID:",##class(setup.objSetting).getParameter("zclean","sessID: months to keep")}
	// get number of months to keep
	//set length=##class(setup.objSetting).getParameter("zclean","sessID: months to keep")
	set length=6  // hardcode now, no need to have this different across clients - JAW MAY2013
	
	set enddate=..MONTHSAGO(+$ZTS,length)
 
	// convert to timestamp
	set enddate=##class(shared.dateFunctions).multiDate(enddate,25)_" 00:00:00" //"2001-10-01 12:00:00"
 
	// dynamic queries are ok in a %routine as long as the objects exist in the namespace when it gets there
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	set sqltext="UPDATE eCom.tempPurchase SET sessionID='old_'||sessionID WHERE (xCRstamp<?) AND ((sessionID<>'')&(sessionID<>NULL)&(sessionID<>'completed')&(sessionID NOT LIKE 'old_%')) "
	//w !,sqltext
	set ok=rs.Prepare(sqltext)
	if ok set ok=rs.Execute(enddate)
	do rs.%Close()
	do rs.Close()
	kill rs

	quit
]]></Implementation>
</Method>

<Method name="TIMEOK">
<ClassMethod>1</ClassMethod>
<FormalSpec>xxT1</FormalSpec>
<Implementation><![CDATA[
	; check how long we've been running and stop if too long
	set xxT2=$P($ZTS,",",2)
	// do 30 minutes to avoid creating so many journal files that fill up the server (and mirror server)
	if (xxT2-$G(xxT1))>(30*60) quit 0
	// allow for clean stop if problems
	if $G(^%ZSTOPZCLEAN)=1 quit 0
	quit 1
]]></Implementation>
</Method>

<Method name="MONTHSAGO">
<ClassMethod>1</ClassMethod>
<FormalSpec>inH,length</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	; returns the date at the start of the month length months ago
	; if pass in 23rd May 2006 and 2 then result = 1st March 2006 (in $ZTS format)
	; if pass in 1st May 2006 and 2 then result = 1st March 2006 (in $ZTS format)
	; if pass in 1st June 2006 and 2 then result = 1st April 2006 (in $ZTS format)
	set lenM=length#12
	set lenY=length\12
	set month=$P($ZD(inH,4),"/",2)-lenM
	set year=$P($ZD(inH,4),"/",3)-lenY
	// if our reduction has taken us into a previous year then deal with it
	if month<1 set month=month+12,year=year-1
	// convert back to $ZTS format
	set enddate=$ZDH("01/"_month_"/"_year,4)
	quit enddate
]]></Implementation>
</Method>

<Method name="tempPurchase">
<ClassMethod>1</ClassMethod>
<FormalSpec>xxT1</FormalSpec>
<Implementation><![CDATA[
	set length=12
	
	set enddate=..MONTHSAGO(+$ZTS,length)
 
	// convert to timestamp
	set enddate=##class(shared.dateFunctions).multiDate(enddate,25)_" 00:00:00" //"2001-10-01 12:00:00"
	
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	set sqltext="SELECT ID FROM eCom.tempPurchase WHERE (xCRstamp<?)"
	set ok=rs.Prepare(sqltext)
	if ok set ok=rs.Execute(enddate)
	while (rs.Next()&..TIMEOK(xxT1))	{
		set tempPurchaseID=rs.Data("ID")
		//if $E(xxT1,$L(xxT1))=$E(tempPurchaseID,$L(tempPurchaseID)) 
		do ..tempPurchaseDelete(tempPurchaseID)
	}
	do rs.%Close()
	do rs.Close()
	kill rs
]]></Implementation>
</Method>

<Method name="tempPurchaseDelete">
<ClassMethod>1</ClassMethod>
<FormalSpec>tempPurchaseID</FormalSpec>
<Implementation><![CDATA[
	do ##class(eCom.tempPurchase).deleteOne(tempPurchaseID)
	quit
]]></Implementation>
</Method>

<Method name="storageLogs">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set length=6
	set enddate=..MONTHSAGO(+$ZTS,length)

	set ns=$ZNSPACE
	
	set zts=""
	for  {
		set zts=$O(^storageLogDeleteLocalFiles(ns,zts))
		if zts="" quit
		set dateH=+zts
		if dateH<enddate kill ^storageLogDeleteLocalFiles(ns,zts)
	}
	set zts=""
	for  {
		set zts=$O(^storageLogmarkFileAsDeletedIfOlderThanNDays(ns,zts))
		if zts="" quit
		set dateH=+zts
		if dateH<enddate kill ^storageLogmarkFileAsDeletedIfOlderThanNDays(ns,zts)
	}
	set zts=""
	for  {
		set zts=$O(^storageLogMarkCrashedItemsAsCompletedIfNoNeedToReprocess(ns,zts))
		if zts="" quit
		set dateH=+zts
		if dateH<enddate kill ^storageLogMarkCrashedItemsAsCompletedIfNoNeedToReprocess(ns,zts)
	}
	set zts=""
	for  {
		set zts=$O(^storageLogQueueExistingFiles(ns,zts))
		if zts="" quit
		set dateH=+zts
		if dateH<enddate kill ^storageLogQueueExistingFiles(ns,zts)
	}

	quit
]]></Implementation>
</Method>

<Method name="tempImports">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	
	set length=-6
	&SQL(DELETE FROM EF_lib_CSV.tempImport WHERE xCRstamp<DATEADD('mm',:length,CURRENT_DATE))
	
	quit
]]></Implementation>
</Method>

<Method name="runtimeColumnRowData">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set length=1
	
	set enddate=..MONTHSAGO(+$ZTS,length)
 
	// convert to timestamp
	set enddate=##class(shared.dateFunctions).multiDate(enddate,25)_" 00:00:00" //"2001-10-01 12:00:00"
	
	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	set sqltext="SELECT ID,sessionID FROM awards.objRow"
	set ok=rs.Prepare(sqltext)
	if ok set ok=rs.Execute()
	while rs.Next() {
		set sessionID=rs.Data("sessionID")
		set rowID=rs.Data("ID")
		if ..isSessionDead(sessionID)	{
			&SQL(DELETE FROM awards.objColumn WHERE objRow = :rowID)
			&SQL(DELETE FROM awards.objRow WHERE ID = :rowID)
		}
	}
	do rs.%Close()
	do rs.Close()
	kill rs

	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	set sqltext="SELECT ID,sessionID FROM abstract.objRow"
	set ok=rs.Prepare(sqltext)
	if ok set ok=rs.Execute()
	while rs.Next() {
		set sessionID=rs.Data("sessionID")
		set rowID=rs.Data("ID")
		if ..isSessionDead(sessionID)	{
			&SQL(DELETE FROM abstract.objColumn WHERE objRow = :rowID)
			&SQL(DELETE FROM abstract.objRow WHERE ID = :rowID)
		}
	}
	do rs.%Close()
	do rs.Close()
	kill rs

	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	set sqltext="SELECT ID FROM sfEF.objTable WHERE (xCRstamp<?)"
	set ok=rs.Prepare(sqltext)
	if ok set ok=rs.Execute(enddate)
	while rs.Next() {
		set tableID=rs.Data("ID")
		do ##class(sfEF.objTable).deleteTable(tableID)
	}
	do rs.%Close()
	do rs.Close()
	kill rs

	set rs=##class(%ResultSet).%New("%Library.DynamicQuery:SQL")
	set sqltext="SELECT ID FROM reports.objReportRun WHERE (xCRstamp<?)"
	set ok=rs.Prepare(sqltext)
	if ok set ok=rs.Execute(enddate)
	while rs.Next() {
		set reportRunID=rs.Data("ID")
		&SQL(DELETE FROM reports.objColumn WHERE (objRow->objReportRun = :reportRunID) )
		&SQL(DELETE FROM reports.objRow WHERE (objReportRun = :reportRunID) )
		&SQL(DELETE FROM reports.objRuntimeValue WHERE (objReportRun=:reportRunID) )
		&SQL(DELETE FROM reports.objReportRun WHERE (ID=:reportRunID) )
	}
	do rs.%Close()
	do rs.Close()
	kill rs

	quit
]]></Implementation>
</Method>

<Method name="ActivateForAll">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	; turn on activate for all
	set ns=""
	for  {
		set ns=$O(^%ZCSPAPPS(ns)) 
		if ns="" quit
		zn ns 
		set isCleaned=+##class(setup.objSetting).getParameter("zclean","if set to 1 then it will be cleaned") 
		if 'isCleaned {
			do ##class(setup.objSetting).setParameter("zclean","if set to 1 then it will be cleaned",1)
			w !,ns,":activated cleaning"
		}
	}
	quit
]]></Implementation>
</Method>

<Method name="ResetEmailLengthForAllInactive">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	; 
	set ns="",newEmailLen=6
	for  {
		set ns=$O(^%ZCSPAPPS(ns)) 
		if ns="" quit
		zn ns 
		set isCleaned=+##class(setup.objSetting).getParameter("zclean","if set to 1 then it will be cleaned") 
		if 'isCleaned {
			set emailLen=##class(setup.objSetting).getParameter("zclean","emails: months to keep")
			if emailLen'=newEmailLen {
				do ##class(setup.objSetting).setParameter("zclean","emails: months to keep",newEmailLen)
			}
			w !,ns,":",isCleaned," EM:",emailLen," -changed to:",newEmailLen
		}
	}
	quit
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.base">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.validator.base.CLS/EV.7
;vc; Component: CLS.EF.validator.base
;vc;  Location: SmallDev
;vc; Date/Time: 25-Apr-16 14:48
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.base.CLS/EV.7</td><td>CLS.EF.validator.base</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Apr-16 14:48</td><td>JeremyW</td></tr></table>
]]></Description>
<IncludeCode>EF.common.macros</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeChanged>63995,34996</TimeChanged>
<TimeCreated>63343,42543.151797</TimeCreated>

<Property name="regex">
<Type>%String</Type>
</Property>

<Property name="isMandatory">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="fieldName">
<Description>
Used by the error message</Description>
<Type>%String</Type>
</Property>

<Property name="errorMessage">
<Type>%String</Type>
</Property>

<Method name="isInputValid">
<Description>
return true if the input passes validation</Description>
<FormalSpec>input</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set isValid=1
	if $l(input) {
		if $l(..getRegex()) {
			set isValid=$MATCH(input,..getRegex())
		}
	}
	
	if ..isMandatory {
		if '$l(input) {
			set isValid=0
			set ..errorMessage=..fieldName_" is required"	
		}
	}
	quit isValid
]]></Implementation>
</Method>

<Method name="getErrorMessage">
<Final>1</Final>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if $l(..errorMessage) {
		return ..errorMessage	
	} else {
		return ..getErrorMessageSelf()
	}
]]></Implementation>
</Method>

<Method name="getErrorMessageSelf">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ..fieldName_" is incorrect"
]]></Implementation>
</Method>

<Method name="getRegex">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..regex
]]></Implementation>
</Method>

<Method name="getValidatorObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>validatorName</FormalSpec>
<ReturnType>EF.validator.base</ReturnType>
<Implementation><![CDATA[
	set validatorClassName="EF.validator."_validatorName
	if '##class(EF.utils.classes).classExists(validatorClassName) {
		throw ##class(shared.exceptions.generalException).%New("Validator "_validatorName_" does not exist")
	}
	set validator=$CLASSMETHOD(validatorClassName,"%New")
	quit validator
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.baseTestCase">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.validator.baseTestCase.CLS/EV.1
;vc; Component: CLS.EF.validator.baseTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:35
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.baseTestCase.CLS/EV.1</td><td>CLS.EF.validator.baseTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:35</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63392,55240</TimeChanged>
<TimeCreated>63375,58232.371421</TimeCreated>

<Method name="TestisInputValid">
<Description>
return true if the input passes validation</Description>
<Implementation><![CDATA[
	do $$$AssertTrue(##class(base).%New().isInputValid(" "))
	set validator=##class(base).%New()
	set validator.regex="a.[0-9]"
	do $$$AssertTrue(validator.isInputValid("as9"))
	do $$$AssertNotTrue(validator.isInputValid("kee9"))
	set validator=##class(base).%New()
	do $$$AssertTrue(validator.isInputValid(""))
	set validator.isMandatory=1
	do $$$AssertNotTrue(validator.isInputValid(""))
]]></Implementation>
</Method>

<Method name="TestgetErrorMessage">
<Implementation><![CDATA[	do $$$AssertNotEquals(##class(base).%New().getErrorMessage(),"")
]]></Implementation>
</Method>

<Method name="TestgetRegex">
<Implementation><![CDATA[
	do $$$AssertEquals(##class(base).%New().getRegex(),"")
	set validator=##class(base).%New()
	set validator.regex="a.[0-9]"
	do $$$AssertEquals(validator.getRegex(),"a.[0-9]")
]]></Implementation>
</Method>

<Method name="TestgetValidatorObject">
<Implementation><![CDATA[
	try {
		set validator=##class(base).getValidatorObject("base")
	} catch {
		set validator=""	
	}
	do $$$AssertTrue(($IsObject(validator))&&(validator.%IsA("EF.validator.base")))
	try {
		set validator=##class(base).getValidatorObject("notarealclassname")
	} catch {
		set validator=""	
	}
	do $$$AssertNotTrue($IsObject(validator))
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.checkbox">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.validator.checkbox.CLS/EV.1
;vc; Component: CLS.EF.validator.checkbox
;vc;  Location: SmallDev
;vc; Date/Time: 25-Feb-16 15:13
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.checkbox.CLS/EV.1</td><td>CLS.EF.validator.checkbox</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Feb-16 15:13</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.validator.base</Super>
<TimeChanged>63973,55017.786004</TimeChanged>
<TimeCreated>63363,46804.852746</TimeCreated>

<Method name="isInputValid">
<Description>
return true if the input passes validation</Description>
<FormalSpec>input</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set isValid=##super(input)
	if (input'=1)&&(input'="") {
		set isValid=0
	}
	quit isValid
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.checkboxTextCase">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.validator.checkboxTextCase.CLS/EV.0
;vc; Component: CLS.EF.validator.checkboxTextCase
;vc;  Location: SmallDev
;vc; Date/Time: 15-Jul-14 15:26
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.checkboxTextCase.CLS/EV.0</td><td>CLS.EF.validator.checkboxTextCase</td><td>SmallDev</td><td style='white-space: nowrap;'>15-Jul-14 15:26</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63375,58296</TimeChanged>
<TimeCreated>63375,58296.010988</TimeCreated>

<Method name="TestisInputValid">
<Implementation><![CDATA[
	set validator=##class(checkbox).%New()
	do $$$AssertTrue(validator.isInputValid(""))
	do $$$AssertTrue(validator.isInputValid(1))
	do $$$AssertNotTrue(validator.isInputValid(0))
	do $$$AssertNotTrue(validator.isInputValid("a"))
]]></Implementation>
</Method>

<Method name="TestgetErrorMessage">
<Implementation><![CDATA[	do $$$AssertNotEquals(##class(checkbox).%New().getErrorMessage(),"")
]]></Implementation>
</Method>

<Method name="TestgetValidatorObject">
<Implementation><![CDATA[
	try {
		set validator=##class(base).getValidatorObject("checkbox")
	} catch {
		set validator=""	
	}
	do $$$AssertTrue(($IsObject(validator))&&(validator.%IsA("EF.validator.checkbox")))
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.dateInput">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.validator.dateInput.CLS/EV.1
;vc; Component: CLS.EF.validator.dateInput
;vc;  Location: SmallDev
;vc; Date/Time: 25-Feb-16 15:17
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.dateInput.CLS/EV.1</td><td>CLS.EF.validator.dateInput</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Feb-16 15:17</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.validator.base</Super>
<TimeChanged>63973,55038.743997</TimeChanged>
<TimeCreated>63384,46347.375671</TimeCreated>

<Property name="dateFormat">
<Description>
Valid date formats
3 - 'dd/MM/yyyy';",
19 - 'MM/dd/yyyy'
25 - 'yyyy-MM-dd'</Description>
<Type>%Integer</Type>
<InitialExpression>3</InitialExpression>
</Property>

<Method name="isInputValid">
<FormalSpec>input</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set isValid=##super(input)
	if $l(input) {
		if ..dateFormat=3 {
			if '(input?1N.1N1"/"1N.1N1"/"4N) {
				set isValid=0
			}
		} elseif ..dateFormat=19 {
			if '(input?1N.1N1"/"1N.1N1"/"4N) {
				set isValid=0
			}
		} elseif ..dateFormat=25 {
			if '(input?4N1"-"1N.1N1"-"1N.1N) {
				set isValid=0
			}
		} else {
			throw ##class(shared.exceptions.generalException).%New("Cannot validate input because no valid date format has been set") 	
		}
		
		if '##class(shared.dateFunctions).multiDate(input,,,..dateFormat) {
			set isValid=0	
		}
	}
	quit isValid
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.dateInputTestCase">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.validator.dateInputTestCase.CLS/EV.0
;vc; Component: CLS.EF.validator.dateInputTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 08-Aug-14 17:35
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.dateInputTestCase.CLS/EV.0</td><td>CLS.EF.validator.dateInputTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>08-Aug-14 17:35</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63392,55027</TimeChanged>
<TimeCreated>63392,53582.465651</TimeCreated>

<Method name="TestisInputValid">
<Implementation><![CDATA[
	set validator3=##class(EF.validator.dateInput).%New()
	set validator3.dateFormat=3
	do $$$AssertTrue(validator3.isInputValid(""))
	do $$$AssertTrue(validator3.isInputValid("1/1/2000"))
	do $$$AssertTrue(validator3.isInputValid("30/12/2001"))
	do $$$AssertTrue(validator3.isInputValid("29/2/2000"))
	do $$$AssertNotTrue(validator3.isInputValid("29/2/2001"))
	do $$$AssertNotTrue(validator3.isInputValid("2/13/2001"))
	do $$$AssertNotTrue(validator3.isInputValid("abcde"))
	do $$$AssertNotTrue(validator3.isInputValid(12345))
	do $$$AssertNotTrue(validator3.isInputValid("16/10/70"))
	do $$$AssertNotTrue(validator3.isInputValid("12-12-2000"))
	do $$$AssertNotTrue(validator3.isInputValid("12.12.2000"))
	set validator3.isMandatory=1
	do $$$AssertNotTrue(validator3.isInputValid(""))
	
	set validator19=##class(EF.validator.dateInput).%New()
	set validator19.dateFormat=19
	do $$$AssertTrue(validator19.isInputValid(""))
	do $$$AssertTrue(validator19.isInputValid("1/1/2000"))
	do $$$AssertTrue(validator19.isInputValid("12/30/2001"))
	do $$$AssertTrue(validator19.isInputValid("02/29/2000"))
	do $$$AssertNotTrue(validator19.isInputValid("2/29/2001"))
	do $$$AssertNotTrue(validator19.isInputValid("13/2/2001"))
	do $$$AssertNotTrue(validator19.isInputValid("abcde"))
	do $$$AssertNotTrue(validator19.isInputValid(12345))
	do $$$AssertNotTrue(validator19.isInputValid("10/16/70"))
	do $$$AssertNotTrue(validator19.isInputValid("12-12-2000"))
	do $$$AssertNotTrue(validator19.isInputValid("12.12.2000"))
	set validator19.isMandatory=1
	do $$$AssertNotTrue(validator19.isInputValid(""))
	
	set validator25=##class(EF.validator.dateInput).%New()
	set validator25.dateFormat=25
	do $$$AssertTrue(validator25.isInputValid(""))
	do $$$AssertTrue(validator25.isInputValid("2000-1-1"))
	do $$$AssertTrue(validator25.isInputValid("2001-12-30"))
	do $$$AssertTrue(validator25.isInputValid("2000-2-29"))
	do $$$AssertNotTrue(validator25.isInputValid("29/2/2001"))
	do $$$AssertNotTrue(validator25.isInputValid("2/13/2001"))
	do $$$AssertNotTrue(validator25.isInputValid("abcde"))
	do $$$AssertNotTrue(validator25.isInputValid(12345))
	do $$$AssertNotTrue(validator25.isInputValid("16/10/70"))
	do $$$AssertNotTrue(validator25.isInputValid("12-12-2000"))
	do $$$AssertNotTrue(validator25.isInputValid("12.12.2000"))
	set validator25.isMandatory=1
	do $$$AssertNotTrue(validator25.isInputValid(""))
]]></Implementation>
</Method>

<Method name="TestgetErrorMessage">
<Implementation><![CDATA[	do $$$AssertNotEquals(##class(inList).%New().getErrorMessage(),"")
]]></Implementation>
</Method>

<Method name="TestgetValidatorObject">
<Implementation><![CDATA[
	try {
		set validator=##class(base).getValidatorObject("dateInput")
	} catch {
		set validator=""	
	}
	do $$$AssertTrue(($IsObject(validator))&&(validator.%IsA("EF.validator.dateInput")))
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.dateTimeInput">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.validator.dateTimeInput.CLS/EV.4
;vc; Component: CLS.EF.validator.dateTimeInput
;vc;  Location: SmallDev
;vc; Date/Time: 25-Jul-16 10:50
;vc;      User: RajibQ
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.dateTimeInput.CLS/EV.4</td><td>CLS.EF.validator.dateTimeInput</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Jul-16 10:50</td><td>RajibQ</td></tr></table>
]]></Description>
<Super>EF.validator.base</Super>
<TimeChanged>64124,39111.675142</TimeChanged>
<TimeCreated>63384,46347.375671</TimeCreated>

<Property name="dateFormat">
<Description>
Valid date formats
3 - 'dd/MM/yyyy'
19 - 'MM/dd/yyyy'
25 - 'YYYY-MM-DD'</Description>
<Type>%Integer</Type>
</Property>

<Property name="timeFormat">
<Description>
Valid date formats
12 - 'hh:mm tt'
24 - 'hh:mm</Description>
<Type>%Integer</Type>
</Property>

<Method name="isInputValid">
<FormalSpec>input</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set isValid=##super(input)
	
	if $l(input) {
		set datePart=$P(input," ",1)
		set dateValidator=##class(EF.validator.dateInput).%New()
		set dateValidator.dateFormat=..dateFormat
		set dateValidator.isMandatory=1
		if 'dateValidator.isInputValid(datePart) {
			return 0	
		}
		set timePart=$Piece($Piece(input," ",2,*),".",1)
		set timeValidator=##class(EF.validator.timeInput).%New()
		set timeValidator.isMandatory=1
		set timeValidator.timeFormat=..timeFormat
		if 'timeValidator.isInputValid(timePart) {
			return 0	
		}
	}
	return isValid
]]></Implementation>
</Method>

<Method name="setInputFormatValuesForBackendUser">
<Implementation><![CDATA[
	Set ..dateFormat=##class(shared.dateFunctions).getBackendInputDateFormat()
	Set ..timeFormat=##class(shared.timeFunctions).getBackendInputTimeFormat()
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.dateTimeInputTestCase">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.validator.dateTimeInputTestCase.CLS/EV.0
;vc; Component: CLS.EF.validator.dateTimeInputTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.dateTimeInputTestCase.CLS/EV.0</td><td>CLS.EF.validator.dateTimeInputTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63930,47354</TimeChanged>
<TimeCreated>63930,44793.087633</TimeCreated>

<Method name="TestisInputValid">
<Implementation><![CDATA[
	set validator=##class(EF.validator.dateTimeInput).%New()
	set validator.dateFormat=3
	set validator.timeFormat=12
	do $$$AssertTrue(validator.isInputValid(""))
	set validator.isMandatory=1
	do $$$AssertNotTrue(validator.isInputValid(""))
	
	do $$$AssertTrue(validator.isInputValid("16/10/1970 3:32 AM"))
	do $$$AssertTrue(validator.isInputValid("12/1/2001 12:00 pm"))
	do $$$AssertTrue(validator.isInputValid("12/10/2001 12:59 PM"))
	do $$$AssertNotTrue(validator.isInputValid("10/16/1970 3:32am"))
	do $$$AssertNotTrue(validator.isInputValid("12/10/2001 23:59 PM"))
	do $$$AssertNotTrue(validator.isInputValid("16/10/70 3:32am"))
	do $$$AssertNotTrue(validator.isInputValid("16/10/1970 03:32"))
	do $$$AssertNotTrue(validator.isInputValid("16/10/1970 3:32"))
	do $$$AssertNotTrue(validator.isInputValid("abcde"))
	do $$$AssertNotTrue(validator.isInputValid(12345))
	do $$$AssertNotTrue(validator.isInputValid("16/10/1970"))
	do $$$AssertNotTrue(validator.isInputValid("3:32am"))
	do $$$AssertNotTrue(validator.isInputValid($ZTS))
	
	
	set validator.dateFormat=3
	set validator.timeFormat=24
	do $$$AssertTrue(validator.isInputValid("16/10/1970 00:00"))
	do $$$AssertTrue(validator.isInputValid("12/1/2001 03:32"))
	do $$$AssertTrue(validator.isInputValid("16/10/1970 23:59"))
	do $$$AssertNotTrue(validator.isInputValid("10/16/1970 03:32"))
	do $$$AssertNotTrue(validator.isInputValid("12/10/2001 24:01"))
	do $$$AssertNotTrue(validator.isInputValid("16/10/70 03:32"))
	do $$$AssertNotTrue(validator.isInputValid("16/10/70 3:32"))
	do $$$AssertNotTrue(validator.isInputValid("16/10/70 3:32pm"))
	do $$$AssertNotTrue(validator.isInputValid("abcde"))
	do $$$AssertNotTrue(validator.isInputValid(12345))
	do $$$AssertNotTrue(validator.isInputValid("16/10/1970"))
	do $$$AssertNotTrue(validator.isInputValid("03:32"))
	do $$$AssertNotTrue(validator.isInputValid($ZTS))
	
	set validator.dateFormat=19
	set validator.timeFormat=12
	
	do $$$AssertTrue(validator.isInputValid("10/16/1970 3:32 AM"))
	do $$$AssertTrue(validator.isInputValid("12/1/2001 12:00 pm"))
	do $$$AssertTrue(validator.isInputValid("12/10/2001 12:59 PM"))
	do $$$AssertNotTrue(validator.isInputValid("16/10/1970 3:32am"))
	do $$$AssertNotTrue(validator.isInputValid("12/10/2001 23:59 PM"))
	do $$$AssertNotTrue(validator.isInputValid("10/16/70 3:32am"))
	do $$$AssertNotTrue(validator.isInputValid("10/16/1970 03:32"))
	do $$$AssertNotTrue(validator.isInputValid("10/16/1970 3:32"))
	do $$$AssertNotTrue(validator.isInputValid("abcde"))
	do $$$AssertNotTrue(validator.isInputValid(12345))
	do $$$AssertNotTrue(validator.isInputValid("10/16/1970"))
	do $$$AssertNotTrue(validator.isInputValid("3:32am"))
	do $$$AssertNotTrue(validator.isInputValid($ZTS))
	
	set validator.dateFormat=19
	set validator.timeFormat=24
	
	do $$$AssertTrue(validator.isInputValid("10/16/1970 00:00"))
	do $$$AssertTrue(validator.isInputValid("12/1/2001 03:32"))
	do $$$AssertTrue(validator.isInputValid("10/16/1970 23:59"))
	do $$$AssertNotTrue(validator.isInputValid("16/10/1970 03:32"))
	do $$$AssertNotTrue(validator.isInputValid("12/10/2001 24:01"))
	do $$$AssertNotTrue(validator.isInputValid("10/16/70 03:32"))
	do $$$AssertNotTrue(validator.isInputValid("10/16/70 3:32"))
	do $$$AssertNotTrue(validator.isInputValid("10/16/70 3:32pm"))
	do $$$AssertNotTrue(validator.isInputValid("abcde"))
	do $$$AssertNotTrue(validator.isInputValid(12345))
	do $$$AssertNotTrue(validator.isInputValid("10/16/1970"))
	do $$$AssertNotTrue(validator.isInputValid("03:32"))
	do $$$AssertNotTrue(validator.isInputValid($ZTS))
]]></Implementation>
</Method>

<Method name="TestgetValidatorObject">
<Implementation><![CDATA[
	try {
		set validator=##class(base).getValidatorObject("dateTimeInput")
	} catch {
		set validator=""	
	}
	do $$$AssertTrue(($IsObject(validator))&&(validator.%IsA("EF.validator.dateTimeInput")))
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.dateTimeRangeInput">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.validator.dateTimeRangeInput.CLS/EV.1
;vc; Component: CLS.EF.validator.dateTimeRangeInput
;vc;  Location: SmallDev
;vc; Date/Time: 24-Feb-16 17:06
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.dateTimeRangeInput.CLS/EV.1</td><td>CLS.EF.validator.dateTimeRangeInput</td><td>SmallDev</td><td style='white-space: nowrap;'>24-Feb-16 17:06</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.validator.base</Super>
<TimeChanged>63978,62854.647215</TimeChanged>
<TimeCreated>63384,46347.375671</TimeCreated>

<Property name="dateFormat">
<Description>
Valid date formats
3 - 'dd/MM/yyyy';",
19 - 'MM/dd/yyyy'
25 - YYYY-MM-DD</Description>
<Type>%Integer</Type>
</Property>

<Property name="timeFormat">
<Description>
Valid date formats
12 - 'hh:mm tt';",
24 - 'hh:mm</Description>
<Type>%Integer</Type>
</Property>

<Property name="isEndDateTimeMandatory">
<Type>%Boolean</Type>
<InitialExpression>"0"</InitialExpression>
</Property>

<Property name="fromFieldName">
<Type>%String</Type>
<InitialExpression>"""From"""</InitialExpression>
</Property>

<Property name="toFieldName">
<Type>%String</Type>
<InitialExpression>"""To"""</InitialExpression>
</Property>

<Method name="isInputValid">
<FormalSpec>startDateTime:%String,endDateTime:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	#dim isValid as %Boolean
	#dim startHorolog as %String
	#dim endHorolog as %String
	#dim dateTime as %String
	
	set isValid=##super(startDateTime)
	if (..isEndDateTimeMandatory) && (endDateTime = "") {
		set ..errorMessage = ..fieldName_" "_..toFieldName_" is required"
		return 0
	}
	if '..isDateTimeValid(startDateTime,..fromFieldName) {
		return 0	
	}
	if '..isDateTimeValid(endDateTime,..toFieldName) {
		return 0	
	}
		
	if (startDateTime'="")&&(endDateTime'="") {
		set startTimeStamp = ##class(shared.timeFunctions).convertInputDateTimeToTimeStamp(startDateTime, ..dateFormat, ..timeFormat)
		set endTimeStamp = ##class(shared.timeFunctions).convertInputDateTimeToTimeStamp(endDateTime, ..dateFormat, ..timeFormat)

		if ##class(%SYSTEM.SQL).DATEDIFF("ms",startTimeStamp,endTimeStamp)<0 {
			set ..errorMessage = ..fieldName_" "_..fromFieldName_" is after "_..toFieldName
			return 0	
		}
	}
	return isValid
]]></Implementation>
</Method>

<Method name="isDateTimeValid">
<FormalSpec>dateTime,fieldName</FormalSpec>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if dateTime'="" {
		set dateTimeValidator = ##class(EF.validator.dateTimeInput).%New()
		set dateTimeValidator.dateFormat = ..dateFormat
		set dateTimeValidator.timeFormat = ..timeFormat
		set dateTimeValidator.isMandatory = 1
		if 'dateTimeValidator.isInputValid(dateTime) {
			set ..errorMessage = ..fieldName_" "_fieldName_" is incorrect"
			return 0
		}
	}
	return 1
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.dateTimeRangeInputTestCase">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.validator.dateTimeRangeInputTestCase.CLS/EV.0
;vc; Component: CLS.EF.validator.dateTimeRangeInputTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.dateTimeRangeInputTestCase.CLS/EV.0</td><td>CLS.EF.validator.dateTimeRangeInputTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63959,43012</TimeChanged>
<TimeCreated>63930,44793.087633</TimeCreated>

<Method name="TestisInputValid">
<Implementation><![CDATA[
	set validator=##class(EF.validator.dateTimeRangeInput).%New()

	set validator.dateFormat=3
	set validator.timeFormat=24
	set validator.isEndDateTimeMandatory=1
	set validator.isMandatory=1
	set startDateTime="24/12/2015 23:59"
	set endDateTime="31/12/2015 23:59"
	do $$$AssertTrue(validator.isInputValid(startDateTime,endDateTime))
	
	set validator.dateFormat=25				// *******
	set validator.timeFormat=24
	set validator.isEndDateTimeMandatory=1
	set validator.isMandatory=1
	set startDateTime="2015-12-24 23:59"
	set endDateTime="2015-12-31 23:59"
	do $$$AssertTrue(validator.isInputValid(startDateTime,endDateTime))	

	set validator.dateFormat=25				// *******
	set validator.timeFormat=24
	set validator.isEndDateTimeMandatory=1
	set validator.isMandatory=1
	set startDateTime="2015-12-24 23:59:00.000" // *******
	set endDateTime="2015-12-31 23:59:00.000"	// *******
	do $$$AssertTrue(validator.isInputValid(startDateTime,endDateTime))	
		
	set validator.dateFormat=19				// *******
	set validator.timeFormat=24
	set validator.isEndDateTimeMandatory=1
	set validator.isMandatory=1
	set startDateTime="12/24/2015 23:59"
	set endDateTime="12/31/2015 23:59"
	do $$$AssertTrue(validator.isInputValid(startDateTime,endDateTime))

	set validator.dateFormat=3
	set validator.timeFormat=24
	set validator.isEndDateTimeMandatory=1
	set validator.isMandatory=1				// *******
	set startDateTime=""    				// *******
	set endDateTime="31/12/2015 23:59"
	do $$$AssertNotTrue(validator.isInputValid(startDateTime,endDateTime))

	set validator.dateFormat=3
	set validator.timeFormat=24
	set validator.isEndDateTimeMandatory=1
	set validator.isMandatory=0				// *******
	set startDateTime=""    				// *******
	set endDateTime="31/12/2015 23:59"
	do $$$AssertTrue(validator.isInputValid(startDateTime,endDateTime))	
	
	set validator.dateFormat=3
	set validator.timeFormat=12 			// *******
	set validator.isEndDateTimeMandatory=1
	set validator.isMandatory=1
	set startDateTime="24/12/2015 23:59"
	set endDateTime="31/12/2015 23:59"
	do $$$AssertNotTrue(validator.isInputValid(startDateTime,endDateTime))

	set validator.dateFormat=3
	set validator.timeFormat=24
	set validator.isEndDateTimeMandatory=0	 // *******
	set validator.isMandatory=1
	set startDateTime="24/12/2015 23:59"
	set endDateTime=""   					// *******
	do $$$AssertTrue(validator.isInputValid(startDateTime,endDateTime))

	set validator.dateFormat=3
	set validator.timeFormat=24
	set validator.isEndDateTimeMandatory=1  // *******
	set validator.isMandatory=1
	set startDateTime="24/12/2015 23:59"
	set endDateTime=""   					// *******
	do $$$AssertNotTrue(validator.isInputValid(startDateTime,endDateTime))
	
	set validator.dateFormat=3
	set validator.timeFormat=24
	set validator.isEndDateTimeMandatory=1
	set validator.isMandatory=1
	set startDateTime="24/12/2015 23:59"  	// *******	
	set endDateTime="23/12/2015 23:59"  	// *******
	do $$$AssertNotTrue(validator.isInputValid(startDateTime,endDateTime))

	set validator.dateFormat=3
	set validator.timeFormat=24
	set validator.isEndDateTimeMandatory=1
	set validator.isMandatory=1
	set startDateTime="24/12/2015 23:59"  	// *******	
	set endDateTime  ="24/12/2015 23:59"  	// *******
	do $$$AssertTrue(validator.isInputValid(startDateTime,endDateTime))
	
	set validator.dateFormat=25
	set validator.timeFormat=24
	set startDateTime="2016-11-02 09:00"  	// *******	
	set endDateTime  ="2016-11-02 07:00"  	// *******
	do $$$AssertNotTrue(validator.isInputValid(startDateTime,endDateTime))
	
	set validator.dateFormat=25
	set validator.timeFormat=12
	set startDateTime="2016-11-02 3:00 PM"  	// *******	
	set endDateTime  ="2016-11-02 1:00 AM"  	// *******
	do $$$AssertNotTrue(validator.isInputValid(startDateTime,endDateTime))
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.emailAddress">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.validator.emailAddress.CLS/EV.0
;vc; Component: CLS.EF.validator.emailAddress
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.emailAddress.CLS/EV.0</td><td>CLS.EF.validator.emailAddress</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.validator.base</Super>
<TimeChanged>63883,60398</TimeChanged>
<TimeCreated>63883,60398.119435</TimeCreated>

<Property name="regex">
<Type>%String</Type>
<InitialExpression>##class(EF.utils.dataValidation).getValidationPatternForDataType("emailAddress")</InitialExpression>
</Property>
</Class>


<Class name="EF.validator.hexColour">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.validator.hexColour.CLS/EV.1
;vc; Component: CLS.EF.validator.hexColour
;vc;  Location: SmallDev
;vc; Date/Time: 25-Feb-16 15:20
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.hexColour.CLS/EV.1</td><td>CLS.EF.validator.hexColour</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Feb-16 15:20</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.validator.base</Super>
<TimeChanged>63973,55233.252434</TimeChanged>
<TimeCreated>63687,38681.792401</TimeCreated>

<Method name="getRegex">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.htmlText">
<Super>EF.validator.base</Super>
<TimeChanged>63715,44768.293906</TimeChanged>
<TimeCreated>63715,35154.087768</TimeCreated>

<Property name="maxLength">
<Type>%Integer</Type>
</Property>

<Method name="%OnNew">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%New</METHOD> method to 
provide notification that a new instance of an object is being created.

<P>If this method returns an error then the object will not be created.
<p>It is passed the arguments provided in the %New call.
When customizing this method, override the arguments with whatever variables and types you expect to receive from %New().
For example, if you're going to call %New, passing 2 arguments, %OnNew's signature could be:
<p>Method %OnNew(dob as %Date = "", name as %Name = "") as %Status
If instead of returning a %Status code this returns an oref and this oref is a subclass of the current
class then this oref will be the one returned to the caller of %New method.]]></Description>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set ..maxLength=$$$maxStringLength
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="isInputValid">
<FormalSpec>input:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set isValid=0
	if $IsObject(input) return 0
	if $l(input)>..maxLength {
		return 0	
	}
	try {
		/// encodeForHTMLContent may throw a maxstring or stringstack error too long
		set tmp=##class(EF.htmlGenerator).encodeForHTML(input)
		set isValid=##super(input)
	} catch {
		return 0
	}
	return isValid
]]></Implementation>
</Method>

<Method name="isInputValidStream">
<FormalSpec>inputStream:%Stream</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if inputStream.Size>..maxLength {
		return 0	
	}
	return ..isInputValid(inputStream.Read($$$maxStringLength))
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.htmlTextTestCase">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.validator.htmlTextTestCase.CLS/EV.1
;vc; Component: CLS.EF.validator.htmlTextTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 25-Apr-16 14:48
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.htmlTextTestCase.CLS/EV.1</td><td>CLS.EF.validator.htmlTextTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Apr-16 14:48</td><td>JeremyW</td></tr></table>
]]></Description>
<IncludeCode>EF.common.macros</IncludeCode>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63992,42302</TimeChanged>
<TimeCreated>63715,36194.5407</TimeCreated>

<Method name="TestisInputValid">
<Implementation><![CDATA[
	set validator=##class(htmlText).%New()
	do $$$AssertTrue(validator.isInputValid("a"))
	do $$$AssertTrue(validator.isInputValid(""))
	do $$$AssertNotTrue(validator.isInputValid(##class(%Stream.GlobalCharacter).%New()))
	set validator.isMandatory=1
	do $$$AssertNotTrue(validator.isInputValid(""))
	set longString=""
	set $Piece(longString,"a",$$$maxStringLength)=""
	do $$$AssertTrue(validator.isInputValid(longString))
	
	set tooLongString=""
	set $Piece(tooLongString,"a",$$$maxStringLength-10)=""
	set tooLongString=tooLongString_"<><>"
	do $$$AssertNotTrue(validator.isInputValid(tooLongString))
	
	set validator.maxLength=2
	do $$$AssertTrue(validator.isInputValid("ab"))
	do $$$AssertNotTrue(validator.isInputValid("abc"))
]]></Implementation>
</Method>

<Method name="TestisInputValidStream">
<Implementation><![CDATA[
	set validator=##class(htmlText).%New()
	set stream=##class(%Stream.GlobalCharacter).%New()
	do $$$AssertTrue(validator.isInputValidStream(stream))
	do stream.Write("a")
	do $$$AssertTrue(validator.isInputValidStream(stream))
	
	set validator.isMandatory=1
	do stream.Clear()
	do $$$AssertNotTrue(validator.isInputValidStream(stream))
	
	do stream.Clear()
	set longString=""
	set $Piece(longString,"a",$$$maxStringLength)=""
	do stream.Write(longString)
	do $$$AssertTrue(validator.isInputValidStream(stream))
	
	do stream.Clear()
	set tooLongString=""
	set $Piece(tooLongString,"a",($$$maxStringLength-10))=""
	set tooLongString=tooLongString_"<><>"
	do stream.Write(tooLongString)
	do $$$AssertNotTrue(validator.isInputValidStream(stream))
	
	set maxLengthValidator=##class(htmlText).%New()
	set maxLengthValidator.maxLength=2
	do stream.Clear()
	do stream.Write("ab")
	do $$$AssertTrue(maxLengthValidator.isInputValidStream(stream))
	do stream.Clear()
	do stream.Write("abc")
	do $$$AssertNotTrue(maxLengthValidator.isInputValidStream(stream))
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.inList">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.validator.inList.CLS/EV.1
;vc; Component: CLS.EF.validator.inList
;vc;  Location: SmallDev
;vc; Date/Time: 25-Feb-16 14:45
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.inList.CLS/EV.1</td><td>CLS.EF.validator.inList</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Feb-16 14:45</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.validator.base</Super>
<TimeChanged>63973,55253.353916</TimeChanged>
<TimeCreated>63363,46852.97641</TimeCreated>

<Property name="allowedValueList">
<Type>%String</Type>
<Collection>list</Collection>
</Property>

<Method name="isInputValid">
<FormalSpec>input</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set isValid=0
	set key=""
	for {
		set allowedInput=..allowedValueList.GetNext(.key)
		if key="" quit
		if input=allowedInput {
		 	set isValid=1
	    }
 	}
 	
	quit isValid
]]></Implementation>
</Method>

<Method name="getErrorMessageSelf">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return ..fieldName_" selection is incorrect"
]]></Implementation>
</Method>

<Method name="addAllowedValue">
<FormalSpec>value</FormalSpec>
<Implementation><![CDATA[	do ..allowedValueList.Insert(value)
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.inListTestCase">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.validator.inListTestCase.CLS/EV.0
;vc; Component: CLS.EF.validator.inListTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 15-Jul-14 15:26
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.inListTestCase.CLS/EV.0</td><td>CLS.EF.validator.inListTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>15-Jul-14 15:26</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63375,58348</TimeChanged>
<TimeCreated>63375,58348.957578</TimeCreated>

<Method name="TestisInputValid">
<Implementation><![CDATA[
	set validator=##class(inList).%New()
	do $$$AssertNotTrue(validator.isInputValid(""))
	do $$$AssertNotTrue(validator.isInputValid(0))
	do $$$AssertNotTrue(validator.isInputValid("a"))
	do validator.addAllowedValue("a")
	do $$$AssertTrue(validator.isInputValid("a"))
]]></Implementation>
</Method>

<Method name="TestgetErrorMessage">
<Implementation><![CDATA[	do $$$AssertNotEquals(##class(inList).%New().getErrorMessage(),"")
]]></Implementation>
</Method>

<Method name="TestgetValidatorObject">
<Implementation><![CDATA[
	try {
		set validator=##class(base).getValidatorObject("inList")
	} catch {
		set validator=""	
	}
	do $$$AssertTrue(($IsObject(validator))&&(validator.%IsA("EF.validator.inList")))
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.integer">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.validator.integer.CLS/EV.3
;vc; Component: CLS.EF.validator.integer
;vc;  Location: SmallDev
;vc; Date/Time: 24-Feb-16 17:35
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.integer.CLS/EV.3</td><td>CLS.EF.validator.integer</td><td>SmallDev</td><td style='white-space: nowrap;'>24-Feb-16 17:35</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.validator.numeric</Super>
<TimeChanged>63973,54197.941727</TimeChanged>
<TimeCreated>63364,34365.891052</TimeCreated>

<Property name="precision">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<ReadOnly>1</ReadOnly>
</Property>

<Method name="getRegex">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set regex="^([\+\-]){0,1}\d+$"
	if $l(..minValue) {
		if ..minValue>=0 {
			set regex="^\d+$"
		}
	}
	quit regex
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.integerTestCase">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.validator.integerTestCase.CLS/EV.1
;vc; Component: CLS.EF.validator.integerTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 31-Aug-14 08:39
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.integerTestCase.CLS/EV.1</td><td>CLS.EF.validator.integerTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>31-Aug-14 08:39</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63410,34226</TimeChanged>
<TimeCreated>63375,58376.236052</TimeCreated>

<Method name="TestisInputValid">
<Implementation><![CDATA[
	set validator=##class(integer).%New()
	do $$$AssertTrue(validator.isInputValid(0))
	do $$$AssertTrue(validator.isInputValid(10000))
	do $$$AssertTrue(validator.isInputValid(-10000))
	do $$$AssertNotTrue(validator.isInputValid("a"))
	do $$$AssertTrue(validator.isInputValid(""))
	set validator.isMandatory=1
	do $$$AssertNotTrue(validator.isInputValid(""))
	
	set validatorMax=##class(integer).%New()
	set validatorMax.maxValue=0
	do $$$AssertTrue(validatorMax.isInputValid(0))
	do $$$AssertTrue(validatorMax.isInputValid(-1))
	do $$$AssertNotTrue(validatorMax.isInputValid(1))
	
	set validatorMin=##class(integer).%New()
	set validatorMin.minValue=0
	do $$$AssertTrue(validatorMin.isInputValid(0))
	do $$$AssertNotTrue(validatorMin.isInputValid(-1))
	do $$$AssertTrue(validatorMin.isInputValid(1))

	set validatorMinMax=##class(integer).%New()
	set validatorMinMax.maxValue=0
	set validatorMinMax.minValue=0
	do $$$AssertTrue(validatorMinMax.isInputValid(0))
	do $$$AssertNotTrue(validatorMinMax.isInputValid(-1))
	do $$$AssertNotTrue(validatorMinMax.isInputValid(1))
]]></Implementation>
</Method>

<Method name="TestgetErrorMessage">
<Implementation><![CDATA[
	do $$$AssertNotEquals(##class(integer).%New().getErrorMessage(),"")
	set validatorMinMax=##class(integer).%New()
	set validatorMinMax.minValue=0
	set validatorMinMax.maxValue=0
	do $$$AssertNotEquals(validatorMinMax.getErrorMessage(),"")
	do $$$AssertNotEquals(validatorMinMax.getErrorMessage(),##class(integer).%New().getErrorMessage())
]]></Implementation>
</Method>

<Method name="TestGetRegEx">
<Implementation><![CDATA[
	set validator=##class(integer).%New()
	do $$$AssertEquals(validator.getRegex(),"^([\+\-]){0,1}\d+$")
	set validator.minValue=0
	do $$$AssertEquals(validator.getRegex(),"^\d+$")
]]></Implementation>
</Method>

<Method name="TestgetValidatorObject">
<Implementation><![CDATA[
	try {
		set validator=##class(base).getValidatorObject("integer")
	} catch {
		set validator=""	
	}
	do $$$AssertTrue(($IsObject(validator))&&(validator.%IsA("EF.validator.integer")))
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.multiLineText">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.validator.multiLineText.CLS/EV.3
;vc; Component: CLS.EF.validator.multiLineText
;vc;  Location: SmallDev
;vc; Date/Time: 25-Apr-16 14:48
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.multiLineText.CLS/EV.3</td><td>CLS.EF.validator.multiLineText</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Apr-16 14:48</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.validator.base</Super>
<TimeChanged>63995,34653</TimeChanged>
<TimeCreated>63410,37023.218638</TimeCreated>

<Property name="maxLength">
<Type>%Integer</Type>
<InitialExpression>32767</InitialExpression>
</Property>

<Method name="getRegex">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "^[^\x00-\x09\x0B\x0C\x0E-\x1F\x7F]*$"
]]></Implementation>
</Method>

<Method name="isInputValid">
<FormalSpec>input</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set isValid=##super(input)
	if $l(input)>..maxLength {
		 set isValid=0
		 set ..errorMessage=..fieldName_" cannot be more than "_..maxLength_" characters"
	}
	quit isValid
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.multiLineTextFrontEnd">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.validator.multiLineTextFrontEnd.CLS/EV.2
;vc; Component: CLS.EF.validator.multiLineTextFrontEnd
;vc;  Location: SmallDev
;vc; Date/Time: 17-Apr-15 16:42
;vc;      User: AdrianM
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.multiLineTextFrontEnd.CLS/EV.2</td><td>CLS.EF.validator.multiLineTextFrontEnd</td><td>SmallDev</td><td style='white-space: nowrap;'>17-Apr-15 16:42</td><td>AdrianM</td></tr></table>
]]></Description>
<Super>%RegisteredObject,EF.utils.dataValidation,EF.htmlGenerator</Super>
<TimeChanged>63620,44818</TimeChanged>
<TimeCreated>63425,28384.544394</TimeCreated>

<Property name="fieldText">
<Type>%String</Type>
<Private>1</Private>
<Parameter name="MAXLEN" value="2000000"/>
</Property>

<Property name="maxWords">
<Type>%Integer</Type>
<Private>1</Private>
<Required>1</Required>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="maxChars">
<Type>%Integer</Type>
<Private>1</Private>
<Required>1</Required>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="languageID">
<Type>shared.objLanguage</Type>
<Private>1</Private>
<Required>1</Required>
</Property>

<Property name="errorMessage">
<Type>%String</Type>
<Private>1</Private>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="questionLabel">
<Type>%String</Type>
<Private>1</Private>
<Required>1</Required>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Method name="validateAndGetErrorMessage">
<ClassMethod>1</ClassMethod>
<FormalSpec>question="",inputText="",maxWords=0,maxChars=0,langID=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set validation=..createNew(question, inputText, maxWords, maxChars, langID)
	
	if validation.isInputValid() {
		return ""
	} else {
		return validation.errorMessage
	}
]]></Implementation>
</Method>

<Method name="createNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>question="",inputText="",maxWords=0,maxChars=0,langID=""</FormalSpec>
<ReturnType>EF.validator.multiLineTextFrontEnd</ReturnType>
<Implementation><![CDATA[
	if (maxWords>0) && (maxChars>0) {
		throw ##class(shared.exceptions.generalException).%New("cannot have both both max words and max chars limit")
	}
	if 'langID throw ##class(shared.exceptions.generalException).%New("no language id passed in")

	set validationObject=..%New()
	set validationObject.questionLabel=question
	set validationObject.fieldText=inputText
	
	set validationObject.maxWords=maxWords
	set validationObject.maxChars=maxChars
	
	do validationObject.languageIDSetObjectId(langID)
	
	return validationObject
]]></Implementation>
</Method>

<Method name="isInputValid">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if ..hasCharacterLimit() {
		if ##class(EF.utils.text).countCharacters(..fieldText) > ..maxChars {
			do ..getErrorMessage()
			return 0
		}
	}
	
	if ..hasWordLimit() {
		if ##class(EF.utils.text).countWords(..fieldText) > ..maxWords {
			do ..getErrorMessage()
			return 0
		}
	}
	return 1
]]></Implementation>
</Method>

<Method name="getErrorMessage">
<Implementation><![CDATA[
	if ..hasCharacterLimit() {
		set phrase="The maximum number of characters for the question '{{{VAR01}}}' is {{{VAR02}}}. Your text has {{{VAR03}}} characters, please shorten it."
		set ..errorMessage=##class(translations.objPhraseWebsite).translatePhrase(phrase,..languageID,,..questionLabel,..maxChars,##class(EF.utils.text).countCharacters(..fieldText))	
	}
	if ..hasWordLimit() {
		set phrase="The maximum number of words for the question '{{{VAR01}}}' is {{{VAR02}}}. Your text has {{{VAR03}}} words, please shorten it."
		set ..errorMessage=##class(translations.objPhraseWebsite).translatePhrase(phrase,..languageID,,..questionLabel,..maxWords,##class(EF.utils.text).countWords(..fieldText))	
	}
]]></Implementation>
</Method>

<Method name="hasWordLimit">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if ..maxWords>0 {
		return 1
	} else {
		return 0	
	}
]]></Implementation>
</Method>

<Method name="hasCharacterLimit">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if ..maxChars>0 {
		return 1
	} else {
		return 0
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.multiLineTextFrontEndTestCase">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.validator.multiLineTextFrontEndTestCase.CLS/EV.1
;vc; Component: CLS.EF.validator.multiLineTextFrontEndTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 24-Sep-14 15:11
;vc;      User: ShahadatH
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.multiLineTextFrontEndTestCase.CLS/EV.1</td><td>CLS.EF.validator.multiLineTextFrontEndTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>24-Sep-14 15:11</td><td>ShahadatH</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63453,48941</TimeChanged>
<TimeCreated>63425,28481.439749</TimeCreated>

<Method name="TestWithInvalidLimits">
<Implementation><![CDATA[
	set maxWords=5
	set maxChars=5
	set testString="this is a short text"
	try {
		set returnedErrorMessage=##class(EF.validator.multiLineTextFrontEnd).validateAndGetErrorMessage("firstname",testString,maxWords,maxChars,1)
	} catch errorObject {
		if errorObject.Name="cannot have both both max words and max chars limit" {
			do $$$AssertEquals("true","true")		
		
		} else {
			do $$$AssertEquals("true","false")		
		}
	}
]]></Implementation>
</Method>

<Method name="TestWithNoLanguage">
<Implementation><![CDATA[
	set maxWords=5
	set maxChars=0
	set testString="this is a short text"
	try {
		set returnedErrorMessage=##class(EF.validator.multiLineTextFrontEnd).validateAndGetErrorMessage("firstname",testString,maxWords,maxChars,"")
	} catch errorObject {
		if errorObject.Name="no language id passed in" {
			do $$$AssertEquals("true","true")		
		
		} else {
			do $$$AssertEquals("true","false")		
		}
	}
]]></Implementation>
</Method>

<Method name="TestWithValidDataWord">
<Implementation><![CDATA[
	set maxWords=5
	set maxChars=0
	set testString="this is a short text"

	set returnedErrorMessage=##class(EF.validator.multiLineTextFrontEnd).validateAndGetErrorMessage("firstname",testString,maxWords,maxChars,1)
	set correctMessage=""
	
	do $$$AssertEquals(returnedErrorMessage,correctMessage)
]]></Implementation>
</Method>

<Method name="TestWithValidDataChars">
<Implementation><![CDATA[
	set maxWords=0
	set maxChars=50
	set testString="this is a short text"

	set returnedErrorMessage=##class(EF.validator.multiLineTextFrontEnd).validateAndGetErrorMessage("firstname",testString,maxWords,maxChars,1)
	set correctMessage=""
	
	do $$$AssertEquals(returnedErrorMessage,correctMessage)
]]></Implementation>
</Method>

<Method name="TestWithInvalidDataWord">
<Implementation><![CDATA[

	set maxWords=3
	set maxChars=0
	set field="firstname"
	set testString="this is a long text that should break"

	set returnedErrorMessage=##class(EF.validator.multiLineTextFrontEnd).validateAndGetErrorMessage("firstname",testString,maxWords,maxChars,1)
	set correctMessage="The maximum number of words for the question '"_field_"' is "_maxWords_". Your text has "_##class(EF.utils.text).countWords(testString)_" words, please shorten it."
	
	do $$$AssertEquals(returnedErrorMessage,correctMessage)
]]></Implementation>
</Method>

<Method name="TestWithInvalidDataChars">
<Implementation><![CDATA[

	set maxWords=0
	set maxChars=10
	set field="firstname"
	set testString="this is a long text that should break"

	set returnedErrorMessage=##class(EF.validator.multiLineTextFrontEnd).validateAndGetErrorMessage("firstname",testString,maxWords,maxChars,1)
	set correctMessage="The maximum number of characters for the question '"_field_"' is "_maxChars_". Your text has "_$L(testString)_" characters, please shorten it."
	
	do $$$AssertEquals(returnedErrorMessage,correctMessage)
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.multiLineTextTestCase">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.validator.multiLineTextTestCase.CLS/EV.0
;vc; Component: CLS.EF.validator.multiLineTextTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 26-Aug-14 08:17
;vc;      User: FredG
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.multiLineTextTestCase.CLS/EV.0</td><td>CLS.EF.validator.multiLineTextTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>26-Aug-14 08:17</td><td>FredG</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63412,37495</TimeChanged>
<TimeCreated>63412,36603.063916</TimeCreated>

<Method name="TestisInputValid">
<Implementation><![CDATA[
	set validator=##class(multiLineText).%New()
	do $$$AssertTrue(validator.isInputValid(""))
	do $$$AssertTrue(validator.isInputValid("abc"_$C(10,13)_"def"))
	do $$$AssertNotTrue(validator.isInputValid("abc"_$C(9)_"def"))
	do $$$AssertEquals(validator.maxLength,32767)
	set validatorMaxLen2=##class(multiLineText).%New()
	set validatorMaxLen2.maxLength=2
	do $$$AssertTrue(validatorMaxLen2.isInputValid("12"))
	do $$$AssertNotTrue(validatorMaxLen2.isInputValid("123"))
]]></Implementation>
</Method>

<Method name="TestgetErrorMessage">
<Implementation><![CDATA[	do $$$AssertNotEquals(##class(multiLineText).%New().getErrorMessage(),"")
]]></Implementation>
</Method>

<Method name="TestGetRegEx">
<Implementation><![CDATA[
	set validator=##class(multiLineText).%New()
	do $$$AssertEquals(validator.getRegex(),"^[^\x00-\x09\x0B\x0C\x0E-\x1F\x7F]*$")
]]></Implementation>
</Method>

<Method name="TestgetValidatorObject">
<Implementation><![CDATA[
	try {
		set validator=##class(EF.validator.base).getValidatorObject("multiLineText")
	} catch {
		set validator=""	
	}
	do $$$AssertTrue(($IsObject(validator))&&(validator.%IsA("EF.validator.multiLineText")))
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.numeric">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.validator.numeric.CLS/EV.1
;vc; Component: CLS.EF.validator.numeric
;vc;  Location: SmallDev
;vc; Date/Time: 25-Feb-16 14:58
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.numeric.CLS/EV.1</td><td>CLS.EF.validator.numeric</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Feb-16 14:58</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.validator.base</Super>
<TimeChanged>63973,55282.416475</TimeChanged>
<TimeCreated>63938,64800.502172</TimeCreated>

<Property name="minValue">
<Type>%Integer</Type>
</Property>

<Property name="maxValue">
<Type>%Integer</Type>
</Property>

<Property name="precision">
<Type>%Integer</Type>
<InitialExpression>2</InitialExpression>
<Parameter name="MINVAL" value="1"/>
</Property>

<Method name="getRegex">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if (..precision<1) {
		throw ##class(shared.exceptions.generalException).%New("Precision cannot be less than 1, use integer validator instead")	
	}
	set baseRegex="((0)|([1-9][0-9]*?))?(\.[0-9]{1,"_..precision_"})?"
	set regex="^[+-]?"_baseRegex_"$"
	if $l(..minValue) {
		if ..minValue>=0 {
			set regex="^"_baseRegex_"$"
		}
	}
	quit regex
]]></Implementation>
</Method>

<Method name="isInputValid">
<FormalSpec>input</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set isValid=##super(input)
	if $l(input) {
		if $l(..minValue) {
			if input<..minValue {
				set isValid=0
			}	
		}
		if $l(..maxValue) {
			if input>..maxValue {
				set isValid=0
			}	
		}
	}
	quit isValid
]]></Implementation>
</Method>

<Method name="getErrorMessageSelf">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if ($l(..maxValue)) {
		return ..fieldName_" must be between "_+(..minValue)_" and "_..maxValue
	} elseif $l(..minValue) {
		return ..fieldName_" must have a minimum value of "_..minValue
	}
	return ##super()
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.numericTestCase">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.validator.numericTestCase.CLS/EV.0
;vc; Component: CLS.EF.validator.numericTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.numericTestCase.CLS/EV.0</td><td>CLS.EF.validator.numericTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63939,40711</TimeChanged>
<TimeCreated>63375,58376.236052</TimeCreated>

<Method name="TestisInputValid">
<Implementation><![CDATA[
	set validator=##class(EF.validator.numeric).%New()
	do $$$AssertEquals(validator.precision,2)
	do $$$AssertTrue(validator.isInputValid(0))
	do $$$AssertTrue(validator.isInputValid(10000))
	do $$$AssertTrue(validator.isInputValid(-10000))
	do $$$AssertTrue(validator.isInputValid(10000.12))
	do $$$AssertTrue(validator.isInputValid(-10000.1))
	do $$$AssertNotTrue(validator.isInputValid("a"))
	do $$$AssertNotTrue(validator.isInputValid(10000.133))
	do $$$AssertNotTrue(validator.isInputValid(-10000.131))
	do $$$AssertTrue(validator.isInputValid(""))
	set validator.isMandatory=1
	do $$$AssertNotTrue(validator.isInputValid(""))
	
	set validatorMax=##class(EF.validator.numeric).%New()
	set validatorMax.maxValue=0
	do $$$AssertTrue(validatorMax.isInputValid(0))
	do $$$AssertTrue(validatorMax.isInputValid("-0.01"))
	do $$$AssertNotTrue(validatorMax.isInputValid("0.01"))
	do $$$AssertTrue(validatorMax.isInputValid(-.01))
	do $$$AssertNotTrue(validatorMax.isInputValid(.01))
	
	set validatorMin=##class(EF.validator.numeric).%New()
	set validatorMin.minValue=0
	do $$$AssertTrue(validatorMin.isInputValid(0))
	do $$$AssertNotTrue(validatorMin.isInputValid(-0.01))
	do $$$AssertTrue(validatorMin.isInputValid(0.01))

	set validatorMinMax=##class(EF.validator.numeric).%New()
	set validatorMinMax.maxValue=0
	set validatorMinMax.minValue=0
	do $$$AssertTrue(validatorMinMax.isInputValid(0))
	do $$$AssertNotTrue(validatorMinMax.isInputValid(-1))
	do $$$AssertNotTrue(validatorMinMax.isInputValid(1))
	
	set validatorPrecision=##class(EF.validator.numeric).%New()
	set validatorPrecision.precision=1
	do $$$AssertTrue(validatorPrecision.isInputValid(12))
	do $$$AssertTrue(validatorPrecision.isInputValid(12.1))
	do $$$AssertNotTrue(validatorPrecision.isInputValid(12.01))
	set validatorPrecision.precision=5
	do $$$AssertTrue(validatorPrecision.isInputValid(1.00001))
	do $$$AssertNotTrue(validatorPrecision.isInputValid(1.0000001))
]]></Implementation>
</Method>

<Method name="TestgetErrorMessage">
<Implementation><![CDATA[
	do $$$AssertNotEquals(##class(EF.validator.numeric).%New().getErrorMessage(),"")
	set validatorMinMax=##class(numeric).%New()
	set validatorMinMax.minValue=0
	set validatorMinMax.maxValue=0
	do $$$AssertNotEquals(validatorMinMax.getErrorMessage(),"")
	do $$$AssertNotEquals(validatorMinMax.getErrorMessage(),##class(integer).%New().getErrorMessage())
]]></Implementation>
</Method>

<Method name="TestgetValidatorObject">
<Implementation><![CDATA[
	try {
		set validator=##class(EF.validator.base).getValidatorObject("numeric")
	} catch {
		set validator=""	
	}
	do $$$AssertTrue(($IsObject(validator))&&(validator.%IsA("EF.validator.numeric")))
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.singleLineText">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.validator.singleLineText.CLS/EV.3
;vc; Component: CLS.EF.validator.singleLineText
;vc;  Location: SmallDev
;vc; Date/Time: 24-Feb-16 17:07
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.singleLineText.CLS/EV.3</td><td>CLS.EF.validator.singleLineText</td><td>SmallDev</td><td style='white-space: nowrap;'>24-Feb-16 17:07</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.validator.base</Super>
<TimeChanged>63973,60584.315337</TimeChanged>
<TimeCreated>63363,52369.998771</TimeCreated>

<Property name="maxLength">
<Type>%Integer</Type>
<InitialExpression>255</InitialExpression>
</Property>

<Method name="getRegex">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "^[^\x00-\x1F\x7F]*$"
]]></Implementation>
</Method>

<Method name="isInputValid">
<FormalSpec>input</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set isValid=##super(input)
	if $l(input)>..maxLength {
		 set isValid=0
		 set ..errorMessage=..fieldName_" cannot be more than "_..maxLength_" characters"
	}
	quit isValid
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.singleLineTextTestCase">
<Description><![CDATA[
<!-- ;vc;
;vc;    Object: EF.validator.singleLineTextTestCase.CLS/EV.0
;vc; Component: CLS.EF.validator.singleLineTextTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 15-Jul-14 15:26
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.singleLineTextTestCase.CLS/EV.0</td><td>CLS.EF.validator.singleLineTextTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>15-Jul-14 15:26</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63375,58414</TimeChanged>
<TimeCreated>63375,58414.187307</TimeCreated>

<Method name="TestisInputValid">
<Implementation><![CDATA[
	set validator=##class(singleLineText).%New()
	do $$$AssertTrue(validator.isInputValid(""))
	do $$$AssertNotTrue(validator.isInputValid($C(10)))
	do $$$AssertEquals(validator.maxLength,255)
	set validatorMaxLen2=##class(singleLineText).%New()
	set validatorMaxLen2.maxLength=2
	do $$$AssertTrue(validatorMaxLen2.isInputValid("12"))
	do $$$AssertNotTrue(validatorMaxLen2.isInputValid("123"))
]]></Implementation>
</Method>

<Method name="TestgetErrorMessage">
<Implementation><![CDATA[	do $$$AssertNotEquals(##class(singleLineText).%New().getErrorMessage(),"")
]]></Implementation>
</Method>

<Method name="TestGetRegEx">
<Implementation><![CDATA[
	set validator=##class(singleLineText).%New()
	do $$$AssertEquals(validator.getRegex(),"^[^\x00-\x1F\x7F]*$")
]]></Implementation>
</Method>

<Method name="TestgetValidatorObject">
<Implementation><![CDATA[
	try {
		set validator=##class(base).getValidatorObject("singleLineText")
	} catch {
		set validator=""	
	}
	do $$$AssertTrue(($IsObject(validator))&&(validator.%IsA("EF.validator.singleLineText")))
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.timeInput">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.validator.timeInput.CLS/EV.2
;vc; Component: CLS.EF.validator.timeInput
;vc;  Location: SmallDev
;vc; Date/Time: 25-Feb-16 15:11
;vc;      User: AdrianM2
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.timeInput.CLS/EV.2</td><td>CLS.EF.validator.timeInput</td><td>SmallDev</td><td style='white-space: nowrap;'>25-Feb-16 15:11</td><td>AdrianM2</td></tr></table>
]]></Description>
<Super>EF.validator.base</Super>
<TimeChanged>63973,57108.317705</TimeChanged>
<TimeCreated>63384,46347.375671</TimeCreated>

<Property name="timeFormat">
<Description>
Valid date formats
12 - 'hh:mm tt';",
24 - 'hh:mm</Description>
<Type>%Integer</Type>
</Property>

<Method name="isInputValid">
<FormalSpec>input</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set ..errorMessage=""
	set isValid=##super(input)
	if $l(input) {
		if ..timeFormat=12 {
			if $ZTH(input,4,"")="" {
				set isValid=0
			}
		} elseif ..timeFormat=24 {
			if $ZTH(input,2,"")="" {
				set isValid=0
			}
		} else {
			throw ##class(shared.exceptions.generalException).%New("Cannot validate input because no valid time format has been set") 	
		}
	}
	quit isValid
]]></Implementation>
</Method>

<Method name="getRegex">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if ..timeFormat=12 {
		return "((1[012])|([1-9]))\:[0-5][0-9](\:[0-5][0-9])?(\s)?(?i)(am|pm)"
	} else {
		return "(([01]?[0-9])|(2[0-3]))\:[0-5][0-9](\:[0-5][0-9])?"
	}
]]></Implementation>
</Method>
</Class>


<Class name="EF.validator.timeInputTestCase">
<Description><![CDATA[
<!-- ;vc;-
;vc;    Object: EF.validator.timeInputTestCase.CLS/EV.0
;vc; Component: CLS.EF.validator.timeInputTestCase
;vc;  Location: SmallDev
;vc; Date/Time: 23-Feb-16 10:16
;vc;      User: JeremyW
;vc; --><p>VC/m status:<table id='vcm' border='1'><tr><th>Object</th><th>Component</th><th>Location</th><th>Date/Time</th><th>User</th></tr><tr><td>EF.validator.timeInputTestCase.CLS/EV.0</td><td>CLS.EF.validator.timeInputTestCase</td><td>SmallDev</td><td style='white-space: nowrap;'>23-Feb-16 10:16</td><td>JeremyW</td></tr></table>
]]></Description>
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>63930,44148</TimeChanged>
<TimeCreated>63375,58414.187307</TimeCreated>

<Method name="TestisInputValid">
<Implementation><![CDATA[
	set validator=##class(EF.validator.timeInput).%New()
	do $$$AssertTrue(validator.isInputValid(""))
	set validator.isMandatory=1
	do $$$AssertNotTrue(validator.isInputValid(""))
	set validator.timeFormat=12
	do $$$AssertNotTrue(validator.isInputValid("01:02 am"))
	do $$$AssertTrue(validator.isInputValid("2:12 am"))
	do $$$AssertTrue(validator.isInputValid("3:32am"))
	do $$$AssertTrue(validator.isInputValid("4:42AM"))
	do $$$AssertTrue(validator.isInputValid("5:52pm"))
	do $$$AssertTrue(validator.isInputValid("6:02PM"))
	do $$$AssertTrue(validator.isInputValid("12:59 PM"))
	do $$$AssertNotTrue(validator.isInputValid("08:59 PM"))
	do $$$AssertNotTrue(validator.isInputValid("08:59:00 PM"))
	do $$$AssertNotTrue(validator.isInputValid("00:00:00 PM"))
	do $$$AssertNotTrue(validator.isInputValid("00:00:59 AM"))
	do $$$AssertNotTrue(validator.isInputValid("0:12:00 PM"))
	do $$$AssertNotTrue(validator.isInputValid("0:23 AM"))
	do $$$AssertNotTrue(validator.isInputValid("6:60 AM"))
	do $$$AssertNotTrue(validator.isInputValid("6:00:60 AM"))
	do $$$AssertNotTrue(validator.isInputValid("13:01 AM"))
	do $$$AssertNotTrue(validator.isInputValid("01: PM"))
	do $$$AssertNotTrue(validator.isInputValid("01:1 PM"))
	do $$$AssertNotTrue(validator.isInputValid("12:01: AM"))
	do $$$AssertNotTrue(validator.isInputValid("12"))
	do $$$AssertNotTrue(validator.isInputValid("aa"))
	
	set validator.timeFormat=24
	do $$$AssertTrue(validator.isInputValid("00:00"))
	do $$$AssertTrue(validator.isInputValid("03:32"))
	do $$$AssertTrue(validator.isInputValid("12:59"))
	do $$$AssertTrue(validator.isInputValid("23:59"))
	do $$$AssertTrue(validator.isInputValid("23:59:00"))
	do $$$AssertTrue(validator.isInputValid("03:32:59"))
	do $$$AssertNotTrue(validator.isInputValid("01:02 am"))
	do $$$AssertNotTrue(validator.isInputValid("2:12 am"))
	do $$$AssertNotTrue(validator.isInputValid("2:12am"))
	do $$$AssertNotTrue(validator.isInputValid("24:00"))
	do $$$AssertNotTrue(validator.isInputValid("00:60"))
	do $$$AssertNotTrue(validator.isInputValid("00:00:60"))
	do $$$AssertNotTrue(validator.isInputValid("11:"))
	do $$$AssertNotTrue(validator.isInputValid("11:12:"))
	do $$$AssertNotTrue(validator.isInputValid("12"))
	do $$$AssertNotTrue(validator.isInputValid("aa"))
]]></Implementation>
</Method>

<Method name="TestgetValidatorObject">
<Implementation><![CDATA[
	try {
		set validator=##class(base).getValidatorObject("timeInput")
	} catch {
		set validator=""	
	}
	do $$$AssertTrue(($IsObject(validator))&&(validator.%IsA("EF.validator.timeInput")))
]]></Implementation>
</Method>
</Class>


<Project name="Project1" LastModified="2016-09-23 10:07:05.265328">
  <Items>
    <ProjectItem name="EF" type="PKG"></ProjectItem>
  </Items>
  <WatchVariables>
    <WatchVariable Variable="alternativeDescription" Pane="1"></WatchVariable>
    <WatchVariable Variable="prowebItem.%Id()" Pane="1"></WatchVariable>
    <WatchVariable Variable="..alternatives.Size" Pane="1"></WatchVariable>
    <WatchVariable Variable="..labelText" Pane="1"></WatchVariable>
  </WatchVariables>
</Project>
</Export>
