<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2015.2 (Build 664_3_16032U)" ts="2016-10-13 14:34:43">
<Class name="EF.pageController.proweb.checkboxGroupTestCase">
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>64204,52190.845512</TimeChanged>
<TimeCreated>64204,52190.845512</TimeCreated>

<Method name="TestWithMulticheckboxNoneSelected">
<Implementation><![CDATA[
	#dim element as EF.pageController.element
	
	set contextData = ##class(EF.contextDataRegistrationMock).createMock()
	set page=##class(EF.pageController.proweb.page).createNew(contextData)
	set elementIdentifier = "proweb-1"
	
	set element = ##class(EF.pageController.proweb.checkboxGroup).addElementToParent(page, elementIdentifier,"diet","")
	do page.uiComponent.addChild(element.uiComponent)	

	set childController = element.addProwebCheckbox(element, elementIdentifier_"-"_1, "meat", 0)
	set childController = element.addProwebCheckbox(element, elementIdentifier_"-"_2, "vegetarian", 0)
	set childController = element.addProwebCheckbox(element, elementIdentifier_"-"_3, "vegan", 0)
	set childController = element.addProwebCheckbox(element, elementIdentifier_"-"_4, "fish", 0)
	
	do page.uiComponent.childComponents.SetAt(element.uiComponent,1)
	set element.uiComponent.contextData = contextData
	do element.updateUIComponent()
	
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(page,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowef-proweb-form-row'><divclass='col-sm-4ef_proweb_form_prompt'><labelclass=""control-label""for=""proweb-1"">diet</label></div><divclass='col-sm-8ef_proweb_form_prompt'><divclass=""form-group""><divclass=""inputs-listef-proweb-input-elementef-proweb-checkboxGroup""><label><inputtype=""checkbox""value=""1""id=""proweb-1-1""class=""""name=""proweb-1-1""title="""">meat</label><br/><label><inputtype=""checkbox""value=""1""id=""proweb-1-2""class=""""name=""proweb-1-2""title="""">vegetarian</label><br/><label><inputtype=""checkbox""value=""1""id=""proweb-1-3""class=""""name=""proweb-1-3""title="""">vegan</label><br/><label><inputtype=""checkbox""value=""1""id=""proweb-1-4""class=""""name=""proweb-1-4""title="""">fish</label><br/></div></div></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.proweb.datePIckerTestCase">
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>64204,51790.977231</TimeChanged>
<TimeCreated>64204,51790.977231</TimeCreated>

<Method name="TestDatePicker">
<Implementation><![CDATA[
	#dim elementIdentifier as %String = "proweb-1"
	#dim labelText as %String = "date"
	#dim value as %String = "12/12/2016"
	#dim element as EF.pageController.element
	#dim page as EF.pageController.proweb.page
	
	set contextData = ##class(EF.contextDataRegistrationMock).createMock()
	
	set page= ##class(EF.pageController.proweb.page).createNew(contextData)
	set element = ##class(EF.pageController.proweb.datePicker).addElementToParent(page, elementIdentifier, labelText, value, 0)
	do page.uiComponent.addChild(element.uiComponent)
	set element.uiComponent.contextData = contextData
	
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(page,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowef-proweb-form-row'><divclass='col-sm-4ef_proweb_form_prompt'><labelclass=""control-label""for=""proweb-1"">date</label></div><divclass='col-sm-8ef_proweb_form_prompt'><divclass=""ef-proweb-input-element-short""><inputtype=""date""class=""ef-kendo-form-controlefDatePicker""title=""""id=""proweb-1""name=""proweb-1""value=""""placeholder=""DD/MM/YYYY""efKendoDateFormat=""dd/MM/yyyy""></div></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.proweb.dateRangeTestCase">
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>64204,51832.260251</TimeChanged>
<TimeCreated>64204,51832.260251</TimeCreated>

<Method name="TestDateRange">
<Implementation><![CDATA[
	#dim elementIdentifier as %String = "proweb-1"
	#dim labelText as %String = "date ranger"
	#dim value as %String = ""
	#dim element as EF.pageController.element
	#dim page as EF.pageController.proweb.page
	#dim isReadOnly as %Boolean = 0
	
	set contextData = ##class(EF.contextDataRegistrationMock).createMock()
	
	set page= ##class(EF.pageController.proweb.page).createNew(contextData)
	set element = ##class(EF.pageController.proweb.dateRange).addElementToParent(page, elementIdentifier, labelText, value, 0)
	set element.uiComponent.contextData = contextData
	do page.uiComponent.addChild(element.uiComponent)
	
	set childControllerStart = ##class(EF.pageController.proweb.datePicker).addElementToParent(element, elementIdentifier_"-startDate", "", isReadOnly)	
	set childControllerStart.prowebID = 1
	set childControllerStart.uiComponent.validator.dateFormat = 3
	set childControllerStart.uiComponent.contextData = contextData
	do childControllerStart.uiComponent.addAttribute("efdaterangestartmin", "24/12/2001" )
	do element.uiComponent.childComponents.SetAt(childControllerStart.uiComponent,1)
	
	set childControllerEnd = ##class(EF.pageController.proweb.datePicker).addElementToParent(element, elementIdentifier_"-endDate", "", isReadOnly)	
	set childControllerEnd.prowebID = 1
	set childControllerEnd.uiComponent.validator.dateFormat = 3
	set childControllerEnd.uiComponent.contextData = contextData
	do childControllerEnd.uiComponent.addAttribute("efdaterangeendmax", "31/12/2001" )
	do element.uiComponent.childComponents.SetAt(childControllerEnd.uiComponent,2)
			
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(page,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowef-proweb-form-row'><divclass='col-sm-4ef_proweb_form_prompt'><labelclass=""control-label""for=""proweb-1"">dateranger</label></div><divclass='col-sm-8ef_proweb_form_prompt'><divstyle='float:left;text-align:left;'><inputtype=""date""class=""ef-kendo-form-controlefDatePicker""title=""""id=""proweb-1-startDate""name=""proweb-1-startDate""value=""""placeholder=""DD/MM/YYYY""efdaterangestartmin=""24/12/2001""efKendoDateFormat=""dd/MM/yyyy""></div><divstyle='float:left;text-align:left;margin-left:15px;margin-right:15px;'>to</div><divstyle='float:left;text-align:left;'><inputtype=""date""class=""ef-kendo-form-controlefDatePicker""title=""""id=""proweb-1-endDate""name=""proweb-1-endDate""value=""""placeholder=""DD/MM/YYYY""efdaterangeendmax=""31/12/2001""efKendoDateFormat=""dd/MM/yyyy""></div></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.proweb.dividerTestCase">
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>64204,52058.150579</TimeChanged>
<TimeCreated>64204,52058.150579</TimeCreated>

<Method name="TestBasicPageWithDivider">
<Implementation><![CDATA[
	set contextData = ##class(EF.contextDataRegistrationMock).createMock()
	set page=##class(EF.pageController.proweb.page).createNew(contextData)
	
	set elementIdentifier = "proweb-1"
	set element = ##class(EF.pageController.proweb.divider).addElementToParent(page, elementIdentifier,"")
	do page.uiComponent.addChild(element.uiComponent)	
	set element.uiComponent.contextData = contextData
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(page,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowef-proweb-form-row'><divclass='col-sm-12'><hrclass='ef_form_divider'></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.proweb.dropdownTestCase">
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>64204,52097.681704</TimeChanged>
<TimeCreated>64204,52097.681704</TimeCreated>

<Method name="TestPageWithDropdown">
<Implementation><![CDATA[
	set contextData = ##class(EF.contextDataRegistrationMock).createMock()
	set page=##class(EF.pageController.proweb.page).createNew(contextData)
	set elementIdentifier = "proweb-1"
	set element = ##class(EF.pageController.proweb.dropdown).addElementToParent(page, elementIdentifier,"diet","")
	do page.uiComponent.addChild(element.uiComponent)	
	
	set alternative = element.addAlternative("meat","meat")
	set alternative = element.addAlternative("vegetarian","vegetarian")
	set alternative = element.addAlternative("vegan","vegan")
	do page.uiComponent.childComponents.SetAt(element.uiComponent,1)
	set element.uiComponent.contextData = contextData
	
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(page,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowef-proweb-form-row'><divclass='col-sm-4ef_proweb_form_prompt'><labelclass=""control-label""for=""proweb-1"">diet</label></div><divclass='col-sm-8ef_proweb_form_prompt'><selectclass=""form-controlef-proweb-input-element""name=""proweb-1""id=""proweb-1""title=""""><optionvalue=''></option><optionvalue=""meat"">meat</option><optionvalue=""vegetarian"">vegetarian</option><optionvalue=""vegan"">vegan</option></select></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)
]]></Implementation>
</Method>

<Method name="TestPageWithDropdownPreSelected">
<Implementation><![CDATA[
	#dim element as EF.pageController.element
	set contextData = ##class(EF.contextDataRegistrationMock).createMock()
	set page=##class(EF.pageController.proweb.page).createNew(contextData)
	set elementIdentifier = "proweb-1"
	set element = ##class(EF.pageController.proweb.dropdown).addElementToParent(page, elementIdentifier,"diet","vegan")
	do page.uiComponent.addChild(element.uiComponent)	
	set alternative = element.addAlternative("meat","meat")
	set alternative = element.addAlternative("vegetarian","vegetarian")
	set alternative = element.addAlternative("vegan","vegan")
	
	do page.uiComponent.childComponents.SetAt(element.uiComponent,1)
	set element.uiComponent.contextData = contextData
	do element.updateUIComponent()
	
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(page,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowef-proweb-form-row'><divclass='col-sm-4ef_proweb_form_prompt'><labelclass=""control-label""for=""proweb-1"">diet</label></div><divclass='col-sm-8ef_proweb_form_prompt'><selectclass=""form-controlef-proweb-input-element""name=""proweb-1""id=""proweb-1""title=""""><optionvalue=''></option><optionvalue=""meat"">meat</option><optionvalue=""vegetarian"">vegetarian</option><optionselected=""""value=""vegan"">vegan</option></select></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)
]]></Implementation>
</Method>

<Method name="TestPageWithDropdownMandatory">
<Implementation><![CDATA[
	set contextData = ##class(EF.contextDataRegistrationMock).createMock()
	set page=##class(EF.pageController.proweb.page).createNew(contextData)
	set elementIdentifier = "proweb-1"
	set element = ##class(EF.pageController.proweb.dropdown).addElementToParent(page, elementIdentifier,"diet","vegan")
	do page.uiComponent.addChild(element.uiComponent)	
	set alternative = element.addAlternative("meat","meat")
	set alternative = element.addAlternative("vegetarian","vegetarian")
	set alternative = element.addAlternative("vegan","vegan")
	do page.uiComponent.childComponents.SetAt(element.uiComponent,1)
	set element.uiComponent.contextData = contextData
	set element.uiComponent.isMandatory = 1
	do element.updateUIComponent()
	
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(page,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowef-proweb-form-row'><divclass='col-sm-4ef_proweb_form_promptef-required-field'><labelclass=""control-label""for=""proweb-1"">diet</label></div><divclass='col-sm-8ef_proweb_form_prompt'><selectclass=""form-controlef-proweb-input-element""name=""proweb-1""id=""proweb-1""title=""""><optionvalue=''selecteddisabled>Chooseone...</option><optionvalue=""meat"">meat</option><optionvalue=""vegetarian"">vegetarian</option><optionselected=""""value=""vegan"">vegan</option></select></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.proweb.emailInputMultiTestCase">
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>64204,51717.446706</TimeChanged>
<TimeCreated>64204,51717.446706</TimeCreated>

<Method name="TestMultiEmail">
<Implementation><![CDATA[
	#dim elementIdentifier as %String = "proweb-1"
	#dim labelText as %String = "email"
	#dim value as %String = "fred@eventsforce.com"
	#dim element as EF.pageController.element
	#dim page as EF.pageController.proweb.page
	
	set contextData = ##class(EF.contextDataRegistrationMock).createMock()
	
	set page= ##class(EF.pageController.proweb.page).createNew(contextData)
	set element = ##class(EF.pageController.proweb.emailInputMulti).addElementToParent(page, elementIdentifier, labelText, value, 0)
	do page.uiComponent.addChild(element.uiComponent)
	set element.uiComponent.contextData = contextData
	
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(page,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowef-proweb-form-row'><divclass='col-sm-4ef_proweb_form_prompt'><labelclass=""control-label""for=""proweb-1""pattern=""^(([a-zA-Z0-9_\-\.&#39;]+)(\+[a-zA-Z0-9_\-\.&#39;]+){0,1}@(([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,63}|[0-9]{1,3}))(\s*[;,]\s*(([a-zA-Z0-9_\-\.&#39;]+)(\+[a-zA-Z0-9_\-\.&#39;]+){0,1}@(([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,63}|[0-9]{1,3})))*$""oninvalid=""ef.html5CustomMessages.setMessage(this,&quot;\&quot;email\&quot;isincorrect&quot;);""oninput=""ef.html5CustomMessages.clearMessage(this);""multiple>email</label></div><divclass='col-sm-8ef_proweb_form_prompt'><inputtype=""email""class=""form-controlef-proweb-input-element""title=""""id=""proweb-1""name=""proweb-1""value=""""placeholder=""""pattern=""^(([a-zA-Z0-9_\-\.&#39;]+)(\+[a-zA-Z0-9_\-\.&#39;]+){0,1}@(([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,63}|[0-9]{1,3}))(\s*[;,]\s*(([a-zA-Z0-9_\-\.&#39;]+)(\+[a-zA-Z0-9_\-\.&#39;]+){0,1}@(([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,63}|[0-9]{1,3})))*$""oninvalid=""ef.html5CustomMessages.setMessage(this,&quot;\&quot;email\&quot;isincorrect&quot;);""oninput=""ef.html5CustomMessages.clearMessage(this);""multiplemultiple></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.proweb.emailInputTestCase">
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>64204,51673.552581</TimeChanged>
<TimeCreated>64204,51673.552581</TimeCreated>

<Method name="TestEmail">
<Implementation><![CDATA[
	#dim elementIdentifier as %String = "proweb-1"
	#dim labelText as %String = "email"
	#dim value as %String = "fred@eventsforce.com"
	#dim element as EF.pageController.element
	#dim page as EF.pageController.proweb.page
	
	set contextData = ##class(EF.contextDataRegistrationMock).createMock()
	
	set page= ##class(EF.pageController.proweb.page).createNew(contextData)
	set element = ##class(EF.pageController.proweb.emailInput).addElementToParent(page, elementIdentifier, labelText, value, 0)
	do page.uiComponent.addChild(element.uiComponent)
	set element.uiComponent.contextData = contextData
	
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(page,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowef-proweb-form-row'><divclass='col-sm-4ef_proweb_form_prompt'><labelclass=""control-label""for=""proweb-1""pattern=""^(([a-zA-Z0-9_\-\.&#39;]+)(\+[a-zA-Z0-9_\-\.&#39;]+){0,1}@(([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,63}|[0-9]{1,3}))$""oninvalid=""ef.html5CustomMessages.setMessage(this,&quot;\&quot;email\&quot;isincorrect&quot;);""oninput=""ef.html5CustomMessages.clearMessage(this);"">email</label></div><divclass='col-sm-8ef_proweb_form_prompt'><inputtype=""email""class=""form-controlef-proweb-input-element""title=""""id=""proweb-1""name=""proweb-1""value=""""placeholder=""""pattern=""^(([a-zA-Z0-9_\-\.&#39;]+)(\+[a-zA-Z0-9_\-\.&#39;]+){0,1}@(([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,63}|[0-9]{1,3}))$""oninvalid=""ef.html5CustomMessages.setMessage(this,&quot;\&quot;email\&quot;isincorrect&quot;);""oninput=""ef.html5CustomMessages.clearMessage(this);""></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.proweb.integerInputTestCase">
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>64204,51876.726258</TimeChanged>
<TimeCreated>64204,51876.726258</TimeCreated>

<Method name="TestInteger">
<Implementation><![CDATA[
	#dim elementIdentifier as %String = "proweb-1"
	#dim labelText as %String = "Shoesize"
	#dim value as %String = "42"
	#dim element as EF.pageController.element
	#dim page as EF.pageController.proweb.page
	
	set contextData = ##class(EF.contextDataRegistrationMock).createMock()
	
	set page= ##class(EF.pageController.proweb.page).createNew(contextData)
	set element = ##class(EF.pageController.proweb.integerInput).addElementToParent(page, elementIdentifier, labelText, value, 0)
	do page.uiComponent.addChild(element.uiComponent)
	set element.uiComponent.contextData = contextData
	
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(page,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowef-proweb-form-row'><divclass='col-sm-4ef_proweb_form_prompt'><labelclass=""control-label""for=""proweb-1""pattern=""^([\+\-]){0,1}\d+$""oninvalid=""ef.html5CustomMessages.setMessage(this,&quot;\&quot;Shoesize\&quot;isincorrect&quot;);""oninput=""ef.html5CustomMessages.clearMessage(this);"">Shoesize</label></div><divclass='col-sm-8ef_proweb_form_prompt'><inputtype=""number""class=""form-controlef-proweb-input-element-short""title=""""id=""proweb-1""name=""proweb-1""value=""""placeholder=""""pattern=""^([\+\-]){0,1}\d+$""oninvalid=""ef.html5CustomMessages.setMessage(this,&quot;\&quot;Shoesize\&quot;isincorrect&quot;);""oninput=""ef.html5CustomMessages.clearMessage(this);""></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.proweb.numericInputTestCase">
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>64204,51945.096715</TimeChanged>
<TimeCreated>64204,51945.096715</TimeCreated>

<Method name="TestDecimalNumber">
<Implementation><![CDATA[
	#dim elementIdentifier as %String = "proweb-1"
	#dim labelText as %String = "Shoesize"
	#dim value as %String = "42"
	#dim element as EF.pageController.element
	#dim page as EF.pageController.proweb.page
	
	set contextData = ##class(EF.contextDataRegistrationMock).createMock()
	
	set page= ##class(EF.pageController.proweb.page).createNew(contextData)
	set element = ##class(EF.pageController.proweb.numericInput).addElementToParent(page, elementIdentifier, labelText, value, 0)
	do page.uiComponent.addChild(element.uiComponent)
	set element.uiComponent.contextData = contextData
	
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(page,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowef-proweb-form-row'><divclass='col-sm-4ef_proweb_form_prompt'><labelclass=""control-label""for=""proweb-1""pattern=""^[+-]?((0)|([1-9][0-9]*?))?(\.[0-9]{1,2})?$""oninvalid=""ef.html5CustomMessages.setMessage(this,&quot;\&quot;Shoesize\&quot;isincorrect&quot;);""oninput=""ef.html5CustomMessages.clearMessage(this);"">Shoesize</label></div><divclass='col-sm-8ef_proweb_form_prompt'><inputtype=""text""class=""form-controlef-proweb-input-element-short""title=""""id=""proweb-1""name=""proweb-1""value=""""placeholder=""""pattern=""^[+-]?((0)|([1-9][0-9]*?))?(\.[0-9]{1,2})?$""oninvalid=""ef.html5CustomMessages.setMessage(this,&quot;\&quot;Shoesize\&quot;isincorrect&quot;);""oninput=""ef.html5CustomMessages.clearMessage(this);""></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.proweb.phoneNumberTestCase">
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>64204,51525.013742</TimeChanged>
<TimeCreated>64204,51525.013742</TimeCreated>

<Method name="TestPhoneNumber">
<Implementation><![CDATA[
	#dim elementIdentifier as %String = "proweb-1"
	#dim labelText as %String = "phone number"
	#dim value as %String = "020 76 88 32 38"
	#dim element as EF.pageController.element
	#dim page as EF.pageController.proweb.page
	
	set contextData = ##class(EF.contextDataRegistrationMock).createMock()
	
	set page= ##class(EF.pageController.proweb.page).createNew(contextData)
	set element = ##class(EF.pageController.proweb.phoneNumber).addElementToParent(page, elementIdentifier, labelText, value, 0)
	do page.uiComponent.addChild(element.uiComponent)
	set element.uiComponent.contextData = contextData
	
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(page,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowef-proweb-form-row'><divclass='col-sm-4ef_proweb_form_prompt'><labelclass=""control-label""for=""proweb-1""pattern=""^(?!(.*-(\s)*-.*))(?!(.*\.(\s)*\..*))(?=.*[\d\)](\s)*$)(?=.*(\d)+.*)(\+(\d){1,3}){0,1}(?=\s*([\d\(]).*)(([\d\s\-\.])|(\(([\d\-\.\s])+\)))*(\s)*$""oninvalid=""ef.html5CustomMessages.setMessage(this,&quot;\&quot;phonenumber\&quot;isincorrect&quot;);""oninput=""ef.html5CustomMessages.clearMessage(this);"">phonenumber</label></div><divclass='col-sm-8ef_proweb_form_prompt'><inputtype=""tel""class=""form-controlef-proweb-input-element""title=""""id=""proweb-1""name=""proweb-1""value=""""placeholder=""""pattern=""^(?!(.*-(\s)*-.*))(?!(.*\.(\s)*\..*))(?=.*[\d\)](\s)*$)(?=.*(\d)+.*)(\+(\d){1,3}){0,1}(?=\s*([\d\(]).*)(([\d\s\-\.])|(\(([\d\-\.\s])+\)))*(\s)*$""oninvalid=""ef.html5CustomMessages.setMessage(this,&quot;\&quot;phonenumber\&quot;isincorrect&quot;);""oninput=""ef.html5CustomMessages.clearMessage(this);""></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.proweb.radioButtonsTestCase">
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>64204,52140.010472</TimeChanged>
<TimeCreated>64204,52140.010472</TimeCreated>

<Method name="TestWithRadioButtons">
<Implementation><![CDATA[
	#dim element as EF.pageController.element
	
	set contextData = ##class(EF.contextDataRegistrationMock).createMock()
	set page=##class(EF.pageController.proweb.page).createNew(contextData)
	set elementIdentifier = "proweb-1"
	set element = ##class(EF.pageController.proweb.radioButtons).addElementToParent(page, elementIdentifier,"diet","vegan")
	do page.uiComponent.addChild(element.uiComponent)	
	set alternative = element.addAlternative("meat","meat")
	set alternative = element.addAlternative("vegetarian","vegetarian")
	set alternative = element.addAlternative("vegan","vegan")
	
	do page.uiComponent.childComponents.SetAt(element.uiComponent,1)
	set element.uiComponent.contextData = contextData
	do element.updateUIComponent()
	
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(page,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowef-proweb-form-row'><divclass='col-sm-4ef_proweb_form_prompt'><labelclass=""control-label""for=""proweb-1"">diet</label></div><divclass='col-sm-8ef_proweb_form_promptef-proweb-radio-group'><divclass=""btn-group""id=""proweb-1""data-toggle=""buttons""title=""""><divclass='col-sm-12ef-proweb-radio-button'><labelclass=""btnef-btn-defaultef-proweb-radio-button""id=""proweb-1_1-label""><inputtype=""radio""value=""meat""name=""proweb-1""id=""proweb-1_1"">&nbsp;meat</label></div><divclass='col-sm-12ef-proweb-radio-button'><labelclass=""btnef-btn-defaultef-proweb-radio-button""id=""proweb-1_2-label""><inputtype=""radio""value=""vegetarian""name=""proweb-1""id=""proweb-1_2"">&nbsp;vegetarian</label></div><divclass='col-sm-12ef-proweb-radio-button'><labelclass=""btnef-btn-defaultef-proweb-radio-buttonactive""id=""proweb-1_3-label""><inputtype=""radio""checkedvalue=""vegan""name=""proweb-1""id=""proweb-1_3"">&nbsp;vegan</label></div></div></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.proweb.textAreaTestCase">
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>64204,51564.918608</TimeChanged>
<TimeCreated>64204,51564.918608</TimeCreated>

<Method name="TestTextArea">
<Implementation><![CDATA[
	#dim elementIdentifier as %String = "proweb-1"
	#dim labelText as %String = "write an essay here"
	#dim value as %String = "lorem ipsum"
	#dim element as EF.pageController.element
	#dim page as EF.pageController.proweb.page
	
	set contextData = ##class(EF.contextDataRegistrationMock).createMock()
	
	set page= ##class(EF.pageController.proweb.page).createNew(contextData)
	set element = ##class(EF.pageController.proweb.textArea).addElementToParent(page, elementIdentifier, labelText, value, 0)
	do page.uiComponent.addChild(element.uiComponent)
	set element.uiComponent.contextData = contextData
	
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(page,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowef-proweb-form-row'><divclass='col-sm-4ef_proweb_form_prompt'><labelclass=""control-label""for=""proweb-1"">writeanessayhere</label></div><divclass='col-sm-8ef_proweb_form_prompt'><textareatype=""text""class=""form-controlef-proweb-input-element""title=""""id=""proweb-1""name=""proweb-1""placeholder=""""></textArea></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.proweb.textBlockTestCase">
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>64204,51990.179803</TimeChanged>
<TimeCreated>64204,51990.179803</TimeCreated>

<Method name="TestBasicPageWithTextBlock">
<Implementation><![CDATA[
	set contextData = ##class(EF.contextDataRegistrationMock).createMock()
	set page=##class(EF.pageController.proweb.page).createNew(contextData)
	set elementIdentifier = "proweb-1"
	
	set element = ##class(EF.pageController.proweb.textBlock).addElementToParent(page, elementIdentifier, "lorem ipsum")
	do page.uiComponent.addChild(element.uiComponent)
	set element.uiComponent.contextData = contextData
	
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(page,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowef-proweb-form-row'><divclass='col-sm-12'><div>loremipsum</div></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.proweb.textInputTestCase">
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>64204,51464.150243</TimeChanged>
<TimeCreated>64204,51464.150243</TimeCreated>

<Method name="TestbasicInputField">
<Implementation><![CDATA[
	#dim elementIdentifier as %String = "proweb-1"
	#dim labelText as %String = "First Name"
	#dim value as %String = "Elvis"
	#dim element as EF.pageController.element
	#dim page as EF.pageController.proweb.page
	
	set contextData = ##class(EF.contextDataRegistrationMock).createMock()
	
	set page= ##class(EF.pageController.proweb.page).createNew(contextData)
	set element = ##class(EF.pageController.proweb.textInput).addElementToParent(page, elementIdentifier, labelText, value, 0)
	do page.uiComponent.addChild(element.uiComponent)
	set element.uiComponent.contextData = contextData
	
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(page,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowef-proweb-form-row'><divclass='col-sm-4ef_proweb_form_prompt'><labelclass=""control-label""for=""proweb-1""pattern=""^[^\x00-\x1F\x7F]*$""oninvalid=""ef.html5CustomMessages.setMessage(this,&quot;\&quot;FirstName\&quot;isincorrect&quot;);""oninput=""ef.html5CustomMessages.clearMessage(this);"">FirstName</label></div><divclass='col-sm-8ef_proweb_form_prompt'><inputtype=""text""class=""form-controlef-proweb-input-element""title=""""id=""proweb-1""name=""proweb-1""value=""""placeholder=""""pattern=""^[^\x00-\x1F\x7F]*$""oninvalid=""ef.html5CustomMessages.setMessage(this,&quot;\&quot;FirstName\&quot;isincorrect&quot;);""oninput=""ef.html5CustomMessages.clearMessage(this);""></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)
]]></Implementation>
</Method>

<Method name="TestBasicPageWithMandatoryTextField">
<Implementation><![CDATA[
	set contextData = ##class(EF.contextDataRegistrationMock).createMock()
	set page=##class(EF.pageController.proweb.page).createNew(contextData)
	set elementIdentifier = "proweb-1"
	set element = ##class(EF.pageController.proweb.textInput).addElementToParent(page, elementIdentifier, "First Name", "Elvis", 0)

	set element.displayOrder = 1
	do page.uiComponent.addChild(element.uiComponent)
	set element.uiComponent.contextData = contextData
	set element.uiComponent.isMandatory = 1
	
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(page,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowef-proweb-form-row'><divclass='col-sm-4ef_proweb_form_promptef-required-field'><labelclass=""control-label""for=""proweb-1""pattern=""^[^\x00-\x1F\x7F]*$""oninvalid=""ef.html5CustomMessages.setMessage(this,&quot;\&quot;FirstName\&quot;isincorrect&quot;);""oninput=""ef.html5CustomMessages.clearMessage(this);"">FirstName</label></div><divclass='col-sm-8ef_proweb_form_prompt'><inputtype=""text""class=""form-controlef-proweb-input-element""title=""""id=""proweb-1""name=""proweb-1""value=""""placeholder=""""pattern=""^[^\x00-\x1F\x7F]*$""oninvalid=""ef.html5CustomMessages.setMessage(this,&quot;\&quot;FirstName\&quot;isincorrect&quot;);""oninput=""ef.html5CustomMessages.clearMessage(this);""></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.proweb.timeInputTestCase">
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>64204,51756.821561</TimeChanged>
<TimeCreated>64204,51756.821561</TimeCreated>

<Method name="TestTime">
<Implementation><![CDATA[
	#dim elementIdentifier as %String = "proweb-1"
	#dim labelText as %String = "time"
	#dim value as %String = "14:23"
	#dim element as EF.pageController.element
	#dim page as EF.pageController.proweb.page
	
	set contextData = ##class(EF.contextDataRegistrationMock).createMock()
	
	set page= ##class(EF.pageController.proweb.page).createNew(contextData)
	set element = ##class(EF.pageController.proweb.timeInput).addElementToParent(page, elementIdentifier, labelText, value, 0)
	do page.uiComponent.addChild(element.uiComponent)
	set element.uiComponent.contextData = contextData
	
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(page,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowef-proweb-form-row'><divclass='col-sm-4ef_proweb_form_prompt'><labelclass=""control-label""for=""proweb-1"">time</label></div><divclass='col-sm-8ef_proweb_form_prompt'><divclass=""ef_proweb_form_field_container_type_timeef-proweb-input-element-short""><inputtype=""text""class=""form-controlef-proweb-input-elementefTimePicker""title=""""id=""proweb-1""name=""proweb-1""value=""""placeholder=""HH:MM24hour""efKendoTimeFormat=""24""efKendoTimeInterval=15></div></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)
]]></Implementation>
</Method>
</Class>


<Class name="EF.pageController.proweb.webAddressTestCase">
<Super>EF.ISC.UnitTest.TestCase</Super>
<TimeChanged>64204,51635.119213</TimeChanged>
<TimeCreated>64204,51604.334511</TimeCreated>

<Method name="TestWebAddress">
<Implementation><![CDATA[
	#dim elementIdentifier as %String = "proweb-1"
	#dim labelText as %String = "your website"
	#dim value as %String = "http://www.bbc.com"
	#dim element as EF.pageController.element
	#dim page as EF.pageController.proweb.page
	
	set contextData = ##class(EF.contextDataRegistrationMock).createMock()
	
	set page= ##class(EF.pageController.proweb.page).createNew(contextData)
	set element = ##class(EF.pageController.proweb.webAddress).addElementToParent(page, elementIdentifier, labelText, value, 0)
	do page.uiComponent.addChild(element.uiComponent)
	set element.uiComponent.contextData = contextData
	
	set returnedHTML = ##class(EF.utils.outputRedirection).redirectMethodOutputToString(page,"render")
	set returnedHTML = $ZStrip(returnedHTML,"*WC")
	set expectedHTML = "<divclass='rowef-proweb-form-row'><divclass='col-sm-4ef_proweb_form_prompt'><labelclass=""control-label""for=""proweb-1""pattern=""^(?:https?:\/\/)?(?:\S+(?::\S*)?@)?(?:(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/.*)?$""oninvalid=""ef.html5CustomMessages.setMessage(this,&quot;\&quot;yourwebsite\&quot;isincorrect&quot;);""oninput=""ef.html5CustomMessages.clearMessage(this);"">yourwebsite</label></div><divclass='col-sm-8ef_proweb_form_prompt'><inputtype=""url""class=""form-controlef-proweb-input-element""title=""""id=""proweb-1""name=""proweb-1""value=""""placeholder=""""pattern=""^(?:https?:\/\/)?(?:\S+(?::\S*)?@)?(?:(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/.*)?$""oninvalid=""ef.html5CustomMessages.setMessage(this,&quot;\&quot;yourwebsite\&quot;isincorrect&quot;);""oninput=""ef.html5CustomMessages.clearMessage(this);""></div></div>"
	do $$$AssertEquals(returnedHTML,expectedHTML)
]]></Implementation>
</Method>
</Class>
</Export>
